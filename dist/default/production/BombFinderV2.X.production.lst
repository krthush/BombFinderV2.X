

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 18:37:22 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001882                     __pcinit:
   189                           	opt stack 0
   190  001882                     start_initialization:
   191                           	opt stack 0
   192  001882                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  001882  0101               	movlb	1
   197  001884  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  001886  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  001888  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  00188A  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  00188C  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  00188E  EE00  F0BC         	lfsr	0,__pbssBANK0
   205  001892  0E18               	movlw	24
   206  001894                     clear_0:
   207  001894  6AEE               	clrf	postinc0,c
   208  001896  06E8               	decf	wreg,f,c
   209  001898  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  00189A  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  00189C  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  00189E                     end_of_initialization:
   215                           	opt stack 0
   216  00189E                     __end_of__initialization:
   217                           	opt stack 0
   218  00189E  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  0018A0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  0018A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  0018A4  6EF8               	movwf	tblptru,c
   222  0018A6  0100               	movlb	0
   223  0018A8  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BC                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BC                     ScanIR@F3882:
   245                           	opt stack 0
   246  0000BC                     	ds	4
   247  0000C0                     ScanWithRange@F3892:
   248                           	opt stack 0
   249  0000C0                     	ds	4
   250  0000C4                     _ReceivedString:
   251                           	opt stack 0
   252  0000C4                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3896:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@mL:
   274                           	opt stack 0
   275                           
   276                           ; 9 bytes @ 0x0
   277  000200                     	ds	9
   278  000209                     main@mR:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x9
   282  000209                     	ds	9
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackBANK1
   288  000100                     __pcstackBANK1:
   289                           	opt stack 0
   290  000100                     main@MoveTime:
   291                           	opt stack 0
   292                           
   293                           ; 100 bytes @ 0x0
   294  000100                     	ds	100
   295  000164                     main@MoveType:
   296                           	opt stack 0
   297                           
   298                           ; 100 bytes @ 0x64
   299  000164                     	ds	100
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ??_ScanWithRange:
   416  000075                     ScanIR@MoveType:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x15
   420  000075                     	ds	2
   421  000077                     ScanIR@buf:
   422                           	opt stack 0
   423                           
   424                           ; 40 bytes @ 0x17
   425  000077                     	ds	3
   426  00007A                     ScanWithRange@buf:
   427                           	opt stack 0
   428                           
   429                           ; 40 bytes @ 0x1A
   430  00007A                     	ds	37
   431  00009F                     ScanIR@DirectionMoveThreshold:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3F
   435  00009F                     	ds	2
   436  0000A1                     ScanIR@SensorResult:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x41
   440  0000A1                     	ds	1
   441  0000A2                     ScanWithRange@n:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x42
   445  0000A2                     	ds	2
   446  0000A4                     ScanWithRange@TimeAboveThreshold:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x44
   450  0000A4                     	ds	1
   451  0000A5                     ScanWithRange@i:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x45
   455  0000A5                     	ds	2
   456  0000A7                     ScanWithRange@DirectionFoundThreshold:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x47
   460  0000A7                     	ds	2
   461  0000A9                     ScanWithRange@power:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x49
   465  0000A9                     	ds	1
   466  0000AA                     ScanWithRange@SensorResult:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x4A
   470  0000AA                     	ds	4
   471  0000AE                     ScanWithRange@LeftFlag:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x4E
   475  0000AE                     	ds	2
   476  0000B0                     ScanWithRange@RightFlag:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x50
   480  0000B0                     	ds	2
   481  0000B2                     ??_main:
   482                           
   483                           ; 0 bytes @ 0x52
   484  0000B2                     	ds	2
   485  0000B4                     main@ScanAngle:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x54
   489  0000B4                     	ds	1
   490  0000B5                     main@SensorResult:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x55
   494  0000B5                     	ds	4
   495  0000B9                     main@DirectionFound:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x59
   499  0000B9                     	ds	1
   500  0000BA                     main@Move:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x5A
   504  0000BA                     	ds	1
   505  0000BB                     main@i:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x5B
   509  0000BB                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	cstackCOMRAM
   515  000001                     __pcstackCOMRAM:
   516                           	opt stack 0
   517  000001                     ??i2_delay_tenth_s:
   518                           
   519                           ; 0 bytes @ 0x0
   520  000001                     	ds	1
   521  000002                     i2delay_tenth_s@tenth_seconds:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x1
   525  000002                     	ds	1
   526  000003                     i2delay_tenth_s@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  000003                     	ds	2
   531  000005                     ??_InterruptHandlerHigh:
   532                           
   533                           ; 0 bytes @ 0x4
   534  000005                     	ds	14
   535  000013                     ??_InterruptHandlerLow:
   536                           
   537                           ; 0 bytes @ 0x12
   538  000013                     	ds	17
   539  000024                     ??_isdigit:
   540  000024                     ??_LCDout:
   541  000024                     ??_delay_tenth_s:
   542  000024                     ?_grabRightIR:
   543                           	opt stack 0
   544  000024                     ?_grabLeftIR:
   545                           	opt stack 0
   546  000024                     ?___wmul:
   547                           	opt stack 0
   548  000024                     ?___lwdiv:
   549                           	opt stack 0
   550  000024                     enableSensor@status:
   551                           	opt stack 0
   552  000024                     VerifySignal@Signal:
   553                           	opt stack 0
   554  000024                     ___wmul@multiplier:
   555                           	opt stack 0
   556  000024                     ___lwdiv@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x23
   560  000024                     	ds	1
   561  000025                     enableSensor@sensor:
   562                           	opt stack 0
   563  000025                     delay_tenth_s@tenth_seconds:
   564                           	opt stack 0
   565  000025                     _isdigit$1961:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x24
   569  000025                     	ds	1
   570  000026                     ??_grabRightIR:
   571  000026                     ??_grabLeftIR:
   572  000026                     ??_VerifySignal:
   573  000026                     isdigit@c:
   574                           	opt stack 0
   575  000026                     delay_tenth_s@i:
   576                           	opt stack 0
   577  000026                     ___wmul@multiplicand:
   578                           	opt stack 0
   579  000026                     ___lwdiv@divisor:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x25
   583  000026                     	ds	1
   584  000027                     LCDout@number:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x26
   588  000027                     	ds	1
   589  000028                     SendLCD@type:
   590                           	opt stack 0
   591  000028                     ___wmul@product:
   592                           	opt stack 0
   593  000028                     ___lwdiv@quotient:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x27
   597  000028                     	ds	1
   598  000029                     SendLCD@Byte:
   599                           	opt stack 0
   600  000029                     grabRightIR@IR_signal:
   601                           	opt stack 0
   602  000029                     grabLeftIR@IR_signal:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x28
   606  000029                     	ds	1
   607  00002A                     ??_initLCD:
   608  00002A                     ?___awdiv:
   609                           	opt stack 0
   610  00002A                     SetLine@line:
   611                           	opt stack 0
   612  00002A                     ___lwdiv@counter:
   613                           	opt stack 0
   614  00002A                     LCD_String@string:
   615                           	opt stack 0
   616  00002A                     ___awdiv@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x29
   620  00002A                     	ds	1
   621  00002B                     ?___lwmod:
   622                           	opt stack 0
   623  00002B                     grabRightIR@i:
   624                           	opt stack 0
   625  00002B                     grabLeftIR@i:
   626                           	opt stack 0
   627  00002B                     ___lwmod@dividend:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x2A
   631  00002B                     	ds	1
   632  00002C                     VerifySignal@checksum:
   633                           	opt stack 0
   634  00002C                     ___awdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2B
   638  00002C                     	ds	1
   639  00002D                     VerifySignal@hexByte:
   640                           	opt stack 0
   641  00002D                     ___lwmod@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2C
   645  00002D                     	ds	1
   646  00002E                     ___awdiv@counter:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x2D
   650  00002E                     	ds	1
   651  00002F                     VerifySignal@i:
   652                           	opt stack 0
   653  00002F                     ___awdiv@sign:
   654                           	opt stack 0
   655  00002F                     ___lwmod@counter:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x2E
   659  00002F                     	ds	1
   660  000030                     ?_sprintf:
   661                           	opt stack 0
   662  000030                     sprintf@sp:
   663                           	opt stack 0
   664  000030                     ___awdiv@quotient:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x2F
   668  000030                     	ds	2
   669  000032                     setMotorPWM@m:
   670                           	opt stack 0
   671  000032                     sprintf@f:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x31
   675  000032                     	ds	2
   676  000034                     ??_setMotorPWM:
   677                           
   678                           ; 0 bytes @ 0x33
   679  000034                     	ds	5
   680  000039                     ??_ScanIR:
   681                           
   682                           ; 0 bytes @ 0x38
   683  000039                     	ds	1
   684  00003A                     tblptru	equ	0xFF8
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           
   688                           ; 0 bytes @ 0x39
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 51 in file "main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   699 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   700 ;;  buf            40  200[BANK1 ] unsigned char [40]
   701 ;;  Message        10  240[BANK1 ] unsigned char [10]
   702 ;;  mR              9    9[BANK2 ] struct DC_motor
   703 ;;  mL              9    0[BANK2 ] struct DC_motor
   704 ;;  SensorResult    4   85[BANK0 ] unsigned int [2]
   705 ;;  i               1   91[BANK0 ] unsigned char 
   706 ;;  Move            1   90[BANK0 ] unsigned char 
   707 ;;  DirectionFou    1   89[BANK0 ] char 
   708 ;;  ScanAngle       1   84[BANK0 ] unsigned char 
   709 ;; Return value:  Size  Location     Type
   710 ;;		None               void
   711 ;; Registers used:
   712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   718 ;;      Params:         0       0       0       0
   719 ;;      Locals:         0       8     250      18
   720 ;;      Temps:          0       2       0       0
   721 ;;      Totals:         0      10     250      18
   722 ;;Total ram usage:      278 bytes
   723 ;; Hardware stack levels required when called:    8
   724 ;; This function calls:
   725 ;;		_LCD_String
   726 ;;		_ScanIR
   727 ;;		_ScanWithRange
   728 ;;		_SendLCD
   729 ;;		_SetLine
   730 ;;		_VerifySignal
   731 ;;		_delay_tenth_s
   732 ;;		_enableSensor
   733 ;;		_fullSpeedAhead
   734 ;;		_fullSpeedBack
   735 ;;		_grabLeftIR
   736 ;;		_grabRightIR
   737 ;;		_initIR
   738 ;;		_initLCD
   739 ;;		_initMotorPWM
   740 ;;		_initRFID
   741 ;;		_initTimer
   742 ;;		_sprintf
   743 ;;		_stop
   744 ;; This function is called by:
   745 ;;		Startup code after reset
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text0
   750  000350                     __ptext0:
   751                           	opt stack 0
   752  000350                     _main:
   753                           	opt stack 23
   754                           
   755                           ;main.c: 54: unsigned char Message[10];
   756                           ;main.c: 55: unsigned char i=0;
   757                           
   758                           ;incstack = 0
   759  000350  0E00               	movlw	0
   760  000352  0100               	movlb	0	; () banked
   761  000354  6FBB               	movwf	main@i& (0+255),b
   762                           
   763                           ;main.c: 56: signed char DirectionFound=0;
   764  000356  0E00               	movlw	0
   765  000358  0100               	movlb	0	; () banked
   766  00035A  6FB9               	movwf	main@DirectionFound& (0+255),b
   767                           
   768                           ;main.c: 57: char MoveTime[100];
   769                           ;main.c: 58: char MoveType[100];
   770                           ;main.c: 59: char Move=0;
   771  00035C  0E00               	movlw	0
   772  00035E  0100               	movlb	0	; () banked
   773  000360  6FBA               	movwf	main@Move& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   777  000362  C1FA  F0B5         	movff	main@F3896,main@SensorResult
   778  000366  C1FB  F0B6         	movff	main@F3896+1,main@SensorResult+1
   779  00036A  C1FC  F0B7         	movff	main@F3896+2,main@SensorResult+2
   780  00036E  C1FD  F0B8         	movff	main@F3896+3,main@SensorResult+3
   781                           
   782                           ;main.c: 61: char buf[40];
   783                           ;main.c: 63: unsigned char ScanAngle=60;
   784  000372  0E3C               	movlw	60
   785  000374  0100               	movlb	0	; () banked
   786  000376  6FB4               	movwf	main@ScanAngle& (0+255),b
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 66: INTCONbits.GIEH=1;
   790  000378  8EF2               	bsf	intcon,7,c	;volatile
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 67: INTCONbits.GIEL=1;
   794  00037A  8CF2               	bsf	intcon,6,c	;volatile
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 68: INTCONbits.PEIE=1;
   798  00037C  8CF2               	bsf	intcon,6,c	;volatile
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 69: RCONbits.IPEN=1;
   802  00037E  8ED0               	bsf	4048,7,c	;volatile
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 72: IPR1bits.RCIP=0;
   806  000380  9A9F               	bcf	3999,5,c	;volatile
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 73: PIE1bits.RCIE=1;
   810  000382  8A9D               	bsf	3997,5,c	;volatile
   811                           
   812                           ; BSR set to: 0
   813                           ;main.c: 76: TRISCbits.RC3=1;
   814  000384  8694               	bsf	3988,3,c	;volatile
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 77: INTCONbits.INT0IE=1;
   818  000386  88F2               	bsf	intcon,4,c	;volatile
   819                           
   820                           ; BSR set to: 0
   821                           ;main.c: 80: PIR1bits.RC1IF=0;
   822  000388  9A9E               	bcf	3998,5,c	;volatile
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 81: INTCONbits.INT0IF=0;
   826  00038A  92F2               	bcf	intcon,1,c	;volatile
   827                           
   828                           ;main.c: 84: struct DC_motor mL, mR;
   829                           ;main.c: 85: mL.power=0;
   830  00038C  0E00               	movlw	0
   831  00038E  0102               	movlb	2	; () banked
   832  000390  6F00               	movwf	main@mL& (0+255),b
   833                           
   834                           ;main.c: 86: mL.direction=1;
   835  000392  0E01               	movlw	1
   836  000394  0102               	movlb	2	; () banked
   837  000396  6F01               	movwf	(main@mL+1)& (0+255),b
   838                           
   839                           ; BSR set to: 2
   840                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   841  000398  0E79               	movlw	121
   842  00039A  0102               	movlb	2	; () banked
   843  00039C  6F02               	movwf	(main@mL+2)& (0+255),b
   844  00039E  0E0F               	movlw	15
   845  0003A0  0102               	movlb	2	; () banked
   846  0003A2  6F03               	movwf	(main@mL+3)& (0+255),b
   847                           
   848                           ; BSR set to: 2
   849                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   850  0003A4  0E78               	movlw	120
   851  0003A6  0102               	movlb	2	; () banked
   852  0003A8  6F04               	movwf	(main@mL+4)& (0+255),b
   853  0003AA  0E0F               	movlw	15
   854  0003AC  0102               	movlb	2	; () banked
   855  0003AE  6F05               	movwf	(main@mL+5)& (0+255),b
   856                           
   857                           ;main.c: 89: mL.dir_pin=0;
   858  0003B0  0E00               	movlw	0
   859  0003B2  0102               	movlb	2	; () banked
   860  0003B4  6F06               	movwf	(main@mL+6)& (0+255),b
   861                           
   862                           ;main.c: 90: mL.PWMperiod=199;
   863  0003B6  0E00               	movlw	0
   864  0003B8  0102               	movlb	2	; () banked
   865  0003BA  6F08               	movwf	(main@mL+8)& (0+255),b
   866  0003BC  0EC7               	movlw	199
   867  0003BE  6F07               	movwf	(main@mL+7)& (0+255),b
   868                           
   869                           ;main.c: 92: mR.power=0;
   870  0003C0  0E00               	movlw	0
   871  0003C2  0102               	movlb	2	; () banked
   872  0003C4  6F09               	movwf	main@mR& (0+255),b
   873                           
   874                           ;main.c: 93: mR.direction=1;
   875  0003C6  0E01               	movlw	1
   876  0003C8  0102               	movlb	2	; () banked
   877  0003CA  6F0A               	movwf	(main@mR+1)& (0+255),b
   878                           
   879                           ; BSR set to: 2
   880                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   881  0003CC  0E77               	movlw	119
   882  0003CE  0102               	movlb	2	; () banked
   883  0003D0  6F0B               	movwf	(main@mR+2)& (0+255),b
   884  0003D2  0E0F               	movlw	15
   885  0003D4  0102               	movlb	2	; () banked
   886  0003D6  6F0C               	movwf	(main@mR+3)& (0+255),b
   887                           
   888                           ; BSR set to: 2
   889                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   890  0003D8  0E76               	movlw	118
   891  0003DA  0102               	movlb	2	; () banked
   892  0003DC  6F0D               	movwf	(main@mR+4)& (0+255),b
   893  0003DE  0E0F               	movlw	15
   894  0003E0  0102               	movlb	2	; () banked
   895  0003E2  6F0E               	movwf	(main@mR+5)& (0+255),b
   896                           
   897                           ;main.c: 96: mR.dir_pin=2;
   898  0003E4  0E02               	movlw	2
   899  0003E6  0102               	movlb	2	; () banked
   900  0003E8  6F0F               	movwf	(main@mR+6)& (0+255),b
   901                           
   902                           ;main.c: 97: mR.PWMperiod=199;
   903  0003EA  0E00               	movlw	0
   904  0003EC  0102               	movlb	2	; () banked
   905  0003EE  6F11               	movwf	(main@mR+8)& (0+255),b
   906  0003F0  0EC7               	movlw	199
   907  0003F2  6F10               	movwf	(main@mR+7)& (0+255),b
   908                           
   909                           ;main.c: 99: OSCCON = 0x72;
   910  0003F4  0E72               	movlw	114
   911  0003F6  6ED3               	movwf	4051,c	;volatile
   912  0003F8                     l379:
   913  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   914  0003FA  D22A               	goto	l3334
   915  0003FC  D7FD               	goto	l379
   916  0003FE                     l3178:
   917                           
   918                           ;main.c: 112: stop(&mL, &mR);
   919  0003FE  0E00               	movlw	low main@mL
   920  000400  0100               	movlb	0	; () banked
   921  000402  6F62               	movwf	stop@mL& (0+255),b
   922  000404  0E02               	movlw	high main@mL
   923  000406  0100               	movlb	0	; () banked
   924  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   925  00040A  0E09               	movlw	low main@mR
   926  00040C  0100               	movlb	0	; () banked
   927  00040E  6F64               	movwf	stop@mR& (0+255),b
   928  000410  0E02               	movlw	high main@mR
   929  000412  0100               	movlb	0	; () banked
   930  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   931  000416  EC67  F009         	call	_stop	;wreg free
   932                           
   933                           ;main.c: 113: RFID_Read=0;
   934  00041A  0E00               	movlw	0
   935  00041C  0101               	movlb	1	; () banked
   936  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   940  000420  ECB1  F00A         	call	_grabLeftIR	;wreg free
   941  000424  C024  F0B5         	movff	?_grabLeftIR,main@SensorResult
   942  000428  C025  F0B6         	movff	?_grabLeftIR+1,main@SensorResult+1
   943                           
   944                           ;main.c: 117: SensorResult[1]=grabRightIR();
   945  00042C  EC78  F00A         	call	_grabRightIR	;wreg free
   946  000430  C024  F0B7         	movff	?_grabRightIR,main@SensorResult+2
   947  000434  C025  F0B8         	movff	?_grabRightIR+1,main@SensorResult+3
   948                           
   949                           ;main.c: 121: CAP1BUFH=0;
   950  000438  0E00               	movlw	0
   951  00043A  6E69               	movwf	3945,c	;volatile
   952                           
   953                           ;main.c: 122: CAP1BUFL=0;
   954  00043C  0E00               	movlw	0
   955  00043E  6E68               	movwf	3944,c	;volatile
   956                           
   957                           ;main.c: 123: CAP2BUFH=0;
   958  000440  0E00               	movlw	0
   959  000442  6E67               	movwf	3943,c	;volatile
   960                           
   961                           ;main.c: 124: CAP2BUFL=0;
   962  000444  0E00               	movlw	0
   963  000446  6E66               	movwf	3942,c	;volatile
   964                           
   965                           ;main.c: 127: SendLCD(0b00000001,0);
   966  000448  0E00               	movlw	0
   967  00044A  6E28               	movwf	SendLCD@type,c
   968  00044C  0E01               	movlw	1
   969  00044E  EC29  F00C         	call	_SendLCD
   970                           
   971                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   972  000452  0E21               	movlw	33
   973  000454                     u2777:
   974  000454  2EE8               	decfsz	wreg,f,c
   975  000456  D7FE               	goto	u2777
   976  000458  F000               	nop	
   977                           
   978                           ;main.c: 129: SendLCD(0b00000010,0);
   979  00045A  0E00               	movlw	0
   980  00045C  6E28               	movwf	SendLCD@type,c
   981  00045E  0E02               	movlw	2
   982  000460  EC29  F00C         	call	_SendLCD
   983                           
   984                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   985  000464  0E06               	movlw	6
   986  000466  0100               	movlb	0	; () banked
   987  000468  6FB2               	movwf	??_main& (0+255),b
   988  00046A  0E30               	movlw	48
   989  00046C                     u2787:
   990  00046C  2EE8               	decfsz	wreg,f,c
   991  00046E  D7FE               	goto	u2787
   992  000470  2FB2               	decfsz	??_main& (0+255),f,b
   993  000472  D7FC               	goto	u2787
   994  000474  D000               	nop2	
   995                           
   996                           ;main.c: 131: SetLine(1);
   997  000476  0E01               	movlw	1
   998  000478  EC11  F00C         	call	_SetLine
   999                           
  1000                           ;main.c: 132: LCD_String("      Inert Mode");
  1001  00047C  0E1C               	movlw	low STR_5
  1002  00047E  6E2A               	movwf	LCD_String@string,c
  1003  000480  0E03               	movlw	high STR_5
  1004  000482  6E2B               	movwf	LCD_String@string+1,c
  1005  000484  ECEA  F00A         	call	_LCD_String	;wreg free
  1006                           
  1007                           ;main.c: 133: SetLine(2);
  1008  000488  0E02               	movlw	2
  1009  00048A  EC11  F00C         	call	_SetLine
  1010                           
  1011                           ;main.c: 134: if (RFID_Read) {
  1012  00048E  0101               	movlb	1	; () banked
  1013  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1014  000492  B4D8               	btfsc	status,2,c
  1015  000494  D007               	goto	l3212
  1016                           
  1017                           ; BSR set to: 1
  1018                           ;main.c: 135: LCD_String(Message);
  1019  000496  0EF0               	movlw	low main@Message
  1020  000498  6E2A               	movwf	LCD_String@string,c
  1021  00049A  0E01               	movlw	high main@Message
  1022  00049C  6E2B               	movwf	LCD_String@string+1,c
  1023  00049E  ECEA  F00A         	call	_LCD_String	;wreg free
  1024                           
  1025                           ;main.c: 136: } else {
  1026  0004A2  D1D6               	goto	l3334
  1027  0004A4                     l3212:
  1028                           
  1029                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1030  0004A4  0EC8               	movlw	low main@buf
  1031  0004A6  6E30               	movwf	sprintf@sp,c
  1032  0004A8  0E01               	movlw	high main@buf
  1033  0004AA  6E31               	movwf	sprintf@sp+1,c
  1034  0004AC  0E0B               	movlw	low STR_6
  1035  0004AE  6E32               	movwf	sprintf@f,c
  1036  0004B0  0E03               	movlw	high STR_6
  1037  0004B2  6E33               	movwf	sprintf@f+1,c
  1038  0004B4  C0B5  F034         	movff	main@SensorResult,?_sprintf+4
  1039  0004B8  C0B6  F035         	movff	main@SensorResult+1,?_sprintf+5
  1040  0004BC  C0B7  F036         	movff	main@SensorResult+2,?_sprintf+6
  1041  0004C0  C0B8  F037         	movff	main@SensorResult+3,?_sprintf+7
  1042  0004C4  EC39  F004         	call	_sprintf	;wreg free
  1043                           
  1044                           ;main.c: 138: LCD_String(buf);
  1045  0004C8  0EC8               	movlw	low main@buf
  1046  0004CA  6E2A               	movwf	LCD_String@string,c
  1047  0004CC  0E01               	movlw	high main@buf
  1048  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1049  0004D0  ECEA  F00A         	call	_LCD_String	;wreg free
  1050                           
  1051                           ;main.c: 139: }
  1052                           ;main.c: 142: break;
  1053  0004D4  D1BD               	goto	l3334
  1054  0004D6                     l3216:
  1055                           
  1056                           ;main.c: 147: initMotorPWM();
  1057  0004D6  ECF8  F00B         	call	_initMotorPWM	;wreg free
  1058                           
  1059                           ;main.c: 148: initTimer();
  1060  0004DA  ECAA  F00C         	call	_initTimer	;wreg free
  1061                           
  1062                           ;main.c: 149: initRFID();
  1063  0004DE  EC9C  F00C         	call	_initRFID	;wreg free
  1064                           
  1065                           ;main.c: 150: initLCD();
  1066  0004E2  ECAF  F008         	call	_initLCD	;wreg free
  1067                           
  1068                           ;main.c: 151: initIR();
  1069  0004E6  EC7C  F00C         	call	_initIR	;wreg free
  1070                           
  1071                           ;main.c: 153: enableSensor(0, 1);
  1072  0004EA  0E01               	movlw	1
  1073  0004EC  6E24               	movwf	enableSensor@status,c
  1074  0004EE  0E00               	movlw	0
  1075  0004F0  EC56  F00C         	call	_enableSensor
  1076                           
  1077                           ;main.c: 154: enableSensor(1, 1);
  1078  0004F4  0E01               	movlw	1
  1079  0004F6  6E24               	movwf	enableSensor@status,c
  1080  0004F8  0E01               	movlw	1
  1081  0004FA  EC56  F00C         	call	_enableSensor
  1082                           
  1083                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1084  0004FE  0E00               	movlw	low main@mL
  1085  000500  0100               	movlb	0	; () banked
  1086  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1087  000504  0E02               	movlw	high main@mL
  1088  000506  0100               	movlb	0	; () banked
  1089  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1090  00050A  0E09               	movlw	low main@mR
  1091  00050C  0100               	movlb	0	; () banked
  1092  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1093  000510  0E02               	movlw	high main@mR
  1094  000512  0100               	movlb	0	; () banked
  1095  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1096  000516  0E64               	movlw	100
  1097  000518  0100               	movlb	0	; () banked
  1098  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1099  00051C  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  1100                           
  1101                           ;main.c: 158: delay_tenth_s(1);
  1102  000520  0E01               	movlw	1
  1103  000522  ECC0  F00B         	call	_delay_tenth_s
  1104                           
  1105                           ;main.c: 160: mode=-1;
  1106  000526  683B               	setf	_mode,c	;volatile
  1107                           
  1108                           ;main.c: 162: break;
  1109  000528  D193               	goto	l3334
  1110  00052A                     l3236:
  1111                           
  1112                           ;main.c: 170: SetLine(1);
  1113  00052A  0E01               	movlw	1
  1114  00052C  EC11  F00C         	call	_SetLine
  1115                           
  1116                           ;main.c: 171: LCD_String("Searching");
  1117  000530  0E44               	movlw	low STR_7
  1118  000532  6E2A               	movwf	LCD_String@string,c
  1119  000534  0E03               	movlw	high STR_7
  1120  000536  6E2B               	movwf	LCD_String@string+1,c
  1121  000538  ECEA  F00A         	call	_LCD_String	;wreg free
  1122                           
  1123                           ;main.c: 173: if (DirectionFound==-1) {
  1124  00053C  0100               	movlb	0	; () banked
  1125  00053E  29B9               	incf	main@DirectionFound& (0+255),w,b
  1126  000540  A4D8               	btfss	status,2,c
  1127  000542  D030               	goto	l3252
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1131  000544  0E00               	movlw	low main@mL
  1132  000546  0100               	movlb	0	; () banked
  1133  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1134  00054A  0E02               	movlw	high main@mL
  1135  00054C  0100               	movlb	0	; () banked
  1136  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1137  000550  0E09               	movlw	low main@mR
  1138  000552  0100               	movlb	0	; () banked
  1139  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1140  000556  0E02               	movlw	high main@mR
  1141  000558  0100               	movlb	0	; () banked
  1142  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1143  00055C  0E64               	movlw	100
  1144  00055E  0100               	movlb	0	; () banked
  1145  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1146  000562  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  1147                           
  1148                           ;main.c: 179: delay_tenth_s(6);
  1149  000566  0E06               	movlw	6
  1150  000568  ECC0  F00B         	call	_delay_tenth_s
  1151                           
  1152                           ;main.c: 180: stop(&mL,&mR);
  1153  00056C  0E00               	movlw	low main@mL
  1154  00056E  0100               	movlb	0	; () banked
  1155  000570  6F62               	movwf	stop@mL& (0+255),b
  1156  000572  0E02               	movlw	high main@mL
  1157  000574  0100               	movlb	0	; () banked
  1158  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1159  000578  0E09               	movlw	low main@mR
  1160  00057A  0100               	movlb	0	; () banked
  1161  00057C  6F64               	movwf	stop@mR& (0+255),b
  1162  00057E  0E02               	movlw	high main@mR
  1163  000580  0100               	movlb	0	; () banked
  1164  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1165  000584  EC67  F009         	call	_stop	;wreg free
  1166                           
  1167                           ;main.c: 181: DirectionFound=0;
  1168  000588  0E00               	movlw	0
  1169  00058A  0100               	movlb	0	; () banked
  1170  00058C  6FB9               	movwf	main@DirectionFound& (0+255),b
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 182: MoveType[Move]=0;
  1174  00058E  0100               	movlb	0	; () banked
  1175  000590  51BA               	movf	main@Move& (0+255),w,b
  1176  000592  0D01               	mullw	1
  1177  000594  0E64               	movlw	low main@MoveType
  1178  000596  24F3               	addwf	prodl,w,c
  1179  000598  6ED9               	movwf	fsr2l,c
  1180  00059A  0E01               	movlw	high main@MoveType
  1181  00059C  20F4               	addwfc	prodh,w,c
  1182  00059E  6EDA               	movwf	fsr2h,c
  1183  0005A0  0E00               	movlw	0
  1184  0005A2  D132               	goto	L2
  1185  0005A4                     l3252:
  1186                           
  1187                           ; BSR set to: 0
  1188  0005A4  0100               	movlb	0	; () banked
  1189  0005A6  51B9               	movf	main@DirectionFound& (0+255),w,b
  1190  0005A8  0100               	movlb	0	; () banked
  1191  0005AA  A4D8               	btfss	status,2,c
  1192  0005AC  D020               	goto	l3258
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1196  0005AE  0E00               	movlw	low main@mL
  1197  0005B0  0100               	movlb	0	; () banked
  1198  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1199  0005B4  0E02               	movlw	high main@mL
  1200  0005B6  0100               	movlb	0	; () banked
  1201  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1202  0005BA  0E09               	movlw	low main@mR
  1203  0005BC  0100               	movlb	0	; () banked
  1204  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1205  0005C0  0E02               	movlw	high main@mR
  1206  0005C2  0100               	movlb	0	; () banked
  1207  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1208  0005C6  C0B4  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1209  0005CA  0100               	movlb	0	; () banked
  1210  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1211  0005CE  0100               	movlb	0	; () banked
  1212  0005D0  51BA               	movf	main@Move& (0+255),w,b
  1213  0005D2  0D01               	mullw	1
  1214  0005D4  0E00               	movlw	low main@MoveTime
  1215  0005D6  24F3               	addwf	prodl,w,c
  1216  0005D8  0100               	movlb	0	; () banked
  1217  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1218  0005DC  0E01               	movlw	high main@MoveTime
  1219  0005DE  20F4               	addwfc	prodh,w,c
  1220  0005E0  0100               	movlb	0	; () banked
  1221  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1222  0005E4  ECBC  F005         	call	_ScanWithRange	;wreg free
  1223  0005E8  0100               	movlb	0	; () banked
  1224  0005EA  6FB9               	movwf	main@DirectionFound& (0+255),b
  1225  0005EC  D02E               	goto	l3266
  1226  0005EE                     l3258:
  1227                           
  1228                           ; BSR set to: 0
  1229  0005EE  0100               	movlb	0	; () banked
  1230  0005F0  05B9               	decf	main@DirectionFound& (0+255),w,b
  1231  0005F2  A4D8               	btfss	status,2,c
  1232  0005F4  D023               	goto	l3262
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 189: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1236  0005F6  0E00               	movlw	low main@mL
  1237  0005F8  0100               	movlb	0	; () banked
  1238  0005FA  6F6D               	movwf	ScanIR@mL& (0+255),b
  1239  0005FC  0E02               	movlw	high main@mL
  1240  0005FE  0100               	movlb	0	; () banked
  1241  000600  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1242  000602  0E09               	movlw	low main@mR
  1243  000604  0100               	movlb	0	; () banked
  1244  000606  6F6F               	movwf	ScanIR@mR& (0+255),b
  1245  000608  0E02               	movlw	high main@mR
  1246  00060A  0100               	movlb	0	; () banked
  1247  00060C  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1248  00060E  0EBA               	movlw	low main@Move
  1249  000610  0100               	movlb	0	; () banked
  1250  000612  6F71               	movwf	ScanIR@Move& (0+255),b
  1251  000614  0E00               	movlw	high main@Move
  1252  000616  0100               	movlb	0	; () banked
  1253  000618  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1254  00061A  0E00               	movlw	low main@MoveTime
  1255  00061C  0100               	movlb	0	; () banked
  1256  00061E  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1257  000620  0E01               	movlw	high main@MoveTime
  1258  000622  0100               	movlb	0	; () banked
  1259  000624  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1260  000626  0E64               	movlw	low main@MoveType
  1261  000628  0100               	movlb	0	; () banked
  1262  00062A  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1263  00062C  0E01               	movlw	high main@MoveType
  1264  00062E  0100               	movlb	0	; () banked
  1265  000630  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1266  000632  ECCF  F007         	call	_ScanIR	;wreg free
  1267  000636  0100               	movlb	0	; () banked
  1268  000638  6FB9               	movwf	main@DirectionFound& (0+255),b
  1269                           
  1270                           ;main.c: 190: } else if (DirectionFound==2) {
  1271  00063A  D0E7               	goto	l3322
  1272  00063C                     l3262:
  1273                           
  1274                           ; BSR set to: 0
  1275  00063C  0E02               	movlw	2
  1276  00063E  0100               	movlb	0	; () banked
  1277  000640  19B9               	xorwf	main@DirectionFound& (0+255),w,b
  1278  000642  A4D8               	btfss	status,2,c
  1279  000644  D0E2               	goto	l3322
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 192: mode=2;
  1283  000646  0E02               	movlw	2
  1284  000648  6E3B               	movwf	_mode,c	;volatile
  1285  00064A                     l3266:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 193: MoveType[Move]=1;
  1289  00064A  0100               	movlb	0	; () banked
  1290  00064C  51BA               	movf	main@Move& (0+255),w,b
  1291  00064E  0D01               	mullw	1
  1292  000650  0E64               	movlw	low main@MoveType
  1293  000652  24F3               	addwf	prodl,w,c
  1294  000654  6ED9               	movwf	fsr2l,c
  1295  000656  0E01               	movlw	high main@MoveType
  1296  000658  20F4               	addwfc	prodh,w,c
  1297  00065A  6EDA               	movwf	fsr2h,c
  1298  00065C  0E01               	movlw	1
  1299  00065E  D0D4               	goto	L2
  1300  000660                     l3270:
  1301                           
  1302                           ;main.c: 205: if (RFID_Read) {
  1303  000660  0101               	movlb	1	; () banked
  1304  000662  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1305  000664  B4D8               	btfsc	status,2,c
  1306  000666  D0A2               	goto	l3312
  1307                           
  1308                           ; BSR set to: 1
  1309                           ;main.c: 206: stop(&mL, &mR);
  1310  000668  0E00               	movlw	low main@mL
  1311  00066A  0100               	movlb	0	; () banked
  1312  00066C  6F62               	movwf	stop@mL& (0+255),b
  1313  00066E  0E02               	movlw	high main@mL
  1314  000670  0100               	movlb	0	; () banked
  1315  000672  6F63               	movwf	(stop@mL+1)& (0+255),b
  1316  000674  0E09               	movlw	low main@mR
  1317  000676  0100               	movlb	0	; () banked
  1318  000678  6F64               	movwf	stop@mR& (0+255),b
  1319  00067A  0E02               	movlw	high main@mR
  1320  00067C  0100               	movlb	0	; () banked
  1321  00067E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1322  000680  EC67  F009         	call	_stop	;wreg free
  1323                           
  1324                           ;main.c: 207: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1325  000684  0E03               	movlw	3
  1326  000686  0100               	movlb	0	; () banked
  1327  000688  19D3               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1328  00068A  A4D8               	btfss	status,2,c
  1329  00068C  D002               	goto	u2690
  1330  00068E  0E01               	movlw	1
  1331  000690  D001               	goto	u2692
  1332  000692                     u2690:
  1333  000692  0E00               	movlw	0
  1334  000694                     u2692:
  1335  000694  0100               	movlb	0	; () banked
  1336  000696  6FB2               	movwf	??_main& (0+255),b
  1337  000698  0E02               	movlw	2
  1338  00069A  0100               	movlb	0	; () banked
  1339  00069C  19C4               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1340  00069E  A4D8               	btfss	status,2,c
  1341  0006A0  D002               	goto	u2700
  1342  0006A2  0E01               	movlw	1
  1343  0006A4  D001               	goto	u2702
  1344  0006A6                     u2700:
  1345  0006A6  0E00               	movlw	0
  1346  0006A8                     u2702:
  1347  0006A8  0100               	movlb	0	; () banked
  1348  0006AA  15B2               	andwf	??_main& (0+255),w,b
  1349  0006AC  A0E8               	btfss	wreg,0,c
  1350  0006AE  D0D0               	goto	l3334
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;main.c: 208: if (VerifySignal(ReceivedString)){
  1354  0006B0  0EC4               	movlw	low _ReceivedString
  1355  0006B2  6E24               	movwf	VerifySignal@Signal,c
  1356  0006B4  0E00               	movlw	high _ReceivedString
  1357  0006B6  6E25               	movwf	VerifySignal@Signal+1,c
  1358  0006B8  EC0D  F009         	call	_VerifySignal	;wreg free
  1359  0006BC  0900               	iorlw	0
  1360  0006BE  B4D8               	btfsc	status,2,c
  1361  0006C0  D041               	goto	l3304
  1362                           
  1363                           ;main.c: 210: for (i=0; i<10; i++){
  1364  0006C2  0E00               	movlw	0
  1365  0006C4  0100               	movlb	0	; () banked
  1366  0006C6  6FBB               	movwf	main@i& (0+255),b
  1367  0006C8                     l3280:
  1368                           
  1369                           ; BSR set to: 0
  1370  0006C8  0E09               	movlw	9
  1371  0006CA  0100               	movlb	0	; () banked
  1372  0006CC  65BB               	cpfsgt	main@i& (0+255),b
  1373  0006CE  D001               	goto	l3284
  1374  0006D0  D020               	goto	l3290
  1375  0006D2                     l3284:
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 211: Message[i] = ReceivedString[i+1];
  1379  0006D2  0100               	movlb	0	; () banked
  1380  0006D4  51BB               	movf	main@i& (0+255),w,b
  1381  0006D6  0100               	movlb	0	; () banked
  1382  0006D8  6FB2               	movwf	??_main& (0+255),b
  1383  0006DA  6BB3               	clrf	(??_main+1)& (0+255),b
  1384  0006DC  0E01               	movlw	1
  1385  0006DE  0100               	movlb	0	; () banked
  1386  0006E0  27B2               	addwf	??_main& (0+255),f,b
  1387  0006E2  0E00               	movlw	0
  1388  0006E4  23B3               	addwfc	(??_main+1)& (0+255),f,b
  1389  0006E6  0EC4               	movlw	low _ReceivedString
  1390  0006E8  0100               	movlb	0	; () banked
  1391  0006EA  25B2               	addwf	??_main& (0+255),w,b
  1392  0006EC  6ED9               	movwf	fsr2l,c
  1393  0006EE  0E00               	movlw	high _ReceivedString
  1394  0006F0  0100               	movlb	0	; () banked
  1395  0006F2  21B3               	addwfc	(??_main+1)& (0+255),w,b
  1396  0006F4  6EDA               	movwf	fsr2h,c
  1397  0006F6  0100               	movlb	0	; () banked
  1398  0006F8  51BB               	movf	main@i& (0+255),w,b
  1399  0006FA  0D01               	mullw	1
  1400  0006FC  0EF0               	movlw	low main@Message
  1401  0006FE  24F3               	addwf	prodl,w,c
  1402  000700  6EE1               	movwf	fsr1l,c
  1403  000702  0E01               	movlw	high main@Message
  1404  000704  20F4               	addwfc	prodh,w,c
  1405  000706  6EE2               	movwf	fsr1h,c
  1406  000708  CFDF FFE7          	movff	indf2,indf1
  1407                           
  1408                           ; BSR set to: 0
  1409  00070C  0100               	movlb	0	; () banked
  1410  00070E  2BBB               	incf	main@i& (0+255),f,b
  1411  000710  D7DB               	goto	l3280
  1412  000712                     l3290:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 212: }
  1416                           ;main.c: 215: for (i=0; i<16; i++) {
  1417  000712  0E00               	movlw	0
  1418  000714  0100               	movlb	0	; () banked
  1419  000716  6FBB               	movwf	main@i& (0+255),b
  1420  000718                     l3292:
  1421                           
  1422                           ; BSR set to: 0
  1423  000718  0E0F               	movlw	15
  1424  00071A  0100               	movlb	0	; () banked
  1425  00071C  65BB               	cpfsgt	main@i& (0+255),b
  1426  00071E  D001               	goto	l3296
  1427  000720  D00E               	goto	l3302
  1428  000722                     l3296:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 216: ReceivedString[i]=0;
  1432  000722  0100               	movlb	0	; () banked
  1433  000724  51BB               	movf	main@i& (0+255),w,b
  1434  000726  0D01               	mullw	1
  1435  000728  0EC4               	movlw	low _ReceivedString
  1436  00072A  24F3               	addwf	prodl,w,c
  1437  00072C  6ED9               	movwf	fsr2l,c
  1438  00072E  0E00               	movlw	high _ReceivedString
  1439  000730  20F4               	addwfc	prodh,w,c
  1440  000732  6EDA               	movwf	fsr2h,c
  1441  000734  0E00               	movlw	0
  1442  000736  6EDF               	movwf	indf2,c
  1443                           
  1444                           ; BSR set to: 0
  1445  000738  0100               	movlb	0	; () banked
  1446  00073A  2BBB               	incf	main@i& (0+255),f,b
  1447  00073C  D7ED               	goto	l3292
  1448  00073E                     l3302:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 217: }
  1452                           ;main.c: 218: mode=3;
  1453  00073E  0E03               	movlw	3
  1454  000740  6E3B               	movwf	_mode,c	;volatile
  1455                           
  1456                           ;main.c: 220: } else {
  1457  000742  D086               	goto	l3334
  1458  000744                     l3304:
  1459                           
  1460                           ;main.c: 221: fullSpeedBack(&mL,&mR, 100);
  1461  000744  0E00               	movlw	low main@mL
  1462  000746  0100               	movlb	0	; () banked
  1463  000748  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1464  00074A  0E02               	movlw	high main@mL
  1465  00074C  0100               	movlb	0	; () banked
  1466  00074E  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1467  000750  0E09               	movlw	low main@mR
  1468  000752  0100               	movlb	0	; () banked
  1469  000754  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1470  000756  0E02               	movlw	high main@mR
  1471  000758  0100               	movlb	0	; () banked
  1472  00075A  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1473  00075C  0E64               	movlw	100
  1474  00075E  0100               	movlb	0	; () banked
  1475  000760  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1476  000762  EC63  F00B         	call	_fullSpeedBack	;wreg free
  1477                           
  1478                           ;main.c: 222: delay_tenth_s(5);
  1479  000766  0E05               	movlw	5
  1480  000768  ECC0  F00B         	call	_delay_tenth_s
  1481                           
  1482                           ;main.c: 223: stop(&mL,&mR);
  1483  00076C  0E00               	movlw	low main@mL
  1484  00076E  0100               	movlb	0	; () banked
  1485  000770  6F62               	movwf	stop@mL& (0+255),b
  1486  000772  0E02               	movlw	high main@mL
  1487  000774  0100               	movlb	0	; () banked
  1488  000776  6F63               	movwf	(stop@mL+1)& (0+255),b
  1489  000778  0E09               	movlw	low main@mR
  1490  00077A  0100               	movlb	0	; () banked
  1491  00077C  6F64               	movwf	stop@mR& (0+255),b
  1492  00077E  0E02               	movlw	high main@mR
  1493  000780  0100               	movlb	0	; () banked
  1494  000782  6F65               	movwf	(stop@mR+1)& (0+255),b
  1495  000784  EC67  F009         	call	_stop	;wreg free
  1496                           
  1497                           ;main.c: 224: fullSpeedAhead(&mL,&mR, 100);
  1498  000788  0E00               	movlw	low main@mL
  1499  00078A  0100               	movlb	0	; () banked
  1500  00078C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1501  00078E  0E02               	movlw	high main@mL
  1502  000790  0100               	movlb	0	; () banked
  1503  000792  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1504  000794  0E09               	movlw	low main@mR
  1505  000796  0100               	movlb	0	; () banked
  1506  000798  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1507  00079A  0E02               	movlw	high main@mR
  1508  00079C  0100               	movlb	0	; () banked
  1509  00079E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1510  0007A0  0E64               	movlw	100
  1511  0007A2  0100               	movlb	0	; () banked
  1512  0007A4  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1513  0007A6  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  1514                           
  1515                           ;main.c: 225: }
  1516                           ;main.c: 226: }
  1517                           ;main.c: 227: } else {
  1518  0007AA  D052               	goto	l3334
  1519  0007AC                     l3312:
  1520                           
  1521                           ;main.c: 228: DirectionFound=1;
  1522  0007AC  0E01               	movlw	1
  1523  0007AE  0100               	movlb	0	; () banked
  1524  0007B0  6FB9               	movwf	main@DirectionFound& (0+255),b
  1525                           
  1526                           ;main.c: 229: mode=1;
  1527  0007B2  0E01               	movlw	1
  1528  0007B4  6E3B               	movwf	_mode,c	;volatile
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 231: fullSpeedAhead(&mL,&mR, 100);
  1532  0007B6  0E00               	movlw	low main@mL
  1533  0007B8  0100               	movlb	0	; () banked
  1534  0007BA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1535  0007BC  0E02               	movlw	high main@mL
  1536  0007BE  0100               	movlb	0	; () banked
  1537  0007C0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1538  0007C2  0E09               	movlw	low main@mR
  1539  0007C4  0100               	movlb	0	; () banked
  1540  0007C6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1541  0007C8  0E02               	movlw	high main@mR
  1542  0007CA  0100               	movlb	0	; () banked
  1543  0007CC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1544  0007CE  0E64               	movlw	100
  1545  0007D0  0100               	movlb	0	; () banked
  1546  0007D2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1547  0007D4  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  1548                           
  1549                           ;main.c: 232: delay_tenth_s(5);
  1550  0007D8  0E05               	movlw	5
  1551  0007DA  ECC0  F00B         	call	_delay_tenth_s
  1552                           
  1553                           ;main.c: 233: MoveType[Move] = 0;
  1554  0007DE  0100               	movlb	0	; () banked
  1555  0007E0  51BA               	movf	main@Move& (0+255),w,b
  1556  0007E2  0D01               	mullw	1
  1557  0007E4  0E64               	movlw	low main@MoveType
  1558  0007E6  24F3               	addwf	prodl,w,c
  1559  0007E8  6ED9               	movwf	fsr2l,c
  1560  0007EA  0E01               	movlw	high main@MoveType
  1561  0007EC  20F4               	addwfc	prodh,w,c
  1562  0007EE  6EDA               	movwf	fsr2h,c
  1563  0007F0  0E00               	movlw	0
  1564  0007F2  6EDF               	movwf	indf2,c
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 234: MoveTime[Move] = 5;
  1568  0007F4  0100               	movlb	0	; () banked
  1569  0007F6  51BA               	movf	main@Move& (0+255),w,b
  1570  0007F8  0D01               	mullw	1
  1571  0007FA  0E00               	movlw	low main@MoveTime
  1572  0007FC  24F3               	addwf	prodl,w,c
  1573  0007FE  6ED9               	movwf	fsr2l,c
  1574  000800  0E01               	movlw	high main@MoveTime
  1575  000802  20F4               	addwfc	prodh,w,c
  1576  000804  6EDA               	movwf	fsr2h,c
  1577  000806  0E05               	movlw	5
  1578  000808                     L2:
  1579  000808  6EDF               	movwf	indf2,c
  1580  00080A                     l3322:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 235: Move++;
  1584  00080A  0100               	movlb	0	; () banked
  1585  00080C  2BBA               	incf	main@Move& (0+255),f,b
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 236: }
  1589                           ;main.c: 238: break;
  1590  00080E  D020               	goto	l3334
  1591  000810                     l3324:
  1592                           
  1593                           ;main.c: 243: SetLine(1);
  1594  000810  0E01               	movlw	1
  1595  000812  EC11  F00C         	call	_SetLine
  1596                           
  1597                           ;main.c: 244: LCD_String(Message);
  1598  000816  0EF0               	movlw	low main@Message
  1599  000818  6E2A               	movwf	LCD_String@string,c
  1600  00081A  0E01               	movlw	high main@Message
  1601  00081C  6E2B               	movwf	LCD_String@string+1,c
  1602  00081E  ECEA  F00A         	call	_LCD_String	;wreg free
  1603                           
  1604                           ;main.c: 245: SetLine(2);
  1605  000822  0E02               	movlw	2
  1606  000824  EC11  F00C         	call	_SetLine
  1607                           
  1608                           ;main.c: 246: LCD_String("Going Home");
  1609  000828  0E39               	movlw	low STR_8
  1610  00082A  6E2A               	movwf	LCD_String@string,c
  1611  00082C  0E03               	movlw	high STR_8
  1612  00082E  6E2B               	movwf	LCD_String@string+1,c
  1613  000830  ECEA  F00A         	call	_LCD_String	;wreg free
  1614                           
  1615                           ;main.c: 247: stop(&mL,&mR);
  1616  000834  0E00               	movlw	low main@mL
  1617  000836  0100               	movlb	0	; () banked
  1618  000838  6F62               	movwf	stop@mL& (0+255),b
  1619  00083A  0E02               	movlw	high main@mL
  1620  00083C  0100               	movlb	0	; () banked
  1621  00083E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1622  000840  0E09               	movlw	low main@mR
  1623  000842  0100               	movlb	0	; () banked
  1624  000844  6F64               	movwf	stop@mR& (0+255),b
  1625  000846  0E02               	movlw	high main@mR
  1626  000848  0100               	movlb	0	; () banked
  1627  00084A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1628  00084C  EC67  F009         	call	_stop	;wreg free
  1629  000850                     l3334:
  1630  000850  503B               	movf	_mode,w,c	;volatile
  1631                           
  1632                           ; Switch size 1, requested type "space"
  1633                           ; Number of cases is 5, Range of values is 0 to 255
  1634                           ; switch strategies available:
  1635                           ; Name         Instructions Cycles
  1636                           ; simple_byte           16     9 (average)
  1637                           ;	Chosen strategy is simple_byte
  1638  000852  0A00               	xorlw	0	; case 0
  1639  000854  B4D8               	btfsc	status,2,c
  1640  000856  D63F               	goto	l3216
  1641  000858  0A01               	xorlw	1	; case 1
  1642  00085A  B4D8               	btfsc	status,2,c
  1643  00085C  D666               	goto	l3236
  1644  00085E  0A03               	xorlw	3	; case 2
  1645  000860  B4D8               	btfsc	status,2,c
  1646  000862  D6FE               	goto	l3270
  1647  000864  0A01               	xorlw	1	; case 3
  1648  000866  B4D8               	btfsc	status,2,c
  1649  000868  D7D3               	goto	l3324
  1650  00086A  0AFC               	xorlw	252	; case 255
  1651  00086C  B4D8               	btfsc	status,2,c
  1652  00086E  D5C7               	goto	l3178
  1653  000870  D7EF               	goto	l3334
  1654  000872                     __end_of_main:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           intcon	equ	0xFF2
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           indf1	equ	0xFE7
  1663                           fsr1h	equ	0xFE2
  1664                           fsr1l	equ	0xFE1
  1665                           indf2	equ	0xFDF
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _initTimer *****************
  1671 ;; Defined at:
  1672 ;;		line 8 in file "Movement.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;		None               void
  1679 ;; Registers used:
  1680 ;;		None
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1686 ;;      Params:         0       0       0       0
  1687 ;;      Locals:         0       0       0       0
  1688 ;;      Temps:          0       0       0       0
  1689 ;;      Totals:         0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    3
  1693 ;; This function calls:
  1694 ;;		Nothing
  1695 ;; This function is called by:
  1696 ;;		_main
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text1
  1701  001954                     __ptext1:
  1702                           	opt stack 0
  1703  001954                     _initTimer:
  1704                           	opt stack 27
  1705                           
  1706                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1707                           
  1708                           ;incstack = 0
  1709  001954  9ED5               	bcf	4053,7,c	;volatile
  1710                           
  1711                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1712  001956  9CD5               	bcf	4053,6,c	;volatile
  1713                           
  1714                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1715  001958  9AD5               	bcf	4053,5,c	;volatile
  1716                           
  1717                           ;Movement.c: 13: T0CONbits.PSA=0;
  1718  00195A  96D5               	bcf	4053,3,c	;volatile
  1719                           
  1720                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1721  00195C  80D5               	bsf	4053,0,c	;volatile
  1722  00195E  82D5               	bsf	4053,1,c	;volatile
  1723  001960  84D5               	bsf	4053,2,c	;volatile
  1724                           
  1725                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1726  001962  9AF2               	bcf	intcon,5,c	;volatile
  1727  001964  0012               	return		;funcret
  1728  001966                     __end_of_initTimer:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           indf1	equ	0xFE7
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _initRFID *****************
  1745 ;; Defined at:
  1746 ;;		line 5 in file "RFID_Reader.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;		None               void
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1760 ;;      Params:         0       0       0       0
  1761 ;;      Locals:         0       0       0       0
  1762 ;;      Temps:          0       0       0       0
  1763 ;;      Totals:         0       0       0       0
  1764 ;;Total ram usage:        0 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    3
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text2
  1775  001938                     __ptext2:
  1776                           	opt stack 0
  1777  001938                     _initRFID:
  1778                           	opt stack 27
  1779                           
  1780                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1781                           
  1782                           ;incstack = 0
  1783  001938  5094               	movf	3988,w,c	;volatile
  1784  00193A  09C0               	iorlw	192
  1785  00193C  6E94               	movwf	3988,c	;volatile
  1786                           
  1787                           ;RFID_Reader.c: 10: SPBRG=205;
  1788  00193E  0ECD               	movlw	205
  1789  001940  6EAF               	movwf	4015,c	;volatile
  1790                           
  1791                           ;RFID_Reader.c: 11: SPBRGH=0;
  1792  001942  0E00               	movlw	0
  1793  001944  6EB0               	movwf	4016,c	;volatile
  1794                           
  1795                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1796  001946  86AA               	bsf	4010,3,c	;volatile
  1797                           
  1798                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1799  001948  84AC               	bsf	4012,2,c	;volatile
  1800                           
  1801                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1802  00194A  88AB               	bsf	4011,4,c	;volatile
  1803                           
  1804                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1805  00194C  8EAB               	bsf	4011,7,c	;volatile
  1806                           
  1807                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1808  00194E  98AC               	bcf	4012,4,c	;volatile
  1809                           
  1810                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1811  001950  9CAB               	bcf	4011,6,c	;volatile
  1812  001952  0012               	return		;funcret
  1813  001954                     __end_of_initRFID:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           indf1	equ	0xFE7
  1822                           fsr1h	equ	0xFE2
  1823                           fsr1l	equ	0xFE1
  1824                           indf2	equ	0xFDF
  1825                           fsr2h	equ	0xFDA
  1826                           fsr2l	equ	0xFD9
  1827                           status	equ	0xFD8
  1828                           
  1829 ;; *************** function _initMotorPWM *****************
  1830 ;; Defined at:
  1831 ;;		line 4 in file "dc_motor.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;		None               void
  1838 ;; Registers used:
  1839 ;;		wreg, status,2
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1845 ;;      Params:         0       0       0       0
  1846 ;;      Locals:         0       0       0       0
  1847 ;;      Temps:          0       0       0       0
  1848 ;;      Totals:         0       0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    3
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text3
  1860  0017F0                     __ptext3:
  1861                           	opt stack 0
  1862  0017F0                     _initMotorPWM:
  1863                           	opt stack 27
  1864                           
  1865                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1866                           
  1867                           ;incstack = 0
  1868  0017F0  0E00               	movlw	0
  1869  0017F2  6E7F               	movwf	3967,c	;volatile
  1870                           
  1871                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1872  0017F4  0E80               	movlw	128
  1873  0017F6  6E7E               	movwf	3966,c	;volatile
  1874                           
  1875                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1876  0017F8  0E6F               	movlw	111
  1877  0017FA  6E6F               	movwf	3951,c	;volatile
  1878                           
  1879                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1880  0017FC  0E00               	movlw	0
  1881  0017FE  6E6E               	movwf	3950,c	;volatile
  1882                           
  1883                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1884  001800  0EC7               	movlw	199
  1885  001802  6E7B               	movwf	3963,c	;volatile
  1886                           
  1887                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1888  001804  0E00               	movlw	0
  1889  001806  6E7A               	movwf	3962,c	;volatile
  1890                           
  1891                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1892  001808  0E00               	movlw	0
  1893  00180A  6E79               	movwf	3961,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1896  00180C  0E00               	movlw	0
  1897  00180E  6E78               	movwf	3960,c	;volatile
  1898                           
  1899                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1900  001810  0E00               	movlw	0
  1901  001812  6E77               	movwf	3959,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1904  001814  0E00               	movlw	0
  1905  001816  6E76               	movwf	3958,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1908  001818  9093               	bcf	3987,0,c	;volatile
  1909                           
  1910                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1911  00181A  9293               	bcf	3987,1,c	;volatile
  1912                           
  1913                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1914  00181C  9493               	bcf	3987,2,c	;volatile
  1915                           
  1916                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1917  00181E  9693               	bcf	3987,3,c	;volatile
  1918  001820  0012               	return		;funcret
  1919  001822                     __end_of_initMotorPWM:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           intcon	equ	0xFF2
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           indf1	equ	0xFE7
  1928                           fsr1h	equ	0xFE2
  1929                           fsr1l	equ	0xFE1
  1930                           indf2	equ	0xFDF
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _initLCD *****************
  1936 ;; Defined at:
  1937 ;;		line 38 in file "LCD.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;		None
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1951 ;;      Params:         0       0       0       0
  1952 ;;      Locals:         0       0       0       0
  1953 ;;      Temps:          1       0       0       0
  1954 ;;      Totals:         1       0       0       0
  1955 ;;Total ram usage:        1 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    6
  1958 ;; This function calls:
  1959 ;;		_LCDout
  1960 ;;		_SendLCD
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text4
  1967  00115E                     __ptext4:
  1968                           	opt stack 0
  1969  00115E                     _initLCD:
  1970                           	opt stack 24
  1971                           
  1972                           ;LCD.c: 44: TRISAbits.RA6=0;
  1973                           
  1974                           ;incstack = 0
  1975  00115E  9C92               	bcf	3986,6,c	;volatile
  1976                           
  1977                           ;LCD.c: 45: TRISCbits.RC0=0;
  1978  001160  9094               	bcf	3988,0,c	;volatile
  1979                           
  1980                           ;LCD.c: 46: TRISCbits.RC1=0;
  1981  001162  9294               	bcf	3988,1,c	;volatile
  1982                           
  1983                           ;LCD.c: 47: TRISCbits.RC2=0;
  1984  001164  9494               	bcf	3988,2,c	;volatile
  1985                           
  1986                           ;LCD.c: 48: TRISDbits.RD0=0;
  1987  001166  9095               	bcf	3989,0,c	;volatile
  1988                           
  1989                           ;LCD.c: 49: TRISDbits.RD1=0;
  1990  001168  9295               	bcf	3989,1,c	;volatile
  1991                           
  1992                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1993  00116A  0E27               	movlw	39
  1994  00116C  6E2A               	movwf	??_initLCD& (0+255),c
  1995  00116E  0EF5               	movlw	245
  1996  001170                     u2797:
  1997  001170  2EE8               	decfsz	wreg,f,c
  1998  001172  D7FE               	goto	u2797
  1999  001174  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2000  001176  D7FC               	goto	u2797
  2001  001178  F000               	nop	
  2002                           
  2003                           ;LCD.c: 52: LCDout(0b0011);
  2004  00117A  0E03               	movlw	3
  2005  00117C  EC4C  F008         	call	_LCDout
  2006                           
  2007                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2008  001180  0E0D               	movlw	13
  2009  001182  6E2A               	movwf	??_initLCD& (0+255),c
  2010  001184  0EFC               	movlw	252
  2011  001186                     u2807:
  2012  001186  2EE8               	decfsz	wreg,f,c
  2013  001188  D7FE               	goto	u2807
  2014  00118A  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2015  00118C  D7FC               	goto	u2807
  2016                           
  2017                           ;LCD.c: 54: LCDout(0b0011);
  2018  00118E  0E03               	movlw	3
  2019  001190  EC4C  F008         	call	_LCDout
  2020                           
  2021                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2022  001194  0E85               	movlw	133
  2023  001196                     u2817:
  2024  001196  2EE8               	decfsz	wreg,f,c
  2025  001198  D7FE               	goto	u2817
  2026  00119A  F000               	nop	
  2027                           
  2028                           ;LCD.c: 56: LCDout(0b0011);
  2029  00119C  0E03               	movlw	3
  2030  00119E  EC4C  F008         	call	_LCDout
  2031                           
  2032                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2033  0011A2  0E21               	movlw	33
  2034  0011A4                     u2827:
  2035  0011A4  2EE8               	decfsz	wreg,f,c
  2036  0011A6  D7FE               	goto	u2827
  2037  0011A8  F000               	nop	
  2038                           
  2039                           ;LCD.c: 58: LCDout(0b0010);
  2040  0011AA  0E02               	movlw	2
  2041  0011AC  EC4C  F008         	call	_LCDout
  2042                           
  2043                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2044  0011B0  0E21               	movlw	33
  2045  0011B2                     u2837:
  2046  0011B2  2EE8               	decfsz	wreg,f,c
  2047  0011B4  D7FE               	goto	u2837
  2048  0011B6  F000               	nop	
  2049                           
  2050                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2051  0011B8  0E00               	movlw	0
  2052  0011BA  6E28               	movwf	SendLCD@type,c
  2053  0011BC  0E28               	movlw	40
  2054  0011BE  EC29  F00C         	call	_SendLCD
  2055                           
  2056                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2057  0011C2  0E21               	movlw	33
  2058  0011C4                     u2847:
  2059  0011C4  2EE8               	decfsz	wreg,f,c
  2060  0011C6  D7FE               	goto	u2847
  2061  0011C8  F000               	nop	
  2062                           
  2063                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2064  0011CA  0E00               	movlw	0
  2065  0011CC  6E28               	movwf	SendLCD@type,c
  2066  0011CE  0E08               	movlw	8
  2067  0011D0  EC29  F00C         	call	_SendLCD
  2068                           
  2069                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2070  0011D4  0E21               	movlw	33
  2071  0011D6                     u2857:
  2072  0011D6  2EE8               	decfsz	wreg,f,c
  2073  0011D8  D7FE               	goto	u2857
  2074  0011DA  F000               	nop	
  2075                           
  2076                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2077  0011DC  0E00               	movlw	0
  2078  0011DE  6E28               	movwf	SendLCD@type,c
  2079  0011E0  0E01               	movlw	1
  2080  0011E2  EC29  F00C         	call	_SendLCD
  2081                           
  2082                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2083  0011E6  0E0D               	movlw	13
  2084  0011E8  6E2A               	movwf	??_initLCD& (0+255),c
  2085  0011EA  0EFC               	movlw	252
  2086  0011EC                     u2867:
  2087  0011EC  2EE8               	decfsz	wreg,f,c
  2088  0011EE  D7FE               	goto	u2867
  2089  0011F0  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2090  0011F2  D7FC               	goto	u2867
  2091                           
  2092                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2093  0011F4  0E00               	movlw	0
  2094  0011F6  6E28               	movwf	SendLCD@type,c
  2095  0011F8  0E06               	movlw	6
  2096  0011FA  EC29  F00C         	call	_SendLCD
  2097                           
  2098                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2099  0011FE  0E21               	movlw	33
  2100  001200                     u2877:
  2101  001200  2EE8               	decfsz	wreg,f,c
  2102  001202  D7FE               	goto	u2877
  2103  001204  F000               	nop	
  2104                           
  2105                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2106  001206  0E00               	movlw	0
  2107  001208  6E28               	movwf	SendLCD@type,c
  2108  00120A  0E0C               	movlw	12
  2109  00120C  EC29  F00C         	call	_SendLCD
  2110                           
  2111                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2112  001210  0E21               	movlw	33
  2113  001212                     u2887:
  2114  001212  2EE8               	decfsz	wreg,f,c
  2115  001214  D7FE               	goto	u2887
  2116  001216  F000               	nop	
  2117  001218  0012               	return		;funcret
  2118  00121A                     __end_of_initLCD:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _initIR *****************
  2135 ;; Defined at:
  2136 ;;		line 30 in file "IR_Reading.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;		None               void
  2143 ;; Registers used:
  2144 ;;		wreg, status,2
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2150 ;;      Params:         0       0       0       0
  2151 ;;      Locals:         0       0       0       0
  2152 ;;      Temps:          0       0       0       0
  2153 ;;      Totals:         0       0       0       0
  2154 ;;Total ram usage:        0 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    3
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text5
  2165  0018F8                     __ptext5:
  2166                           	opt stack 0
  2167  0018F8                     _initIR:
  2168                           	opt stack 27
  2169                           
  2170                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2171                           
  2172                           ;incstack = 0
  2173  0018F8  9489               	bcf	3977,2,c	;volatile
  2174                           
  2175                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2176  0018FA  9689               	bcf	3977,3,c	;volatile
  2177                           
  2178                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2179  0018FC  8492               	bsf	3986,2,c	;volatile
  2180                           
  2181                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2182  0018FE  8692               	bsf	3986,3,c	;volatile
  2183                           
  2184                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2185  001900  94B8               	bcf	4024,2,c	;volatile
  2186                           
  2187                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2188  001902  96B8               	bcf	4024,3,c	;volatile
  2189                           
  2190                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2191  001904  9CB8               	bcf	4024,6,c	;volatile
  2192                           
  2193                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2194  001906  9EB8               	bcf	4024,7,c	;volatile
  2195                           
  2196                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2197  001908  0E06               	movlw	6
  2198  00190A  6E63               	movwf	3939,c	;volatile
  2199                           
  2200                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2201  00190C  0E06               	movlw	6
  2202  00190E  6E62               	movwf	3938,c	;volatile
  2203                           
  2204                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2205  001910  9096               	bcf	3990,0,c	;volatile
  2206                           
  2207                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2208  001912  9296               	bcf	3990,1,c	;volatile
  2209                           
  2210                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2211  001914  0E59               	movlw	89
  2212  001916  6EB7               	movwf	4023,c	;volatile
  2213  001918  0012               	return		;funcret
  2214  00191A                     __end_of_initIR:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           prodh	equ	0xFF4
  2218                           prodl	equ	0xFF3
  2219                           intcon	equ	0xFF2
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           indf1	equ	0xFE7
  2223                           fsr1h	equ	0xFE2
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _fullSpeedBack *****************
  2231 ;; Defined at:
  2232 ;;		line 125 in file "dc_motor.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2235 ;;		 -> main@mL(9), 
  2236 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2237 ;;		 -> main@mR(9), 
  2238 ;;  power           1   11[BANK0 ] unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2250 ;;      Params:         0       5       0       0
  2251 ;;      Locals:         0       0       0       0
  2252 ;;      Temps:          0       0       0       0
  2253 ;;      Totals:         0       5       0       0
  2254 ;;Total ram usage:        5 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    6
  2257 ;; This function calls:
  2258 ;;		_fullSpeedAhead
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text6
  2265  0016C6                     __ptext6:
  2266                           	opt stack 0
  2267  0016C6                     _fullSpeedBack:
  2268                           	opt stack 24
  2269                           
  2270                           ;dc_motor.c: 128: mL->direction=0;
  2271                           
  2272                           ;incstack = 0
  2273  0016C6  0100               	movlb	0	; () banked
  2274  0016C8  EE20 F001          	lfsr	2,1
  2275  0016CC  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2276  0016CE  26D9               	addwf	fsr2l,f,c
  2277  0016D0  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2278  0016D2  22DA               	addwfc	fsr2h,f,c
  2279  0016D4  0E00               	movlw	0
  2280  0016D6  6EDF               	movwf	indf2,c
  2281                           
  2282                           ;dc_motor.c: 129: mR->direction=0;
  2283  0016D8  0100               	movlb	0	; () banked
  2284  0016DA  EE20 F001          	lfsr	2,1
  2285  0016DE  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2286  0016E0  26D9               	addwf	fsr2l,f,c
  2287  0016E2  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2288  0016E4  22DA               	addwfc	fsr2h,f,c
  2289  0016E6  0E00               	movlw	0
  2290  0016E8  6EDF               	movwf	indf2,c
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2294  0016EA  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2295  0016EE  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2296  0016F2  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2297  0016F6  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2298  0016FA  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2299  0016FE  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  2300  001702  0012               	return		;funcret
  2301  001704                     __end_of_fullSpeedBack:
  2302                           	opt stack 0
  2303                           tblptru	equ	0xFF8
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           intcon	equ	0xFF2
  2307                           postinc0	equ	0xFEE
  2308                           wreg	equ	0xFE8
  2309                           indf1	equ	0xFE7
  2310                           fsr1h	equ	0xFE2
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _enableSensor *****************
  2318 ;; Defined at:
  2319 ;;		line 106 in file "IR_Reading.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  sensor          1    wreg     unsigned char 
  2322 ;;  status          1   35[COMRAM] unsigned char 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  sensor          1   36[COMRAM] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2334 ;;      Params:         1       0       0       0
  2335 ;;      Locals:         1       0       0       0
  2336 ;;      Temps:          0       0       0       0
  2337 ;;      Totals:         2       0       0       0
  2338 ;;Total ram usage:        2 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    3
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text7
  2349  0018AC                     __ptext7:
  2350                           	opt stack 0
  2351  0018AC                     _enableSensor:
  2352                           	opt stack 27
  2353                           
  2354                           ;incstack = 0
  2355                           ;enableSensor@sensor stored from wreg
  2356  0018AC  6E25               	movwf	enableSensor@sensor,c
  2357                           
  2358                           ;IR_Reading.c: 108: if (sensor==0){
  2359  0018AE  5025               	movf	enableSensor@sensor,w,c
  2360  0018B0  A4D8               	btfss	status,2,c
  2361  0018B2  D006               	goto	l2314
  2362                           
  2363                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2364  0018B4  B024               	btfsc	enableSensor@status,0,c
  2365  0018B6  D002               	bra	u1755
  2366  0018B8  908D               	bcf	3981,0,c	;volatile
  2367  0018BA  D001               	bra	u1756
  2368  0018BC                     u1755:
  2369  0018BC  808D               	bsf	3981,0,c	;volatile
  2370  0018BE                     u1756:
  2371                           
  2372                           ;IR_Reading.c: 110: } else if (sensor==1){
  2373  0018BE  0012               	return	
  2374  0018C0                     l2314:
  2375  0018C0  0425               	decf	enableSensor@sensor,w,c
  2376  0018C2  A4D8               	btfss	status,2,c
  2377  0018C4  0012               	return	
  2378                           
  2379                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2380  0018C6  B024               	btfsc	enableSensor@status,0,c
  2381  0018C8  D002               	bra	u1775
  2382  0018CA  928D               	bcf	3981,1,c	;volatile
  2383  0018CC  D001               	bra	u1776
  2384  0018CE                     u1775:
  2385  0018CE  828D               	bsf	3981,1,c	;volatile
  2386  0018D0                     u1776:
  2387  0018D0  0012               	return	
  2388  0018D2                     __end_of_enableSensor:
  2389                           	opt stack 0
  2390                           tblptru	equ	0xFF8
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           indf1	equ	0xFE7
  2397                           fsr1h	equ	0xFE2
  2398                           fsr1l	equ	0xFE1
  2399                           indf2	equ	0xFDF
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _VerifySignal *****************
  2405 ;; Defined at:
  2406 ;;		line 55 in file "RFID_Reader.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2409 ;;		 -> ReceivedString(16), 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  hexByte         2   44[COMRAM] unsigned int 
  2412 ;;  i               1   46[COMRAM] unsigned char 
  2413 ;;  checksum        1   43[COMRAM] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      unsigned char 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2423 ;;      Params:         2       0       0       0
  2424 ;;      Locals:         4       0       0       0
  2425 ;;      Temps:          6       0       0       0
  2426 ;;      Totals:        12       0       0       0
  2427 ;;Total ram usage:       12 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    3
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_main
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text8
  2438  00121A                     __ptext8:
  2439                           	opt stack 0
  2440  00121A                     _VerifySignal:
  2441                           	opt stack 27
  2442                           
  2443                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2444                           
  2445                           ;incstack = 0
  2446  00121A  0E00               	movlw	0
  2447  00121C  6E2C               	movwf	VerifySignal@checksum,c
  2448                           
  2449                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2450  00121E  0E00               	movlw	0
  2451  001220  6E2E               	movwf	VerifySignal@hexByte+1,c
  2452  001222  0E00               	movlw	0
  2453  001224  6E2D               	movwf	VerifySignal@hexByte,c
  2454                           
  2455                           ;RFID_Reader.c: 58: unsigned char i=0;
  2456  001226  0E00               	movlw	0
  2457  001228  6E2F               	movwf	VerifySignal@i,c
  2458                           
  2459                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2460  00122A  EE20 F004          	lfsr	2,4
  2461  00122E  5024               	movf	VerifySignal@Signal,w,c
  2462  001230  26D9               	addwf	fsr2l,f,c
  2463  001232  5025               	movf	VerifySignal@Signal+1,w,c
  2464  001234  22DA               	addwfc	fsr2h,f,c
  2465  001236  50DF               	movf	indf2,w,c
  2466  001238  6E26               	movwf	??_VerifySignal& (0+255),c
  2467  00123A  EE20 F003          	lfsr	2,3
  2468  00123E  5024               	movf	VerifySignal@Signal,w,c
  2469  001240  26D9               	addwf	fsr2l,f,c
  2470  001242  5025               	movf	VerifySignal@Signal+1,w,c
  2471  001244  22DA               	addwfc	fsr2h,f,c
  2472  001246  50DF               	movf	indf2,w,c
  2473  001248  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2474  00124A  5027               	movf	??_VerifySignal+1,w,c
  2475  00124C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2476  00124E  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2477  001250  5026               	movf	??_VerifySignal,w,c
  2478  001252  2428               	addwf	??_VerifySignal+2,w,c
  2479  001254  6E2D               	movwf	VerifySignal@hexByte,c
  2480  001256  0E00               	movlw	0
  2481  001258  2029               	addwfc	??_VerifySignal+3,w,c
  2482  00125A  6E2E               	movwf	VerifySignal@hexByte+1,c
  2483                           
  2484                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2485  00125C  EE20 F002          	lfsr	2,2
  2486  001260  5024               	movf	VerifySignal@Signal,w,c
  2487  001262  26D9               	addwf	fsr2l,f,c
  2488  001264  5025               	movf	VerifySignal@Signal+1,w,c
  2489  001266  22DA               	addwfc	fsr2h,f,c
  2490  001268  50DF               	movf	indf2,w,c
  2491  00126A  182D               	xorwf	VerifySignal@hexByte,w,c
  2492  00126C  6E2C               	movwf	VerifySignal@checksum,c
  2493                           
  2494                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2495  00126E  0E05               	movlw	5
  2496  001270  6E2F               	movwf	VerifySignal@i,c
  2497  001272                     l2510:
  2498  001272  0E09               	movlw	9
  2499  001274  642F               	cpfsgt	VerifySignal@i,c
  2500  001276  D001               	goto	l2514
  2501  001278  D028               	goto	l2522
  2502  00127A                     l2514:
  2503                           
  2504                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2505  00127A  502F               	movf	VerifySignal@i,w,c
  2506  00127C  6E26               	movwf	??_VerifySignal& (0+255),c
  2507  00127E  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2508  001280  0E01               	movlw	1
  2509  001282  2626               	addwf	??_VerifySignal,f,c
  2510  001284  0E00               	movlw	0
  2511  001286  2227               	addwfc	??_VerifySignal+1,f,c
  2512  001288  5026               	movf	??_VerifySignal,w,c
  2513  00128A  2424               	addwf	VerifySignal@Signal,w,c
  2514  00128C  6ED9               	movwf	fsr2l,c
  2515  00128E  5027               	movf	??_VerifySignal+1,w,c
  2516  001290  2025               	addwfc	VerifySignal@Signal+1,w,c
  2517  001292  6EDA               	movwf	fsr2h,c
  2518  001294  50DF               	movf	indf2,w,c
  2519  001296  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2520  001298  502F               	movf	VerifySignal@i,w,c
  2521  00129A  0D01               	mullw	1
  2522  00129C  50F3               	movf	prodl,w,c
  2523  00129E  2424               	addwf	VerifySignal@Signal,w,c
  2524  0012A0  6ED9               	movwf	fsr2l,c
  2525  0012A2  50F4               	movf	prodh,w,c
  2526  0012A4  2025               	addwfc	VerifySignal@Signal+1,w,c
  2527  0012A6  6EDA               	movwf	fsr2h,c
  2528  0012A8  50DF               	movf	indf2,w,c
  2529  0012AA  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2530  0012AC  5029               	movf	??_VerifySignal+3,w,c
  2531  0012AE  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2532  0012B0  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2533  0012B2  5028               	movf	??_VerifySignal+2,w,c
  2534  0012B4  242A               	addwf	??_VerifySignal+4,w,c
  2535  0012B6  6E2D               	movwf	VerifySignal@hexByte,c
  2536  0012B8  0E00               	movlw	0
  2537  0012BA  202B               	addwfc	??_VerifySignal+5,w,c
  2538  0012BC  6E2E               	movwf	VerifySignal@hexByte+1,c
  2539                           
  2540                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2541  0012BE  502C               	movf	VerifySignal@checksum,w,c
  2542  0012C0  182D               	xorwf	VerifySignal@hexByte,w,c
  2543  0012C2  6E2C               	movwf	VerifySignal@checksum,c
  2544  0012C4  0E02               	movlw	2
  2545  0012C6  262F               	addwf	VerifySignal@i,f,c
  2546  0012C8  D7D4               	goto	l2510
  2547  0012CA                     l2522:
  2548                           
  2549                           ;RFID_Reader.c: 68: }
  2550                           ;RFID_Reader.c: 71: return 1;
  2551  0012CA  0E01               	movlw	1
  2552  0012CC  0012               	return	
  2553  0012CE                     __end_of_VerifySignal:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           prodh	equ	0xFF4
  2557                           prodl	equ	0xFF3
  2558                           intcon	equ	0xFF2
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           indf1	equ	0xFE7
  2562                           fsr1h	equ	0xFE2
  2563                           fsr1l	equ	0xFE1
  2564                           indf2	equ	0xFDF
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _ScanWithRange *****************
  2570 ;; Defined at:
  2571 ;;		line 91 in file "Movement.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2574 ;;		 -> main@mL(9), 
  2575 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2576 ;;		 -> main@mR(9), 
  2577 ;;  milliseconds    2   17[BANK0 ] int 
  2578 ;;  MoveTimeEntr    2   19[BANK0 ] PTR unsigned char 
  2579 ;;		 -> main@MoveTime(100), 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  buf            40   26[BANK0 ] unsigned char [40]
  2582 ;;  SensorResult    4   74[BANK0 ] unsigned int [2]
  2583 ;;  RightFlag       2   80[BANK0 ] unsigned int 
  2584 ;;  LeftFlag        2   78[BANK0 ] unsigned int 
  2585 ;;  DirectionFou    2   71[BANK0 ] const unsigned int 
  2586 ;;  i               2   69[BANK0 ] unsigned int 
  2587 ;;  n               2   66[BANK0 ] unsigned int 
  2588 ;;  power           1   73[BANK0 ] const unsigned char 
  2589 ;;  TimeAboveThr    1   68[BANK0 ] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      unsigned char 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2599 ;;      Params:         0       8       0       0
  2600 ;;      Locals:         0      56       0       0
  2601 ;;      Temps:          0       5       0       0
  2602 ;;      Totals:         0      69       0       0
  2603 ;;Total ram usage:       69 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    7
  2606 ;; This function calls:
  2607 ;;		_LCD_String
  2608 ;;		_SendLCD
  2609 ;;		_SetLine
  2610 ;;		_delay_tenth_s
  2611 ;;		_grabLeftIR
  2612 ;;		_grabRightIR
  2613 ;;		_sprintf
  2614 ;;		_stop
  2615 ;;		_turnLeft
  2616 ;;		_turnRight
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text9
  2623  000B78                     __ptext9:
  2624                           	opt stack 0
  2625  000B78                     _ScanWithRange:
  2626                           	opt stack 23
  2627                           
  2628                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2629                           
  2630                           ;incstack = 0
  2631  000B78  C0C0  F0AA         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  2632  000B7C  C0C1  F0AB         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  2633  000B80  C0C2  F0AC         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  2634  000B84  C0C3  F0AD         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  2635                           
  2636                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2637  000B88  0E00               	movlw	0
  2638  000B8A  0100               	movlb	0	; () banked
  2639  000B8C  6FAF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2640  000B8E  0E00               	movlw	0
  2641  000B90  6FAE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2642                           
  2643                           ;Movement.c: 97: unsigned int RightFlag=0;
  2644  000B92  0E00               	movlw	0
  2645  000B94  0100               	movlb	0	; () banked
  2646  000B96  6FB1               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2647  000B98  0E00               	movlw	0
  2648  000B9A  6FB0               	movwf	ScanWithRange@RightFlag& (0+255),b
  2649                           
  2650                           ;Movement.c: 98: char buf[40];
  2651                           ;Movement.c: 99: unsigned int i=0;
  2652  000B9C  0E00               	movlw	0
  2653  000B9E  0100               	movlb	0	; () banked
  2654  000BA0  6FA6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2655  000BA2  0E00               	movlw	0
  2656  000BA4  6FA5               	movwf	ScanWithRange@i& (0+255),b
  2657                           
  2658                           ;Movement.c: 100: unsigned int n=0;
  2659  000BA6  0E00               	movlw	0
  2660  000BA8  0100               	movlb	0	; () banked
  2661  000BAA  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2662  000BAC  0E00               	movlw	0
  2663  000BAE  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2664                           
  2665                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2666  000BB0  0E00               	movlw	0
  2667  000BB2  0100               	movlb	0	; () banked
  2668  000BB4  6FA4               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2669                           
  2670                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2671  000BB6  0E0B               	movlw	11
  2672  000BB8  0100               	movlb	0	; () banked
  2673  000BBA  6FA8               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2674  000BBC  0EB8               	movlw	184
  2675  000BBE  6FA7               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2676                           
  2677                           ;Movement.c: 105: const unsigned char power=40;
  2678  000BC0  0E28               	movlw	40
  2679  000BC2  0100               	movlb	0	; () banked
  2680  000BC4  6FA9               	movwf	ScanWithRange@power& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2684  000BC6  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2685  000BCA  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2686  000BCE  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2687  000BD2  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2688  000BD6  0E64               	movlw	100
  2689  000BD8  0100               	movlb	0	; () banked
  2690  000BDA  6F6B               	movwf	turnLeft@power& (0+255),b
  2691  000BDC  ECA1  F00B         	call	_turnLeft	;wreg free
  2692                           
  2693                           ;Movement.c: 115: delay_tenth_s(3);
  2694  000BE0  0E03               	movlw	3
  2695  000BE2  ECC0  F00B         	call	_delay_tenth_s
  2696                           
  2697                           ;Movement.c: 116: stop(mL,mR);
  2698  000BE6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2699  000BEA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2700  000BEE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2701  000BF2  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2702  000BF6  EC67  F009         	call	_stop	;wreg free
  2703                           
  2704                           ;Movement.c: 119: turnRight(mL,mR, power);
  2705  000BFA  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2706  000BFE  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2707  000C02  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2708  000C06  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2709  000C0A  C0A9  F06B         	movff	ScanWithRange@power,turnRight@power
  2710  000C0E  EC82  F00B         	call	_turnRight	;wreg free
  2711                           
  2712                           ;Movement.c: 122: TMR0L = 0;
  2713  000C12  0E00               	movlw	0
  2714  000C14  6ED6               	movwf	4054,c	;volatile
  2715                           
  2716                           ;Movement.c: 123: TMR0H = 0;
  2717  000C16  0E00               	movlw	0
  2718  000C18  6ED7               	movwf	4055,c	;volatile
  2719                           
  2720                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2721  000C1A  8ED5               	bsf	4053,7,c	;volatile
  2722                           
  2723                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2724  000C1C  0E00               	movlw	0
  2725  000C1E  0100               	movlb	0	; () banked
  2726  000C20  6FA6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2727  000C22  0E01               	movlw	1
  2728  000C24  6FA5               	movwf	ScanWithRange@i& (0+255),b
  2729  000C26  D0F8               	goto	l3118
  2730  000C28                     l3054:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2734  000C28  ECB1  F00A         	call	_grabLeftIR	;wreg free
  2735  000C2C  C024  F0AA         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2736  000C30  C025  F0AB         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2737                           
  2738                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2739  000C34  EC78  F00A         	call	_grabRightIR	;wreg free
  2740  000C38  C024  F0AC         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2741  000C3C  C025  F0AD         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2742                           
  2743                           ;Movement.c: 134: CAP1BUFH=0;
  2744  000C40  0E00               	movlw	0
  2745  000C42  6E69               	movwf	3945,c	;volatile
  2746                           
  2747                           ;Movement.c: 135: CAP1BUFL=0;
  2748  000C44  0E00               	movlw	0
  2749  000C46  6E68               	movwf	3944,c	;volatile
  2750                           
  2751                           ;Movement.c: 136: CAP2BUFH=0;
  2752  000C48  0E00               	movlw	0
  2753  000C4A  6E67               	movwf	3943,c	;volatile
  2754                           
  2755                           ;Movement.c: 137: CAP2BUFL=0;
  2756  000C4C  0E00               	movlw	0
  2757  000C4E  6E66               	movwf	3942,c	;volatile
  2758                           
  2759                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2760  000C50  0E00               	movlw	0
  2761  000C52  6E28               	movwf	SendLCD@type,c
  2762  000C54  0E01               	movlw	1
  2763  000C56  EC29  F00C         	call	_SendLCD
  2764                           
  2765                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2766  000C5A  0E21               	movlw	33
  2767  000C5C                     u2897:
  2768  000C5C  2EE8               	decfsz	wreg,f,c
  2769  000C5E  D7FE               	goto	u2897
  2770  000C60  F000               	nop	
  2771                           
  2772                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2773  000C62  0E00               	movlw	0
  2774  000C64  6E28               	movwf	SendLCD@type,c
  2775  000C66  0E02               	movlw	2
  2776  000C68  EC29  F00C         	call	_SendLCD
  2777                           
  2778                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2779  000C6C  0E06               	movlw	6
  2780  000C6E  0100               	movlb	0	; () banked
  2781  000C70  6F75               	movwf	??_ScanWithRange& (0+255),b
  2782  000C72  0E30               	movlw	48
  2783  000C74                     u2907:
  2784  000C74  2EE8               	decfsz	wreg,f,c
  2785  000C76  D7FE               	goto	u2907
  2786  000C78  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2787  000C7A  D7FC               	goto	u2907
  2788  000C7C  D000               	nop2	
  2789                           
  2790                           ;Movement.c: 145: SetLine(1);
  2791  000C7E  0E01               	movlw	1
  2792  000C80  EC11  F00C         	call	_SetLine
  2793                           
  2794                           ;Movement.c: 146: LCD_String("     ScanIR");
  2795  000C84  0E2D               	movlw	low STR_1
  2796  000C86  6E2A               	movwf	LCD_String@string,c
  2797  000C88  0E03               	movlw	high STR_1
  2798  000C8A  6E2B               	movwf	LCD_String@string+1,c
  2799  000C8C  ECEA  F00A         	call	_LCD_String	;wreg free
  2800                           
  2801                           ;Movement.c: 147: SetLine(2);
  2802  000C90  0E02               	movlw	2
  2803  000C92  EC11  F00C         	call	_SetLine
  2804                           
  2805                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2806  000C96  0E7A               	movlw	low ScanWithRange@buf
  2807  000C98  6E30               	movwf	sprintf@sp,c
  2808  000C9A  0E00               	movlw	high ScanWithRange@buf
  2809  000C9C  6E31               	movwf	sprintf@sp+1,c
  2810  000C9E  0E0C               	movlw	low (STR_6+1)
  2811  000CA0  6E32               	movwf	sprintf@f,c
  2812  000CA2  0E03               	movlw	high (STR_6+1)
  2813  000CA4  6E33               	movwf	sprintf@f+1,c
  2814  000CA6  C0AA  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2815  000CAA  C0AB  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2816  000CAE  C0AC  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2817  000CB2  C0AD  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2818  000CB6  EC39  F004         	call	_sprintf	;wreg free
  2819                           
  2820                           ;Movement.c: 149: LCD_String(buf);
  2821  000CBA  0E7A               	movlw	low ScanWithRange@buf
  2822  000CBC  6E2A               	movwf	LCD_String@string,c
  2823  000CBE  0E00               	movlw	high ScanWithRange@buf
  2824  000CC0  6E2B               	movwf	LCD_String@string+1,c
  2825  000CC2  ECEA  F00A         	call	_LCD_String	;wreg free
  2826                           
  2827                           ;Movement.c: 151: if (RightFlag==0){
  2828  000CC6  0100               	movlb	0	; () banked
  2829  000CC8  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2830  000CCA  0100               	movlb	0	; () banked
  2831  000CCC  11B1               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2832  000CCE  A4D8               	btfss	status,2,c
  2833  000CD0  D018               	goto	l221
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2837  000CD2  0100               	movlb	0	; () banked
  2838  000CD4  51AC               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2839  000CD6  0100               	movlb	0	; () banked
  2840  000CD8  5DA7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2841  000CDA  0100               	movlb	0	; () banked
  2842  000CDC  51AD               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2843  000CDE  0100               	movlb	0	; () banked
  2844  000CE0  59A8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2845  000CE2  B0D8               	btfsc	status,0,c
  2846  000CE4  D00E               	goto	l221
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2850  000CE6  50D7               	movf	4055,w,c	;volatile
  2851  000CE8  0100               	movlb	0	; () banked
  2852  000CEA  6F76               	movwf	(??_ScanWithRange+1)& (0+255),b
  2853  000CEC  6B75               	clrf	??_ScanWithRange& (0+255),b
  2854  000CEE  50D6               	movf	4054,w,c	;volatile
  2855  000CF0  0100               	movlb	0	; () banked
  2856  000CF2  2575               	addwf	??_ScanWithRange& (0+255),w,b
  2857  000CF4  0100               	movlb	0	; () banked
  2858  000CF6  6FB0               	movwf	ScanWithRange@RightFlag& (0+255),b
  2859  000CF8  0E00               	movlw	0
  2860  000CFA  0100               	movlb	0	; () banked
  2861  000CFC  2176               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2862  000CFE  0100               	movlb	0	; () banked
  2863  000D00  6FB1               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2864  000D02                     l221:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;Movement.c: 154: }
  2868                           ;Movement.c: 155: }
  2869                           ;Movement.c: 157: if (LeftFlag==0){
  2870  000D02  0100               	movlb	0	; () banked
  2871  000D04  51AE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2872  000D06  0100               	movlb	0	; () banked
  2873  000D08  11AF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2874  000D0A  A4D8               	btfss	status,2,c
  2875  000D0C  D018               	goto	l223
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2879  000D0E  0100               	movlb	0	; () banked
  2880  000D10  51AA               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2881  000D12  0100               	movlb	0	; () banked
  2882  000D14  5DA7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2883  000D16  0100               	movlb	0	; () banked
  2884  000D18  51AB               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2885  000D1A  0100               	movlb	0	; () banked
  2886  000D1C  59A8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2887  000D1E  B0D8               	btfsc	status,0,c
  2888  000D20  D00E               	goto	l223
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2892  000D22  50D7               	movf	4055,w,c	;volatile
  2893  000D24  0100               	movlb	0	; () banked
  2894  000D26  6F76               	movwf	(??_ScanWithRange+1)& (0+255),b
  2895  000D28  6B75               	clrf	??_ScanWithRange& (0+255),b
  2896  000D2A  50D6               	movf	4054,w,c	;volatile
  2897  000D2C  0100               	movlb	0	; () banked
  2898  000D2E  2575               	addwf	??_ScanWithRange& (0+255),w,b
  2899  000D30  0100               	movlb	0	; () banked
  2900  000D32  6FAE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2901  000D34  0E00               	movlw	0
  2902  000D36  0100               	movlb	0	; () banked
  2903  000D38  2176               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2904  000D3A  0100               	movlb	0	; () banked
  2905  000D3C  6FAF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2906  000D3E                     l223:
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;Movement.c: 160: }
  2910                           ;Movement.c: 161: }
  2911                           ;Movement.c: 168: if (LeftFlag>0) {
  2912  000D3E  0100               	movlb	0	; () banked
  2913  000D40  51AE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2914  000D42  0100               	movlb	0	; () banked
  2915  000D44  11AF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2916  000D46  B4D8               	btfsc	status,2,c
  2917  000D48  D064               	goto	l3116
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;Movement.c: 171: if (RightFlag>0) {
  2921  000D4A  0100               	movlb	0	; () banked
  2922  000D4C  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2923  000D4E  0100               	movlb	0	; () banked
  2924  000D50  11B1               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2925  000D52  B4D8               	btfsc	status,2,c
  2926  000D54  D052               	goto	l226
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  2930  000D56  0100               	movlb	0	; () banked
  2931  000D58  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2932  000D5A  0800               	sublw	0
  2933  000D5C  0100               	movlb	0	; () banked
  2934  000D5E  25AE               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2935  000D60  0100               	movlb	0	; () banked
  2936  000D62  6FA4               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;Movement.c: 173: TMR0L = 0;
  2940  000D64  0E00               	movlw	0
  2941  000D66  6ED6               	movwf	4054,c	;volatile
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;Movement.c: 174: TMR0H = 0;
  2945  000D68  0E00               	movlw	0
  2946  000D6A  6ED7               	movwf	4055,c	;volatile
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;Movement.c: 175: stop(mL,mR);
  2950  000D6C  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2951  000D70  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2952  000D74  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2953  000D78  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2954  000D7C  EC67  F009         	call	_stop	;wreg free
  2955                           
  2956                           ;Movement.c: 177: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  2957  000D80  D00C               	goto	l3100
  2958  000D82                     l3098:
  2959                           
  2960                           ;Movement.c: 179: turnLeft(mL,mR, power);
  2961  000D82  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2962  000D86  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2963  000D8A  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2964  000D8E  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2965  000D92  C0A9  F06B         	movff	ScanWithRange@power,turnLeft@power
  2966  000D96  ECA1  F00B         	call	_turnLeft	;wreg free
  2967  000D9A                     l3100:
  2968  000D9A  0100               	movlb	0	; () banked
  2969  000D9C  90D8               	bcf	status,0,c
  2970  000D9E  31A4               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2971  000DA0  0100               	movlb	0	; () banked
  2972  000DA2  6F75               	movwf	??_ScanWithRange& (0+255),b
  2973  000DA4  6B76               	clrf	(??_ScanWithRange+1)& (0+255),b
  2974  000DA6  50D6               	movf	4054,w,c	;volatile
  2975  000DA8  CFD7 F077          	movff	4055,??_ScanWithRange+2	;volatile
  2976  000DAC  0100               	movlb	0	; () banked
  2977  000DAE  6B78               	clrf	(??_ScanWithRange+3)& (0+255),b
  2978  000DB0  C077  F078         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  2979  000DB4  0100               	movlb	0	; () banked
  2980  000DB6  6B77               	clrf	(??_ScanWithRange+2)& (0+255),b
  2981  000DB8  0100               	movlb	0	; () banked
  2982  000DBA  2777               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  2983  000DBC  0E00               	movlw	0
  2984  000DBE  2378               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  2985  000DC0  0100               	movlb	0	; () banked
  2986  000DC2  5175               	movf	??_ScanWithRange& (0+255),w,b
  2987  000DC4  0100               	movlb	0	; () banked
  2988  000DC6  5D77               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  2989  000DC8  0100               	movlb	0	; () banked
  2990  000DCA  5178               	movf	(??_ScanWithRange+3)& (0+255),w,b
  2991  000DCC  0A80               	xorlw	128
  2992  000DCE  0100               	movlb	0	; () banked
  2993  000DD0  6F79               	movwf	(??_ScanWithRange+4)& (0+255),b
  2994  000DD2  0100               	movlb	0	; () banked
  2995  000DD4  5176               	movf	(??_ScanWithRange+1)& (0+255),w,b
  2996  000DD6  0A80               	xorlw	128
  2997  000DD8  0100               	movlb	0	; () banked
  2998  000DDA  5979               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  2999  000DDC  A0D8               	btfss	status,0,c
  3000  000DDE  D7D1               	goto	l3098
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;Movement.c: 182: }
  3004                           ;Movement.c: 183: T0CONbits.TMR0ON=0;
  3005  000DE0  9ED5               	bcf	4053,7,c	;volatile
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;Movement.c: 184: stop(mL,mR);
  3009  000DE2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3010  000DE6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3011  000DEA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3012  000DEE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3013  000DF2  EC67  F009         	call	_stop	;wreg free
  3014  000DF6                     l3104:
  3015                           
  3016                           ;Movement.c: 185: return 2;
  3017  000DF6  0E02               	movlw	2
  3018  000DF8  0012               	return	
  3019  000DFA                     l226:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;Movement.c: 188: T0CONbits.TMR0ON=0;
  3023  000DFA  9ED5               	bcf	4053,7,c	;volatile
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;Movement.c: 189: stop(mL,mR);
  3027  000DFC  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3028  000E00  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3029  000E04  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3030  000E08  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3031  000E0C  EC67  F009         	call	_stop	;wreg free
  3032  000E10  D7F2               	goto	l3104
  3033  000E12                     l3116:
  3034  000E12  0100               	movlb	0	; () banked
  3035  000E14  4BA5               	infsnz	ScanWithRange@i& (0+255),f,b
  3036  000E16  2BA6               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3037  000E18                     l3118:
  3038                           
  3039                           ; BSR set to: 0
  3040  000E18  0100               	movlb	0	; () banked
  3041  000E1A  51A5               	movf	ScanWithRange@i& (0+255),w,b
  3042  000E1C  0100               	movlb	0	; () banked
  3043  000E1E  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3044  000E20  0100               	movlb	0	; () banked
  3045  000E22  51A6               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3046  000E24  0100               	movlb	0	; () banked
  3047  000E26  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3048  000E28  B0D8               	btfsc	status,0,c
  3049  000E2A  D6FE               	goto	l3054
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;Movement.c: 191: }
  3053                           ;Movement.c: 192: }
  3054                           ;Movement.c: 193: }
  3055                           ;Movement.c: 196: turnRight(mL,mR, 100);
  3056                           
  3057                           ; BSR set to: 0
  3058  000E2C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3059  000E30  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3060  000E34  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3061  000E38  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3062  000E3C  0E64               	movlw	100
  3063  000E3E  0100               	movlb	0	; () banked
  3064  000E40  6F6B               	movwf	turnRight@power& (0+255),b
  3065  000E42  EC82  F00B         	call	_turnRight	;wreg free
  3066                           
  3067                           ;Movement.c: 197: delay_tenth_s(2);
  3068  000E46  0E02               	movlw	2
  3069  000E48  ECC0  F00B         	call	_delay_tenth_s
  3070                           
  3071                           ;Movement.c: 198: stop(mL,mR);
  3072  000E4C  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3073  000E50  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3074  000E54  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3075  000E58  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3076  000E5C  EC67  F009         	call	_stop	;wreg free
  3077                           
  3078                           ;Movement.c: 199: return -1;
  3079  000E60  0EFF               	movlw	255
  3080  000E62  0012               	return	
  3081  000E64                     __end_of_ScanWithRange:
  3082                           	opt stack 0
  3083                           tblptru	equ	0xFF8
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           intcon	equ	0xFF2
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           fsr1h	equ	0xFE2
  3091                           fsr1l	equ	0xFE1
  3092                           indf2	equ	0xFDF
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _turnRight *****************
  3098 ;; Defined at:
  3099 ;;		line 98 in file "dc_motor.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3102 ;;		 -> main@mL(9), 
  3103 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3104 ;;		 -> main@mR(9), 
  3105 ;;  power           1   11[BANK0 ] unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3117 ;;      Params:         0       5       0       0
  3118 ;;      Locals:         0       0       0       0
  3119 ;;      Temps:          0       0       0       0
  3120 ;;      Totals:         0       5       0       0
  3121 ;;Total ram usage:        5 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    6
  3124 ;; This function calls:
  3125 ;;		_fullSpeedAhead
  3126 ;; This function is called by:
  3127 ;;		_ScanWithRange
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text10
  3132  001704                     __ptext10:
  3133                           	opt stack 0
  3134  001704                     _turnRight:
  3135                           	opt stack 23
  3136                           
  3137                           ;dc_motor.c: 102: mL->direction=0;
  3138                           
  3139                           ;incstack = 0
  3140  001704  0100               	movlb	0	; () banked
  3141  001706  EE20 F001          	lfsr	2,1
  3142  00170A  5167               	movf	turnRight@mL& (0+255),w,b
  3143  00170C  26D9               	addwf	fsr2l,f,c
  3144  00170E  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3145  001710  22DA               	addwfc	fsr2h,f,c
  3146  001712  0E00               	movlw	0
  3147  001714  6EDF               	movwf	indf2,c
  3148                           
  3149                           ;dc_motor.c: 103: mR->direction=1;
  3150  001716  0100               	movlb	0	; () banked
  3151  001718  EE20 F001          	lfsr	2,1
  3152  00171C  5169               	movf	turnRight@mR& (0+255),w,b
  3153  00171E  26D9               	addwf	fsr2l,f,c
  3154  001720  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3155  001722  22DA               	addwfc	fsr2h,f,c
  3156  001724  0E01               	movlw	1
  3157  001726  6EDF               	movwf	indf2,c
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3161  001728  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3162  00172C  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3163  001730  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3164  001734  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3165  001738  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3166  00173C  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  3167  001740  0012               	return		;funcret
  3168  001742                     __end_of_turnRight:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           intcon	equ	0xFF2
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           indf1	equ	0xFE7
  3177                           fsr1h	equ	0xFE2
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _turnLeft *****************
  3185 ;; Defined at:
  3186 ;;		line 87 in file "dc_motor.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3189 ;;		 -> main@mL(9), 
  3190 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3191 ;;		 -> main@mR(9), 
  3192 ;;  power           1   11[BANK0 ] unsigned char 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3204 ;;      Params:         0       5       0       0
  3205 ;;      Locals:         0       0       0       0
  3206 ;;      Temps:          0       0       0       0
  3207 ;;      Totals:         0       5       0       0
  3208 ;;Total ram usage:        5 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    6
  3211 ;; This function calls:
  3212 ;;		_fullSpeedAhead
  3213 ;; This function is called by:
  3214 ;;		_ScanWithRange
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text11
  3219  001742                     __ptext11:
  3220                           	opt stack 0
  3221  001742                     _turnLeft:
  3222                           	opt stack 23
  3223                           
  3224                           ;dc_motor.c: 91: mL->direction=1;
  3225                           
  3226                           ;incstack = 0
  3227  001742  0100               	movlb	0	; () banked
  3228  001744  EE20 F001          	lfsr	2,1
  3229  001748  5167               	movf	turnLeft@mL& (0+255),w,b
  3230  00174A  26D9               	addwf	fsr2l,f,c
  3231  00174C  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3232  00174E  22DA               	addwfc	fsr2h,f,c
  3233  001750  0E01               	movlw	1
  3234  001752  6EDF               	movwf	indf2,c
  3235                           
  3236                           ;dc_motor.c: 92: mR->direction=0;
  3237  001754  0100               	movlb	0	; () banked
  3238  001756  EE20 F001          	lfsr	2,1
  3239  00175A  5169               	movf	turnLeft@mR& (0+255),w,b
  3240  00175C  26D9               	addwf	fsr2l,f,c
  3241  00175E  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3242  001760  22DA               	addwfc	fsr2h,f,c
  3243  001762  0E00               	movlw	0
  3244  001764  6EDF               	movwf	indf2,c
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3248  001766  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3249  00176A  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3250  00176E  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3251  001772  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3252  001776  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3253  00177A  EC38  F00A         	call	_fullSpeedAhead	;wreg free
  3254  00177E  0012               	return		;funcret
  3255  001780                     __end_of_turnLeft:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           indf1	equ	0xFE7
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _fullSpeedAhead *****************
  3272 ;; Defined at:
  3273 ;;		line 108 in file "dc_motor.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3276 ;;		 -> main@mL(9), 
  3277 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3278 ;;		 -> main@mR(9), 
  3279 ;;  power           1    6[BANK0 ] unsigned char 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;		None               void
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3291 ;;      Params:         0       5       0       0
  3292 ;;      Locals:         0       0       0       0
  3293 ;;      Temps:          1       0       0       0
  3294 ;;      Totals:         1       5       0       0
  3295 ;;Total ram usage:        6 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    5
  3298 ;; This function calls:
  3299 ;;		_setMotorPWM
  3300 ;; This function is called by:
  3301 ;;		_turnLeft
  3302 ;;		_turnRight
  3303 ;;		_fullSpeedBack
  3304 ;;		_main
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text12
  3309  001470                     __ptext12:
  3310                           	opt stack 0
  3311  001470                     _fullSpeedAhead:
  3312                           	opt stack 24
  3313                           
  3314                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3315                           
  3316                           ;incstack = 0
  3317  001470  D02C               	goto	l65
  3318  001472                     l2828:
  3319                           
  3320                           ;dc_motor.c: 112: if(mL->power<power){
  3321  001472  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3322  001476  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3323  00147A  0100               	movlb	0	; () banked
  3324  00147C  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3325  00147E  5CDE               	subwf	postinc2,w,c
  3326  001480  B0D8               	btfsc	status,0,c
  3327  001482  D005               	goto	l2832
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;dc_motor.c: 113: mL->power++;
  3331  001484  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3332  001488  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3333  00148C  2ADF               	incf	indf2,f,c
  3334  00148E                     l2832:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;dc_motor.c: 114: }
  3338                           ;dc_motor.c: 115: if(mR->power<power){
  3339  00148E  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3340  001492  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3341  001496  0100               	movlb	0	; () banked
  3342  001498  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3343  00149A  5CDE               	subwf	postinc2,w,c
  3344  00149C  B0D8               	btfsc	status,0,c
  3345  00149E  D005               	goto	l2836
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;dc_motor.c: 116: mR->power++;
  3349  0014A0  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3350  0014A4  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3351  0014A8  2ADF               	incf	indf2,f,c
  3352  0014AA                     l2836:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;dc_motor.c: 117: }
  3356                           ;dc_motor.c: 118: setMotorPWM(mL);
  3357  0014AA  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3358  0014AE  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3359  0014B2  EC32  F007         	call	_setMotorPWM	;wreg free
  3360                           
  3361                           ;dc_motor.c: 119: setMotorPWM(mR);
  3362  0014B6  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3363  0014BA  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3364  0014BE  EC32  F007         	call	_setMotorPWM	;wreg free
  3365                           
  3366                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3367  0014C2  0E21               	movlw	33
  3368  0014C4                     u2917:
  3369  0014C4  2EE8               	decfsz	wreg,f,c
  3370  0014C6  D7FE               	goto	u2917
  3371  0014C8  F000               	nop	
  3372  0014CA                     l65:
  3373  0014CA  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3374  0014CE  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3375  0014D2  0100               	movlb	0	; () banked
  3376  0014D4  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3377  0014D6  5CDE               	subwf	postinc2,w,c
  3378  0014D8  A0D8               	btfss	status,0,c
  3379  0014DA  D7CB               	goto	l2828
  3380                           
  3381                           ; BSR set to: 0
  3382  0014DC  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3383  0014E0  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3384  0014E4  0100               	movlb	0	; () banked
  3385  0014E6  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3386  0014E8  5CDE               	subwf	postinc2,w,c
  3387  0014EA  B0D8               	btfsc	status,0,c
  3388  0014EC  0012               	return	
  3389  0014EE  D7C1               	goto	l2828
  3390  0014F0                     __end_of_fullSpeedAhead:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           postinc0	equ	0xFEE
  3397                           wreg	equ	0xFE8
  3398                           indf1	equ	0xFE7
  3399                           fsr1h	equ	0xFE2
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _delay_tenth_s *****************
  3408 ;; Defined at:
  3409 ;;		line 32 in file "Movement.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  tenth_second    1    wreg     unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3414 ;;  i               2   37[COMRAM] unsigned int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;		None               void
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3424 ;;      Params:         0       0       0       0
  3425 ;;      Locals:         3       0       0       0
  3426 ;;      Temps:          1       0       0       0
  3427 ;;      Totals:         4       0       0       0
  3428 ;;Total ram usage:        4 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_ScanWithRange
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text13
  3440  001780                     __ptext13:
  3441                           	opt stack 0
  3442  001780                     _delay_tenth_s:
  3443                           	opt stack 27
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;incstack = 0
  3447                           ;delay_tenth_s@tenth_seconds stored from wreg
  3448  001780  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3449                           
  3450                           ;Movement.c: 33: unsigned int i=0;
  3451  001782  0E00               	movlw	0
  3452  001784  6E27               	movwf	delay_tenth_s@i+1,c
  3453  001786  0E00               	movlw	0
  3454  001788  6E26               	movwf	delay_tenth_s@i,c
  3455                           
  3456                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3457  00178A  0E00               	movlw	0
  3458  00178C  6E27               	movwf	delay_tenth_s@i+1,c
  3459  00178E  0E01               	movlw	1
  3460  001790  6E26               	movwf	delay_tenth_s@i,c
  3461  001792  D009               	goto	l2172
  3462  001794                     l2168:
  3463                           
  3464                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3465  001794  0E82               	movlw	130
  3466  001796  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3467  001798  0EDE               	movlw	222
  3468  00179A                     u2927:
  3469  00179A  2EE8               	decfsz	wreg,f,c
  3470  00179C  D7FE               	goto	u2927
  3471  00179E  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3472  0017A0  D7FC               	goto	u2927
  3473  0017A2  4A26               	infsnz	delay_tenth_s@i,f,c
  3474  0017A4  2A27               	incf	delay_tenth_s@i+1,f,c
  3475  0017A6                     l2172:
  3476  0017A6  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3477  0017A8  0D02               	mullw	2
  3478  0017AA  5026               	movf	delay_tenth_s@i,w,c
  3479  0017AC  5CF3               	subwf	prodl,w,c
  3480  0017AE  5027               	movf	delay_tenth_s@i+1,w,c
  3481  0017B0  58F4               	subwfb	prodh,w,c
  3482  0017B2  A0D8               	btfss	status,0,c
  3483  0017B4  0012               	return	
  3484  0017B6  D7EE               	goto	l2168
  3485  0017B8                     __end_of_delay_tenth_s:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           indf1	equ	0xFE7
  3494                           fsr1h	equ	0xFE2
  3495                           fsr1l	equ	0xFE1
  3496                           indf2	equ	0xFDF
  3497                           postinc2	equ	0xFDE
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _ScanIR *****************
  3503 ;; Defined at:
  3504 ;;		line 45 in file "Movement.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3507 ;;		 -> main@mL(9), 
  3508 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3509 ;;		 -> main@mR(9), 
  3510 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3511 ;;		 -> main@Move(1), 
  3512 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3513 ;;		 -> main@MoveTime(100), 
  3514 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3515 ;;		 -> main@MoveType(100), 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3518 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3519 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      unsigned char 
  3522 ;; Registers used:
  3523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3529 ;;      Params:         0      10       0       0
  3530 ;;      Locals:         0      46       0       0
  3531 ;;      Temps:          1       0       0       0
  3532 ;;      Totals:         1      56       0       0
  3533 ;;Total ram usage:       57 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    7
  3536 ;; This function calls:
  3537 ;;		_LCD_String
  3538 ;;		_SendLCD
  3539 ;;		_SetLine
  3540 ;;		_grabLeftIR
  3541 ;;		_grabRightIR
  3542 ;;		_sprintf
  3543 ;;		_stop
  3544 ;; This function is called by:
  3545 ;;		_main
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text14
  3550  000F9E                     __ptext14:
  3551                           	opt stack 0
  3552  000F9E                     _ScanIR:
  3553                           	opt stack 23
  3554                           
  3555                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3556                           
  3557                           ;incstack = 0
  3558  000F9E  C0BC  F0A1         	movff	ScanIR@F3882,ScanIR@SensorResult
  3559  000FA2  C0BD  F0A2         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3560  000FA6  C0BE  F0A3         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3561  000FAA  C0BF  F0A4         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3562                           
  3563                           ;Movement.c: 50: char buf[40];
  3564                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3565  000FAE  0E09               	movlw	9
  3566  000FB0  0100               	movlb	0	; () banked
  3567  000FB2  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3568  000FB4  0EC4               	movlw	196
  3569  000FB6  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3573  000FB8  ECB1  F00A         	call	_grabLeftIR	;wreg free
  3574  000FBC  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3575  000FC0  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3576                           
  3577                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3578  000FC4  EC78  F00A         	call	_grabRightIR	;wreg free
  3579  000FC8  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3580  000FCC  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3581                           
  3582                           ;Movement.c: 62: CAP1BUFH=0;
  3583  000FD0  0E00               	movlw	0
  3584  000FD2  6E69               	movwf	3945,c	;volatile
  3585                           
  3586                           ;Movement.c: 63: CAP1BUFL=0;
  3587  000FD4  0E00               	movlw	0
  3588  000FD6  6E68               	movwf	3944,c	;volatile
  3589                           
  3590                           ;Movement.c: 64: CAP2BUFH=0;
  3591  000FD8  0E00               	movlw	0
  3592  000FDA  6E67               	movwf	3943,c	;volatile
  3593                           
  3594                           ;Movement.c: 65: CAP2BUFL=0;
  3595  000FDC  0E00               	movlw	0
  3596  000FDE  6E66               	movwf	3942,c	;volatile
  3597                           
  3598                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3599  000FE0  0E00               	movlw	0
  3600  000FE2  6E28               	movwf	SendLCD@type,c
  3601  000FE4  0E01               	movlw	1
  3602  000FE6  EC29  F00C         	call	_SendLCD
  3603                           
  3604                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3605  000FEA  0E21               	movlw	33
  3606  000FEC                     u2937:
  3607  000FEC  2EE8               	decfsz	wreg,f,c
  3608  000FEE  D7FE               	goto	u2937
  3609  000FF0  F000               	nop	
  3610                           
  3611                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3612  000FF2  0E00               	movlw	0
  3613  000FF4  6E28               	movwf	SendLCD@type,c
  3614  000FF6  0E02               	movlw	2
  3615  000FF8  EC29  F00C         	call	_SendLCD
  3616                           
  3617                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3618  000FFC  0E06               	movlw	6
  3619  000FFE  6E39               	movwf	??_ScanIR& (0+255),c
  3620  001000  0E30               	movlw	48
  3621  001002                     u2947:
  3622  001002  2EE8               	decfsz	wreg,f,c
  3623  001004  D7FE               	goto	u2947
  3624  001006  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3625  001008  D7FC               	goto	u2947
  3626  00100A  D000               	nop2	
  3627                           
  3628                           ;Movement.c: 72: SetLine(1);
  3629  00100C  0E01               	movlw	1
  3630  00100E  EC11  F00C         	call	_SetLine
  3631                           
  3632                           ;Movement.c: 73: LCD_String("     ScanIR");
  3633  001012  0E2D               	movlw	low STR_1
  3634  001014  6E2A               	movwf	LCD_String@string,c
  3635  001016  0E03               	movlw	high STR_1
  3636  001018  6E2B               	movwf	LCD_String@string+1,c
  3637  00101A  ECEA  F00A         	call	_LCD_String	;wreg free
  3638                           
  3639                           ;Movement.c: 74: SetLine(2);
  3640  00101E  0E02               	movlw	2
  3641  001020  EC11  F00C         	call	_SetLine
  3642                           
  3643                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3644  001024  0E77               	movlw	low ScanIR@buf
  3645  001026  6E30               	movwf	sprintf@sp,c
  3646  001028  0E00               	movlw	high ScanIR@buf
  3647  00102A  6E31               	movwf	sprintf@sp+1,c
  3648  00102C  0E0C               	movlw	low (STR_6+1)
  3649  00102E  6E32               	movwf	sprintf@f,c
  3650  001030  0E03               	movlw	high (STR_6+1)
  3651  001032  6E33               	movwf	sprintf@f+1,c
  3652  001034  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3653  001038  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3654  00103C  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3655  001040  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3656  001044  EC39  F004         	call	_sprintf	;wreg free
  3657                           
  3658                           ;Movement.c: 76: LCD_String(buf);
  3659  001048  0E77               	movlw	low ScanIR@buf
  3660  00104A  6E2A               	movwf	LCD_String@string,c
  3661  00104C  0E00               	movlw	high ScanIR@buf
  3662  00104E  6E2B               	movwf	LCD_String@string+1,c
  3663  001050  ECEA  F00A         	call	_LCD_String	;wreg free
  3664                           
  3665                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3666                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3667  001054  0100               	movlb	0	; () banked
  3668  001056  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3669  001058  0100               	movlb	0	; () banked
  3670  00105A  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3671  00105C  0100               	movlb	0	; () banked
  3672  00105E  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3673  001060  0100               	movlb	0	; () banked
  3674  001062  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3675  001064  B0D8               	btfsc	status,0,c
  3676  001066  D00C               	goto	l3028
  3677                           
  3678                           ; BSR set to: 0
  3679  001068  0100               	movlb	0	; () banked
  3680  00106A  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3681  00106C  0100               	movlb	0	; () banked
  3682  00106E  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3683  001070  0100               	movlb	0	; () banked
  3684  001072  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3685  001074  0100               	movlb	0	; () banked
  3686  001076  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3687  001078  B0D8               	btfsc	status,0,c
  3688  00107A  D002               	goto	l3028
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Movement.c: 82: return 2;
  3692  00107C  0E02               	movlw	2
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;Movement.c: 83: } else {
  3696                           
  3697                           ; BSR set to: 0
  3698  00107E  0012               	return	
  3699  001080                     l3028:
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;Movement.c: 84: stop(mL,mR);
  3703  001080  C06D  F062         	movff	ScanIR@mL,stop@mL
  3704  001084  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3705  001088  C06F  F064         	movff	ScanIR@mR,stop@mR
  3706  00108C  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3707  001090  EC67  F009         	call	_stop	;wreg free
  3708                           
  3709                           ;Movement.c: 85: return 0;
  3710  001094  0E00               	movlw	0
  3711  001096  0012               	return	
  3712  001098                     __end_of_ScanIR:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           intcon	equ	0xFF2
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           indf1	equ	0xFE7
  3721                           fsr1h	equ	0xFE2
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _stop *****************
  3730 ;; Defined at:
  3731 ;;		line 67 in file "dc_motor.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3734 ;;		 -> main@mL(9), 
  3735 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3736 ;;		 -> main@mR(9), 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;		None               void
  3741 ;; Registers used:
  3742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3748 ;;      Params:         0       4       0       0
  3749 ;;      Locals:         0       0       0       0
  3750 ;;      Temps:          0       0       0       0
  3751 ;;      Totals:         0       4       0       0
  3752 ;;Total ram usage:        4 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    5
  3755 ;; This function calls:
  3756 ;;		_setMotorPWM
  3757 ;; This function is called by:
  3758 ;;		_ScanIR
  3759 ;;		_ScanWithRange
  3760 ;;		_main
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text15
  3765  0012CE                     __ptext15:
  3766                           	opt stack 0
  3767  0012CE                     _stop:
  3768                           	opt stack 25
  3769                           
  3770                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3771                           
  3772                           ;incstack = 0
  3773  0012CE  D028               	goto	l2860
  3774  0012D0                     l2846:
  3775                           
  3776                           ;dc_motor.c: 71: if(mL->power>0){
  3777  0012D0  C062  FFD9         	movff	stop@mL,fsr2l
  3778  0012D4  C063  FFDA         	movff	stop@mL+1,fsr2h
  3779  0012D8  50DF               	movf	indf2,w,c
  3780  0012DA  B4D8               	btfsc	status,2,c
  3781  0012DC  D005               	goto	l2850
  3782                           
  3783                           ;dc_motor.c: 72: mL->power--;
  3784  0012DE  C062  FFD9         	movff	stop@mL,fsr2l
  3785  0012E2  C063  FFDA         	movff	stop@mL+1,fsr2h
  3786  0012E6  06DF               	decf	indf2,f,c
  3787  0012E8                     l2850:
  3788                           
  3789                           ;dc_motor.c: 73: }
  3790                           ;dc_motor.c: 74: if(mR->power>0){
  3791  0012E8  C064  FFD9         	movff	stop@mR,fsr2l
  3792  0012EC  C065  FFDA         	movff	stop@mR+1,fsr2h
  3793  0012F0  50DF               	movf	indf2,w,c
  3794  0012F2  B4D8               	btfsc	status,2,c
  3795  0012F4  D005               	goto	l2854
  3796                           
  3797                           ;dc_motor.c: 75: mR->power--;
  3798  0012F6  C064  FFD9         	movff	stop@mR,fsr2l
  3799  0012FA  C065  FFDA         	movff	stop@mR+1,fsr2h
  3800  0012FE  06DF               	decf	indf2,f,c
  3801  001300                     l2854:
  3802                           
  3803                           ;dc_motor.c: 76: }
  3804                           ;dc_motor.c: 77: setMotorPWM(mL);
  3805  001300  C062  F032         	movff	stop@mL,setMotorPWM@m
  3806  001304  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3807  001308  EC32  F007         	call	_setMotorPWM	;wreg free
  3808                           
  3809                           ;dc_motor.c: 78: setMotorPWM(mR);
  3810  00130C  C064  F032         	movff	stop@mR,setMotorPWM@m
  3811  001310  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3812  001314  EC32  F007         	call	_setMotorPWM	;wreg free
  3813                           
  3814                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3815  001318  0E21               	movlw	33
  3816  00131A                     u2957:
  3817  00131A  2EE8               	decfsz	wreg,f,c
  3818  00131C  D7FE               	goto	u2957
  3819  00131E  F000               	nop	
  3820  001320                     l2860:
  3821  001320  C062  FFD9         	movff	stop@mL,fsr2l
  3822  001324  C063  FFDA         	movff	stop@mL+1,fsr2h
  3823  001328  50DF               	movf	indf2,w,c
  3824  00132A  A4D8               	btfss	status,2,c
  3825  00132C  D7D1               	goto	l2846
  3826  00132E  C064  FFD9         	movff	stop@mR,fsr2l
  3827  001332  C065  FFDA         	movff	stop@mR+1,fsr2h
  3828  001336  50DF               	movf	indf2,w,c
  3829  001338  A4D8               	btfss	status,2,c
  3830  00133A  D7CA               	goto	l2846
  3831                           
  3832                           ;dc_motor.c: 80: }
  3833                           ;dc_motor.c: 81: mL->direction=1;
  3834  00133C  0100               	movlb	0	; () banked
  3835  00133E  EE20 F001          	lfsr	2,1
  3836  001342  5162               	movf	stop@mL& (0+255),w,b
  3837  001344  26D9               	addwf	fsr2l,f,c
  3838  001346  5163               	movf	(stop@mL+1)& (0+255),w,b
  3839  001348  22DA               	addwfc	fsr2h,f,c
  3840  00134A  0E01               	movlw	1
  3841  00134C  6EDF               	movwf	indf2,c
  3842                           
  3843                           ;dc_motor.c: 82: mR->direction=1;
  3844  00134E  0100               	movlb	0	; () banked
  3845  001350  EE20 F001          	lfsr	2,1
  3846  001354  5164               	movf	stop@mR& (0+255),w,b
  3847  001356  26D9               	addwf	fsr2l,f,c
  3848  001358  5165               	movf	(stop@mR+1)& (0+255),w,b
  3849  00135A  22DA               	addwfc	fsr2h,f,c
  3850  00135C  0E01               	movlw	1
  3851  00135E  6EDF               	movwf	indf2,c
  3852                           
  3853                           ; BSR set to: 0
  3854  001360  0012               	return		;funcret
  3855  001362                     __end_of_stop:
  3856                           	opt stack 0
  3857                           tblptru	equ	0xFF8
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           intcon	equ	0xFF2
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           indf1	equ	0xFE7
  3864                           fsr1h	equ	0xFE2
  3865                           fsr1l	equ	0xFE1
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _setMotorPWM *****************
  3873 ;; Defined at:
  3874 ;;		line 26 in file "dc_motor.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3877 ;;		 -> main@mR(9), main@mL(9), 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  PWMduty         2    0[BANK0 ] int 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3889 ;;      Params:         2       0       0       0
  3890 ;;      Locals:         0       2       0       0
  3891 ;;      Temps:          5       0       0       0
  3892 ;;      Totals:         7       2       0       0
  3893 ;;Total ram usage:        9 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    4
  3896 ;; This function calls:
  3897 ;;		___awdiv
  3898 ;;		___wmul
  3899 ;; This function is called by:
  3900 ;;		_stop
  3901 ;;		_fullSpeedAhead
  3902 ;;		_setMotorFullSpeed
  3903 ;;		_stopMotor
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text16
  3908  000E64                     __ptext16:
  3909                           	opt stack 0
  3910  000E64                     _setMotorPWM:
  3911                           	opt stack 25
  3912                           
  3913                           ;dc_motor.c: 28: int PWMduty;
  3914                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;incstack = 0
  3918  000E64  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3919  000E68  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3920  000E6C  50DF               	movf	indf2,w,c
  3921  000E6E  6E34               	movwf	??_setMotorPWM& (0+255),c
  3922  000E70  5034               	movf	??_setMotorPWM,w,c
  3923  000E72  6E24               	movwf	___wmul@multiplier,c
  3924  000E74  6A25               	clrf	___wmul@multiplier+1,c
  3925  000E76  EE20 F007          	lfsr	2,7
  3926  000E7A  5032               	movf	setMotorPWM@m,w,c
  3927  000E7C  26D9               	addwf	fsr2l,f,c
  3928  000E7E  5033               	movf	setMotorPWM@m+1,w,c
  3929  000E80  22DA               	addwfc	fsr2h,f,c
  3930  000E82  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3931  000E86  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3932  000E8A  EC69  F00C         	call	___wmul	;wreg free
  3933  000E8E  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3934  000E92  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3935  000E96  0E00               	movlw	0
  3936  000E98  6E2D               	movwf	___awdiv@divisor+1,c
  3937  000E9A  0E64               	movlw	100
  3938  000E9C  6E2C               	movwf	___awdiv@divisor,c
  3939  000E9E  ECF6  F009         	call	___awdiv	;wreg free
  3940  000EA2  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3941  000EA6  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3942                           
  3943                           ;dc_motor.c: 32: if (m->direction)
  3944  000EAA  EE20 F001          	lfsr	2,1
  3945  000EAE  5032               	movf	setMotorPWM@m,w,c
  3946  000EB0  26D9               	addwf	fsr2l,f,c
  3947  000EB2  5033               	movf	setMotorPWM@m+1,w,c
  3948  000EB4  22DA               	addwfc	fsr2h,f,c
  3949  000EB6  50DF               	movf	indf2,w,c
  3950  000EB8  B4D8               	btfsc	status,2,c
  3951  000EBA  D02E               	goto	l2824
  3952                           
  3953                           ;dc_motor.c: 33: {
  3954                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3955  000EBC  EE20 F006          	lfsr	2,6
  3956  000EC0  5032               	movf	setMotorPWM@m,w,c
  3957  000EC2  26D9               	addwf	fsr2l,f,c
  3958  000EC4  5033               	movf	setMotorPWM@m+1,w,c
  3959  000EC6  22DA               	addwfc	fsr2h,f,c
  3960  000EC8  50DF               	movf	indf2,w,c
  3961  000ECA  6E34               	movwf	??_setMotorPWM& (0+255),c
  3962  000ECC  0E01               	movlw	1
  3963  000ECE  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3964  000ED0  2A34               	incf	??_setMotorPWM,f,c
  3965  000ED2  D002               	goto	u2204
  3966  000ED4                     u2205:
  3967  000ED4  90D8               	bcf	status,0,c
  3968  000ED6  3635               	rlcf	??_setMotorPWM+1,f,c
  3969  000ED8                     u2204:
  3970  000ED8  2E34               	decfsz	??_setMotorPWM,f,c
  3971  000EDA  D7FC               	goto	u2205
  3972  000EDC  5035               	movf	??_setMotorPWM+1,w,c
  3973  000EDE  108A               	iorwf	3978,w,c	;volatile
  3974  000EE0  6E8A               	movwf	3978,c	;volatile
  3975                           
  3976                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3977  000EE2  EE20 F007          	lfsr	2,7
  3978  000EE6  5032               	movf	setMotorPWM@m,w,c
  3979  000EE8  26D9               	addwf	fsr2l,f,c
  3980  000EEA  5033               	movf	setMotorPWM@m+1,w,c
  3981  000EEC  22DA               	addwfc	fsr2h,f,c
  3982  000EEE  CFDE F034          	movff	postinc2,??_setMotorPWM
  3983  000EF2  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3984  000EF6  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3985  000EFA  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3986  000EFE  1E36               	comf	??_setMotorPWM+2,f,c
  3987  000F00  1E37               	comf	??_setMotorPWM+3,f,c
  3988  000F02  4A36               	infsnz	??_setMotorPWM+2,f,c
  3989  000F04  2A37               	incf	??_setMotorPWM+3,f,c
  3990  000F06  5034               	movf	??_setMotorPWM,w,c
  3991  000F08  2436               	addwf	??_setMotorPWM+2,w,c
  3992  000F0A  0100               	movlb	0	; () banked
  3993  000F0C  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3994  000F0E  5035               	movf	??_setMotorPWM+1,w,c
  3995  000F10  2037               	addwfc	??_setMotorPWM+3,w,c
  3996  000F12  0100               	movlb	0	; () banked
  3997  000F14  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3998                           
  3999                           ;dc_motor.c: 36: }
  4000  000F16  D014               	goto	l35
  4001  000F18                     l2824:
  4002                           
  4003                           ;dc_motor.c: 37: else
  4004                           ;dc_motor.c: 38: {
  4005                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4006  000F18  EE20 F006          	lfsr	2,6
  4007  000F1C  5032               	movf	setMotorPWM@m,w,c
  4008  000F1E  26D9               	addwf	fsr2l,f,c
  4009  000F20  5033               	movf	setMotorPWM@m+1,w,c
  4010  000F22  22DA               	addwfc	fsr2h,f,c
  4011  000F24  50DF               	movf	indf2,w,c
  4012  000F26  6E34               	movwf	??_setMotorPWM& (0+255),c
  4013  000F28  0E01               	movlw	1
  4014  000F2A  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4015  000F2C  2A34               	incf	??_setMotorPWM,f,c
  4016  000F2E  D002               	goto	u2214
  4017  000F30                     u2215:
  4018  000F30  90D8               	bcf	status,0,c
  4019  000F32  3635               	rlcf	??_setMotorPWM+1,f,c
  4020  000F34                     u2214:
  4021  000F34  2E34               	decfsz	??_setMotorPWM,f,c
  4022  000F36  D7FC               	goto	u2215
  4023  000F38  5035               	movf	??_setMotorPWM+1,w,c
  4024  000F3A  0AFF               	xorlw	255
  4025  000F3C  148A               	andwf	3978,w,c	;volatile
  4026  000F3E  6E8A               	movwf	3978,c	;volatile
  4027  000F40                     l35:
  4028                           
  4029                           ;dc_motor.c: 40: }
  4030                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4031  000F40  EE20 F002          	lfsr	2,2
  4032  000F44  5032               	movf	setMotorPWM@m,w,c
  4033  000F46  26D9               	addwf	fsr2l,f,c
  4034  000F48  5033               	movf	setMotorPWM@m+1,w,c
  4035  000F4A  22DA               	addwfc	fsr2h,f,c
  4036  000F4C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4037  000F50  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4038  000F54  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4039  000F58  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4040  000F5C  0100               	movlb	0	; () banked
  4041  000F5E  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4042  000F60  46E8               	rlncf	wreg,f,c
  4043  000F62  0BFC               	andlw	252
  4044  000F64  6EDF               	movwf	indf2,c
  4045                           
  4046                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4047  000F66  EE20 F004          	lfsr	2,4
  4048  000F6A  5032               	movf	setMotorPWM@m,w,c
  4049  000F6C  26D9               	addwf	fsr2l,f,c
  4050  000F6E  5033               	movf	setMotorPWM@m+1,w,c
  4051  000F70  22DA               	addwfc	fsr2h,f,c
  4052  000F72  CFDE F034          	movff	postinc2,??_setMotorPWM
  4053  000F76  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4054  000F7A  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4055  000F7E  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4056  000F82  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4057  000F86  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4058  000F8A  0E06               	movlw	6
  4059  000F8C  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4060  000F8E                     u2225:
  4061  000F8E  3437               	rlcf	??_setMotorPWM+3,w,c
  4062  000F90  3237               	rrcf	??_setMotorPWM+3,f,c
  4063  000F92  3236               	rrcf	??_setMotorPWM+2,f,c
  4064  000F94  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4065  000F96  D7FB               	goto	u2225
  4066  000F98  5036               	movf	??_setMotorPWM+2,w,c
  4067  000F9A  6EDF               	movwf	indf2,c
  4068                           
  4069                           ; BSR set to: 0
  4070  000F9C  0012               	return		;funcret
  4071  000F9E                     __end_of_setMotorPWM:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           indf1	equ	0xFE7
  4080                           fsr1h	equ	0xFE2
  4081                           fsr1l	equ	0xFE1
  4082                           indf2	equ	0xFDF
  4083                           postinc2	equ	0xFDE
  4084                           postdec2	equ	0xFDD
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function ___awdiv *****************
  4090 ;; Defined at:
  4091 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  dividend        2   41[COMRAM] int 
  4094 ;;  divisor         2   43[COMRAM] int 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  quotient        2   47[COMRAM] int 
  4097 ;;  sign            1   46[COMRAM] unsigned char 
  4098 ;;  counter         1   45[COMRAM] unsigned char 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  2   41[COMRAM] int 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2, status,0
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4108 ;;      Params:         4       0       0       0
  4109 ;;      Locals:         4       0       0       0
  4110 ;;      Temps:          0       0       0       0
  4111 ;;      Totals:         8       0       0       0
  4112 ;;Total ram usage:        8 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    3
  4115 ;; This function calls:
  4116 ;;		Nothing
  4117 ;; This function is called by:
  4118 ;;		_setMotorPWM
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text17
  4123  0013EC                     __ptext17:
  4124                           	opt stack 0
  4125  0013EC                     ___awdiv:
  4126                           	opt stack 25
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;incstack = 0
  4130  0013EC  0E00               	movlw	0
  4131  0013EE  6E2F               	movwf	___awdiv@sign,c
  4132  0013F0  AE2D               	btfss	___awdiv@divisor+1,7,c
  4133  0013F2  D006               	goto	l2782
  4134  0013F4  6C2C               	negf	___awdiv@divisor,c
  4135  0013F6  1E2D               	comf	___awdiv@divisor+1,f,c
  4136  0013F8  B0D8               	btfsc	status,0,c
  4137  0013FA  2A2D               	incf	___awdiv@divisor+1,f,c
  4138  0013FC  0E01               	movlw	1
  4139  0013FE  6E2F               	movwf	___awdiv@sign,c
  4140  001400                     l2782:
  4141  001400  AE2B               	btfss	___awdiv@dividend+1,7,c
  4142  001402  D006               	goto	l2788
  4143  001404  6C2A               	negf	___awdiv@dividend,c
  4144  001406  1E2B               	comf	___awdiv@dividend+1,f,c
  4145  001408  B0D8               	btfsc	status,0,c
  4146  00140A  2A2B               	incf	___awdiv@dividend+1,f,c
  4147  00140C  0E01               	movlw	1
  4148  00140E  1A2F               	xorwf	___awdiv@sign,f,c
  4149  001410                     l2788:
  4150  001410  0E00               	movlw	0
  4151  001412  6E31               	movwf	___awdiv@quotient+1,c
  4152  001414  0E00               	movlw	0
  4153  001416  6E30               	movwf	___awdiv@quotient,c
  4154  001418  502C               	movf	___awdiv@divisor,w,c
  4155  00141A  102D               	iorwf	___awdiv@divisor+1,w,c
  4156  00141C  B4D8               	btfsc	status,2,c
  4157  00141E  D01C               	goto	l2810
  4158  001420  0E01               	movlw	1
  4159  001422  6E2E               	movwf	___awdiv@counter,c
  4160  001424  D004               	goto	l2796
  4161  001426                     l2794:
  4162  001426  90D8               	bcf	status,0,c
  4163  001428  362C               	rlcf	___awdiv@divisor,f,c
  4164  00142A  362D               	rlcf	___awdiv@divisor+1,f,c
  4165  00142C  2A2E               	incf	___awdiv@counter,f,c
  4166  00142E                     l2796:
  4167  00142E  AE2D               	btfss	___awdiv@divisor+1,7,c
  4168  001430  D7FA               	goto	l2794
  4169  001432                     l2798:
  4170  001432  90D8               	bcf	status,0,c
  4171  001434  3630               	rlcf	___awdiv@quotient,f,c
  4172  001436  3631               	rlcf	___awdiv@quotient+1,f,c
  4173  001438  502C               	movf	___awdiv@divisor,w,c
  4174  00143A  5C2A               	subwf	___awdiv@dividend,w,c
  4175  00143C  502D               	movf	___awdiv@divisor+1,w,c
  4176  00143E  582B               	subwfb	___awdiv@dividend+1,w,c
  4177  001440  A0D8               	btfss	status,0,c
  4178  001442  D005               	goto	l2806
  4179  001444  502C               	movf	___awdiv@divisor,w,c
  4180  001446  5E2A               	subwf	___awdiv@dividend,f,c
  4181  001448  502D               	movf	___awdiv@divisor+1,w,c
  4182  00144A  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4183  00144C  8030               	bsf	___awdiv@quotient,0,c
  4184  00144E                     l2806:
  4185  00144E  90D8               	bcf	status,0,c
  4186  001450  322D               	rrcf	___awdiv@divisor+1,f,c
  4187  001452  322C               	rrcf	___awdiv@divisor,f,c
  4188  001454  2E2E               	decfsz	___awdiv@counter,f,c
  4189  001456  D7ED               	goto	l2798
  4190  001458                     l2810:
  4191  001458  502F               	movf	___awdiv@sign,w,c
  4192  00145A  B4D8               	btfsc	status,2,c
  4193  00145C  D004               	goto	l2814
  4194  00145E  6C30               	negf	___awdiv@quotient,c
  4195  001460  1E31               	comf	___awdiv@quotient+1,f,c
  4196  001462  B0D8               	btfsc	status,0,c
  4197  001464  2A31               	incf	___awdiv@quotient+1,f,c
  4198  001466                     l2814:
  4199  001466  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4200  00146A  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4201  00146E  0012               	return	
  4202  001470                     __end_of___awdiv:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           intcon	equ	0xFF2
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           indf1	equ	0xFE7
  4211                           fsr1h	equ	0xFE2
  4212                           fsr1l	equ	0xFE1
  4213                           indf2	equ	0xFDF
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _sprintf *****************
  4221 ;; Defined at:
  4222 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4225 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4226 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4227 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  tmpval          4    0        struct .
  4230 ;;  cp              3    0        PTR const unsigned char 
  4231 ;;  width           2   10[BANK0 ] int 
  4232 ;;  val             2    7[BANK0 ] unsigned int 
  4233 ;;  ap              2    4[BANK0 ] PTR void [1]
  4234 ;;		 -> ?_sprintf(2), 
  4235 ;;  len             2    0        unsigned int 
  4236 ;;  c               1   12[BANK0 ] char 
  4237 ;;  flag            1    9[BANK0 ] unsigned char 
  4238 ;;  prec            1    6[BANK0 ] char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  2   47[COMRAM] int 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4248 ;;      Params:         8       0       0       0
  4249 ;;      Locals:         0       9       0       0
  4250 ;;      Temps:          0       4       0       0
  4251 ;;      Totals:         8      13       0       0
  4252 ;;Total ram usage:       21 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    4
  4255 ;; This function calls:
  4256 ;;		___lwdiv
  4257 ;;		___lwmod
  4258 ;;		___wmul
  4259 ;;		_isdigit
  4260 ;; This function is called by:
  4261 ;;		_ScanIR
  4262 ;;		_ScanWithRange
  4263 ;;		_main
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text18
  4268  000872                     __ptext18:
  4269                           	opt stack 0
  4270  000872                     _sprintf:
  4271                           	opt stack 26
  4272                           
  4273                           ;doprnt.c: 494: va_list ap;
  4274                           ;doprnt.c: 499: signed char c;
  4275                           ;doprnt.c: 501: int width;
  4276                           ;doprnt.c: 506: signed char prec;
  4277                           ;doprnt.c: 508: unsigned char flag;
  4278                           ;doprnt.c: 523: union {
  4279                           ;doprnt.c: 524: unsigned long vd;
  4280                           ;doprnt.c: 525: double integ;
  4281                           ;doprnt.c: 526: } tmpval;
  4282                           ;doprnt.c: 528: unsigned int val;
  4283                           ;doprnt.c: 529: unsigned len;
  4284                           ;doprnt.c: 530: const char * cp;
  4285                           ;doprnt.c: 533: *ap = __va_start();
  4286                           
  4287                           ;incstack = 0
  4288  000872  0E34               	movlw	low (?_sprintf+4)
  4289  000874  0100               	movlb	0	; () banked
  4290  000876  6F64               	movwf	sprintf@ap& (0+255),b
  4291  000878  0E00               	movlw	high (?_sprintf+4)
  4292  00087A  0100               	movlb	0	; () banked
  4293  00087C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4294                           
  4295                           ;doprnt.c: 536: while(c = *f++) {
  4296  00087E  D168               	goto	l2982
  4297  000880                     l2876:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;doprnt.c: 538: if(c != '%')
  4301  000880  0E25               	movlw	37
  4302  000882  0100               	movlb	0	; () banked
  4303  000884  196C               	xorwf	sprintf@c& (0+255),w,b
  4304  000886  B4D8               	btfsc	status,2,c
  4305  000888  D009               	goto	l2882
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;doprnt.c: 540: {
  4309                           ;doprnt.c: 541: ((*sp++ = (c)));
  4310  00088A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4311  00088E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4312  000892  C06C  FFDF         	movff	sprintf@c,indf2
  4313                           
  4314                           ; BSR set to: 0
  4315  000896  4A30               	infsnz	sprintf@sp,f,c
  4316  000898  2A31               	incf	sprintf@sp+1,f,c
  4317                           
  4318                           ;doprnt.c: 542: continue;
  4319  00089A  D15A               	goto	l2982
  4320  00089C                     l2882:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;doprnt.c: 543: }
  4324                           ;doprnt.c: 546: width = 0;
  4325  00089C  0E00               	movlw	0
  4326  00089E  0100               	movlb	0	; () banked
  4327  0008A0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4328  0008A2  0E00               	movlw	0
  4329  0008A4  6F6A               	movwf	sprintf@width& (0+255),b
  4330                           
  4331                           ;doprnt.c: 548: flag = 0;
  4332  0008A6  0E00               	movlw	0
  4333  0008A8  0100               	movlb	0	; () banked
  4334  0008AA  6F69               	movwf	sprintf@flag& (0+255),b
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;doprnt.c: 551: switch(*f) {
  4338                           
  4339                           ;doprnt.c: 550: for(;;) {
  4340  0008AC  D004               	goto	l2888
  4341  0008AE                     l2884:
  4342                           
  4343                           ;doprnt.c: 580: flag |= 0x04;
  4344  0008AE  0100               	movlb	0	; () banked
  4345  0008B0  8569               	bsf	sprintf@flag& (0+255),2,b
  4346                           
  4347                           ;doprnt.c: 581: f++;
  4348  0008B2  4A32               	infsnz	sprintf@f,f,c
  4349  0008B4  2A33               	incf	sprintf@f+1,f,c
  4350  0008B6                     l2888:
  4351  0008B6  C032  FFF6         	movff	sprintf@f,tblptrl
  4352  0008BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4353  0008BE                     	if	0	;tblptru may be non-zero
  4354  0008BE                     	endif
  4355  0008BE                     	if	0	;tblptru may be non-zero
  4356  0008BE                     	endif
  4357  0008BE  0008               	tblrd		*
  4358  0008C0  50F5               	movf	tablat,w,c
  4359                           
  4360                           ; Switch size 1, requested type "space"
  4361                           ; Number of cases is 1, Range of values is 48 to 48
  4362                           ; switch strategies available:
  4363                           ; Name         Instructions Cycles
  4364                           ; simple_byte            4     3 (average)
  4365                           ;	Chosen strategy is simple_byte
  4366  0008C2  0A30               	xorlw	48	; case 48
  4367  0008C4  B4D8               	btfsc	status,2,c
  4368  0008C6  D7F3               	goto	l2884
  4369                           
  4370                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4371                           
  4372                           ;doprnt.c: 586: }
  4373                           
  4374                           ;doprnt.c: 585: break;
  4375  0008C8  C032  FFF6         	movff	sprintf@f,tblptrl
  4376  0008CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4377  0008D0                     	if	0	;tblptru may be non-zero
  4378  0008D0                     	endif
  4379  0008D0                     	if	0	;tblptru may be non-zero
  4380  0008D0                     	endif
  4381  0008D0  0008               	tblrd		*
  4382  0008D2  50F5               	movf	tablat,w,c
  4383  0008D4  EC8D  F00C         	call	_isdigit
  4384  0008D8  A0D8               	btfss	status,0,c
  4385  0008DA  D03E               	goto	l2904
  4386                           
  4387                           ;doprnt.c: 598: width = 0;
  4388  0008DC  0E00               	movlw	0
  4389  0008DE  0100               	movlb	0	; () banked
  4390  0008E0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4391  0008E2  0E00               	movlw	0
  4392  0008E4  6F6A               	movwf	sprintf@width& (0+255),b
  4393  0008E6                     l2894:
  4394                           
  4395                           ;doprnt.c: 600: width *= 10;
  4396  0008E6  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4397  0008EA  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4398  0008EE  0E00               	movlw	0
  4399  0008F0  6E27               	movwf	___wmul@multiplicand+1,c
  4400  0008F2  0E0A               	movlw	10
  4401  0008F4  6E26               	movwf	___wmul@multiplicand,c
  4402  0008F6  EC69  F00C         	call	___wmul	;wreg free
  4403  0008FA  C024  F06A         	movff	?___wmul,sprintf@width
  4404  0008FE  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4405                           
  4406                           ;doprnt.c: 601: width += *f++ - '0';
  4407  000902  0ED0               	movlw	208
  4408  000904  0100               	movlb	0	; () banked
  4409  000906  6F60               	movwf	??_sprintf& (0+255),b
  4410  000908  0EFF               	movlw	255
  4411  00090A  0100               	movlb	0	; () banked
  4412  00090C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4413  00090E  C032  FFF6         	movff	sprintf@f,tblptrl
  4414  000912  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4415  000916                     	if	0	;tblptru may be non-zero
  4416  000916                     	endif
  4417  000916                     	if	0	;tblptru may be non-zero
  4418  000916                     	endif
  4419  000916  0008               	tblrd		*
  4420  000918  50F5               	movf	tablat,w,c
  4421  00091A  0100               	movlb	0	; () banked
  4422  00091C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4423  00091E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4424  000920  0100               	movlb	0	; () banked
  4425  000922  5160               	movf	??_sprintf& (0+255),w,b
  4426  000924  0100               	movlb	0	; () banked
  4427  000926  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4428  000928  0100               	movlb	0	; () banked
  4429  00092A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4430  00092C  0100               	movlb	0	; () banked
  4431  00092E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4432  000930  0100               	movlb	0	; () banked
  4433  000932  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4434  000934  0100               	movlb	0	; () banked
  4435  000936  276A               	addwf	sprintf@width& (0+255),f,b
  4436  000938  0100               	movlb	0	; () banked
  4437  00093A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4438  00093C  0100               	movlb	0	; () banked
  4439  00093E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4440                           
  4441                           ; BSR set to: 0
  4442  000940  4A32               	infsnz	sprintf@f,f,c
  4443  000942  2A33               	incf	sprintf@f+1,f,c
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4447  000944  C032  FFF6         	movff	sprintf@f,tblptrl
  4448  000948  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4449  00094C                     	if	0	;tblptru may be non-zero
  4450  00094C                     	endif
  4451  00094C                     	if	0	;tblptru may be non-zero
  4452  00094C                     	endif
  4453  00094C  0008               	tblrd		*
  4454  00094E  50F5               	movf	tablat,w,c
  4455  000950  EC8D  F00C         	call	_isdigit
  4456  000954  B0D8               	btfsc	status,0,c
  4457  000956  D7C7               	goto	l2894
  4458  000958                     l2904:
  4459  000958  C032  FFF6         	movff	sprintf@f,tblptrl
  4460  00095C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4461  000960  4A32               	infsnz	sprintf@f,f,c
  4462  000962  2A33               	incf	sprintf@f+1,f,c
  4463  000964                     	if	0	;tblptru may be non-zero
  4464  000964                     	endif
  4465  000964                     	if	0	;tblptru may be non-zero
  4466  000964                     	endif
  4467  000964  0008               	tblrd		*
  4468  000966  CFF5 F06C          	movff	tablat,sprintf@c
  4469  00096A  0100               	movlb	0	; () banked
  4470  00096C  516C               	movf	sprintf@c& (0+255),w,b
  4471                           
  4472                           ; Switch size 1, requested type "space"
  4473                           ; Number of cases is 3, Range of values is 0 to 105
  4474                           ; switch strategies available:
  4475                           ; Name         Instructions Cycles
  4476                           ; simple_byte           10     6 (average)
  4477                           ;	Chosen strategy is simple_byte
  4478  00096E  0A00               	xorlw	0	; case 0
  4479  000970  B4D8               	btfsc	status,2,c
  4480  000972  D0FB               	goto	l2984
  4481  000974  0A64               	xorlw	100	; case 100
  4482  000976  B4D8               	btfsc	status,2,c
  4483  000978  D003               	goto	l2906
  4484  00097A  0A0D               	xorlw	13	; case 105
  4485  00097C  A4D8               	btfss	status,2,c
  4486  00097E  D0E8               	goto	l2982
  4487  000980                     l2906:
  4488                           
  4489                           ;doprnt.c: 1253: {
  4490                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4491  000980  C064  FFD9         	movff	sprintf@ap,fsr2l
  4492  000984  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4493  000988  CFDE F067          	movff	postinc2,sprintf@val
  4494  00098C  CFDD F068          	movff	postdec2,sprintf@val+1
  4495  000990  0E02               	movlw	2
  4496  000992  0100               	movlb	0	; () banked
  4497  000994  2764               	addwf	sprintf@ap& (0+255),f,b
  4498  000996  0E00               	movlw	0
  4499  000998  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;doprnt.c: 1261: if((int)val < 0) {
  4503  00099A  0100               	movlb	0	; () banked
  4504  00099C  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4505  00099E  D008               	goto	l2916
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;doprnt.c: 1262: flag |= 0x03;
  4509  0009A0  0E03               	movlw	3
  4510  0009A2  0100               	movlb	0	; () banked
  4511  0009A4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;doprnt.c: 1263: val = -val;
  4515  0009A6  0100               	movlb	0	; () banked
  4516  0009A8  6D67               	negf	sprintf@val& (0+255),b
  4517  0009AA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4518  0009AC  B0D8               	btfsc	status,0,c
  4519  0009AE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4520  0009B0                     l2916:
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;doprnt.c: 1264: }
  4524                           ;doprnt.c: 1266: }
  4525                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4526  0009B0  0E01               	movlw	1
  4527  0009B2  0100               	movlb	0	; () banked
  4528  0009B4  6F6C               	movwf	sprintf@c& (0+255),b
  4529  0009B6                     l2918:
  4530                           
  4531                           ; BSR set to: 0
  4532  0009B6  0E05               	movlw	5
  4533  0009B8  0100               	movlb	0	; () banked
  4534  0009BA  196C               	xorwf	sprintf@c& (0+255),w,b
  4535  0009BC  B4D8               	btfsc	status,2,c
  4536  0009BE  D016               	goto	l2930
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;doprnt.c: 1306: if(val < dpowers[c])
  4540                           
  4541                           ; BSR set to: 0
  4542                           
  4543                           ; BSR set to: 0
  4544  0009C0  0100               	movlb	0	; () banked
  4545  0009C2  516C               	movf	sprintf@c& (0+255),w,b
  4546  0009C4  0D02               	mullw	2
  4547  0009C6  0E01               	movlw	low _dpowers
  4548  0009C8  24F3               	addwf	prodl,w,c
  4549  0009CA  6EF6               	movwf	tblptrl,c
  4550  0009CC  0E03               	movlw	high _dpowers
  4551  0009CE  20F4               	addwfc	prodh,w,c
  4552  0009D0  6EF7               	movwf	tblptrh,c
  4553  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  4554  0009D2                     	endif
  4555  0009D2  0009               	tblrd		*+
  4556  0009D4  50F5               	movf	tablat,w,c
  4557  0009D6  0100               	movlb	0	; () banked
  4558  0009D8  5D67               	subwf	sprintf@val& (0+255),w,b
  4559  0009DA  0009               	tblrd		*+
  4560  0009DC  50F5               	movf	tablat,w,c
  4561  0009DE  0100               	movlb	0	; () banked
  4562  0009E0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4563  0009E2  A0D8               	btfss	status,0,c
  4564  0009E4  D003               	goto	l2930
  4565                           
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;doprnt.c: 1307: break;
  4572  0009E6  0100               	movlb	0	; () banked
  4573  0009E8  2B6C               	incf	sprintf@c& (0+255),f,b
  4574  0009EA  D7E5               	goto	l2918
  4575  0009EC                     l2930:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4579  0009EC  0100               	movlb	0	; () banked
  4580  0009EE  516A               	movf	sprintf@width& (0+255),w,b
  4581  0009F0  0100               	movlb	0	; () banked
  4582  0009F2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4583  0009F4  B4D8               	btfsc	status,2,c
  4584  0009F6  D00B               	goto	l2936
  4585                           
  4586                           ; BSR set to: 0
  4587  0009F8  C069  F060         	movff	sprintf@flag,??_sprintf
  4588  0009FC  0E03               	movlw	3
  4589  0009FE  0100               	movlb	0	; () banked
  4590  000A00  1760               	andwf	??_sprintf& (0+255),f,b
  4591  000A02  B4D8               	btfsc	status,2,c
  4592  000A04  D004               	goto	l2936
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;doprnt.c: 1346: width--;
  4596  000A06  0100               	movlb	0	; () banked
  4597  000A08  076A               	decf	sprintf@width& (0+255),f,b
  4598  000A0A  A0D8               	btfss	status,0,c
  4599  000A0C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4600  000A0E                     l2936:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1381: if(width > c)
  4604  000A0E  0E80               	movlw	128
  4605  000A10  0100               	movlb	0	; () banked
  4606  000A12  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4607  000A14  0E7F               	movlw	127
  4608  000A16  0100               	movlb	0	; () banked
  4609  000A18  6F60               	movwf	??_sprintf& (0+255),b
  4610  000A1A  0100               	movlb	0	; () banked
  4611  000A1C  516A               	movf	sprintf@width& (0+255),w,b
  4612  000A1E  0100               	movlb	0	; () banked
  4613  000A20  5D6C               	subwf	sprintf@c& (0+255),w,b
  4614  000A22  0100               	movlb	0	; () banked
  4615  000A24  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4616  000A26  0A80               	xorlw	128
  4617  000A28  0100               	movlb	0	; () banked
  4618  000A2A  5960               	subwfb	??_sprintf& (0+255),w,b
  4619  000A2C  B0D8               	btfsc	status,0,c
  4620  000A2E  D00B               	goto	l2940
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 1382: width -= c;
  4624  000A30  0100               	movlb	0	; () banked
  4625  000A32  516C               	movf	sprintf@c& (0+255),w,b
  4626  000A34  0100               	movlb	0	; () banked
  4627  000A36  5F6A               	subwf	sprintf@width& (0+255),f,b
  4628  000A38  0E00               	movlw	0
  4629  000A3A  0100               	movlb	0	; () banked
  4630  000A3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4631  000A3E  0EFF               	movlw	255
  4632  000A40  0100               	movlb	0	; () banked
  4633  000A42  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4634  000A44  D005               	goto	l2942
  4635  000A46                     l2940:
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;doprnt.c: 1383: else
  4639                           ;doprnt.c: 1384: width = 0;
  4640  000A46  0E00               	movlw	0
  4641  000A48  0100               	movlb	0	; () banked
  4642  000A4A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4643  000A4C  0E00               	movlw	0
  4644  000A4E  6F6A               	movwf	sprintf@width& (0+255),b
  4645  000A50                     l2942:
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;doprnt.c: 1387: if(flag & 0x04) {
  4649  000A50  0100               	movlb	0	; () banked
  4650  000A52  A569               	btfss	sprintf@flag& (0+255),2,b
  4651  000A54  D022               	goto	l2958
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;doprnt.c: 1392: if(flag & 0x03)
  4655  000A56  C069  F060         	movff	sprintf@flag,??_sprintf
  4656  000A5A  0E03               	movlw	3
  4657  000A5C  0100               	movlb	0	; () banked
  4658  000A5E  1760               	andwf	??_sprintf& (0+255),f,b
  4659  000A60  B4D8               	btfsc	status,2,c
  4660  000A62  D008               	goto	l2950
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4664  000A64  C030  FFD9         	movff	sprintf@sp,fsr2l
  4665  000A68  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4666  000A6C  0E2D               	movlw	45
  4667  000A6E  6EDF               	movwf	indf2,c
  4668                           
  4669                           ; BSR set to: 0
  4670  000A70  4A30               	infsnz	sprintf@sp,f,c
  4671  000A72  2A31               	incf	sprintf@sp+1,f,c
  4672  000A74                     l2950:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1415: if(width)
  4676  000A74  0100               	movlb	0	; () banked
  4677  000A76  516A               	movf	sprintf@width& (0+255),w,b
  4678  000A78  0100               	movlb	0	; () banked
  4679  000A7A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4680  000A7C  B4D8               	btfsc	status,2,c
  4681  000A7E  D034               	goto	l2972
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4685                           
  4686                           ; BSR set to: 0
  4687                           
  4688                           ;doprnt.c: 1416: do
  4689  000A80  C030  FFD9         	movff	sprintf@sp,fsr2l
  4690  000A84  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4691  000A88  0E30               	movlw	48
  4692  000A8A  6EDF               	movwf	indf2,c
  4693                           
  4694                           ; BSR set to: 0
  4695  000A8C  4A30               	infsnz	sprintf@sp,f,c
  4696  000A8E  2A31               	incf	sprintf@sp+1,f,c
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;doprnt.c: 1418: while(--width);
  4700  000A90  0100               	movlb	0	; () banked
  4701  000A92  076A               	decf	sprintf@width& (0+255),f,b
  4702  000A94  A0D8               	btfss	status,0,c
  4703  000A96  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4704  000A98  D7ED               	goto	l2950
  4705  000A9A                     l2958:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;doprnt.c: 1422: {
  4709                           ;doprnt.c: 1424: if(width
  4710                           ;doprnt.c: 1428: )
  4711  000A9A  0100               	movlb	0	; () banked
  4712  000A9C  516A               	movf	sprintf@width& (0+255),w,b
  4713  000A9E  0100               	movlb	0	; () banked
  4714  000AA0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4715  000AA2  B4D8               	btfsc	status,2,c
  4716  000AA4  D012               	goto	l2966
  4717  000AA6                     l2960:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4721  000AA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4722  000AAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4723  000AAE  0E20               	movlw	32
  4724  000AB0  6EDF               	movwf	indf2,c
  4725                           
  4726                           ; BSR set to: 0
  4727  000AB2  4A30               	infsnz	sprintf@sp,f,c
  4728  000AB4  2A31               	incf	sprintf@sp+1,f,c
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;doprnt.c: 1431: while(--width);
  4732  000AB6  0100               	movlb	0	; () banked
  4733  000AB8  076A               	decf	sprintf@width& (0+255),f,b
  4734  000ABA  A0D8               	btfss	status,0,c
  4735  000ABC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4736  000ABE  0100               	movlb	0	; () banked
  4737  000AC0  516A               	movf	sprintf@width& (0+255),w,b
  4738  000AC2  0100               	movlb	0	; () banked
  4739  000AC4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4740  000AC6  A4D8               	btfss	status,2,c
  4741  000AC8  D7EE               	goto	l2960
  4742  000ACA                     l2966:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 1438: if(flag & 0x03)
  4746  000ACA  C069  F060         	movff	sprintf@flag,??_sprintf
  4747  000ACE  0E03               	movlw	3
  4748  000AD0  0100               	movlb	0	; () banked
  4749  000AD2  1760               	andwf	??_sprintf& (0+255),f,b
  4750  000AD4  B4D8               	btfsc	status,2,c
  4751  000AD6  D008               	goto	l2972
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4755  000AD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4756  000ADC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4757  000AE0  0E2D               	movlw	45
  4758  000AE2  6EDF               	movwf	indf2,c
  4759                           
  4760                           ; BSR set to: 0
  4761  000AE4  4A30               	infsnz	sprintf@sp,f,c
  4762  000AE6  2A31               	incf	sprintf@sp+1,f,c
  4763  000AE8                     l2972:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;doprnt.c: 1469: }
  4767                           ;doprnt.c: 1472: prec = c;
  4768  000AE8  C06C  F066         	movff	sprintf@c,sprintf@prec
  4769                           
  4770                           ;doprnt.c: 1474: while(prec--) {
  4771  000AEC  D02B               	goto	l2980
  4772  000AEE                     l2974:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;doprnt.c: 1478: {
  4776                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4777  000AEE  0100               	movlb	0	; () banked
  4778  000AF0  5166               	movf	sprintf@prec& (0+255),w,b
  4779  000AF2  0D02               	mullw	2
  4780  000AF4  0E01               	movlw	low _dpowers
  4781  000AF6  24F3               	addwf	prodl,w,c
  4782  000AF8  6EF6               	movwf	tblptrl,c
  4783  000AFA  0E03               	movlw	high _dpowers
  4784  000AFC  20F4               	addwfc	prodh,w,c
  4785  000AFE  6EF7               	movwf	tblptrh,c
  4786  000B00                     	if	0	;There are less than 3 active tblptr bytes
  4787  000B00                     	endif
  4788  000B00  0009               	tblrd		*+
  4789  000B02  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4790  000B06  000A               	tblrd		*-
  4791  000B08  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4792  000B0C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4793  000B10  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4794  000B14  EC19  F00B         	call	___lwdiv	;wreg free
  4795  000B18  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4796  000B1C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4797  000B20  0E00               	movlw	0
  4798  000B22  6E2E               	movwf	___lwmod@divisor+1,c
  4799  000B24  0E0A               	movlw	10
  4800  000B26  6E2D               	movwf	___lwmod@divisor,c
  4801  000B28  EC42  F00B         	call	___lwmod	;wreg free
  4802  000B2C  502B               	movf	?___lwmod,w,c
  4803  000B2E  0F30               	addlw	48
  4804  000B30  0100               	movlb	0	; () banked
  4805  000B32  6F6C               	movwf	sprintf@c& (0+255),b
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;doprnt.c: 1523: }
  4809                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4810  000B34  C030  FFD9         	movff	sprintf@sp,fsr2l
  4811  000B38  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4812  000B3C  C06C  FFDF         	movff	sprintf@c,indf2
  4813                           
  4814                           ; BSR set to: 0
  4815  000B40  4A30               	infsnz	sprintf@sp,f,c
  4816  000B42  2A31               	incf	sprintf@sp+1,f,c
  4817  000B44                     l2980:
  4818                           
  4819                           ; BSR set to: 0
  4820  000B44  0100               	movlb	0	; () banked
  4821  000B46  0766               	decf	sprintf@prec& (0+255),f,b
  4822  000B48  0100               	movlb	0	; () banked
  4823  000B4A  2966               	incf	sprintf@prec& (0+255),w,b
  4824  000B4C  A4D8               	btfss	status,2,c
  4825  000B4E  D7CF               	goto	l2974
  4826  000B50                     l2982:
  4827  000B50  C032  FFF6         	movff	sprintf@f,tblptrl
  4828  000B54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4829  000B58  4A32               	infsnz	sprintf@f,f,c
  4830  000B5A  2A33               	incf	sprintf@f+1,f,c
  4831  000B5C                     	if	0	;tblptru may be non-zero
  4832  000B5C                     	endif
  4833  000B5C                     	if	0	;tblptru may be non-zero
  4834  000B5C                     	endif
  4835  000B5C  0008               	tblrd		*
  4836  000B5E  CFF5 F06C          	movff	tablat,sprintf@c
  4837  000B62  0100               	movlb	0	; () banked
  4838  000B64  516C               	movf	sprintf@c& (0+255),w,b
  4839  000B66  A4D8               	btfss	status,2,c
  4840  000B68  D68B               	goto	l2876
  4841  000B6A                     l2984:
  4842                           
  4843                           ;doprnt.c: 1538: *sp = 0;
  4844  000B6A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4845  000B6E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4846  000B72  0E00               	movlw	0
  4847  000B74  6EDF               	movwf	indf2,c
  4848  000B76  0012               	return	
  4849  000B78                     __end_of_sprintf:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           indf1	equ	0xFE7
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function _isdigit *****************
  4871 ;; Defined at:
  4872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  c               1    wreg     unsigned char 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  c               1   37[COMRAM] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;		None               void
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4886 ;;      Params:         0       0       0       0
  4887 ;;      Locals:         2       0       0       0
  4888 ;;      Temps:          1       0       0       0
  4889 ;;      Totals:         3       0       0       0
  4890 ;;Total ram usage:        3 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    3
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_sprintf
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text19
  4901  00191A                     __ptext19:
  4902                           	opt stack 0
  4903  00191A                     _isdigit:
  4904                           	opt stack 26
  4905                           
  4906                           ;incstack = 0
  4907                           ;isdigit@c stored from wreg
  4908  00191A  6E26               	movwf	isdigit@c,c
  4909  00191C  0E00               	movlw	0
  4910  00191E  6E25               	movwf	_isdigit$1961,c
  4911  001920  0E3A               	movlw	58
  4912  001922  6026               	cpfslt	isdigit@c,c
  4913  001924  D005               	goto	l2042
  4914  001926  0E2F               	movlw	47
  4915  001928  6426               	cpfsgt	isdigit@c,c
  4916  00192A  D002               	goto	l2042
  4917  00192C  0E01               	movlw	1
  4918  00192E  6E25               	movwf	_isdigit$1961,c
  4919  001930                     l2042:
  4920  001930  C025  F024         	movff	_isdigit$1961,??_isdigit
  4921  001934  3024               	rrcf	??_isdigit,w,c
  4922  001936  0012               	return	
  4923  001938                     __end_of_isdigit:
  4924                           	opt stack 0
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodh	equ	0xFF4
  4930                           prodl	equ	0xFF3
  4931                           intcon	equ	0xFF2
  4932                           postinc0	equ	0xFEE
  4933                           wreg	equ	0xFE8
  4934                           indf1	equ	0xFE7
  4935                           fsr1h	equ	0xFE2
  4936                           fsr1l	equ	0xFE1
  4937                           indf2	equ	0xFDF
  4938                           postinc2	equ	0xFDE
  4939                           postdec2	equ	0xFDD
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function ___wmul *****************
  4945 ;; Defined at:
  4946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  multiplier      2   35[COMRAM] unsigned int 
  4949 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  product         2   39[COMRAM] unsigned int 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  2   35[COMRAM] unsigned int 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, prodl, prodh
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4961 ;;      Params:         4       0       0       0
  4962 ;;      Locals:         2       0       0       0
  4963 ;;      Temps:          0       0       0       0
  4964 ;;      Totals:         6       0       0       0
  4965 ;;Total ram usage:        6 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    3
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_setMotorPWM
  4972 ;;		_sprintf
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text20
  4977  0018D2                     __ptext20:
  4978                           	opt stack 0
  4979  0018D2                     ___wmul:
  4980                           	opt stack 25
  4981                           
  4982                           ;incstack = 0
  4983  0018D2  5024               	movf	___wmul@multiplier,w,c
  4984  0018D4  0226               	mulwf	___wmul@multiplicand,c
  4985  0018D6  CFF3 F028          	movff	prodl,___wmul@product
  4986  0018DA  CFF4 F029          	movff	prodh,___wmul@product+1
  4987  0018DE  5024               	movf	___wmul@multiplier,w,c
  4988  0018E0  0227               	mulwf	___wmul@multiplicand+1,c
  4989  0018E2  50F3               	movf	prodl,w,c
  4990  0018E4  2629               	addwf	___wmul@product+1,f,c
  4991  0018E6  5025               	movf	___wmul@multiplier+1,w,c
  4992  0018E8  0226               	mulwf	___wmul@multiplicand,c
  4993  0018EA  50F3               	movf	prodl,w,c
  4994  0018EC  2629               	addwf	___wmul@product+1,f,c
  4995  0018EE  C028  F024         	movff	___wmul@product,?___wmul
  4996  0018F2  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4997  0018F6  0012               	return	
  4998  0018F8                     __end_of___wmul:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           prodh	equ	0xFF4
  5005                           prodl	equ	0xFF3
  5006                           intcon	equ	0xFF2
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           indf1	equ	0xFE7
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function ___lwmod *****************
  5020 ;; Defined at:
  5021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  dividend        2   42[COMRAM] unsigned int 
  5024 ;;  divisor         2   44[COMRAM] unsigned int 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  counter         1   46[COMRAM] unsigned char 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  2   42[COMRAM] unsigned int 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5036 ;;      Params:         4       0       0       0
  5037 ;;      Locals:         1       0       0       0
  5038 ;;      Temps:          0       0       0       0
  5039 ;;      Totals:         5       0       0       0
  5040 ;;Total ram usage:        5 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    3
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_sprintf
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text21
  5051  001684                     __ptext21:
  5052                           	opt stack 0
  5053  001684                     ___lwmod:
  5054                           	opt stack 26
  5055                           
  5056                           ;incstack = 0
  5057  001684  502D               	movf	___lwmod@divisor,w,c
  5058  001686  102E               	iorwf	___lwmod@divisor+1,w,c
  5059  001688  B4D8               	btfsc	status,2,c
  5060  00168A  D018               	goto	l879
  5061  00168C  0E01               	movlw	1
  5062  00168E  6E2F               	movwf	___lwmod@counter,c
  5063  001690  D004               	goto	l2074
  5064  001692                     l2072:
  5065  001692  90D8               	bcf	status,0,c
  5066  001694  362D               	rlcf	___lwmod@divisor,f,c
  5067  001696  362E               	rlcf	___lwmod@divisor+1,f,c
  5068  001698  2A2F               	incf	___lwmod@counter,f,c
  5069  00169A                     l2074:
  5070  00169A  AE2E               	btfss	___lwmod@divisor+1,7,c
  5071  00169C  D7FA               	goto	l2072
  5072  00169E                     l2076:
  5073  00169E  502D               	movf	___lwmod@divisor,w,c
  5074  0016A0  5C2B               	subwf	___lwmod@dividend,w,c
  5075  0016A2  502E               	movf	___lwmod@divisor+1,w,c
  5076  0016A4  582C               	subwfb	___lwmod@dividend+1,w,c
  5077  0016A6  A0D8               	btfss	status,0,c
  5078  0016A8  D004               	goto	l2080
  5079  0016AA  502D               	movf	___lwmod@divisor,w,c
  5080  0016AC  5E2B               	subwf	___lwmod@dividend,f,c
  5081  0016AE  502E               	movf	___lwmod@divisor+1,w,c
  5082  0016B0  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5083  0016B2                     l2080:
  5084  0016B2  90D8               	bcf	status,0,c
  5085  0016B4  322E               	rrcf	___lwmod@divisor+1,f,c
  5086  0016B6  322D               	rrcf	___lwmod@divisor,f,c
  5087  0016B8  2E2F               	decfsz	___lwmod@counter,f,c
  5088  0016BA  D7F1               	goto	l2076
  5089  0016BC                     l879:
  5090  0016BC  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5091  0016C0  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5092  0016C4  0012               	return		;funcret
  5093  0016C6                     __end_of___lwmod:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf1	equ	0xFE7
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___lwdiv *****************
  5115 ;; Defined at:
  5116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  dividend        2   35[COMRAM] unsigned int 
  5119 ;;  divisor         2   37[COMRAM] unsigned int 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  quotient        2   39[COMRAM] unsigned int 
  5122 ;;  counter         1   41[COMRAM] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  2   35[COMRAM] unsigned int 
  5125 ;; Registers used:
  5126 ;;		wreg, status,2, status,0
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5132 ;;      Params:         4       0       0       0
  5133 ;;      Locals:         3       0       0       0
  5134 ;;      Temps:          0       0       0       0
  5135 ;;      Totals:         7       0       0       0
  5136 ;;Total ram usage:        7 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    3
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_sprintf
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text22
  5147  001632                     __ptext22:
  5148                           	opt stack 0
  5149  001632                     ___lwdiv:
  5150                           	opt stack 26
  5151                           
  5152                           ;incstack = 0
  5153  001632  0E00               	movlw	0
  5154  001634  6E29               	movwf	___lwdiv@quotient+1,c
  5155  001636  0E00               	movlw	0
  5156  001638  6E28               	movwf	___lwdiv@quotient,c
  5157  00163A  5026               	movf	___lwdiv@divisor,w,c
  5158  00163C  1027               	iorwf	___lwdiv@divisor+1,w,c
  5159  00163E  B4D8               	btfsc	status,2,c
  5160  001640  D01C               	goto	l869
  5161  001642  0E01               	movlw	1
  5162  001644  6E2A               	movwf	___lwdiv@counter,c
  5163  001646  D004               	goto	l2054
  5164  001648                     l2052:
  5165  001648  90D8               	bcf	status,0,c
  5166  00164A  3626               	rlcf	___lwdiv@divisor,f,c
  5167  00164C  3627               	rlcf	___lwdiv@divisor+1,f,c
  5168  00164E  2A2A               	incf	___lwdiv@counter,f,c
  5169  001650                     l2054:
  5170  001650  AE27               	btfss	___lwdiv@divisor+1,7,c
  5171  001652  D7FA               	goto	l2052
  5172  001654                     l2056:
  5173  001654  90D8               	bcf	status,0,c
  5174  001656  3628               	rlcf	___lwdiv@quotient,f,c
  5175  001658  3629               	rlcf	___lwdiv@quotient+1,f,c
  5176  00165A  5026               	movf	___lwdiv@divisor,w,c
  5177  00165C  5C24               	subwf	___lwdiv@dividend,w,c
  5178  00165E  5027               	movf	___lwdiv@divisor+1,w,c
  5179  001660  5825               	subwfb	___lwdiv@dividend+1,w,c
  5180  001662  A0D8               	btfss	status,0,c
  5181  001664  D005               	goto	l2064
  5182  001666  5026               	movf	___lwdiv@divisor,w,c
  5183  001668  5E24               	subwf	___lwdiv@dividend,f,c
  5184  00166A  5027               	movf	___lwdiv@divisor+1,w,c
  5185  00166C  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5186  00166E  8028               	bsf	___lwdiv@quotient,0,c
  5187  001670                     l2064:
  5188  001670  90D8               	bcf	status,0,c
  5189  001672  3227               	rrcf	___lwdiv@divisor+1,f,c
  5190  001674  3226               	rrcf	___lwdiv@divisor,f,c
  5191  001676  2E2A               	decfsz	___lwdiv@counter,f,c
  5192  001678  D7ED               	goto	l2056
  5193  00167A                     l869:
  5194  00167A  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5195  00167E  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5196  001682  0012               	return		;funcret
  5197  001684                     __end_of___lwdiv:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _grabRightIR *****************
  5219 ;; Defined at:
  5220 ;;		line 74 in file "IR_Reading.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5225 ;;  i               1   42[COMRAM] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  2   35[COMRAM] unsigned int 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5235 ;;      Params:         2       0       0       0
  5236 ;;      Locals:         3       0       0       0
  5237 ;;      Temps:          3       0       0       0
  5238 ;;      Totals:         8       0       0       0
  5239 ;;Total ram usage:        8 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    3
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_ScanIR
  5246 ;;		_ScanWithRange
  5247 ;;		_main
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text23
  5252  0014F0                     __ptext23:
  5253                           	opt stack 0
  5254  0014F0                     _grabRightIR:
  5255                           	opt stack 27
  5256                           
  5257                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5258                           
  5259                           ;incstack = 0
  5260  0014F0  0E00               	movlw	0
  5261  0014F2  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5262  0014F4  0E00               	movlw	0
  5263  0014F6  6E29               	movwf	grabRightIR@IR_signal,c
  5264                           
  5265                           ;IR_Reading.c: 77: unsigned char i=0;
  5266  0014F8  0E00               	movlw	0
  5267  0014FA  6E2B               	movwf	grabRightIR@i,c
  5268                           
  5269                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5270  0014FC  0E00               	movlw	0
  5271  0014FE  6E2B               	movwf	grabRightIR@i,c
  5272  001500                     l2116:
  5273  001500  0E03               	movlw	3
  5274  001502  642B               	cpfsgt	grabRightIR@i,c
  5275  001504  D001               	goto	l2120
  5276  001506  D01E               	goto	l2126
  5277  001508                     l2120:
  5278                           
  5279                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5280  001508  5069               	movf	3945,w,c	;volatile
  5281  00150A  6E26               	movwf	??_grabRightIR& (0+255),c
  5282  00150C  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5283  00150E  0E07               	movlw	7
  5284  001510                     u1445:
  5285  001510  90D8               	bcf	status,0,c
  5286  001512  3626               	rlcf	??_grabRightIR,f,c
  5287  001514  3627               	rlcf	??_grabRightIR+1,f,c
  5288  001516  2EE8               	decfsz	wreg,f,c
  5289  001518  D7FB               	goto	u1445
  5290  00151A  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5291  00151E  90D8               	bcf	status,0,c
  5292  001520  3228               	rrcf	??_grabRightIR+2,f,c
  5293  001522  5028               	movf	??_grabRightIR+2,w,c
  5294  001524  1226               	iorwf	??_grabRightIR,f,c
  5295  001526  0E00               	movlw	0
  5296  001528  1227               	iorwf	??_grabRightIR+1,f,c
  5297  00152A  5026               	movf	??_grabRightIR,w,c
  5298  00152C  2629               	addwf	grabRightIR@IR_signal,f,c
  5299  00152E  5027               	movf	??_grabRightIR+1,w,c
  5300  001530  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5301                           
  5302                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5303  001532  0E82               	movlw	130
  5304  001534  6E26               	movwf	??_grabRightIR& (0+255),c
  5305  001536  0EDE               	movlw	222
  5306  001538                     u2967:
  5307  001538  2EE8               	decfsz	wreg,f,c
  5308  00153A  D7FE               	goto	u2967
  5309  00153C  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5310  00153E  D7FC               	goto	u2967
  5311  001540  2A2B               	incf	grabRightIR@i,f,c
  5312  001542  D7DE               	goto	l2116
  5313  001544                     l2126:
  5314                           
  5315                           ;IR_Reading.c: 83: }
  5316                           ;IR_Reading.c: 85: return IR_signal>>2;
  5317  001544  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5318  001548  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5319  00154C  90D8               	bcf	status,0,c
  5320  00154E  3227               	rrcf	??_grabRightIR+1,f,c
  5321  001550  3226               	rrcf	??_grabRightIR,f,c
  5322  001552  90D8               	bcf	status,0,c
  5323  001554  3227               	rrcf	??_grabRightIR+1,f,c
  5324  001556  3226               	rrcf	??_grabRightIR,f,c
  5325  001558  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5326  00155C  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5327  001560  0012               	return	
  5328  001562                     __end_of_grabRightIR:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           indf1	equ	0xFE7
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           indf2	equ	0xFDF
  5343                           postinc2	equ	0xFDE
  5344                           postdec2	equ	0xFDD
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _grabLeftIR *****************
  5350 ;; Defined at:
  5351 ;;		line 90 in file "IR_Reading.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;		None
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5356 ;;  i               1   42[COMRAM] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  2   35[COMRAM] unsigned int 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5366 ;;      Params:         2       0       0       0
  5367 ;;      Locals:         3       0       0       0
  5368 ;;      Temps:          3       0       0       0
  5369 ;;      Totals:         8       0       0       0
  5370 ;;Total ram usage:        8 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    3
  5373 ;; This function calls:
  5374 ;;		Nothing
  5375 ;; This function is called by:
  5376 ;;		_ScanIR
  5377 ;;		_ScanWithRange
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text24
  5383  001562                     __ptext24:
  5384                           	opt stack 0
  5385  001562                     _grabLeftIR:
  5386                           	opt stack 27
  5387                           
  5388                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5389                           
  5390                           ;incstack = 0
  5391  001562  0E00               	movlw	0
  5392  001564  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5393  001566  0E00               	movlw	0
  5394  001568  6E29               	movwf	grabLeftIR@IR_signal,c
  5395                           
  5396                           ;IR_Reading.c: 93: unsigned char i=0;
  5397  00156A  0E00               	movlw	0
  5398  00156C  6E2B               	movwf	grabLeftIR@i,c
  5399                           
  5400                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5401  00156E  0E00               	movlw	0
  5402  001570  6E2B               	movwf	grabLeftIR@i,c
  5403  001572                     l2132:
  5404  001572  0E03               	movlw	3
  5405  001574  642B               	cpfsgt	grabLeftIR@i,c
  5406  001576  D001               	goto	l2136
  5407  001578  D01E               	goto	l2142
  5408  00157A                     l2136:
  5409                           
  5410                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5411  00157A  5067               	movf	3943,w,c	;volatile
  5412  00157C  6E26               	movwf	??_grabLeftIR& (0+255),c
  5413  00157E  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5414  001580  0E07               	movlw	7
  5415  001582                     u1475:
  5416  001582  90D8               	bcf	status,0,c
  5417  001584  3626               	rlcf	??_grabLeftIR,f,c
  5418  001586  3627               	rlcf	??_grabLeftIR+1,f,c
  5419  001588  2EE8               	decfsz	wreg,f,c
  5420  00158A  D7FB               	goto	u1475
  5421  00158C  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5422  001590  90D8               	bcf	status,0,c
  5423  001592  3228               	rrcf	??_grabLeftIR+2,f,c
  5424  001594  5028               	movf	??_grabLeftIR+2,w,c
  5425  001596  1226               	iorwf	??_grabLeftIR,f,c
  5426  001598  0E00               	movlw	0
  5427  00159A  1227               	iorwf	??_grabLeftIR+1,f,c
  5428  00159C  5026               	movf	??_grabLeftIR,w,c
  5429  00159E  2629               	addwf	grabLeftIR@IR_signal,f,c
  5430  0015A0  5027               	movf	??_grabLeftIR+1,w,c
  5431  0015A2  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5432                           
  5433                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5434  0015A4  0E82               	movlw	130
  5435  0015A6  6E26               	movwf	??_grabLeftIR& (0+255),c
  5436  0015A8  0EDE               	movlw	222
  5437  0015AA                     u2977:
  5438  0015AA  2EE8               	decfsz	wreg,f,c
  5439  0015AC  D7FE               	goto	u2977
  5440  0015AE  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5441  0015B0  D7FC               	goto	u2977
  5442  0015B2  2A2B               	incf	grabLeftIR@i,f,c
  5443  0015B4  D7DE               	goto	l2132
  5444  0015B6                     l2142:
  5445                           
  5446                           ;IR_Reading.c: 99: }
  5447                           ;IR_Reading.c: 101: return IR_signal>>2;
  5448  0015B6  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5449  0015BA  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5450  0015BE  90D8               	bcf	status,0,c
  5451  0015C0  3227               	rrcf	??_grabLeftIR+1,f,c
  5452  0015C2  3226               	rrcf	??_grabLeftIR,f,c
  5453  0015C4  90D8               	bcf	status,0,c
  5454  0015C6  3227               	rrcf	??_grabLeftIR+1,f,c
  5455  0015C8  3226               	rrcf	??_grabLeftIR,f,c
  5456  0015CA  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5457  0015CE  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5458  0015D2  0012               	return	
  5459  0015D4                     __end_of_grabLeftIR:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           indf1	equ	0xFE7
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _SetLine *****************
  5481 ;; Defined at:
  5482 ;;		line 74 in file "LCD.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  line            1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  line            1   41[COMRAM] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5496 ;;      Params:         0       0       0       0
  5497 ;;      Locals:         1       0       0       0
  5498 ;;      Temps:          0       0       0       0
  5499 ;;      Totals:         1       0       0       0
  5500 ;;Total ram usage:        1 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    6
  5503 ;; This function calls:
  5504 ;;		_SendLCD
  5505 ;; This function is called by:
  5506 ;;		_ScanIR
  5507 ;;		_ScanWithRange
  5508 ;;		_main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text25
  5513  001822                     __ptext25:
  5514                           	opt stack 0
  5515  001822                     _SetLine:
  5516                           	opt stack 24
  5517                           
  5518                           ;incstack = 0
  5519                           ;SetLine@line stored from wreg
  5520  001822  6E2A               	movwf	SetLine@line,c
  5521                           
  5522                           ;LCD.c: 75: if (line==1) {
  5523  001824  042A               	decf	SetLine@line,w,c
  5524  001826  A4D8               	btfss	status,2,c
  5525  001828  D006               	goto	l2150
  5526                           
  5527                           ;LCD.c: 76: SendLCD(0x80,0);
  5528  00182A  0E00               	movlw	0
  5529  00182C  6E28               	movwf	SendLCD@type,c
  5530  00182E  0E80               	movlw	128
  5531  001830  EC29  F00C         	call	_SendLCD
  5532                           
  5533                           ;LCD.c: 77: } else if (line==2) {
  5534  001834  D009               	goto	l2154
  5535  001836                     l2150:
  5536  001836  0E02               	movlw	2
  5537  001838  182A               	xorwf	SetLine@line,w,c
  5538  00183A  A4D8               	btfss	status,2,c
  5539  00183C  D005               	goto	l2154
  5540                           
  5541                           ;LCD.c: 78: SendLCD(0xC0,0);
  5542  00183E  0E00               	movlw	0
  5543  001840  6E28               	movwf	SendLCD@type,c
  5544  001842  0EC0               	movlw	192
  5545  001844  EC29  F00C         	call	_SendLCD
  5546  001848                     l2154:
  5547                           
  5548                           ;LCD.c: 79: }
  5549                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5550  001848  0E21               	movlw	33
  5551  00184A                     u2987:
  5552  00184A  2EE8               	decfsz	wreg,f,c
  5553  00184C  D7FE               	goto	u2987
  5554  00184E  F000               	nop	
  5555  001850  0012               	return		;funcret
  5556  001852                     __end_of_SetLine:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           intcon	equ	0xFF2
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           indf1	equ	0xFE7
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _LCD_String *****************
  5578 ;; Defined at:
  5579 ;;		line 83 in file "LCD.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  string          2   41[COMRAM] PTR unsigned char 
  5582 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5583 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5584 ;;		 -> STR_1(12), 
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;		None
  5587 ;; Return value:  Size  Location     Type
  5588 ;;		None               void
  5589 ;; Registers used:
  5590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5596 ;;      Params:         2       0       0       0
  5597 ;;      Locals:         0       0       0       0
  5598 ;;      Temps:          0       0       0       0
  5599 ;;      Totals:         2       0       0       0
  5600 ;;Total ram usage:        2 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    6
  5603 ;; This function calls:
  5604 ;;		_SendLCD
  5605 ;; This function is called by:
  5606 ;;		_ScanIR
  5607 ;;		_ScanWithRange
  5608 ;;		_main
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text26
  5613  0015D4                     __ptext26:
  5614                           	opt stack 0
  5615  0015D4                     _LCD_String:
  5616                           	opt stack 23
  5617                           
  5618                           ;LCD.c: 85: while(*string != 0){
  5619                           
  5620                           ;incstack = 0
  5621  0015D4  D01A               	goto	l2164
  5622  0015D6                     l2158:
  5623                           
  5624                           ;LCD.c: 88: SendLCD(*string++,1);
  5625  0015D6  0E01               	movlw	1
  5626  0015D8  6E28               	movwf	SendLCD@type,c
  5627  0015DA  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5628  0015DE  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5629  0015E2  6AF8               	clrf	tblptru,c
  5630  0015E4  0E02               	movlw	(high __ramtop+-1)
  5631  0015E6  64F7               	cpfsgt	tblptrh,c
  5632  0015E8  D003               	bra	u1517
  5633  0015EA  0008               	tblrd		*
  5634  0015EC  50F5               	movf	tablat,w,c
  5635  0015EE  D005               	bra	u1510
  5636  0015F0                     u1517:
  5637  0015F0  CFF6 FFE1          	movff	tblptrl,fsr1l
  5638  0015F4  CFF7 FFE2          	movff	tblptrh,fsr1h
  5639  0015F8  50E7               	movf	indf1,w,c
  5640  0015FA                     u1510:
  5641  0015FA  EC29  F00C         	call	_SendLCD
  5642  0015FE  4A2A               	infsnz	LCD_String@string,f,c
  5643  001600  2A2B               	incf	LCD_String@string+1,f,c
  5644                           
  5645                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5646  001602  0E21               	movlw	33
  5647  001604                     u2997:
  5648  001604  2EE8               	decfsz	wreg,f,c
  5649  001606  D7FE               	goto	u2997
  5650  001608  F000               	nop	
  5651  00160A                     l2164:
  5652  00160A  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5653  00160E  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5654  001612  6AF8               	clrf	tblptru,c
  5655  001614  0E02               	movlw	(high __ramtop+-1)
  5656  001616  64F7               	cpfsgt	tblptrh,c
  5657  001618  D003               	bra	u1527
  5658  00161A  0008               	tblrd		*
  5659  00161C  50F5               	movf	tablat,w,c
  5660  00161E  D005               	bra	u1520
  5661  001620                     u1527:
  5662  001620  CFF6 FFE1          	movff	tblptrl,fsr1l
  5663  001624  CFF7 FFE2          	movff	tblptrh,fsr1h
  5664  001628  50E7               	movf	indf1,w,c
  5665  00162A                     u1520:
  5666  00162A  0900               	iorlw	0
  5667  00162C  B4D8               	btfsc	status,2,c
  5668  00162E  0012               	return	
  5669  001630  D7D2               	goto	l2158
  5670  001632                     __end_of_LCD_String:
  5671                           	opt stack 0
  5672                           tblptru	equ	0xFF8
  5673                           tblptrh	equ	0xFF7
  5674                           tblptrl	equ	0xFF6
  5675                           tablat	equ	0xFF5
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           intcon	equ	0xFF2
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           indf1	equ	0xFE7
  5682                           fsr1h	equ	0xFE2
  5683                           fsr1l	equ	0xFE1
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _SendLCD *****************
  5692 ;; Defined at:
  5693 ;;		line 27 in file "LCD.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  Byte            1    wreg     unsigned char 
  5696 ;;  type            1   39[COMRAM] unsigned char 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  Byte            1   40[COMRAM] unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5708 ;;      Params:         1       0       0       0
  5709 ;;      Locals:         1       0       0       0
  5710 ;;      Temps:          0       0       0       0
  5711 ;;      Totals:         2       0       0       0
  5712 ;;Total ram usage:        2 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		_LCDout
  5717 ;; This function is called by:
  5718 ;;		_initLCD
  5719 ;;		_SetLine
  5720 ;;		_LCD_String
  5721 ;;		_ScanIR
  5722 ;;		_ScanWithRange
  5723 ;;		_main
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text27
  5728  001852                     __ptext27:
  5729                           	opt stack 0
  5730  001852                     _SendLCD:
  5731                           	opt stack 24
  5732                           
  5733                           ;incstack = 0
  5734                           ;SendLCD@Byte stored from wreg
  5735  001852  6E29               	movwf	SendLCD@Byte,c
  5736                           
  5737                           ;LCD.c: 30: LATAbits.LATA6=type;
  5738  001854  B028               	btfsc	SendLCD@type,0,c
  5739  001856  D002               	bra	u1305
  5740  001858  9C89               	bcf	3977,6,c	;volatile
  5741  00185A  D001               	bra	u1306
  5742  00185C                     u1305:
  5743  00185C  8C89               	bsf	3977,6,c	;volatile
  5744  00185E                     u1306:
  5745                           
  5746                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5747  00185E  3829               	swapf	SendLCD@Byte,w,c
  5748  001860  0B0F               	andlw	15
  5749  001862  0B0F               	andlw	15
  5750  001864  EC4C  F008         	call	_LCDout
  5751                           
  5752                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5753  001868  0E06               	movlw	6
  5754  00186A                     u3007:
  5755  00186A  2EE8               	decfsz	wreg,f,c
  5756  00186C  D7FE               	goto	u3007
  5757  00186E  D000               	nop2		;nop
  5758                           
  5759                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5760  001870  5029               	movf	SendLCD@Byte,w,c
  5761  001872  0B0F               	andlw	15
  5762  001874  EC4C  F008         	call	_LCDout
  5763                           
  5764                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5765  001878  0E21               	movlw	33
  5766  00187A                     u3017:
  5767  00187A  2EE8               	decfsz	wreg,f,c
  5768  00187C  D7FE               	goto	u3017
  5769  00187E  F000               	nop	
  5770  001880  0012               	return		;funcret
  5771  001882                     __end_of_SendLCD:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _LCDout *****************
  5793 ;; Defined at:
  5794 ;;		line 14 in file "LCD.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  number          1    wreg     unsigned char 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  number          1   38[COMRAM] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;		None               void
  5801 ;; Registers used:
  5802 ;;		wreg, status,2, status,0, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5808 ;;      Params:         0       0       0       0
  5809 ;;      Locals:         1       0       0       0
  5810 ;;      Temps:          3       0       0       0
  5811 ;;      Totals:         4       0       0       0
  5812 ;;Total ram usage:        4 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    4
  5815 ;; This function calls:
  5816 ;;		_E_TOG
  5817 ;; This function is called by:
  5818 ;;		_SendLCD
  5819 ;;		_initLCD
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text28
  5824  001098                     __ptext28:
  5825                           	opt stack 0
  5826  001098                     _LCDout:
  5827                           	opt stack 24
  5828                           
  5829                           ;incstack = 0
  5830                           ;LCDout@number stored from wreg
  5831  001098  6E27               	movwf	LCDout@number,c
  5832                           
  5833                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5834  00109A  5027               	movf	LCDout@number,w,c
  5835  00109C  6E24               	movwf	??_LCDout& (0+255),c
  5836  00109E  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5837  0010A0  0E07               	movlw	7
  5838  0010A2                     u1195:
  5839  0010A2  90D8               	bcf	status,0,c
  5840  0010A4  3624               	rlcf	??_LCDout,f,c
  5841  0010A6  3625               	rlcf	??_LCDout+1,f,c
  5842  0010A8  2EE8               	decfsz	wreg,f,c
  5843  0010AA  D7FB               	goto	u1195
  5844  0010AC  0E07               	movlw	7
  5845  0010AE  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5846  0010B0                     u1205:
  5847  0010B0  3425               	rlcf	??_LCDout+1,w,c
  5848  0010B2  3225               	rrcf	??_LCDout+1,f,c
  5849  0010B4  3224               	rrcf	??_LCDout,f,c
  5850  0010B6  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5851  0010B8  D7FB               	goto	u1205
  5852  0010BA  4624               	rlncf	??_LCDout,f,c
  5853  0010BC  508B               	movf	3979,w,c	;volatile
  5854  0010BE  1824               	xorwf	??_LCDout,w,c
  5855  0010C0  0BFD               	andlw	-3
  5856  0010C2  1824               	xorwf	??_LCDout,w,c
  5857  0010C4  6E8B               	movwf	3979,c	;volatile
  5858                           
  5859                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5860  0010C6  5027               	movf	LCDout@number,w,c
  5861  0010C8  6E24               	movwf	??_LCDout& (0+255),c
  5862  0010CA  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5863  0010CC  0E06               	movlw	6
  5864  0010CE                     u1215:
  5865  0010CE  90D8               	bcf	status,0,c
  5866  0010D0  3624               	rlcf	??_LCDout,f,c
  5867  0010D2  3625               	rlcf	??_LCDout+1,f,c
  5868  0010D4  2EE8               	decfsz	wreg,f,c
  5869  0010D6  D7FB               	goto	u1215
  5870  0010D8  0E07               	movlw	7
  5871  0010DA  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5872  0010DC                     u1225:
  5873  0010DC  3425               	rlcf	??_LCDout+1,w,c
  5874  0010DE  3225               	rrcf	??_LCDout+1,f,c
  5875  0010E0  3224               	rrcf	??_LCDout,f,c
  5876  0010E2  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5877  0010E4  D7FB               	goto	u1225
  5878  0010E6  4624               	rlncf	??_LCDout,f,c
  5879  0010E8  4624               	rlncf	??_LCDout,f,c
  5880  0010EA  508B               	movf	3979,w,c	;volatile
  5881  0010EC  1824               	xorwf	??_LCDout,w,c
  5882  0010EE  0BFB               	andlw	-5
  5883  0010F0  1824               	xorwf	??_LCDout,w,c
  5884  0010F2  6E8B               	movwf	3979,c	;volatile
  5885                           
  5886                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5887  0010F4  5027               	movf	LCDout@number,w,c
  5888  0010F6  6E24               	movwf	??_LCDout& (0+255),c
  5889  0010F8  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5890  0010FA  0E05               	movlw	5
  5891  0010FC                     u1235:
  5892  0010FC  90D8               	bcf	status,0,c
  5893  0010FE  3624               	rlcf	??_LCDout,f,c
  5894  001100  3625               	rlcf	??_LCDout+1,f,c
  5895  001102  2EE8               	decfsz	wreg,f,c
  5896  001104  D7FB               	goto	u1235
  5897  001106  0E07               	movlw	7
  5898  001108  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5899  00110A                     u1245:
  5900  00110A  3425               	rlcf	??_LCDout+1,w,c
  5901  00110C  3225               	rrcf	??_LCDout+1,f,c
  5902  00110E  3224               	rrcf	??_LCDout,f,c
  5903  001110  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5904  001112  D7FB               	goto	u1245
  5905  001114  508C               	movf	3980,w,c	;volatile
  5906  001116  1824               	xorwf	??_LCDout,w,c
  5907  001118  0BFE               	andlw	-2
  5908  00111A  1824               	xorwf	??_LCDout,w,c
  5909  00111C  6E8C               	movwf	3980,c	;volatile
  5910                           
  5911                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5912  00111E  5027               	movf	LCDout@number,w,c
  5913  001120  6E24               	movwf	??_LCDout& (0+255),c
  5914  001122  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5915  001124  3A24               	swapf	??_LCDout,f,c
  5916  001126  3A25               	swapf	??_LCDout+1,f,c
  5917  001128  0EF0               	movlw	240
  5918  00112A  1625               	andwf	??_LCDout+1,f,c
  5919  00112C  5024               	movf	??_LCDout,w,c
  5920  00112E  0B0F               	andlw	15
  5921  001130  1225               	iorwf	??_LCDout+1,f,c
  5922  001132  0EF0               	movlw	240
  5923  001134  1624               	andwf	??_LCDout,f,c
  5924  001136  0E07               	movlw	7
  5925  001138  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5926  00113A                     u1255:
  5927  00113A  3425               	rlcf	??_LCDout+1,w,c
  5928  00113C  3225               	rrcf	??_LCDout+1,f,c
  5929  00113E  3224               	rrcf	??_LCDout,f,c
  5930  001140  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5931  001142  D7FB               	goto	u1255
  5932  001144  4624               	rlncf	??_LCDout,f,c
  5933  001146  508C               	movf	3980,w,c	;volatile
  5934  001148  1824               	xorwf	??_LCDout,w,c
  5935  00114A  0BFD               	andlw	-3
  5936  00114C  1824               	xorwf	??_LCDout,w,c
  5937  00114E  6E8C               	movwf	3980,c	;volatile
  5938                           
  5939                           ;LCD.c: 21: E_TOG();
  5940  001150  ECB3  F00C         	call	_E_TOG	;wreg free
  5941                           
  5942                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5943  001154  0E03               	movlw	3
  5944  001156                     u3027:
  5945  001156  2EE8               	decfsz	wreg,f,c
  5946  001158  D7FE               	goto	u3027
  5947  00115A  F000               	nop	
  5948  00115C  0012               	return		;funcret
  5949  00115E                     __end_of_LCDout:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           indf1	equ	0xFE7
  5961                           fsr1h	equ	0xFE2
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _E_TOG *****************
  5971 ;; Defined at:
  5972 ;;		line 5 in file "LCD.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;		None               void
  5979 ;; Registers used:
  5980 ;;		wreg
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5986 ;;      Params:         0       0       0       0
  5987 ;;      Locals:         0       0       0       0
  5988 ;;      Temps:          0       0       0       0
  5989 ;;      Totals:         0       0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_LCDout
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text29
  6001  001966                     __ptext29:
  6002                           	opt stack 0
  6003  001966                     _E_TOG:
  6004                           	opt stack 24
  6005                           
  6006                           ;LCD.c: 8: LATCbits.LATC0=1;
  6007                           
  6008                           ;incstack = 0
  6009  001966  808B               	bsf	3979,0,c	;volatile
  6010                           
  6011                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6012  001968  0E03               	movlw	3
  6013  00196A                     u3037:
  6014  00196A  2EE8               	decfsz	wreg,f,c
  6015  00196C  D7FE               	goto	u3037
  6016  00196E  F000               	nop	
  6017                           
  6018                           ;LCD.c: 10: LATCbits.LATC0=0;
  6019  001970  908B               	bcf	3979,0,c	;volatile
  6020  001972  0012               	return		;funcret
  6021  001974                     __end_of_E_TOG:
  6022                           	opt stack 0
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           prodh	equ	0xFF4
  6028                           prodl	equ	0xFF3
  6029                           intcon	equ	0xFF2
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           indf1	equ	0xFE7
  6033                           fsr1h	equ	0xFE2
  6034                           fsr1l	equ	0xFE1
  6035                           indf2	equ	0xFDF
  6036                           postinc2	equ	0xFDE
  6037                           postdec2	equ	0xFDD
  6038                           fsr2h	equ	0xFDA
  6039                           fsr2l	equ	0xFD9
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _InterruptHandlerLow *****************
  6043 ;; Defined at:
  6044 ;;		line 18 in file "main.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;		None
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;		None
  6049 ;; Return value:  Size  Location     Type
  6050 ;;		None               void
  6051 ;; Registers used:
  6052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6058 ;;      Params:         0       0       0       0
  6059 ;;      Locals:         0       0       0       0
  6060 ;;      Temps:         17       0       0       0
  6061 ;;      Totals:        17       0       0       0
  6062 ;;Total ram usage:       17 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    2
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		Interrupt level 1
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	intcodelo
  6073  000018                     __pintcodelo:
  6074                           	opt stack 0
  6075  000018                     _InterruptHandlerLow:
  6076                           	opt stack 23
  6077                           
  6078                           ;incstack = 0
  6079  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6080  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6081  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6082  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6083  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6084  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6085  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6086  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6087  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6088  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6089  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6090  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6091  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6092  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6093  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6094  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6095  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6096  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6097                           
  6098                           ;main.c: 20: if (PIR1bits.RCIF) {
  6099  00005E  AA9E               	btfss	3998,5,c	;volatile
  6100  000060  D016               	goto	i1l366
  6101                           
  6102                           ;main.c: 21: ReceivedString[i]=RCREG;
  6103  000062  503A               	movf	_i,w,c	;volatile
  6104  000064  0D01               	mullw	1
  6105  000066  0EC4               	movlw	low _ReceivedString
  6106  000068  24F3               	addwf	prodl,w,c
  6107  00006A  6ED9               	movwf	fsr2l,c
  6108  00006C  0E00               	movlw	high _ReceivedString
  6109  00006E  20F4               	addwfc	prodh,w,c
  6110  000070  6EDA               	movwf	fsr2h,c
  6111  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6112                           
  6113                           ;main.c: 22: RFID_Read=1;
  6114  000076  0E01               	movlw	1
  6115  000078  0101               	movlb	1	; () banked
  6116  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6117                           
  6118                           ; BSR set to: 1
  6119                           ;main.c: 23: if (i==15){
  6120  00007C  0E0F               	movlw	15
  6121  00007E  183A               	xorwf	_i,w,c	;volatile
  6122  000080  A4D8               	btfss	status,2,c
  6123  000082  D003               	goto	i1l2560
  6124                           
  6125                           ; BSR set to: 1
  6126                           ;main.c: 24: i=0;
  6127  000084  0E00               	movlw	0
  6128  000086  6E3A               	movwf	_i,c	;volatile
  6129                           
  6130                           ;main.c: 25: }else{
  6131  000088  D001               	goto	i1l2562
  6132  00008A                     i1l2560:
  6133                           
  6134                           ; BSR set to: 1
  6135                           ;main.c: 26: i++;
  6136  00008A  2A3A               	incf	_i,f,c	;volatile
  6137  00008C                     i1l2562:
  6138                           
  6139                           ; BSR set to: 1
  6140                           ;main.c: 27: }
  6141                           ;main.c: 28: PIR1bits.RCIF=0;
  6142  00008C  9A9E               	bcf	3998,5,c	;volatile
  6143  00008E                     i1l366:
  6144  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6145  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6146  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6147  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6148  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6149  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6150  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6151  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6152  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6153  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6154  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6155  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6156  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6157  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6158  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6159  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6160  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6161  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6162  0000D4  0010               	retfie	
  6163  0000D6                     __end_of_InterruptHandlerLow:
  6164                           	opt stack 0
  6165                           pclatu	equ	0xFFB
  6166                           pclath	equ	0xFFA
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           postinc0	equ	0xFEE
  6175                           fsr0h	equ	0xFEA
  6176                           fsr0l	equ	0xFE9
  6177                           wreg	equ	0xFE8
  6178                           indf1	equ	0xFE7
  6179                           fsr1h	equ	0xFE2
  6180                           fsr1l	equ	0xFE1
  6181                           bsr	equ	0xFE0
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189 ;; *************** function _InterruptHandlerHigh *****************
  6190 ;; Defined at:
  6191 ;;		line 34 in file "main.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       0       0       0
  6206 ;;      Locals:         0       0       0       0
  6207 ;;      Temps:         14       0       0       0
  6208 ;;      Totals:        14       0       0       0
  6209 ;;Total ram usage:       14 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    1
  6212 ;; This function calls:
  6213 ;;		i2_delay_tenth_s
  6214 ;; This function is called by:
  6215 ;;		Interrupt level 2
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	intcode
  6220  000008                     __pintcode:
  6221                           	opt stack 0
  6222  000008                     _InterruptHandlerHigh:
  6223                           	opt stack 23
  6224                           
  6225                           ;incstack = 0
  6226  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6227  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6228  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6229  000012  EFB1  F009         	goto	int_func
  6230                           pclatu	equ	0xFFB
  6231                           pclath	equ	0xFFA
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           intcon	equ	0xFF2
  6239                           postinc0	equ	0xFEE
  6240                           fsr0h	equ	0xFEA
  6241                           fsr0l	equ	0xFE9
  6242                           wreg	equ	0xFE8
  6243                           indf1	equ	0xFE7
  6244                           fsr1h	equ	0xFE2
  6245                           fsr1l	equ	0xFE1
  6246                           bsr	equ	0xFE0
  6247                           indf2	equ	0xFDF
  6248                           postinc2	equ	0xFDE
  6249                           postdec2	equ	0xFDD
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254                           	psect	intcode_body
  6255  001362                     __pintcode_body:
  6256                           	opt stack 23
  6257  001362                     int_func:
  6258                           	opt stack 23
  6259  001362  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6260  001366  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6261  00136A  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6262  00136E  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6263  001372  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6264  001376  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6265  00137A  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6266  00137E  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6267  001382  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6268  001386  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6269  00138A  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6270  00138E  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6271                           
  6272                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6273  001392  A2F2               	btfss	intcon,1,c	;volatile
  6274  001394  D00D               	goto	i2l374
  6275                           
  6276                           ;main.c: 36: if (mode==-1) {
  6277  001396  283B               	incf	_mode,w,c	;volatile
  6278  001398  A4D8               	btfss	status,2,c
  6279  00139A  D003               	goto	i2l2570
  6280                           
  6281                           ;main.c: 38: mode=1;
  6282  00139C  0E01               	movlw	1
  6283  00139E  6E3B               	movwf	_mode,c	;volatile
  6284                           
  6285                           ;main.c: 39: } else if (mode==0) {
  6286  0013A0  D003               	goto	i2l2574
  6287  0013A2                     i2l2570:
  6288  0013A2  503B               	movf	_mode,w,c	;volatile
  6289  0013A4  A4D8               	btfss	status,2,c
  6290                           
  6291                           ;main.c: 43: mode=-1;
  6292                           
  6293                           ;main.c: 41: } else {
  6294  0013A6  683B               	setf	_mode,c	;volatile
  6295  0013A8                     i2l2574:
  6296                           
  6297                           ;main.c: 44: }
  6298                           ;main.c: 46: delay_tenth_s(2);
  6299  0013A8  0E02               	movlw	2
  6300  0013AA  ECDC  F00B         	call	i2_delay_tenth_s
  6301                           
  6302                           ;main.c: 47: INTCONbits.INT0IF=0;
  6303  0013AE  92F2               	bcf	intcon,1,c	;volatile
  6304  0013B0                     i2l374:
  6305  0013B0  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6306  0013B4  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6307  0013B8  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6308  0013BC  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6309  0013C0  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6310  0013C4  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6311  0013C8  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6312  0013CC  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6313  0013D0  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6314  0013D4  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6315  0013D8  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6316  0013DC  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6317  0013E0  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6318  0013E4  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6319  0013E8  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6320  0013EA  0011               	retfie		f
  6321  0013EC                     __end_of_InterruptHandlerHigh:
  6322                           	opt stack 0
  6323                           pclatu	equ	0xFFB
  6324                           pclath	equ	0xFFA
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           intcon	equ	0xFF2
  6332                           postinc0	equ	0xFEE
  6333                           fsr0h	equ	0xFEA
  6334                           fsr0l	equ	0xFE9
  6335                           wreg	equ	0xFE8
  6336                           indf1	equ	0xFE7
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           bsr	equ	0xFE0
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function i2_delay_tenth_s *****************
  6348 ;; Defined at:
  6349 ;;		line 32 in file "Movement.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;  tenth_second    1    wreg     unsigned char 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6354 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;		None               void
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6364 ;;      Params:         0       0       0       0
  6365 ;;      Locals:         3       0       0       0
  6366 ;;      Temps:          1       0       0       0
  6367 ;;      Totals:         4       0       0       0
  6368 ;;Total ram usage:        4 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_InterruptHandlerHigh
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text32
  6378  0017B8                     __ptext32:
  6379                           	opt stack 0
  6380  0017B8                     i2_delay_tenth_s:
  6381                           	opt stack 23
  6382                           
  6383                           ;incstack = 0
  6384                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6385  0017B8  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6386                           
  6387                           ;Movement.c: 33: unsigned int i=0;
  6388  0017BA  0E00               	movlw	0
  6389  0017BC  6E04               	movwf	i2delay_tenth_s@i+1,c
  6390  0017BE  0E00               	movlw	0
  6391  0017C0  6E03               	movwf	i2delay_tenth_s@i,c
  6392                           
  6393                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6394  0017C2  0E00               	movlw	0
  6395  0017C4  6E04               	movwf	i2delay_tenth_s@i+1,c
  6396  0017C6  0E01               	movlw	1
  6397  0017C8  6E03               	movwf	i2delay_tenth_s@i,c
  6398  0017CA  D009               	goto	i2l2532
  6399  0017CC                     i2l2528:
  6400                           
  6401                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6402  0017CC  0E82               	movlw	130
  6403  0017CE  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6404  0017D0  0EDE               	movlw	222
  6405  0017D2                     i2u304_47:
  6406  0017D2  2EE8               	decfsz	wreg,f,c
  6407  0017D4  D7FE               	goto	i2u304_47
  6408  0017D6  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6409  0017D8  D7FC               	goto	i2u304_47
  6410  0017DA  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6411  0017DC  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6412  0017DE                     i2l2532:
  6413  0017DE  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6414  0017E0  0D02               	mullw	2
  6415  0017E2  5003               	movf	i2delay_tenth_s@i,w,c
  6416  0017E4  5CF3               	subwf	prodl,w,c
  6417  0017E6  5004               	movf	i2delay_tenth_s@i+1,w,c
  6418  0017E8  58F4               	subwfb	prodh,w,c
  6419  0017EA  A0D8               	btfss	status,0,c
  6420  0017EC  0012               	return	
  6421  0017EE  D7EE               	goto	i2l2528
  6422  0017F0                     __end_ofi2_delay_tenth_s:
  6423                           	opt stack 0
  6424                           pclatu	equ	0xFFB
  6425                           pclath	equ	0xFFA
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           fsr0h	equ	0xFEA
  6435                           fsr0l	equ	0xFE9
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           bsr	equ	0xFE0
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           pclatu	equ	0xFFB
  6448                           pclath	equ	0xFFA
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           postinc0	equ	0xFEE
  6457                           fsr0h	equ	0xFEA
  6458                           fsr0l	equ	0xFE9
  6459                           wreg	equ	0xFE8
  6460                           indf1	equ	0xFE7
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           bsr	equ	0xFE0
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471                           	psect	rparam
  6472  0000                     pclatu	equ	0xFFB
  6473                           pclath	equ	0xFFA
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           postinc0	equ	0xFEE
  6482                           fsr0h	equ	0xFEA
  6483                           fsr0l	equ	0xFE9
  6484                           wreg	equ	0xFE8
  6485                           indf1	equ	0xFE7
  6486                           fsr1h	equ	0xFE2
  6487                           fsr1l	equ	0xFE1
  6488                           bsr	equ	0xFE0
  6489                           indf2	equ	0xFDF
  6490                           postinc2	equ	0xFDE
  6491                           postdec2	equ	0xFDD
  6492                           fsr2h	equ	0xFDA
  6493                           fsr2l	equ	0xFD9
  6494                           status	equ	0xFD8
  6495                           
  6496                           	psect	temp
  6497  00003C                     btemp:
  6498                           	opt stack 0
  6499  00003C                     	ds	1
  6500  0000                     int$flags	set	btemp
  6501                           pclatu	equ	0xFFB
  6502                           pclath	equ	0xFFA
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           postinc0	equ	0xFEE
  6511                           fsr0h	equ	0xFEA
  6512                           fsr0l	equ	0xFE9
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           bsr	equ	0xFE0
  6518                           indf2	equ	0xFDF
  6519                           postinc2	equ	0xFDE
  6520                           postdec2	equ	0xFDD
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     92     116
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               278   278      0   56218
                                             82 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       69    61      8   21421
                                             13 BANK0     69    61      8
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      74       5       72.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C0       3        0.0%
DATA                 0      0     1C0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 18:37:22 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F40  
                                  l65 14CA                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0D02                                   l223 0D3E  
                                 l226 0DFA                                   l379 03F8  
                                 l869 167A                                   l879 16BC  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0164  
                                l2120 1508                                  l2042 1930  
                                l2132 1572                                  l2116 1500  
                                l2052 1648                                  l3100 0D9A  
                                l2150 1836                                  l2142 15B6  
                                l2126 1544                                  l2054 1650  
                                l2136 157A                                  l2064 1670  
                                l2056 1654                                  l2080 16B2  
                                l2072 1692                                  l3104 0DF6  
                                l2154 1848                                  l2074 169A  
                                l2314 18C0                                  l2164 160A  
                                l2076 169E                                  l3028 1080  
                                l2172 17A6                                  l3116 0E12  
                                l3212 04A4                                  l2158 15D6  
                                l3054 0C28                                  l3118 0E18  
                                l2510 1272                                  l3302 073E  
                                l2168 1794                                  l3304 0744  
                                l3312 07AC                                  l3216 04D6  
                                l2522 12CA                                  l2514 127A  
                                l3322 080A                                  l3324 0810  
                                l3252 05A4                                  l3236 052A  
                                l3270 0660                                  l3262 063C  
                                l3334 0850                                  l3280 06C8  
                                l2810 1458                                  l3098 0D82  
                                l3290 0712                                  l3266 064A  
                                l3258 05EE                                  l3178 03FE  
                                l3292 0718                                  l3284 06D2  
                                l2814 1466                                  l2806 144E  
                                l2904 0958                                  l2824 0F18  
                                l2832 148E                                  l3296 0722  
                                l2930 09EC                                  l2906 0980  
                                l2850 12E8                                  l2940 0A46  
                                l2916 09B0                                  l2860 1320  
                                l2836 14AA                                  l2828 1472  
                                l2950 0A74                                  l2942 0A50  
                                l2918 09B6                                  l2782 1400  
                                l2854 1300                                  l2846 12D0  
                                l2960 0AA6                                  l2936 0A0E  
                                l2882 089C                                  l2794 1426  
                                l2980 0B44                                  l2972 0AE8  
                                l2884 08AE                                  l2876 0880  
                                l2796 142E                                  l2788 1410  
                                l2974 0AEE                                  l2966 0ACA  
                                l2958 0A9A                                  l2894 08E6  
                                l2982 0B50                                  l2798 1432  
                                l2984 0B6A                                  l2888 08B6  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1205 10B0                                  u1215 10CE  
                                u1225 10DC                                  u1305 185C  
                                u1306 185E                                  u1235 10FC  
                                u2204 0ED8                                  u1245 110A  
                                u2205 0ED4                                  u1510 15FA  
                                u2214 0F34                                  _LATB 000F8A  
                                u1255 113A                                  u3007 186A  
                                u2215 0F30                                  u1520 162A  
                                u3017 187A                                  u2225 0F8E  
                                u3027 1156                                  u1195 10A2  
                                u3037 196A                                  u1517 15F0  
                                u1445 1510                                  u1527 1620  
                                u1475 1582                                  u2700 06A6  
                                u2702 06A8                                  u1755 18BC  
                                u1756 18BE                                  u1775 18CE  
                                u2807 1186                                  u1776 18D0  
                                u2817 1196                                  u2690 0692  
                                u2907 0C74                                  u2827 11A4  
                                u2692 0694                                  u2917 14C4  
                                u2837 11B2                                  u2927 179A  
                                u2847 11C4                                  u2937 0FEC  
                                u2857 11D6                                  u2777 0454  
                                u2947 1002                                  u2867 11EC  
                                u2787 046C                                  u2957 131A  
                                u2877 1200                                  u2797 1170  
                                u2967 1538                                  u2887 1212  
                                u2977 15AA                                  u2897 0C5C  
                                u2987 184A                                  u2997 1604  
                          ScanIR@Move 0071                                  _main 0350  
                                _mode 003B                         main@ScanAngle 00B4  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 12CE  
                                pclat 000FFA                   fullSpeedAhead@power 0066  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                          ___param_bank 000010  
                     i2_delay_tenth_s 17B8                       __end_of_SendLCD 1882  
                     __end_of_SetLine 1852                    ScanWithRange@F3892 00C0  
                         ScanIR@F3882 00BC                                 ?_main 0001  
                     __end_of___awdiv 1470                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1684  
                     __end_of___lwmod 16C6                                 i1l366 008E  
                               i2l374 13B0                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1966  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 121A  
                  ScanWithRange@power 00A9                       __end_of_dpowers 030B  
                     __end_of_isdigit 1938                                 main@i 00BB  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B78  
              __size_of_ScanWithRange 02EC                        __CFG_MCLRE$OFF 000000  
                     __initialization 1882                          __end_of_main 0872  
                        __end_of_stop 1362                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009F                  __end_of_enableSensor 18D2  
                 VerifySignal@hexByte 002D                                ??_main 00B2  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2560 008A  
                              i1l2562 008C                                i2l2532 17DE  
                      __CFG_WDTEN$OFF 000000                                i2l2528 17CC  
                              i2l2570 13A2                                i2l2574 13A8  
               __end_of_delay_tenth_s 17B8                                _LCDout 1098  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 17F0  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0F9E                             ??_SetLine 002A  
                              ___wmul 18D2                             ??___awdiv 002E  
                    __end_of_initRFID 1954                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 18F8  
                __size_of_grabRightIR 0072                                clear_0 1894  
                    ___awdiv@quotient 0030                                main@mL 0200  
                              main@mR 0209                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B78  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00A4  
                    __end_of_turnLeft 1780                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 189E                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1974  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 16C6  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 13E4           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00BC                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 1632  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 1562  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 18AC  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1822  
                             _SendLCD 1852                               __Hparam 0000  
                             _SetLine 1822                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 13EC  
                     __size_of___wmul 0026                               ___lwdiv 1632  
                             ___lwmod 1684                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1882  
                     ??_ScanWithRange 0075                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 1954                               __ptext2 1938  
                             __ptext3 17F0                               __ptext4 115E  
                             __ptext5 18F8                               __ptext6 16C6  
                             __ptext7 18AC                               __ptext8 121A  
                             __ptext9 0B78                             _T0CONbits 000FD5  
                             _initLCD 115E                     __end_of_initTimer 1966  
                             _dpowers 0301                               _isdigit 191A  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0872  
                      __pintcode_body 1362                  end_of_initialization 189E  
                      ScanWithRange@i 00A5                        ScanWithRange@n 00A2  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 1362  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 1742                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B0                        __end_of_LCDout 115E  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1098                        _fullSpeedAhead 1470  
                      _ReceivedString 00C4                        __end_of___wmul 18F8  
                         _BAUDCONbits 000FAA                        __end_of_initIR 191A  
              __size_of_delay_tenth_s 0038                   start_initialization 1882  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 13EC  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 14F0  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 1562  
                        _initMotorPWM 17F0                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1961 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1780  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 12CE                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B5  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 1954  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u304_47 17D2                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3896 01FA  
                         _grabRightIR 14F0                 ScanWithRange@LeftFlag 00AE  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0E64  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1704                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007A  
                 __end_of_setMotorPWM 0F9E                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1704                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 15D4                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1704  
                            __ptext11 1742                              __ptext20 18D2  
                            __ptext12 1470                              __ptext21 1684  
                            __ptext13 1780                              __ptext22 1632  
                            __ptext14 0F9E                              __ptext23 14F0  
                            __ptext15 12CE                              __ptext32 17B8  
                            __ptext24 1562                              __ptext16 0E64  
                            __ptext25 1822                              __ptext17 13EC  
                            __ptext26 15D4                              __ptext18 0872  
                            __ptext27 1852                              __ptext19 191A  
                            __ptext28 1098                              __ptext29 1966  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1938             ScanWithRange@SensorResult 00AA  
                      turnRight@power 006B                         __size_of_main 0522  
                  main@DirectionFound 00B9                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00BA  
                 _InterruptHandlerLow 0018                            _LCD_String 15D4  
                            _turnLeft 1742                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0E64  
                        _VerifySignal 121A                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A7                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
