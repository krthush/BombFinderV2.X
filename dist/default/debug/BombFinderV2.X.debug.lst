

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 21:09:51 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  00191E                     __pcinit:
   189                           	opt stack 0
   190  00191E                     start_initialization:
   191                           	opt stack 0
   192  00191E                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  00191E  0101               	movlb	1
   197  001920  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  001922  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  001924  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  001926  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  001928  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  00192A  EE00  F0BE         	lfsr	0,__pbssBANK0
   205  00192E  0E18               	movlw	24
   206  001930                     clear_0:
   207  001930  6AEE               	clrf	postinc0,c
   208  001932  06E8               	decf	wreg,f,c
   209  001934  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  001936  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  001938  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  00193A                     end_of_initialization:
   215                           	opt stack 0
   216  00193A                     __end_of__initialization:
   217                           	opt stack 0
   218  00193A  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  00193C  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  00193E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001940  6EF8               	movwf	tblptru,c
   222  001942  0100               	movlb	0
   223  001944  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BE                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BE                     ScanIR@F3883:
   245                           	opt stack 0
   246  0000BE                     	ds	4
   247  0000C2                     ScanWithRange@F3894:
   248                           	opt stack 0
   249  0000C2                     	ds	4
   250  0000C6                     _ReceivedString:
   251                           	opt stack 0
   252  0000C6                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3897:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
   275                           
   276                           ; 100 bytes @ 0x0
   277  000200                     	ds	100
   278  000264                     main@mL:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x64
   282  000264                     	ds	9
   283  00026D                     main@mR:
   284                           	opt stack 0
   285                           
   286                           ; 9 bytes @ 0x6D
   287  00026D                     	ds	9
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 200 bytes @ 0x0
   299  000100                     	ds	200
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ScanIR@MoveType:
   416                           	opt stack 0
   417  000075                     ScanWithRange@RFID_Read:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x15
   421  000075                     	ds	2
   422  000077                     ??_ScanWithRange:
   423  000077                     ScanIR@buf:
   424                           	opt stack 0
   425                           
   426                           ; 40 bytes @ 0x17
   427  000077                     	ds	5
   428  00007C                     ScanWithRange@buf:
   429                           	opt stack 0
   430                           
   431                           ; 40 bytes @ 0x1C
   432  00007C                     	ds	35
   433  00009F                     ScanIR@DirectionMoveThreshold:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x3F
   437  00009F                     	ds	2
   438  0000A1                     ScanIR@SensorResult:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x41
   442  0000A1                     	ds	3
   443  0000A4                     ScanWithRange@n:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x44
   447  0000A4                     	ds	2
   448  0000A6                     ScanWithRange@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x46
   452  0000A6                     	ds	2
   453  0000A8                     ScanWithRange@DirectionFoundThreshold:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x48
   457  0000A8                     	ds	2
   458  0000AA                     ScanWithRange@power:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x4A
   462  0000AA                     	ds	1
   463  0000AB                     ScanWithRange@TimeAboveThreshold:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x4B
   467  0000AB                     	ds	1
   468  0000AC                     ScanWithRange@SensorResult:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x4C
   472  0000AC                     	ds	4
   473  0000B0                     ScanWithRange@LeftFlag:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x50
   477  0000B0                     	ds	2
   478  0000B2                     ScanWithRange@RightFlag:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x52
   482  0000B2                     	ds	2
   483  0000B4                     ??_main:
   484                           
   485                           ; 0 bytes @ 0x54
   486  0000B4                     	ds	2
   487  0000B6                     main@ScanAngle:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x56
   491  0000B6                     	ds	1
   492  0000B7                     main@SensorResult:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x57
   496  0000B7                     	ds	4
   497  0000BB                     main@DirectionFound:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5B
   501  0000BB                     	ds	1
   502  0000BC                     main@Move:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x5C
   506  0000BC                     	ds	1
   507  0000BD                     main@i:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x5D
   511  0000BD                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516                           	psect	cstackCOMRAM
   517  000001                     __pcstackCOMRAM:
   518                           	opt stack 0
   519  000001                     ??i2_delay_tenth_s:
   520                           
   521                           ; 0 bytes @ 0x0
   522  000001                     	ds	1
   523  000002                     i2delay_tenth_s@tenth_seconds:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1
   527  000002                     	ds	1
   528  000003                     i2delay_tenth_s@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	2
   533  000005                     ??_InterruptHandlerHigh:
   534                           
   535                           ; 0 bytes @ 0x4
   536  000005                     	ds	14
   537  000013                     ??_InterruptHandlerLow:
   538                           
   539                           ; 0 bytes @ 0x12
   540  000013                     	ds	17
   541  000024                     ??_isdigit:
   542  000024                     ??_LCDout:
   543  000024                     ??_delay_tenth_s:
   544  000024                     ?_grabRightIR:
   545                           	opt stack 0
   546  000024                     ?_grabLeftIR:
   547                           	opt stack 0
   548  000024                     ?___wmul:
   549                           	opt stack 0
   550  000024                     ?___lwdiv:
   551                           	opt stack 0
   552  000024                     enableSensor@status:
   553                           	opt stack 0
   554  000024                     VerifySignal@Signal:
   555                           	opt stack 0
   556  000024                     ___wmul@multiplier:
   557                           	opt stack 0
   558  000024                     ___lwdiv@dividend:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x23
   562  000024                     	ds	1
   563  000025                     enableSensor@sensor:
   564                           	opt stack 0
   565  000025                     delay_tenth_s@tenth_seconds:
   566                           	opt stack 0
   567  000025                     _isdigit$1962:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x24
   571  000025                     	ds	1
   572  000026                     ??_grabRightIR:
   573  000026                     ??_grabLeftIR:
   574  000026                     ??_VerifySignal:
   575  000026                     isdigit@c:
   576                           	opt stack 0
   577  000026                     delay_tenth_s@i:
   578                           	opt stack 0
   579  000026                     ___wmul@multiplicand:
   580                           	opt stack 0
   581  000026                     ___lwdiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x25
   585  000026                     	ds	1
   586  000027                     LCDout@number:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x26
   590  000027                     	ds	1
   591  000028                     SendLCD@type:
   592                           	opt stack 0
   593  000028                     ___wmul@product:
   594                           	opt stack 0
   595  000028                     ___lwdiv@quotient:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x27
   599  000028                     	ds	1
   600  000029                     SendLCD@Byte:
   601                           	opt stack 0
   602  000029                     grabRightIR@IR_signal:
   603                           	opt stack 0
   604  000029                     grabLeftIR@IR_signal:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x28
   608  000029                     	ds	1
   609  00002A                     ??_initLCD:
   610  00002A                     ?___awdiv:
   611                           	opt stack 0
   612  00002A                     SetLine@line:
   613                           	opt stack 0
   614  00002A                     ___lwdiv@counter:
   615                           	opt stack 0
   616  00002A                     LCD_String@string:
   617                           	opt stack 0
   618  00002A                     ___awdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x29
   622  00002A                     	ds	1
   623  00002B                     ?___lwmod:
   624                           	opt stack 0
   625  00002B                     grabRightIR@i:
   626                           	opt stack 0
   627  00002B                     grabLeftIR@i:
   628                           	opt stack 0
   629  00002B                     ___lwmod@dividend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x2A
   633  00002B                     	ds	1
   634  00002C                     VerifySignal@hexByte:
   635                           	opt stack 0
   636  00002C                     ___awdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x2B
   640  00002C                     	ds	1
   641  00002D                     ___lwmod@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2C
   645  00002D                     	ds	1
   646  00002E                     VerifySignal@checksum:
   647                           	opt stack 0
   648  00002E                     ___awdiv@counter:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x2D
   652  00002E                     	ds	1
   653  00002F                     VerifySignal@i:
   654                           	opt stack 0
   655  00002F                     ___awdiv@sign:
   656                           	opt stack 0
   657  00002F                     ___lwmod@counter:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x2E
   661  00002F                     	ds	1
   662  000030                     ?_sprintf:
   663                           	opt stack 0
   664  000030                     sprintf@sp:
   665                           	opt stack 0
   666  000030                     ___awdiv@quotient:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2F
   670  000030                     	ds	2
   671  000032                     setMotorPWM@m:
   672                           	opt stack 0
   673  000032                     sprintf@f:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x31
   677  000032                     	ds	2
   678  000034                     ??_setMotorPWM:
   679                           
   680                           ; 0 bytes @ 0x33
   681  000034                     	ds	5
   682  000039                     ??_ScanIR:
   683                           
   684                           ; 0 bytes @ 0x38
   685  000039                     	ds	1
   686  00003A                     tblptru	equ	0xFF8
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           
   690                           ; 0 bytes @ 0x39
   691 ;;
   692 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   693 ;;
   694 ;; *************** function _main *****************
   695 ;; Defined at:
   696 ;;		line 51 in file "main.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  MoveTime      200    0[BANK1 ] int [100]
   701 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   702 ;;  buf            40  200[BANK1 ] unsigned char [40]
   703 ;;  Message        10  240[BANK1 ] unsigned char [10]
   704 ;;  mR              9  109[BANK2 ] struct DC_motor
   705 ;;  mL              9  100[BANK2 ] struct DC_motor
   706 ;;  SensorResult    4   87[BANK0 ] unsigned int [2]
   707 ;;  i               1   93[BANK0 ] unsigned char 
   708 ;;  Move            1   92[BANK0 ] unsigned char 
   709 ;;  DirectionFou    1   91[BANK0 ] char 
   710 ;;  ScanAngle       1   86[BANK0 ] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;		None               void
   713 ;; Registers used:
   714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   720 ;;      Params:         0       0       0       0
   721 ;;      Locals:         0       8     250     118
   722 ;;      Temps:          0       2       0       0
   723 ;;      Totals:         0      10     250     118
   724 ;;Total ram usage:      378 bytes
   725 ;; Hardware stack levels required when called:    8
   726 ;; This function calls:
   727 ;;		_LCD_String
   728 ;;		_ScanIR
   729 ;;		_ScanWithRange
   730 ;;		_SendLCD
   731 ;;		_SetLine
   732 ;;		_VerifySignal
   733 ;;		_delay_tenth_s
   734 ;;		_enableSensor
   735 ;;		_fullSpeedAhead
   736 ;;		_fullSpeedBack
   737 ;;		_grabLeftIR
   738 ;;		_grabRightIR
   739 ;;		_initIR
   740 ;;		_initLCD
   741 ;;		_initMotorPWM
   742 ;;		_initRFID
   743 ;;		_initTimer
   744 ;;		_sprintf
   745 ;;		_stop
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text0
   752  000350                     __ptext0:
   753                           	opt stack 0
   754  000350                     _main:
   755                           	opt stack 23
   756                           
   757                           ;main.c: 54: unsigned char Message[10];
   758                           ;main.c: 55: unsigned char i=0;
   759                           
   760                           ;incstack = 0
   761  000350  0E00               	movlw	0
   762  000352  0100               	movlb	0	; () banked
   763  000354  6FBD               	movwf	main@i& (0+255),b
   764                           
   765                           ;main.c: 56: signed char DirectionFound=0;
   766  000356  0E00               	movlw	0
   767  000358  0100               	movlb	0	; () banked
   768  00035A  6FBB               	movwf	main@DirectionFound& (0+255),b
   769                           
   770                           ;main.c: 57: int MoveTime[100];
   771                           ;main.c: 58: char MoveType[100];
   772                           ;main.c: 59: char Move=0;
   773  00035C  0E00               	movlw	0
   774  00035E  0100               	movlb	0	; () banked
   775  000360  6FBC               	movwf	main@Move& (0+255),b
   776                           
   777                           ; BSR set to: 0
   778                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   779  000362  C1FA  F0B7         	movff	main@F3897,main@SensorResult
   780  000366  C1FB  F0B8         	movff	main@F3897+1,main@SensorResult+1
   781  00036A  C1FC  F0B9         	movff	main@F3897+2,main@SensorResult+2
   782  00036E  C1FD  F0BA         	movff	main@F3897+3,main@SensorResult+3
   783                           
   784                           ;main.c: 61: char buf[40];
   785                           ;main.c: 63: unsigned char ScanAngle=60;
   786  000372  0E3C               	movlw	60
   787  000374  0100               	movlb	0	; () banked
   788  000376  6FB6               	movwf	main@ScanAngle& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 66: INTCONbits.GIEH=1;
   792  000378  8EF2               	bsf	intcon,7,c	;volatile
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 67: INTCONbits.GIEL=1;
   796  00037A  8CF2               	bsf	intcon,6,c	;volatile
   797                           
   798                           ; BSR set to: 0
   799                           ;main.c: 68: INTCONbits.PEIE=1;
   800  00037C  8CF2               	bsf	intcon,6,c	;volatile
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 69: RCONbits.IPEN=1;
   804  00037E  8ED0               	bsf	4048,7,c	;volatile
   805                           
   806                           ; BSR set to: 0
   807                           ;main.c: 72: IPR1bits.RCIP=0;
   808  000380  9A9F               	bcf	3999,5,c	;volatile
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 73: PIE1bits.RCIE=1;
   812  000382  8A9D               	bsf	3997,5,c	;volatile
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 76: TRISCbits.RC3=1;
   816  000384  8694               	bsf	3988,3,c	;volatile
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 77: INTCONbits.INT0IE=1;
   820  000386  88F2               	bsf	intcon,4,c	;volatile
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 80: PIR1bits.RC1IF=0;
   824  000388  9A9E               	bcf	3998,5,c	;volatile
   825                           
   826                           ; BSR set to: 0
   827                           ;main.c: 81: INTCONbits.INT0IF=0;
   828  00038A  92F2               	bcf	intcon,1,c	;volatile
   829                           
   830                           ;main.c: 84: struct DC_motor mL, mR;
   831                           ;main.c: 85: mL.power=0;
   832  00038C  0E00               	movlw	0
   833  00038E  0102               	movlb	2	; () banked
   834  000390  6F64               	movwf	main@mL& (0+255),b
   835                           
   836                           ;main.c: 86: mL.direction=1;
   837  000392  0E01               	movlw	1
   838  000394  0102               	movlb	2	; () banked
   839  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   840                           
   841                           ; BSR set to: 2
   842                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   843  000398  0E79               	movlw	121
   844  00039A  0102               	movlb	2	; () banked
   845  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   846  00039E  0E0F               	movlw	15
   847  0003A0  0102               	movlb	2	; () banked
   848  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   849                           
   850                           ; BSR set to: 2
   851                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   852  0003A4  0E78               	movlw	120
   853  0003A6  0102               	movlb	2	; () banked
   854  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   855  0003AA  0E0F               	movlw	15
   856  0003AC  0102               	movlb	2	; () banked
   857  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   858                           
   859                           ;main.c: 89: mL.dir_pin=0;
   860  0003B0  0E00               	movlw	0
   861  0003B2  0102               	movlb	2	; () banked
   862  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   863                           
   864                           ;main.c: 90: mL.PWMperiod=199;
   865  0003B6  0E00               	movlw	0
   866  0003B8  0102               	movlb	2	; () banked
   867  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   868  0003BC  0EC7               	movlw	199
   869  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   870                           
   871                           ;main.c: 92: mR.power=0;
   872  0003C0  0E00               	movlw	0
   873  0003C2  0102               	movlb	2	; () banked
   874  0003C4  6F6D               	movwf	main@mR& (0+255),b
   875                           
   876                           ;main.c: 93: mR.direction=1;
   877  0003C6  0E01               	movlw	1
   878  0003C8  0102               	movlb	2	; () banked
   879  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   880                           
   881                           ; BSR set to: 2
   882                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   883  0003CC  0E77               	movlw	119
   884  0003CE  0102               	movlb	2	; () banked
   885  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   886  0003D2  0E0F               	movlw	15
   887  0003D4  0102               	movlb	2	; () banked
   888  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   889                           
   890                           ; BSR set to: 2
   891                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   892  0003D8  0E76               	movlw	118
   893  0003DA  0102               	movlb	2	; () banked
   894  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   895  0003DE  0E0F               	movlw	15
   896  0003E0  0102               	movlb	2	; () banked
   897  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   898                           
   899                           ;main.c: 96: mR.dir_pin=2;
   900  0003E4  0E02               	movlw	2
   901  0003E6  0102               	movlb	2	; () banked
   902  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   903                           
   904                           ;main.c: 97: mR.PWMperiod=199;
   905  0003EA  0E00               	movlw	0
   906  0003EC  0102               	movlb	2	; () banked
   907  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   908  0003F0  0EC7               	movlw	199
   909  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   910                           
   911                           ;main.c: 99: OSCCON = 0x72;
   912  0003F4  0E72               	movlw	114
   913  0003F6  6ED3               	movwf	4051,c	;volatile
   914  0003F8                     l382:
   915  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   916  0003FA  D234               	goto	l3383
   917  0003FC  D7FD               	goto	l382
   918  0003FE                     l3225:
   919                           
   920                           ;main.c: 112: stop(&mL, &mR);
   921  0003FE  0E64               	movlw	low main@mL
   922  000400  0100               	movlb	0	; () banked
   923  000402  6F62               	movwf	stop@mL& (0+255),b
   924  000404  0E02               	movlw	high main@mL
   925  000406  0100               	movlb	0	; () banked
   926  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   927  00040A  0E6D               	movlw	low main@mR
   928  00040C  0100               	movlb	0	; () banked
   929  00040E  6F64               	movwf	stop@mR& (0+255),b
   930  000410  0E02               	movlw	high main@mR
   931  000412  0100               	movlb	0	; () banked
   932  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   933  000416  ECB5  F009         	call	_stop	;wreg free
   934                           
   935                           ;main.c: 113: RFID_Read=0;
   936  00041A  0E00               	movlw	0
   937  00041C  0101               	movlb	1	; () banked
   938  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   939                           
   940                           ; BSR set to: 1
   941                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   942  000420  ECFF  F00A         	call	_grabLeftIR	;wreg free
   943  000424  C024  F0B7         	movff	?_grabLeftIR,main@SensorResult
   944  000428  C025  F0B8         	movff	?_grabLeftIR+1,main@SensorResult+1
   945                           
   946                           ;main.c: 117: SensorResult[1]=grabRightIR();
   947  00042C  ECC6  F00A         	call	_grabRightIR	;wreg free
   948  000430  C024  F0B9         	movff	?_grabRightIR,main@SensorResult+2
   949  000434  C025  F0BA         	movff	?_grabRightIR+1,main@SensorResult+3
   950                           
   951                           ;main.c: 121: CAP1BUFH=0;
   952  000438  0E00               	movlw	0
   953  00043A  6E69               	movwf	3945,c	;volatile
   954                           
   955                           ;main.c: 122: CAP1BUFL=0;
   956  00043C  0E00               	movlw	0
   957  00043E  6E68               	movwf	3944,c	;volatile
   958                           
   959                           ;main.c: 123: CAP2BUFH=0;
   960  000440  0E00               	movlw	0
   961  000442  6E67               	movwf	3943,c	;volatile
   962                           
   963                           ;main.c: 124: CAP2BUFL=0;
   964  000444  0E00               	movlw	0
   965  000446  6E66               	movwf	3942,c	;volatile
   966                           
   967                           ;main.c: 127: SendLCD(0b00000001,0);
   968  000448  0E00               	movlw	0
   969  00044A  6E28               	movwf	SendLCD@type,c
   970  00044C  0E01               	movlw	1
   971  00044E  EC77  F00C         	call	_SendLCD
   972                           
   973                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   974  000452  0E21               	movlw	33
   975  000454                     u2827:
   976  000454  2EE8               	decfsz	wreg,f,c
   977  000456  D7FE               	goto	u2827
   978  000458  F000               	nop	
   979                           
   980                           ;main.c: 129: SendLCD(0b00000010,0);
   981  00045A  0E00               	movlw	0
   982  00045C  6E28               	movwf	SendLCD@type,c
   983  00045E  0E02               	movlw	2
   984  000460  EC77  F00C         	call	_SendLCD
   985                           
   986                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   987  000464  0E06               	movlw	6
   988  000466  0100               	movlb	0	; () banked
   989  000468  6FB4               	movwf	??_main& (0+255),b
   990  00046A  0E30               	movlw	48
   991  00046C                     u2837:
   992  00046C  2EE8               	decfsz	wreg,f,c
   993  00046E  D7FE               	goto	u2837
   994  000470  2FB4               	decfsz	??_main& (0+255),f,b
   995  000472  D7FC               	goto	u2837
   996  000474  D000               	nop2	
   997                           
   998                           ;main.c: 131: SetLine(1);
   999  000476  0E01               	movlw	1
  1000  000478  EC5F  F00C         	call	_SetLine
  1001                           
  1002                           ;main.c: 132: LCD_String("      Inert Mode");
  1003  00047C  0E1C               	movlw	low STR_5
  1004  00047E  6E2A               	movwf	LCD_String@string,c
  1005  000480  0E03               	movlw	high STR_5
  1006  000482  6E2B               	movwf	LCD_String@string+1,c
  1007  000484  EC38  F00B         	call	_LCD_String	;wreg free
  1008                           
  1009                           ;main.c: 133: SetLine(2);
  1010  000488  0E02               	movlw	2
  1011  00048A  EC5F  F00C         	call	_SetLine
  1012                           
  1013                           ;main.c: 134: if (RFID_Read) {
  1014  00048E  0101               	movlb	1	; () banked
  1015  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1016  000492  B4D8               	btfsc	status,2,c
  1017  000494  D007               	goto	l3259
  1018                           
  1019                           ; BSR set to: 1
  1020                           ;main.c: 135: LCD_String(Message);
  1021  000496  0EF0               	movlw	low main@Message
  1022  000498  6E2A               	movwf	LCD_String@string,c
  1023  00049A  0E01               	movlw	high main@Message
  1024  00049C  6E2B               	movwf	LCD_String@string+1,c
  1025  00049E  EC38  F00B         	call	_LCD_String	;wreg free
  1026                           
  1027                           ;main.c: 136: } else {
  1028  0004A2  D1E0               	goto	l3383
  1029  0004A4                     l3259:
  1030                           
  1031                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1032  0004A4  0EC8               	movlw	low main@buf
  1033  0004A6  6E30               	movwf	sprintf@sp,c
  1034  0004A8  0E01               	movlw	high main@buf
  1035  0004AA  6E31               	movwf	sprintf@sp+1,c
  1036  0004AC  0E0B               	movlw	low STR_6
  1037  0004AE  6E32               	movwf	sprintf@f,c
  1038  0004B0  0E03               	movlw	high STR_6
  1039  0004B2  6E33               	movwf	sprintf@f+1,c
  1040  0004B4  C0B7  F034         	movff	main@SensorResult,?_sprintf+4
  1041  0004B8  C0B8  F035         	movff	main@SensorResult+1,?_sprintf+5
  1042  0004BC  C0B9  F036         	movff	main@SensorResult+2,?_sprintf+6
  1043  0004C0  C0BA  F037         	movff	main@SensorResult+3,?_sprintf+7
  1044  0004C4  ECDA  F005         	call	_sprintf	;wreg free
  1045                           
  1046                           ;main.c: 138: LCD_String(buf);
  1047  0004C8  0EC8               	movlw	low main@buf
  1048  0004CA  6E2A               	movwf	LCD_String@string,c
  1049  0004CC  0E01               	movlw	high main@buf
  1050  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1051  0004D0  EC38  F00B         	call	_LCD_String	;wreg free
  1052                           
  1053                           ;main.c: 139: }
  1054                           ;main.c: 142: break;
  1055  0004D4  D1C7               	goto	l3383
  1056  0004D6                     l3263:
  1057                           
  1058                           ;main.c: 147: initMotorPWM();
  1059  0004D6  EC46  F00C         	call	_initMotorPWM	;wreg free
  1060                           
  1061                           ;main.c: 148: initTimer();
  1062  0004DA  ECF8  F00C         	call	_initTimer	;wreg free
  1063                           
  1064                           ;main.c: 149: initRFID();
  1065  0004DE  ECEA  F00C         	call	_initRFID	;wreg free
  1066                           
  1067                           ;main.c: 150: initLCD();
  1068  0004E2  EC57  F009         	call	_initLCD	;wreg free
  1069                           
  1070                           ;main.c: 151: initIR();
  1071  0004E6  ECCA  F00C         	call	_initIR	;wreg free
  1072                           
  1073                           ;main.c: 153: enableSensor(0, 1);
  1074  0004EA  0E01               	movlw	1
  1075  0004EC  6E24               	movwf	enableSensor@status,c
  1076  0004EE  0E00               	movlw	0
  1077  0004F0  ECA4  F00C         	call	_enableSensor
  1078                           
  1079                           ;main.c: 154: enableSensor(1, 1);
  1080  0004F4  0E01               	movlw	1
  1081  0004F6  6E24               	movwf	enableSensor@status,c
  1082  0004F8  0E01               	movlw	1
  1083  0004FA  ECA4  F00C         	call	_enableSensor
  1084                           
  1085                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1086  0004FE  0E64               	movlw	low main@mL
  1087  000500  0100               	movlb	0	; () banked
  1088  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1089  000504  0E02               	movlw	high main@mL
  1090  000506  0100               	movlb	0	; () banked
  1091  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1092  00050A  0E6D               	movlw	low main@mR
  1093  00050C  0100               	movlb	0	; () banked
  1094  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1095  000510  0E02               	movlw	high main@mR
  1096  000512  0100               	movlb	0	; () banked
  1097  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1098  000516  0E64               	movlw	100
  1099  000518  0100               	movlb	0	; () banked
  1100  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1101  00051C  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  1102                           
  1103                           ;main.c: 158: delay_tenth_s(1);
  1104  000520  0E01               	movlw	1
  1105  000522  EC0E  F00C         	call	_delay_tenth_s
  1106  000526  D19D               	goto	l3379
  1107  000528                     l3283:
  1108                           
  1109                           ;main.c: 170: SetLine(1);
  1110  000528  0E01               	movlw	1
  1111  00052A  EC5F  F00C         	call	_SetLine
  1112                           
  1113                           ;main.c: 171: LCD_String("Searching");
  1114  00052E  0E44               	movlw	low STR_7
  1115  000530  6E2A               	movwf	LCD_String@string,c
  1116  000532  0E03               	movlw	high STR_7
  1117  000534  6E2B               	movwf	LCD_String@string+1,c
  1118  000536  EC38  F00B         	call	_LCD_String	;wreg free
  1119                           
  1120                           ;main.c: 173: if (DirectionFound==-1) {
  1121  00053A  0100               	movlb	0	; () banked
  1122  00053C  29BB               	incf	main@DirectionFound& (0+255),w,b
  1123  00053E  A4D8               	btfss	status,2,c
  1124  000540  D030               	goto	l3299
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1128  000542  0E64               	movlw	low main@mL
  1129  000544  0100               	movlb	0	; () banked
  1130  000546  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1131  000548  0E02               	movlw	high main@mL
  1132  00054A  0100               	movlb	0	; () banked
  1133  00054C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1134  00054E  0E6D               	movlw	low main@mR
  1135  000550  0100               	movlb	0	; () banked
  1136  000552  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1137  000554  0E02               	movlw	high main@mR
  1138  000556  0100               	movlb	0	; () banked
  1139  000558  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1140  00055A  0E64               	movlw	100
  1141  00055C  0100               	movlb	0	; () banked
  1142  00055E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1143  000560  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  1144                           
  1145                           ;main.c: 179: delay_tenth_s(6);
  1146  000564  0E06               	movlw	6
  1147  000566  EC0E  F00C         	call	_delay_tenth_s
  1148                           
  1149                           ;main.c: 180: stop(&mL,&mR);
  1150  00056A  0E64               	movlw	low main@mL
  1151  00056C  0100               	movlb	0	; () banked
  1152  00056E  6F62               	movwf	stop@mL& (0+255),b
  1153  000570  0E02               	movlw	high main@mL
  1154  000572  0100               	movlb	0	; () banked
  1155  000574  6F63               	movwf	(stop@mL+1)& (0+255),b
  1156  000576  0E6D               	movlw	low main@mR
  1157  000578  0100               	movlb	0	; () banked
  1158  00057A  6F64               	movwf	stop@mR& (0+255),b
  1159  00057C  0E02               	movlw	high main@mR
  1160  00057E  0100               	movlb	0	; () banked
  1161  000580  6F65               	movwf	(stop@mR+1)& (0+255),b
  1162  000582  ECB5  F009         	call	_stop	;wreg free
  1163                           
  1164                           ;main.c: 181: DirectionFound=0;
  1165  000586  0E00               	movlw	0
  1166  000588  0100               	movlb	0	; () banked
  1167  00058A  6FBB               	movwf	main@DirectionFound& (0+255),b
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 182: MoveType[Move]=0;
  1171  00058C  0100               	movlb	0	; () banked
  1172  00058E  51BC               	movf	main@Move& (0+255),w,b
  1173  000590  0D01               	mullw	1
  1174  000592  0E00               	movlw	low main@MoveType
  1175  000594  24F3               	addwf	prodl,w,c
  1176  000596  6ED9               	movwf	fsr2l,c
  1177  000598  0E02               	movlw	high main@MoveType
  1178  00059A  20F4               	addwfc	prodh,w,c
  1179  00059C  6EDA               	movwf	fsr2h,c
  1180  00059E  0E00               	movlw	0
  1181  0005A0  D02B               	goto	L1
  1182  0005A2                     l3299:
  1183                           
  1184                           ; BSR set to: 0
  1185  0005A2  0100               	movlb	0	; () banked
  1186  0005A4  51BB               	movf	main@DirectionFound& (0+255),w,b
  1187  0005A6  0100               	movlb	0	; () banked
  1188  0005A8  A4D8               	btfss	status,2,c
  1189  0005AA  D028               	goto	l3305
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1193                           ;main.c: 186: &MoveTime[Move], &RFID_Read);
  1194  0005AC  0E64               	movlw	low main@mL
  1195  0005AE  0100               	movlb	0	; () banked
  1196  0005B0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1197  0005B2  0E02               	movlw	high main@mL
  1198  0005B4  0100               	movlb	0	; () banked
  1199  0005B6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1200  0005B8  0E6D               	movlw	low main@mR
  1201  0005BA  0100               	movlb	0	; () banked
  1202  0005BC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1203  0005BE  0E02               	movlw	high main@mR
  1204  0005C0  0100               	movlb	0	; () banked
  1205  0005C2  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1206  0005C4  C0B6  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1207  0005C8  0100               	movlb	0	; () banked
  1208  0005CA  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1209  0005CC  0100               	movlb	0	; () banked
  1210  0005CE  51BC               	movf	main@Move& (0+255),w,b
  1211  0005D0  0D02               	mullw	2
  1212  0005D2  0E00               	movlw	low main@MoveTime
  1213  0005D4  24F3               	addwf	prodl,w,c
  1214  0005D6  0100               	movlb	0	; () banked
  1215  0005D8  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1216  0005DA  0E01               	movlw	high main@MoveTime
  1217  0005DC  20F4               	addwfc	prodh,w,c
  1218  0005DE  0100               	movlb	0	; () banked
  1219  0005E0  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1220  0005E2  0EFE               	movlw	low _RFID_Read
  1221  0005E4  0100               	movlb	0	; () banked
  1222  0005E6  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1223  0005E8  0E01               	movlw	high _RFID_Read
  1224  0005EA  0100               	movlb	0	; () banked
  1225  0005EC  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1226  0005EE  EC43  F004         	call	_ScanWithRange	;wreg free
  1227  0005F2  0100               	movlb	0	; () banked
  1228  0005F4  6FBB               	movwf	main@DirectionFound& (0+255),b
  1229  0005F6  D030               	goto	l3313
  1230  0005F8                     L1:
  1231  0005F8  6EDF               	movwf	indf2,c
  1232                           
  1233                           ;main.c: 188: } else if (DirectionFound==1) {
  1234  0005FA  D110               	goto	l3369
  1235  0005FC                     l3305:
  1236                           
  1237                           ; BSR set to: 0
  1238  0005FC  0100               	movlb	0	; () banked
  1239  0005FE  05BB               	decf	main@DirectionFound& (0+255),w,b
  1240  000600  A4D8               	btfss	status,2,c
  1241  000602  D023               	goto	l3309
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1245  000604  0E64               	movlw	low main@mL
  1246  000606  0100               	movlb	0	; () banked
  1247  000608  6F6D               	movwf	ScanIR@mL& (0+255),b
  1248  00060A  0E02               	movlw	high main@mL
  1249  00060C  0100               	movlb	0	; () banked
  1250  00060E  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1251  000610  0E6D               	movlw	low main@mR
  1252  000612  0100               	movlb	0	; () banked
  1253  000614  6F6F               	movwf	ScanIR@mR& (0+255),b
  1254  000616  0E02               	movlw	high main@mR
  1255  000618  0100               	movlb	0	; () banked
  1256  00061A  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1257  00061C  0EBC               	movlw	low main@Move
  1258  00061E  0100               	movlb	0	; () banked
  1259  000620  6F71               	movwf	ScanIR@Move& (0+255),b
  1260  000622  0E00               	movlw	high main@Move
  1261  000624  0100               	movlb	0	; () banked
  1262  000626  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1263  000628  0E00               	movlw	low main@MoveTime
  1264  00062A  0100               	movlb	0	; () banked
  1265  00062C  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1266  00062E  0E01               	movlw	high main@MoveTime
  1267  000630  0100               	movlb	0	; () banked
  1268  000632  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1269  000634  0E00               	movlw	low main@MoveType
  1270  000636  0100               	movlb	0	; () banked
  1271  000638  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1272  00063A  0E02               	movlw	high main@MoveType
  1273  00063C  0100               	movlb	0	; () banked
  1274  00063E  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1275  000640  EC77  F008         	call	_ScanIR	;wreg free
  1276  000644  0100               	movlb	0	; () banked
  1277  000646  6FBB               	movwf	main@DirectionFound& (0+255),b
  1278                           
  1279                           ;main.c: 191: } else if (DirectionFound==2) {
  1280  000648  D0E9               	goto	l3369
  1281  00064A                     l3309:
  1282                           
  1283                           ; BSR set to: 0
  1284  00064A  0E02               	movlw	2
  1285  00064C  0100               	movlb	0	; () banked
  1286  00064E  19BB               	xorwf	main@DirectionFound& (0+255),w,b
  1287  000650  A4D8               	btfss	status,2,c
  1288  000652  D0E4               	goto	l3369
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 193: mode=2;
  1292  000654  0E02               	movlw	2
  1293  000656  6E3B               	movwf	_mode,c	;volatile
  1294  000658                     l3313:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 194: MoveType[Move]=1;
  1298  000658  0100               	movlb	0	; () banked
  1299  00065A  51BC               	movf	main@Move& (0+255),w,b
  1300  00065C  0D01               	mullw	1
  1301  00065E  0E00               	movlw	low main@MoveType
  1302  000660  24F3               	addwf	prodl,w,c
  1303  000662  6ED9               	movwf	fsr2l,c
  1304  000664  0E02               	movlw	high main@MoveType
  1305  000666  20F4               	addwfc	prodh,w,c
  1306  000668  6EDA               	movwf	fsr2h,c
  1307  00066A  0E01               	movlw	1
  1308  00066C  D7C5               	goto	L1
  1309  00066E                     l3317:
  1310                           
  1311                           ;main.c: 206: if (RFID_Read) {
  1312  00066E  0101               	movlb	1	; () banked
  1313  000670  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1314  000672  B4D8               	btfsc	status,2,c
  1315  000674  D0A2               	goto	l3359
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 207: stop(&mL, &mR);
  1319  000676  0E64               	movlw	low main@mL
  1320  000678  0100               	movlb	0	; () banked
  1321  00067A  6F62               	movwf	stop@mL& (0+255),b
  1322  00067C  0E02               	movlw	high main@mL
  1323  00067E  0100               	movlb	0	; () banked
  1324  000680  6F63               	movwf	(stop@mL+1)& (0+255),b
  1325  000682  0E6D               	movlw	low main@mR
  1326  000684  0100               	movlb	0	; () banked
  1327  000686  6F64               	movwf	stop@mR& (0+255),b
  1328  000688  0E02               	movlw	high main@mR
  1329  00068A  0100               	movlb	0	; () banked
  1330  00068C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1331  00068E  ECB5  F009         	call	_stop	;wreg free
  1332                           
  1333                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1334  000692  0E03               	movlw	3
  1335  000694  0100               	movlb	0	; () banked
  1336  000696  19D5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1337  000698  A4D8               	btfss	status,2,c
  1338  00069A  D002               	goto	u2740
  1339  00069C  0E01               	movlw	1
  1340  00069E  D001               	goto	u2742
  1341  0006A0                     u2740:
  1342  0006A0  0E00               	movlw	0
  1343  0006A2                     u2742:
  1344  0006A2  0100               	movlb	0	; () banked
  1345  0006A4  6FB4               	movwf	??_main& (0+255),b
  1346  0006A6  0E02               	movlw	2
  1347  0006A8  0100               	movlb	0	; () banked
  1348  0006AA  19C6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1349  0006AC  A4D8               	btfss	status,2,c
  1350  0006AE  D002               	goto	u2750
  1351  0006B0  0E01               	movlw	1
  1352  0006B2  D001               	goto	u2752
  1353  0006B4                     u2750:
  1354  0006B4  0E00               	movlw	0
  1355  0006B6                     u2752:
  1356  0006B6  0100               	movlb	0	; () banked
  1357  0006B8  15B4               	andwf	??_main& (0+255),w,b
  1358  0006BA  A0E8               	btfss	wreg,0,c
  1359  0006BC  D0D3               	goto	l3383
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1363  0006BE  0EC6               	movlw	low _ReceivedString
  1364  0006C0  6E24               	movwf	VerifySignal@Signal,c
  1365  0006C2  0E00               	movlw	high _ReceivedString
  1366  0006C4  6E25               	movwf	VerifySignal@Signal+1,c
  1367  0006C6  ECFA  F007         	call	_VerifySignal	;wreg free
  1368  0006CA  0900               	iorlw	0
  1369  0006CC  B4D8               	btfsc	status,2,c
  1370  0006CE  D041               	goto	l3351
  1371                           
  1372                           ;main.c: 211: for (i=0; i<10; i++){
  1373  0006D0  0E00               	movlw	0
  1374  0006D2  0100               	movlb	0	; () banked
  1375  0006D4  6FBD               	movwf	main@i& (0+255),b
  1376  0006D6                     l3327:
  1377                           
  1378                           ; BSR set to: 0
  1379  0006D6  0E09               	movlw	9
  1380  0006D8  0100               	movlb	0	; () banked
  1381  0006DA  65BD               	cpfsgt	main@i& (0+255),b
  1382  0006DC  D001               	goto	l3331
  1383  0006DE  D020               	goto	l3337
  1384  0006E0                     l3331:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1388  0006E0  0100               	movlb	0	; () banked
  1389  0006E2  51BD               	movf	main@i& (0+255),w,b
  1390  0006E4  0100               	movlb	0	; () banked
  1391  0006E6  6FB4               	movwf	??_main& (0+255),b
  1392  0006E8  6BB5               	clrf	(??_main+1)& (0+255),b
  1393  0006EA  0E01               	movlw	1
  1394  0006EC  0100               	movlb	0	; () banked
  1395  0006EE  27B4               	addwf	??_main& (0+255),f,b
  1396  0006F0  0E00               	movlw	0
  1397  0006F2  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1398  0006F4  0EC6               	movlw	low _ReceivedString
  1399  0006F6  0100               	movlb	0	; () banked
  1400  0006F8  25B4               	addwf	??_main& (0+255),w,b
  1401  0006FA  6ED9               	movwf	fsr2l,c
  1402  0006FC  0E00               	movlw	high _ReceivedString
  1403  0006FE  0100               	movlb	0	; () banked
  1404  000700  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1405  000702  6EDA               	movwf	fsr2h,c
  1406  000704  0100               	movlb	0	; () banked
  1407  000706  51BD               	movf	main@i& (0+255),w,b
  1408  000708  0D01               	mullw	1
  1409  00070A  0EF0               	movlw	low main@Message
  1410  00070C  24F3               	addwf	prodl,w,c
  1411  00070E  6EE1               	movwf	fsr1l,c
  1412  000710  0E01               	movlw	high main@Message
  1413  000712  20F4               	addwfc	prodh,w,c
  1414  000714  6EE2               	movwf	fsr1h,c
  1415  000716  CFDF FFE7          	movff	indf2,indf1
  1416                           
  1417                           ; BSR set to: 0
  1418  00071A  0100               	movlb	0	; () banked
  1419  00071C  2BBD               	incf	main@i& (0+255),f,b
  1420  00071E  D7DB               	goto	l3327
  1421  000720                     l3337:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 213: }
  1425                           ;main.c: 216: for (i=0; i<16; i++) {
  1426  000720  0E00               	movlw	0
  1427  000722  0100               	movlb	0	; () banked
  1428  000724  6FBD               	movwf	main@i& (0+255),b
  1429  000726                     l3339:
  1430                           
  1431                           ; BSR set to: 0
  1432  000726  0E0F               	movlw	15
  1433  000728  0100               	movlb	0	; () banked
  1434  00072A  65BD               	cpfsgt	main@i& (0+255),b
  1435  00072C  D001               	goto	l3343
  1436  00072E  D00E               	goto	l3349
  1437  000730                     l3343:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 217: ReceivedString[i]=0;
  1441  000730  0100               	movlb	0	; () banked
  1442  000732  51BD               	movf	main@i& (0+255),w,b
  1443  000734  0D01               	mullw	1
  1444  000736  0EC6               	movlw	low _ReceivedString
  1445  000738  24F3               	addwf	prodl,w,c
  1446  00073A  6ED9               	movwf	fsr2l,c
  1447  00073C  0E00               	movlw	high _ReceivedString
  1448  00073E  20F4               	addwfc	prodh,w,c
  1449  000740  6EDA               	movwf	fsr2h,c
  1450  000742  0E00               	movlw	0
  1451  000744  6EDF               	movwf	indf2,c
  1452                           
  1453                           ; BSR set to: 0
  1454  000746  0100               	movlb	0	; () banked
  1455  000748  2BBD               	incf	main@i& (0+255),f,b
  1456  00074A  D7ED               	goto	l3339
  1457  00074C                     l3349:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 218: }
  1461                           ;main.c: 219: mode=3;
  1462  00074C  0E03               	movlw	3
  1463  00074E  6E3B               	movwf	_mode,c	;volatile
  1464                           
  1465                           ;main.c: 221: } else {
  1466  000750  D089               	goto	l3383
  1467  000752                     l3351:
  1468                           
  1469                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1470  000752  0E64               	movlw	low main@mL
  1471  000754  0100               	movlb	0	; () banked
  1472  000756  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1473  000758  0E02               	movlw	high main@mL
  1474  00075A  0100               	movlb	0	; () banked
  1475  00075C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1476  00075E  0E6D               	movlw	low main@mR
  1477  000760  0100               	movlb	0	; () banked
  1478  000762  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1479  000764  0E02               	movlw	high main@mR
  1480  000766  0100               	movlb	0	; () banked
  1481  000768  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1482  00076A  0E64               	movlw	100
  1483  00076C  0100               	movlb	0	; () banked
  1484  00076E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1485  000770  ECB1  F00B         	call	_fullSpeedBack	;wreg free
  1486                           
  1487                           ;main.c: 223: delay_tenth_s(5);
  1488  000774  0E05               	movlw	5
  1489  000776  EC0E  F00C         	call	_delay_tenth_s
  1490                           
  1491                           ;main.c: 224: stop(&mL,&mR);
  1492  00077A  0E64               	movlw	low main@mL
  1493  00077C  0100               	movlb	0	; () banked
  1494  00077E  6F62               	movwf	stop@mL& (0+255),b
  1495  000780  0E02               	movlw	high main@mL
  1496  000782  0100               	movlb	0	; () banked
  1497  000784  6F63               	movwf	(stop@mL+1)& (0+255),b
  1498  000786  0E6D               	movlw	low main@mR
  1499  000788  0100               	movlb	0	; () banked
  1500  00078A  6F64               	movwf	stop@mR& (0+255),b
  1501  00078C  0E02               	movlw	high main@mR
  1502  00078E  0100               	movlb	0	; () banked
  1503  000790  6F65               	movwf	(stop@mR+1)& (0+255),b
  1504  000792  ECB5  F009         	call	_stop	;wreg free
  1505                           
  1506                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1507  000796  0E64               	movlw	low main@mL
  1508  000798  0100               	movlb	0	; () banked
  1509  00079A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1510  00079C  0E02               	movlw	high main@mL
  1511  00079E  0100               	movlb	0	; () banked
  1512  0007A0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1513  0007A2  0E6D               	movlw	low main@mR
  1514  0007A4  0100               	movlb	0	; () banked
  1515  0007A6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1516  0007A8  0E02               	movlw	high main@mR
  1517  0007AA  0100               	movlb	0	; () banked
  1518  0007AC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1519  0007AE  0E64               	movlw	100
  1520  0007B0  0100               	movlb	0	; () banked
  1521  0007B2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1522  0007B4  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  1523                           
  1524                           ;main.c: 226: }
  1525                           ;main.c: 227: }
  1526                           ;main.c: 228: } else {
  1527  0007B8  D055               	goto	l3383
  1528  0007BA                     l3359:
  1529                           
  1530                           ;main.c: 229: DirectionFound=1;
  1531  0007BA  0E01               	movlw	1
  1532  0007BC  0100               	movlb	0	; () banked
  1533  0007BE  6FBB               	movwf	main@DirectionFound& (0+255),b
  1534                           
  1535                           ;main.c: 230: mode=1;
  1536  0007C0  0E01               	movlw	1
  1537  0007C2  6E3B               	movwf	_mode,c	;volatile
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1541  0007C4  0E64               	movlw	low main@mL
  1542  0007C6  0100               	movlb	0	; () banked
  1543  0007C8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1544  0007CA  0E02               	movlw	high main@mL
  1545  0007CC  0100               	movlb	0	; () banked
  1546  0007CE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1547  0007D0  0E6D               	movlw	low main@mR
  1548  0007D2  0100               	movlb	0	; () banked
  1549  0007D4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1550  0007D6  0E02               	movlw	high main@mR
  1551  0007D8  0100               	movlb	0	; () banked
  1552  0007DA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1553  0007DC  0E64               	movlw	100
  1554  0007DE  0100               	movlb	0	; () banked
  1555  0007E0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1556  0007E2  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  1557                           
  1558                           ;main.c: 233: delay_tenth_s(5);
  1559  0007E6  0E05               	movlw	5
  1560  0007E8  EC0E  F00C         	call	_delay_tenth_s
  1561                           
  1562                           ;main.c: 234: MoveType[Move] = 0;
  1563  0007EC  0100               	movlb	0	; () banked
  1564  0007EE  51BC               	movf	main@Move& (0+255),w,b
  1565  0007F0  0D01               	mullw	1
  1566  0007F2  0E00               	movlw	low main@MoveType
  1567  0007F4  24F3               	addwf	prodl,w,c
  1568  0007F6  6ED9               	movwf	fsr2l,c
  1569  0007F8  0E02               	movlw	high main@MoveType
  1570  0007FA  20F4               	addwfc	prodh,w,c
  1571  0007FC  6EDA               	movwf	fsr2h,c
  1572  0007FE  0E00               	movlw	0
  1573  000800  6EDF               	movwf	indf2,c
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 235: MoveTime[Move] = 5;
  1577  000802  0100               	movlb	0	; () banked
  1578  000804  51BC               	movf	main@Move& (0+255),w,b
  1579  000806  0D02               	mullw	2
  1580  000808  0E00               	movlw	low main@MoveTime
  1581  00080A  24F3               	addwf	prodl,w,c
  1582  00080C  6ED9               	movwf	fsr2l,c
  1583  00080E  0E01               	movlw	high main@MoveTime
  1584  000810  20F4               	addwfc	prodh,w,c
  1585  000812  6EDA               	movwf	fsr2h,c
  1586  000814  0E05               	movlw	5
  1587  000816  6EDE               	movwf	postinc2,c
  1588  000818  0E00               	movlw	0
  1589  00081A  6EDD               	movwf	postdec2,c
  1590  00081C                     l3369:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 236: Move++;
  1594  00081C  0100               	movlb	0	; () banked
  1595  00081E  2BBC               	incf	main@Move& (0+255),f,b
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 237: }
  1599                           ;main.c: 239: break;
  1600  000820  D021               	goto	l3383
  1601  000822                     l3371:
  1602                           
  1603                           ;main.c: 244: SetLine(1);
  1604  000822  0E01               	movlw	1
  1605  000824  EC5F  F00C         	call	_SetLine
  1606                           
  1607                           ;main.c: 245: LCD_String(Message);
  1608  000828  0EF0               	movlw	low main@Message
  1609  00082A  6E2A               	movwf	LCD_String@string,c
  1610  00082C  0E01               	movlw	high main@Message
  1611  00082E  6E2B               	movwf	LCD_String@string+1,c
  1612  000830  EC38  F00B         	call	_LCD_String	;wreg free
  1613                           
  1614                           ;main.c: 246: SetLine(2);
  1615  000834  0E02               	movlw	2
  1616  000836  EC5F  F00C         	call	_SetLine
  1617                           
  1618                           ;main.c: 247: LCD_String("Going Home");
  1619  00083A  0E39               	movlw	low STR_8
  1620  00083C  6E2A               	movwf	LCD_String@string,c
  1621  00083E  0E03               	movlw	high STR_8
  1622  000840  6E2B               	movwf	LCD_String@string+1,c
  1623  000842  EC38  F00B         	call	_LCD_String	;wreg free
  1624                           
  1625                           ;main.c: 248: stop(&mL,&mR);
  1626  000846  0E64               	movlw	low main@mL
  1627  000848  0100               	movlb	0	; () banked
  1628  00084A  6F62               	movwf	stop@mL& (0+255),b
  1629  00084C  0E02               	movlw	high main@mL
  1630  00084E  0100               	movlb	0	; () banked
  1631  000850  6F63               	movwf	(stop@mL+1)& (0+255),b
  1632  000852  0E6D               	movlw	low main@mR
  1633  000854  0100               	movlb	0	; () banked
  1634  000856  6F64               	movwf	stop@mR& (0+255),b
  1635  000858  0E02               	movlw	high main@mR
  1636  00085A  0100               	movlb	0	; () banked
  1637  00085C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1638  00085E  ECB5  F009         	call	_stop	;wreg free
  1639  000862                     l3379:
  1640                           
  1641                           ;main.c: 264: mode=-1;
  1642  000862  683B               	setf	_mode,c	;volatile
  1643  000864                     l3383:
  1644  000864  503B               	movf	_mode,w,c	;volatile
  1645                           
  1646                           ; Switch size 1, requested type "space"
  1647                           ; Number of cases is 5, Range of values is 0 to 255
  1648                           ; switch strategies available:
  1649                           ; Name         Instructions Cycles
  1650                           ; simple_byte           16     9 (average)
  1651                           ;	Chosen strategy is simple_byte
  1652  000866  0A00               	xorlw	0	; case 0
  1653  000868  B4D8               	btfsc	status,2,c
  1654  00086A  D635               	goto	l3263
  1655  00086C  0A01               	xorlw	1	; case 1
  1656  00086E  B4D8               	btfsc	status,2,c
  1657  000870  D65B               	goto	l3283
  1658  000872  0A03               	xorlw	3	; case 2
  1659  000874  B4D8               	btfsc	status,2,c
  1660  000876  D6FB               	goto	l3317
  1661  000878  0A01               	xorlw	1	; case 3
  1662  00087A  B4D8               	btfsc	status,2,c
  1663  00087C  D7D2               	goto	l3371
  1664  00087E  0AFC               	xorlw	252	; case 255
  1665  000880  B4D8               	btfsc	status,2,c
  1666  000882  D5BD               	goto	l3225
  1667  000884  D7EF               	goto	l3383
  1668  000886                     __end_of_main:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           intcon	equ	0xFF2
  1674                           postinc0	equ	0xFEE
  1675                           wreg	equ	0xFE8
  1676                           indf1	equ	0xFE7
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           postdec2	equ	0xFDD
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _initTimer *****************
  1687 ;; Defined at:
  1688 ;;		line 8 in file "Movement.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;		None               void
  1695 ;; Registers used:
  1696 ;;		None
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1702 ;;      Params:         0       0       0       0
  1703 ;;      Locals:         0       0       0       0
  1704 ;;      Temps:          0       0       0       0
  1705 ;;      Totals:         0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    3
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text1
  1717  0019F0                     __ptext1:
  1718                           	opt stack 0
  1719  0019F0                     _initTimer:
  1720                           	opt stack 27
  1721                           
  1722                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1723                           
  1724                           ;incstack = 0
  1725  0019F0  9ED5               	bcf	4053,7,c	;volatile
  1726                           
  1727                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1728  0019F2  9CD5               	bcf	4053,6,c	;volatile
  1729                           
  1730                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1731  0019F4  9AD5               	bcf	4053,5,c	;volatile
  1732                           
  1733                           ;Movement.c: 13: T0CONbits.PSA=0;
  1734  0019F6  96D5               	bcf	4053,3,c	;volatile
  1735                           
  1736                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1737  0019F8  80D5               	bsf	4053,0,c	;volatile
  1738  0019FA  82D5               	bsf	4053,1,c	;volatile
  1739  0019FC  84D5               	bsf	4053,2,c	;volatile
  1740                           
  1741                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1742  0019FE  9AF2               	bcf	intcon,5,c	;volatile
  1743  001A00  0012               	return		;funcret
  1744  001A02                     __end_of_initTimer:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           indf1	equ	0xFE7
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           indf2	equ	0xFDF
  1756                           postinc2	equ	0xFDE
  1757                           postdec2	equ	0xFDD
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _initRFID *****************
  1763 ;; Defined at:
  1764 ;;		line 5 in file "RFID_Reader.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;		None               void
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1778 ;;      Params:         0       0       0       0
  1779 ;;      Locals:         0       0       0       0
  1780 ;;      Temps:          0       0       0       0
  1781 ;;      Totals:         0       0       0       0
  1782 ;;Total ram usage:        0 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    3
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text2
  1793  0019D4                     __ptext2:
  1794                           	opt stack 0
  1795  0019D4                     _initRFID:
  1796                           	opt stack 27
  1797                           
  1798                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1799                           
  1800                           ;incstack = 0
  1801  0019D4  5094               	movf	3988,w,c	;volatile
  1802  0019D6  09C0               	iorlw	192
  1803  0019D8  6E94               	movwf	3988,c	;volatile
  1804                           
  1805                           ;RFID_Reader.c: 10: SPBRG=205;
  1806  0019DA  0ECD               	movlw	205
  1807  0019DC  6EAF               	movwf	4015,c	;volatile
  1808                           
  1809                           ;RFID_Reader.c: 11: SPBRGH=0;
  1810  0019DE  0E00               	movlw	0
  1811  0019E0  6EB0               	movwf	4016,c	;volatile
  1812                           
  1813                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1814  0019E2  86AA               	bsf	4010,3,c	;volatile
  1815                           
  1816                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1817  0019E4  84AC               	bsf	4012,2,c	;volatile
  1818                           
  1819                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1820  0019E6  88AB               	bsf	4011,4,c	;volatile
  1821                           
  1822                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1823  0019E8  8EAB               	bsf	4011,7,c	;volatile
  1824                           
  1825                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1826  0019EA  98AC               	bcf	4012,4,c	;volatile
  1827                           
  1828                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1829  0019EC  9CAB               	bcf	4011,6,c	;volatile
  1830  0019EE  0012               	return		;funcret
  1831  0019F0                     __end_of_initRFID:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           indf1	equ	0xFE7
  1840                           fsr1h	equ	0xFE2
  1841                           fsr1l	equ	0xFE1
  1842                           indf2	equ	0xFDF
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _initMotorPWM *****************
  1850 ;; Defined at:
  1851 ;;		line 4 in file "dc_motor.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, status,2
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       0       0       0
  1868 ;;      Totals:         0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    3
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text3
  1880  00188C                     __ptext3:
  1881                           	opt stack 0
  1882  00188C                     _initMotorPWM:
  1883                           	opt stack 27
  1884                           
  1885                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1886                           
  1887                           ;incstack = 0
  1888  00188C  0E00               	movlw	0
  1889  00188E  6E7F               	movwf	3967,c	;volatile
  1890                           
  1891                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1892  001890  0E80               	movlw	128
  1893  001892  6E7E               	movwf	3966,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1896  001894  0E6F               	movlw	111
  1897  001896  6E6F               	movwf	3951,c	;volatile
  1898                           
  1899                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1900  001898  0E00               	movlw	0
  1901  00189A  6E6E               	movwf	3950,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1904  00189C  0EC7               	movlw	199
  1905  00189E  6E7B               	movwf	3963,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1908  0018A0  0E00               	movlw	0
  1909  0018A2  6E7A               	movwf	3962,c	;volatile
  1910                           
  1911                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1912  0018A4  0E00               	movlw	0
  1913  0018A6  6E79               	movwf	3961,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1916  0018A8  0E00               	movlw	0
  1917  0018AA  6E78               	movwf	3960,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1920  0018AC  0E00               	movlw	0
  1921  0018AE  6E77               	movwf	3959,c	;volatile
  1922                           
  1923                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1924  0018B0  0E00               	movlw	0
  1925  0018B2  6E76               	movwf	3958,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1928  0018B4  9093               	bcf	3987,0,c	;volatile
  1929                           
  1930                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1931  0018B6  9293               	bcf	3987,1,c	;volatile
  1932                           
  1933                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1934  0018B8  9493               	bcf	3987,2,c	;volatile
  1935                           
  1936                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1937  0018BA  9693               	bcf	3987,3,c	;volatile
  1938  0018BC  0012               	return		;funcret
  1939  0018BE                     __end_of_initMotorPWM:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf1	equ	0xFE7
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _initLCD *****************
  1958 ;; Defined at:
  1959 ;;		line 38 in file "LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1973 ;;      Params:         0       0       0       0
  1974 ;;      Locals:         0       0       0       0
  1975 ;;      Temps:          1       0       0       0
  1976 ;;      Totals:         1       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_LCDout
  1982 ;;		_SendLCD
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  0012AE                     __ptext4:
  1990                           	opt stack 0
  1991  0012AE                     _initLCD:
  1992                           	opt stack 24
  1993                           
  1994                           ;LCD.c: 44: TRISAbits.RA6=0;
  1995                           
  1996                           ;incstack = 0
  1997  0012AE  9C92               	bcf	3986,6,c	;volatile
  1998                           
  1999                           ;LCD.c: 45: TRISCbits.RC0=0;
  2000  0012B0  9094               	bcf	3988,0,c	;volatile
  2001                           
  2002                           ;LCD.c: 46: TRISCbits.RC1=0;
  2003  0012B2  9294               	bcf	3988,1,c	;volatile
  2004                           
  2005                           ;LCD.c: 47: TRISCbits.RC2=0;
  2006  0012B4  9494               	bcf	3988,2,c	;volatile
  2007                           
  2008                           ;LCD.c: 48: TRISDbits.RD0=0;
  2009  0012B6  9095               	bcf	3989,0,c	;volatile
  2010                           
  2011                           ;LCD.c: 49: TRISDbits.RD1=0;
  2012  0012B8  9295               	bcf	3989,1,c	;volatile
  2013                           
  2014                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2015  0012BA  0E27               	movlw	39
  2016  0012BC  6E2A               	movwf	??_initLCD& (0+255),c
  2017  0012BE  0EF5               	movlw	245
  2018  0012C0                     u2847:
  2019  0012C0  2EE8               	decfsz	wreg,f,c
  2020  0012C2  D7FE               	goto	u2847
  2021  0012C4  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2022  0012C6  D7FC               	goto	u2847
  2023  0012C8  F000               	nop	
  2024                           
  2025                           ;LCD.c: 52: LCDout(0b0011);
  2026  0012CA  0E03               	movlw	3
  2027  0012CC  ECF4  F008         	call	_LCDout
  2028                           
  2029                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2030  0012D0  0E0D               	movlw	13
  2031  0012D2  6E2A               	movwf	??_initLCD& (0+255),c
  2032  0012D4  0EFC               	movlw	252
  2033  0012D6                     u2857:
  2034  0012D6  2EE8               	decfsz	wreg,f,c
  2035  0012D8  D7FE               	goto	u2857
  2036  0012DA  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2037  0012DC  D7FC               	goto	u2857
  2038                           
  2039                           ;LCD.c: 54: LCDout(0b0011);
  2040  0012DE  0E03               	movlw	3
  2041  0012E0  ECF4  F008         	call	_LCDout
  2042                           
  2043                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2044  0012E4  0E85               	movlw	133
  2045  0012E6                     u2867:
  2046  0012E6  2EE8               	decfsz	wreg,f,c
  2047  0012E8  D7FE               	goto	u2867
  2048  0012EA  F000               	nop	
  2049                           
  2050                           ;LCD.c: 56: LCDout(0b0011);
  2051  0012EC  0E03               	movlw	3
  2052  0012EE  ECF4  F008         	call	_LCDout
  2053                           
  2054                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2055  0012F2  0E21               	movlw	33
  2056  0012F4                     u2877:
  2057  0012F4  2EE8               	decfsz	wreg,f,c
  2058  0012F6  D7FE               	goto	u2877
  2059  0012F8  F000               	nop	
  2060                           
  2061                           ;LCD.c: 58: LCDout(0b0010);
  2062  0012FA  0E02               	movlw	2
  2063  0012FC  ECF4  F008         	call	_LCDout
  2064                           
  2065                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2066  001300  0E21               	movlw	33
  2067  001302                     u2887:
  2068  001302  2EE8               	decfsz	wreg,f,c
  2069  001304  D7FE               	goto	u2887
  2070  001306  F000               	nop	
  2071                           
  2072                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2073  001308  0E00               	movlw	0
  2074  00130A  6E28               	movwf	SendLCD@type,c
  2075  00130C  0E28               	movlw	40
  2076  00130E  EC77  F00C         	call	_SendLCD
  2077                           
  2078                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2079  001312  0E21               	movlw	33
  2080  001314                     u2897:
  2081  001314  2EE8               	decfsz	wreg,f,c
  2082  001316  D7FE               	goto	u2897
  2083  001318  F000               	nop	
  2084                           
  2085                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2086  00131A  0E00               	movlw	0
  2087  00131C  6E28               	movwf	SendLCD@type,c
  2088  00131E  0E08               	movlw	8
  2089  001320  EC77  F00C         	call	_SendLCD
  2090                           
  2091                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2092  001324  0E21               	movlw	33
  2093  001326                     u2907:
  2094  001326  2EE8               	decfsz	wreg,f,c
  2095  001328  D7FE               	goto	u2907
  2096  00132A  F000               	nop	
  2097                           
  2098                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2099  00132C  0E00               	movlw	0
  2100  00132E  6E28               	movwf	SendLCD@type,c
  2101  001330  0E01               	movlw	1
  2102  001332  EC77  F00C         	call	_SendLCD
  2103                           
  2104                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2105  001336  0E0D               	movlw	13
  2106  001338  6E2A               	movwf	??_initLCD& (0+255),c
  2107  00133A  0EFC               	movlw	252
  2108  00133C                     u2917:
  2109  00133C  2EE8               	decfsz	wreg,f,c
  2110  00133E  D7FE               	goto	u2917
  2111  001340  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2112  001342  D7FC               	goto	u2917
  2113                           
  2114                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2115  001344  0E00               	movlw	0
  2116  001346  6E28               	movwf	SendLCD@type,c
  2117  001348  0E06               	movlw	6
  2118  00134A  EC77  F00C         	call	_SendLCD
  2119                           
  2120                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2121  00134E  0E21               	movlw	33
  2122  001350                     u2927:
  2123  001350  2EE8               	decfsz	wreg,f,c
  2124  001352  D7FE               	goto	u2927
  2125  001354  F000               	nop	
  2126                           
  2127                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2128  001356  0E00               	movlw	0
  2129  001358  6E28               	movwf	SendLCD@type,c
  2130  00135A  0E0C               	movlw	12
  2131  00135C  EC77  F00C         	call	_SendLCD
  2132                           
  2133                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2134  001360  0E21               	movlw	33
  2135  001362                     u2937:
  2136  001362  2EE8               	decfsz	wreg,f,c
  2137  001364  D7FE               	goto	u2937
  2138  001366  F000               	nop	
  2139  001368  0012               	return		;funcret
  2140  00136A                     __end_of_initLCD:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           intcon	equ	0xFF2
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           indf1	equ	0xFE7
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function _initIR *****************
  2159 ;; Defined at:
  2160 ;;		line 30 in file "IR_Reading.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, status,2
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    3
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text5
  2189  001994                     __ptext5:
  2190                           	opt stack 0
  2191  001994                     _initIR:
  2192                           	opt stack 27
  2193                           
  2194                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2195                           
  2196                           ;incstack = 0
  2197  001994  9489               	bcf	3977,2,c	;volatile
  2198                           
  2199                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2200  001996  9689               	bcf	3977,3,c	;volatile
  2201                           
  2202                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2203  001998  8492               	bsf	3986,2,c	;volatile
  2204                           
  2205                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2206  00199A  8692               	bsf	3986,3,c	;volatile
  2207                           
  2208                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2209  00199C  94B8               	bcf	4024,2,c	;volatile
  2210                           
  2211                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2212  00199E  96B8               	bcf	4024,3,c	;volatile
  2213                           
  2214                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2215  0019A0  9CB8               	bcf	4024,6,c	;volatile
  2216                           
  2217                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2218  0019A2  9EB8               	bcf	4024,7,c	;volatile
  2219                           
  2220                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2221  0019A4  0E06               	movlw	6
  2222  0019A6  6E63               	movwf	3939,c	;volatile
  2223                           
  2224                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2225  0019A8  0E06               	movlw	6
  2226  0019AA  6E62               	movwf	3938,c	;volatile
  2227                           
  2228                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2229  0019AC  9096               	bcf	3990,0,c	;volatile
  2230                           
  2231                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2232  0019AE  9296               	bcf	3990,1,c	;volatile
  2233                           
  2234                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2235  0019B0  0E59               	movlw	89
  2236  0019B2  6EB7               	movwf	4023,c	;volatile
  2237  0019B4  0012               	return		;funcret
  2238  0019B6                     __end_of_initIR:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           indf1	equ	0xFE7
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _fullSpeedBack *****************
  2257 ;; Defined at:
  2258 ;;		line 125 in file "dc_motor.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2261 ;;		 -> main@mL(9), 
  2262 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2263 ;;		 -> main@mR(9), 
  2264 ;;  power           1   11[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;		None
  2267 ;; Return value:  Size  Location     Type
  2268 ;;		None               void
  2269 ;; Registers used:
  2270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2276 ;;      Params:         0       5       0       0
  2277 ;;      Locals:         0       0       0       0
  2278 ;;      Temps:          0       0       0       0
  2279 ;;      Totals:         0       5       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    6
  2283 ;; This function calls:
  2284 ;;		_fullSpeedAhead
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text6
  2291  001762                     __ptext6:
  2292                           	opt stack 0
  2293  001762                     _fullSpeedBack:
  2294                           	opt stack 24
  2295                           
  2296                           ;dc_motor.c: 128: mL->direction=0;
  2297                           
  2298                           ;incstack = 0
  2299  001762  0100               	movlb	0	; () banked
  2300  001764  EE20 F001          	lfsr	2,1
  2301  001768  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2302  00176A  26D9               	addwf	fsr2l,f,c
  2303  00176C  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2304  00176E  22DA               	addwfc	fsr2h,f,c
  2305  001770  0E00               	movlw	0
  2306  001772  6EDF               	movwf	indf2,c
  2307                           
  2308                           ;dc_motor.c: 129: mR->direction=0;
  2309  001774  0100               	movlb	0	; () banked
  2310  001776  EE20 F001          	lfsr	2,1
  2311  00177A  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2312  00177C  26D9               	addwf	fsr2l,f,c
  2313  00177E  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2314  001780  22DA               	addwfc	fsr2h,f,c
  2315  001782  0E00               	movlw	0
  2316  001784  6EDF               	movwf	indf2,c
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2320  001786  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2321  00178A  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2322  00178E  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2323  001792  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2324  001796  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2325  00179A  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  2326  00179E  0012               	return		;funcret
  2327  0017A0                     __end_of_fullSpeedBack:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           intcon	equ	0xFF2
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           indf1	equ	0xFE7
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           indf2	equ	0xFDF
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _enableSensor *****************
  2346 ;; Defined at:
  2347 ;;		line 106 in file "IR_Reading.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  sensor          1    wreg     unsigned char 
  2350 ;;  status          1   35[COMRAM] unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  sensor          1   36[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2362 ;;      Params:         1       0       0       0
  2363 ;;      Locals:         1       0       0       0
  2364 ;;      Temps:          0       0       0       0
  2365 ;;      Totals:         2       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    3
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text7
  2377  001948                     __ptext7:
  2378                           	opt stack 0
  2379  001948                     _enableSensor:
  2380                           	opt stack 27
  2381                           
  2382                           ;incstack = 0
  2383                           ;enableSensor@sensor stored from wreg
  2384  001948  6E25               	movwf	enableSensor@sensor,c
  2385                           
  2386                           ;IR_Reading.c: 108: if (sensor==0){
  2387  00194A  5025               	movf	enableSensor@sensor,w,c
  2388  00194C  A4D8               	btfss	status,2,c
  2389  00194E  D006               	goto	l2335
  2390                           
  2391                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2392  001950  B024               	btfsc	enableSensor@status,0,c
  2393  001952  D002               	bra	u1775
  2394  001954  908D               	bcf	3981,0,c	;volatile
  2395  001956  D001               	bra	u1776
  2396  001958                     u1775:
  2397  001958  808D               	bsf	3981,0,c	;volatile
  2398  00195A                     u1776:
  2399                           
  2400                           ;IR_Reading.c: 110: } else if (sensor==1){
  2401  00195A  0012               	return	
  2402  00195C                     l2335:
  2403  00195C  0425               	decf	enableSensor@sensor,w,c
  2404  00195E  A4D8               	btfss	status,2,c
  2405  001960  0012               	return	
  2406                           
  2407                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2408  001962  B024               	btfsc	enableSensor@status,0,c
  2409  001964  D002               	bra	u1795
  2410  001966  928D               	bcf	3981,1,c	;volatile
  2411  001968  D001               	bra	u1796
  2412  00196A                     u1795:
  2413  00196A  828D               	bsf	3981,1,c	;volatile
  2414  00196C                     u1796:
  2415  00196C  0012               	return	
  2416  00196E                     __end_of_enableSensor:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           indf1	equ	0xFE7
  2425                           fsr1h	equ	0xFE2
  2426                           fsr1l	equ	0xFE1
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _VerifySignal *****************
  2435 ;; Defined at:
  2436 ;;		line 55 in file "RFID_Reader.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2439 ;;		 -> ReceivedString(16), 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  hexByte         2   43[COMRAM] unsigned int 
  2442 ;;  i               1   46[COMRAM] unsigned char 
  2443 ;;  checksum        1   45[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      unsigned char 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2453 ;;      Params:         2       0       0       0
  2454 ;;      Locals:         4       0       0       0
  2455 ;;      Temps:          6       0       0       0
  2456 ;;      Totals:        12       0       0       0
  2457 ;;Total ram usage:       12 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    3
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text8
  2468  000FF4                     __ptext8:
  2469                           	opt stack 0
  2470  000FF4                     _VerifySignal:
  2471                           	opt stack 27
  2472                           
  2473                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2474                           
  2475                           ;incstack = 0
  2476  000FF4  0E00               	movlw	0
  2477  000FF6  6E2E               	movwf	VerifySignal@checksum,c
  2478                           
  2479                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2480  000FF8  0E00               	movlw	0
  2481  000FFA  6E2D               	movwf	VerifySignal@hexByte+1,c
  2482  000FFC  0E00               	movlw	0
  2483  000FFE  6E2C               	movwf	VerifySignal@hexByte,c
  2484                           
  2485                           ;RFID_Reader.c: 58: unsigned char i=0;
  2486  001000  0E00               	movlw	0
  2487  001002  6E2F               	movwf	VerifySignal@i,c
  2488                           
  2489                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2490  001004  EE20 F004          	lfsr	2,4
  2491  001008  5024               	movf	VerifySignal@Signal,w,c
  2492  00100A  26D9               	addwf	fsr2l,f,c
  2493  00100C  5025               	movf	VerifySignal@Signal+1,w,c
  2494  00100E  22DA               	addwfc	fsr2h,f,c
  2495  001010  50DF               	movf	indf2,w,c
  2496  001012  6E26               	movwf	??_VerifySignal& (0+255),c
  2497  001014  EE20 F003          	lfsr	2,3
  2498  001018  5024               	movf	VerifySignal@Signal,w,c
  2499  00101A  26D9               	addwf	fsr2l,f,c
  2500  00101C  5025               	movf	VerifySignal@Signal+1,w,c
  2501  00101E  22DA               	addwfc	fsr2h,f,c
  2502  001020  50DF               	movf	indf2,w,c
  2503  001022  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2504  001024  5027               	movf	??_VerifySignal+1,w,c
  2505  001026  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2506  001028  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2507  00102A  5026               	movf	??_VerifySignal,w,c
  2508  00102C  2428               	addwf	??_VerifySignal+2,w,c
  2509  00102E  6E2C               	movwf	VerifySignal@hexByte,c
  2510  001030  0E00               	movlw	0
  2511  001032  2029               	addwfc	??_VerifySignal+3,w,c
  2512  001034  6E2D               	movwf	VerifySignal@hexByte+1,c
  2513                           
  2514                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2515  001036  EE20 F002          	lfsr	2,2
  2516  00103A  5024               	movf	VerifySignal@Signal,w,c
  2517  00103C  26D9               	addwf	fsr2l,f,c
  2518  00103E  5025               	movf	VerifySignal@Signal+1,w,c
  2519  001040  22DA               	addwfc	fsr2h,f,c
  2520  001042  50DF               	movf	indf2,w,c
  2521  001044  182C               	xorwf	VerifySignal@hexByte,w,c
  2522  001046  6E2E               	movwf	VerifySignal@checksum,c
  2523                           
  2524                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2525  001048  0E05               	movlw	5
  2526  00104A  6E2F               	movwf	VerifySignal@i,c
  2527  00104C                     l2539:
  2528  00104C  0E09               	movlw	9
  2529  00104E  642F               	cpfsgt	VerifySignal@i,c
  2530  001050  D001               	goto	l2543
  2531  001052  D028               	goto	l2551
  2532  001054                     l2543:
  2533                           
  2534                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2535  001054  502F               	movf	VerifySignal@i,w,c
  2536  001056  6E26               	movwf	??_VerifySignal& (0+255),c
  2537  001058  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2538  00105A  0E01               	movlw	1
  2539  00105C  2626               	addwf	??_VerifySignal,f,c
  2540  00105E  0E00               	movlw	0
  2541  001060  2227               	addwfc	??_VerifySignal+1,f,c
  2542  001062  5026               	movf	??_VerifySignal,w,c
  2543  001064  2424               	addwf	VerifySignal@Signal,w,c
  2544  001066  6ED9               	movwf	fsr2l,c
  2545  001068  5027               	movf	??_VerifySignal+1,w,c
  2546  00106A  2025               	addwfc	VerifySignal@Signal+1,w,c
  2547  00106C  6EDA               	movwf	fsr2h,c
  2548  00106E  50DF               	movf	indf2,w,c
  2549  001070  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2550  001072  502F               	movf	VerifySignal@i,w,c
  2551  001074  0D01               	mullw	1
  2552  001076  50F3               	movf	prodl,w,c
  2553  001078  2424               	addwf	VerifySignal@Signal,w,c
  2554  00107A  6ED9               	movwf	fsr2l,c
  2555  00107C  50F4               	movf	prodh,w,c
  2556  00107E  2025               	addwfc	VerifySignal@Signal+1,w,c
  2557  001080  6EDA               	movwf	fsr2h,c
  2558  001082  50DF               	movf	indf2,w,c
  2559  001084  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2560  001086  5029               	movf	??_VerifySignal+3,w,c
  2561  001088  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2562  00108A  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2563  00108C  5028               	movf	??_VerifySignal+2,w,c
  2564  00108E  242A               	addwf	??_VerifySignal+4,w,c
  2565  001090  6E2C               	movwf	VerifySignal@hexByte,c
  2566  001092  0E00               	movlw	0
  2567  001094  202B               	addwfc	??_VerifySignal+5,w,c
  2568  001096  6E2D               	movwf	VerifySignal@hexByte+1,c
  2569                           
  2570                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2571  001098  502E               	movf	VerifySignal@checksum,w,c
  2572  00109A  182C               	xorwf	VerifySignal@hexByte,w,c
  2573  00109C  6E2E               	movwf	VerifySignal@checksum,c
  2574  00109E  0E02               	movlw	2
  2575  0010A0  262F               	addwf	VerifySignal@i,f,c
  2576  0010A2  D7D4               	goto	l2539
  2577  0010A4                     l2551:
  2578                           
  2579                           ;RFID_Reader.c: 68: }
  2580                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2581  0010A4  502E               	movf	VerifySignal@checksum,w,c
  2582  0010A6  6E26               	movwf	??_VerifySignal& (0+255),c
  2583  0010A8  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2584  0010AA  EE20 F00B          	lfsr	2,11
  2585  0010AE  5024               	movf	VerifySignal@Signal,w,c
  2586  0010B0  26D9               	addwf	fsr2l,f,c
  2587  0010B2  5025               	movf	VerifySignal@Signal+1,w,c
  2588  0010B4  22DA               	addwfc	fsr2h,f,c
  2589  0010B6  50DF               	movf	indf2,w,c
  2590  0010B8  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2591  0010BA  5028               	movf	??_VerifySignal+2,w,c
  2592  0010BC  6E2A               	movwf	(??_VerifySignal+4)& (0+255),c
  2593  0010BE  6A29               	clrf	(??_VerifySignal+3)& (0+255),c
  2594  0010C0  EE20 F00C          	lfsr	2,12
  2595  0010C4  5024               	movf	VerifySignal@Signal,w,c
  2596  0010C6  26D9               	addwf	fsr2l,f,c
  2597  0010C8  5025               	movf	VerifySignal@Signal+1,w,c
  2598  0010CA  22DA               	addwfc	fsr2h,f,c
  2599  0010CC  50DF               	movf	indf2,w,c
  2600  0010CE  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2601  0010D0  502B               	movf	??_VerifySignal+5,w,c
  2602  0010D2  2629               	addwf	??_VerifySignal+3,f,c
  2603  0010D4  0E00               	movlw	0
  2604  0010D6  222A               	addwfc	??_VerifySignal+4,f,c
  2605  0010D8  5026               	movf	??_VerifySignal,w,c
  2606  0010DA  1829               	xorwf	??_VerifySignal+3,w,c
  2607  0010DC  E106               	bnz	l2559
  2608  0010DE  5027               	movf	??_VerifySignal+1,w,c
  2609  0010E0  182A               	xorwf	??_VerifySignal+4,w,c
  2610  0010E2  A4D8               	btfss	status,2,c
  2611  0010E4  D002               	goto	l2559
  2612                           
  2613                           ;RFID_Reader.c: 71: return 1;
  2614  0010E6  0E01               	movlw	1
  2615                           
  2616                           ;RFID_Reader.c: 72: } else{
  2617  0010E8  0012               	return	
  2618  0010EA                     l2559:
  2619                           
  2620                           ;RFID_Reader.c: 73: return 0;
  2621  0010EA  0E00               	movlw	0
  2622  0010EC  0012               	return	
  2623  0010EE                     __end_of_VerifySignal:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           indf1	equ	0xFE7
  2632                           fsr1h	equ	0xFE2
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           postinc2	equ	0xFDE
  2636                           postdec2	equ	0xFDD
  2637                           fsr2h	equ	0xFDA
  2638                           fsr2l	equ	0xFD9
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _ScanWithRange *****************
  2642 ;; Defined at:
  2643 ;;		line 91 in file "Movement.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2646 ;;		 -> main@mL(9), 
  2647 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2648 ;;		 -> main@mR(9), 
  2649 ;;  milliseconds    2   17[BANK0 ] int 
  2650 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2651 ;;		 -> main@MoveTime(200), 
  2652 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2653 ;;		 -> RFID_Read(1), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  buf            40   28[BANK0 ] unsigned char [40]
  2656 ;;  SensorResult    4   76[BANK0 ] unsigned int [2]
  2657 ;;  RightFlag       2   82[BANK0 ] unsigned int 
  2658 ;;  LeftFlag        2   80[BANK0 ] unsigned int 
  2659 ;;  DirectionFou    2   72[BANK0 ] const unsigned int 
  2660 ;;  i               2   70[BANK0 ] unsigned int 
  2661 ;;  n               2   68[BANK0 ] unsigned int 
  2662 ;;  TimeAboveThr    1   75[BANK0 ] unsigned char 
  2663 ;;  power           1   74[BANK0 ] const unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      unsigned char 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2673 ;;      Params:         0      10       0       0
  2674 ;;      Locals:         0      56       0       0
  2675 ;;      Temps:          0       5       0       0
  2676 ;;      Totals:         0      71       0       0
  2677 ;;Total ram usage:       71 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    7
  2680 ;; This function calls:
  2681 ;;		_LCD_String
  2682 ;;		_SendLCD
  2683 ;;		_SetLine
  2684 ;;		_delay_tenth_s
  2685 ;;		_grabLeftIR
  2686 ;;		_grabRightIR
  2687 ;;		_sprintf
  2688 ;;		_stop
  2689 ;;		_turnLeft
  2690 ;;		_turnRight
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text9
  2697  000886                     __ptext9:
  2698                           	opt stack 0
  2699  000886                     _ScanWithRange:
  2700                           	opt stack 23
  2701                           
  2702                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2703                           
  2704                           ;incstack = 0
  2705  000886  C0C2  F0AC         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  2706  00088A  C0C3  F0AD         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  2707  00088E  C0C4  F0AE         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  2708  000892  C0C5  F0AF         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  2709                           
  2710                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2711  000896  0E00               	movlw	0
  2712  000898  0100               	movlb	0	; () banked
  2713  00089A  6FB1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2714  00089C  0E00               	movlw	0
  2715  00089E  6FB0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2716                           
  2717                           ;Movement.c: 97: unsigned int RightFlag=0;
  2718  0008A0  0E00               	movlw	0
  2719  0008A2  0100               	movlb	0	; () banked
  2720  0008A4  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2721  0008A6  0E00               	movlw	0
  2722  0008A8  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2723                           
  2724                           ;Movement.c: 98: char buf[40];
  2725                           ;Movement.c: 99: unsigned int i=0;
  2726  0008AA  0E00               	movlw	0
  2727  0008AC  0100               	movlb	0	; () banked
  2728  0008AE  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2729  0008B0  0E00               	movlw	0
  2730  0008B2  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2731                           
  2732                           ;Movement.c: 100: unsigned int n=0;
  2733  0008B4  0E00               	movlw	0
  2734  0008B6  0100               	movlb	0	; () banked
  2735  0008B8  6FA5               	movwf	(ScanWithRange@n+1)& (0+255),b
  2736  0008BA  0E00               	movlw	0
  2737  0008BC  6FA4               	movwf	ScanWithRange@n& (0+255),b
  2738                           
  2739                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2740  0008BE  0E00               	movlw	0
  2741  0008C0  0100               	movlb	0	; () banked
  2742  0008C2  6FAB               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2743                           
  2744                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2745  0008C4  0E0B               	movlw	11
  2746  0008C6  0100               	movlb	0	; () banked
  2747  0008C8  6FA9               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2748  0008CA  0EB8               	movlw	184
  2749  0008CC  6FA8               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2750                           
  2751                           ;Movement.c: 105: const unsigned char power=40;
  2752  0008CE  0E28               	movlw	40
  2753  0008D0  0100               	movlb	0	; () banked
  2754  0008D2  6FAA               	movwf	ScanWithRange@power& (0+255),b
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2758  0008D4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2759  0008D8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2760  0008DC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2761  0008E0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2762  0008E4  0E64               	movlw	100
  2763  0008E6  0100               	movlb	0	; () banked
  2764  0008E8  6F6B               	movwf	turnLeft@power& (0+255),b
  2765  0008EA  ECEF  F00B         	call	_turnLeft	;wreg free
  2766                           
  2767                           ;Movement.c: 115: delay_tenth_s(3);
  2768  0008EE  0E03               	movlw	3
  2769  0008F0  EC0E  F00C         	call	_delay_tenth_s
  2770                           
  2771                           ;Movement.c: 116: stop(mL,mR);
  2772  0008F4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2773  0008F8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2774  0008FC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2775  000900  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2776  000904  ECB5  F009         	call	_stop	;wreg free
  2777                           
  2778                           ;Movement.c: 119: turnRight(mL,mR, power);
  2779  000908  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2780  00090C  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2781  000910  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2782  000914  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2783  000918  C0AA  F06B         	movff	ScanWithRange@power,turnRight@power
  2784  00091C  ECD0  F00B         	call	_turnRight	;wreg free
  2785                           
  2786                           ;Movement.c: 122: TMR0L = 0;
  2787  000920  0E00               	movlw	0
  2788  000922  6ED6               	movwf	4054,c	;volatile
  2789                           
  2790                           ;Movement.c: 123: TMR0H = 0;
  2791  000924  0E00               	movlw	0
  2792  000926  6ED7               	movwf	4055,c	;volatile
  2793                           
  2794                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2795  000928  8ED5               	bsf	4053,7,c	;volatile
  2796                           
  2797                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2798  00092A  0E00               	movlw	0
  2799  00092C  0100               	movlb	0	; () banked
  2800  00092E  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2801  000930  0E01               	movlw	1
  2802  000932  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2803  000934  D119               	goto	l3165
  2804  000936                     l3093:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2808  000936  ECFF  F00A         	call	_grabLeftIR	;wreg free
  2809  00093A  C024  F0AC         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2810  00093E  C025  F0AD         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2811                           
  2812                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2813  000942  ECC6  F00A         	call	_grabRightIR	;wreg free
  2814  000946  C024  F0AE         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2815  00094A  C025  F0AF         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2816                           
  2817                           ;Movement.c: 134: CAP1BUFH=0;
  2818  00094E  0E00               	movlw	0
  2819  000950  6E69               	movwf	3945,c	;volatile
  2820                           
  2821                           ;Movement.c: 135: CAP1BUFL=0;
  2822  000952  0E00               	movlw	0
  2823  000954  6E68               	movwf	3944,c	;volatile
  2824                           
  2825                           ;Movement.c: 136: CAP2BUFH=0;
  2826  000956  0E00               	movlw	0
  2827  000958  6E67               	movwf	3943,c	;volatile
  2828                           
  2829                           ;Movement.c: 137: CAP2BUFL=0;
  2830  00095A  0E00               	movlw	0
  2831  00095C  6E66               	movwf	3942,c	;volatile
  2832                           
  2833                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2834  00095E  0E00               	movlw	0
  2835  000960  6E28               	movwf	SendLCD@type,c
  2836  000962  0E01               	movlw	1
  2837  000964  EC77  F00C         	call	_SendLCD
  2838                           
  2839                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2840  000968  0E21               	movlw	33
  2841  00096A                     u2947:
  2842  00096A  2EE8               	decfsz	wreg,f,c
  2843  00096C  D7FE               	goto	u2947
  2844  00096E  F000               	nop	
  2845                           
  2846                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2847  000970  0E00               	movlw	0
  2848  000972  6E28               	movwf	SendLCD@type,c
  2849  000974  0E02               	movlw	2
  2850  000976  EC77  F00C         	call	_SendLCD
  2851                           
  2852                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2853  00097A  0E06               	movlw	6
  2854  00097C  0100               	movlb	0	; () banked
  2855  00097E  6F77               	movwf	??_ScanWithRange& (0+255),b
  2856  000980  0E30               	movlw	48
  2857  000982                     u2957:
  2858  000982  2EE8               	decfsz	wreg,f,c
  2859  000984  D7FE               	goto	u2957
  2860  000986  2F77               	decfsz	??_ScanWithRange& (0+255),f,b
  2861  000988  D7FC               	goto	u2957
  2862  00098A  D000               	nop2	
  2863                           
  2864                           ;Movement.c: 145: SetLine(1);
  2865  00098C  0E01               	movlw	1
  2866  00098E  EC5F  F00C         	call	_SetLine
  2867                           
  2868                           ;Movement.c: 146: LCD_String("     ScanIR");
  2869  000992  0E2D               	movlw	low STR_1
  2870  000994  6E2A               	movwf	LCD_String@string,c
  2871  000996  0E03               	movlw	high STR_1
  2872  000998  6E2B               	movwf	LCD_String@string+1,c
  2873  00099A  EC38  F00B         	call	_LCD_String	;wreg free
  2874                           
  2875                           ;Movement.c: 147: SetLine(2);
  2876  00099E  0E02               	movlw	2
  2877  0009A0  EC5F  F00C         	call	_SetLine
  2878                           
  2879                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2880  0009A4  0E7C               	movlw	low ScanWithRange@buf
  2881  0009A6  6E30               	movwf	sprintf@sp,c
  2882  0009A8  0E00               	movlw	high ScanWithRange@buf
  2883  0009AA  6E31               	movwf	sprintf@sp+1,c
  2884  0009AC  0E0C               	movlw	low (STR_6+1)
  2885  0009AE  6E32               	movwf	sprintf@f,c
  2886  0009B0  0E03               	movlw	high (STR_6+1)
  2887  0009B2  6E33               	movwf	sprintf@f+1,c
  2888  0009B4  C0AC  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2889  0009B8  C0AD  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2890  0009BC  C0AE  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2891  0009C0  C0AF  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2892  0009C4  ECDA  F005         	call	_sprintf	;wreg free
  2893                           
  2894                           ;Movement.c: 149: LCD_String(buf);
  2895  0009C8  0E7C               	movlw	low ScanWithRange@buf
  2896  0009CA  6E2A               	movwf	LCD_String@string,c
  2897  0009CC  0E00               	movlw	high ScanWithRange@buf
  2898  0009CE  6E2B               	movwf	LCD_String@string+1,c
  2899  0009D0  EC38  F00B         	call	_LCD_String	;wreg free
  2900                           
  2901                           ;Movement.c: 151: if (RightFlag==0){
  2902  0009D4  0100               	movlb	0	; () banked
  2903  0009D6  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2904  0009D8  0100               	movlb	0	; () banked
  2905  0009DA  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2906  0009DC  A4D8               	btfss	status,2,c
  2907  0009DE  D018               	goto	l221
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2911  0009E0  0100               	movlb	0	; () banked
  2912  0009E2  51AE               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2913  0009E4  0100               	movlb	0	; () banked
  2914  0009E6  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2915  0009E8  0100               	movlb	0	; () banked
  2916  0009EA  51AF               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2917  0009EC  0100               	movlb	0	; () banked
  2918  0009EE  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2919  0009F0  B0D8               	btfsc	status,0,c
  2920  0009F2  D00E               	goto	l221
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2924  0009F4  50D7               	movf	4055,w,c	;volatile
  2925  0009F6  0100               	movlb	0	; () banked
  2926  0009F8  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2927  0009FA  6B77               	clrf	??_ScanWithRange& (0+255),b
  2928  0009FC  50D6               	movf	4054,w,c	;volatile
  2929  0009FE  0100               	movlb	0	; () banked
  2930  000A00  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2931  000A02  0100               	movlb	0	; () banked
  2932  000A04  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2933  000A06  0E00               	movlw	0
  2934  000A08  0100               	movlb	0	; () banked
  2935  000A0A  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2936  000A0C  0100               	movlb	0	; () banked
  2937  000A0E  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2938  000A10                     l221:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;Movement.c: 154: }
  2942                           ;Movement.c: 155: }
  2943                           ;Movement.c: 157: if (LeftFlag==0){
  2944  000A10  0100               	movlb	0	; () banked
  2945  000A12  51B0               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2946  000A14  0100               	movlb	0	; () banked
  2947  000A16  11B1               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2948  000A18  A4D8               	btfss	status,2,c
  2949  000A1A  D018               	goto	l223
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2953  000A1C  0100               	movlb	0	; () banked
  2954  000A1E  51AC               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2955  000A20  0100               	movlb	0	; () banked
  2956  000A22  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2957  000A24  0100               	movlb	0	; () banked
  2958  000A26  51AD               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2959  000A28  0100               	movlb	0	; () banked
  2960  000A2A  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2961  000A2C  B0D8               	btfsc	status,0,c
  2962  000A2E  D00E               	goto	l223
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2966  000A30  50D7               	movf	4055,w,c	;volatile
  2967  000A32  0100               	movlb	0	; () banked
  2968  000A34  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2969  000A36  6B77               	clrf	??_ScanWithRange& (0+255),b
  2970  000A38  50D6               	movf	4054,w,c	;volatile
  2971  000A3A  0100               	movlb	0	; () banked
  2972  000A3C  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2973  000A3E  0100               	movlb	0	; () banked
  2974  000A40  6FB0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2975  000A42  0E00               	movlw	0
  2976  000A44  0100               	movlb	0	; () banked
  2977  000A46  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2978  000A48  0100               	movlb	0	; () banked
  2979  000A4A  6FB1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2980  000A4C                     l223:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Movement.c: 160: }
  2984                           ;Movement.c: 161: }
  2985                           ;Movement.c: 168: if (LeftFlag>0) {
  2986  000A4C  0100               	movlb	0	; () banked
  2987  000A4E  51B0               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2988  000A50  0100               	movlb	0	; () banked
  2989  000A52  11B1               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2990  000A54  B4D8               	btfsc	status,2,c
  2991  000A56  D07C               	goto	l3157
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;Movement.c: 171: if (RightFlag>0) {
  2995  000A58  0100               	movlb	0	; () banked
  2996  000A5A  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2997  000A5C  0100               	movlb	0	; () banked
  2998  000A5E  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2999  000A60  B4D8               	btfsc	status,2,c
  3000  000A62  D06A               	goto	l226
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  3004  000A64  0100               	movlb	0	; () banked
  3005  000A66  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3006  000A68  0800               	sublw	0
  3007  000A6A  0100               	movlb	0	; () banked
  3008  000A6C  25B0               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3009  000A6E  0100               	movlb	0	; () banked
  3010  000A70  6FAB               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;Movement.c: 173: TMR0L = 0;
  3014  000A72  0E00               	movlw	0
  3015  000A74  6ED6               	movwf	4054,c	;volatile
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;Movement.c: 174: TMR0H = 0;
  3019  000A76  0E00               	movlw	0
  3020  000A78  6ED7               	movwf	4055,c	;volatile
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;Movement.c: 175: stop(mL,mR);
  3024  000A7A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3025  000A7E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3026  000A82  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3027  000A86  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3028  000A8A  ECB5  F009         	call	_stop	;wreg free
  3029                           
  3030                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3031  000A8E  D00C               	goto	l3139
  3032  000A90                     l3137:
  3033                           
  3034                           ;Movement.c: 177: turnLeft(mL,mR, power);
  3035  000A90  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3036  000A94  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3037  000A98  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3038  000A9C  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3039  000AA0  C0AA  F06B         	movff	ScanWithRange@power,turnLeft@power
  3040  000AA4  ECEF  F00B         	call	_turnLeft	;wreg free
  3041  000AA8                     l3139:
  3042  000AA8  0100               	movlb	0	; () banked
  3043  000AAA  90D8               	bcf	status,0,c
  3044  000AAC  31AB               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3045  000AAE  0100               	movlb	0	; () banked
  3046  000AB0  6F77               	movwf	??_ScanWithRange& (0+255),b
  3047  000AB2  6B78               	clrf	(??_ScanWithRange+1)& (0+255),b
  3048  000AB4  50D6               	movf	4054,w,c	;volatile
  3049  000AB6  CFD7 F079          	movff	4055,??_ScanWithRange+2	;volatile
  3050  000ABA  0100               	movlb	0	; () banked
  3051  000ABC  6B7A               	clrf	(??_ScanWithRange+3)& (0+255),b
  3052  000ABE  C079  F07A         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3053  000AC2  0100               	movlb	0	; () banked
  3054  000AC4  6B79               	clrf	(??_ScanWithRange+2)& (0+255),b
  3055  000AC6  0100               	movlb	0	; () banked
  3056  000AC8  2779               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3057  000ACA  0E00               	movlw	0
  3058  000ACC  237A               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3059  000ACE  0100               	movlb	0	; () banked
  3060  000AD0  5177               	movf	??_ScanWithRange& (0+255),w,b
  3061  000AD2  0100               	movlb	0	; () banked
  3062  000AD4  5D79               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3063  000AD6  0100               	movlb	0	; () banked
  3064  000AD8  517A               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3065  000ADA  0A80               	xorlw	128
  3066  000ADC  0100               	movlb	0	; () banked
  3067  000ADE  6F7B               	movwf	(??_ScanWithRange+4)& (0+255),b
  3068  000AE0  0100               	movlb	0	; () banked
  3069  000AE2  5178               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3070  000AE4  0A80               	xorlw	128
  3071  000AE6  0100               	movlb	0	; () banked
  3072  000AE8  597B               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3073  000AEA  A0D8               	btfss	status,0,c
  3074  000AEC  D7D1               	goto	l3137
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;Movement.c: 178: }
  3078                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3079  000AEE  9ED5               	bcf	4053,7,c	;volatile
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Movement.c: 180: stop(mL,mR);
  3083  000AF0  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3084  000AF4  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3085  000AF8  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3086  000AFC  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3087  000B00  ECB5  F009         	call	_stop	;wreg free
  3088                           
  3089                           ;Movement.c: 182: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3090  000B04  C0AB  F077         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3091  000B08  0100               	movlb	0	; () banked
  3092  000B0A  90D8               	bcf	status,0,c
  3093  000B0C  3377               	rrcf	??_ScanWithRange& (0+255),f,b
  3094  000B0E  0100               	movlb	0	; () banked
  3095  000B10  5177               	movf	??_ScanWithRange& (0+255),w,b
  3096  000B12  0100               	movlb	0	; () banked
  3097  000B14  25B2               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3098  000B16  0100               	movlb	0	; () banked
  3099  000B18  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3100  000B1A  0E00               	movlw	0
  3101  000B1C  0100               	movlb	0	; () banked
  3102  000B1E  21B3               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3103  000B20  0100               	movlb	0	; () banked
  3104  000B22  6F79               	movwf	(??_ScanWithRange+2)& (0+255),b
  3105  000B24  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3106  000B28  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3107  000B2C  C078  FFDE         	movff	??_ScanWithRange+1,postinc2
  3108  000B30  C079  FFDD         	movff	??_ScanWithRange+2,postdec2
  3109  000B34                     l3145:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;Movement.c: 183: return 2;
  3113  000B34  0E02               	movlw	2
  3114                           
  3115                           ; BSR set to: 0
  3116  000B36  0012               	return	
  3117  000B38                     l226:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;Movement.c: 186: T0CONbits.TMR0ON=0;
  3121  000B38  9ED5               	bcf	4053,7,c	;volatile
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;Movement.c: 187: stop(mL,mR);
  3125  000B3A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3126  000B3E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3127  000B42  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3128  000B46  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3129  000B4A  ECB5  F009         	call	_stop	;wreg free
  3130  000B4E  D7F2               	goto	l3145
  3131  000B50                     l3157:
  3132                           
  3133                           ;Movement.c: 189: }
  3134                           ;Movement.c: 190: }
  3135                           ;Movement.c: 192: if (*RFID_Read==1) {
  3136  000B50  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3137  000B54  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3138  000B58  04DE               	decf	postinc2,w,c
  3139  000B5A  A4D8               	btfss	status,2,c
  3140  000B5C  D002               	goto	l3163
  3141                           
  3142                           ;Movement.c: 193: return 2;
  3143  000B5E  0E02               	movlw	2
  3144  000B60  0012               	return	
  3145  000B62                     l3163:
  3146  000B62  0100               	movlb	0	; () banked
  3147  000B64  4BA6               	infsnz	ScanWithRange@i& (0+255),f,b
  3148  000B66  2BA7               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3149  000B68                     l3165:
  3150                           
  3151                           ; BSR set to: 0
  3152  000B68  0100               	movlb	0	; () banked
  3153  000B6A  51A6               	movf	ScanWithRange@i& (0+255),w,b
  3154  000B6C  0100               	movlb	0	; () banked
  3155  000B6E  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3156  000B70  0100               	movlb	0	; () banked
  3157  000B72  51A7               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3158  000B74  0100               	movlb	0	; () banked
  3159  000B76  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3160  000B78  B0D8               	btfsc	status,0,c
  3161  000B7A  D6DD               	goto	l3093
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;Movement.c: 194: }
  3165                           ;Movement.c: 195: }
  3166                           ;Movement.c: 198: turnRight(mL,mR, 100);
  3167                           
  3168                           ; BSR set to: 0
  3169  000B7C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3170  000B80  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3171  000B84  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3172  000B88  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3173  000B8C  0E64               	movlw	100
  3174  000B8E  0100               	movlb	0	; () banked
  3175  000B90  6F6B               	movwf	turnRight@power& (0+255),b
  3176  000B92  ECD0  F00B         	call	_turnRight	;wreg free
  3177                           
  3178                           ;Movement.c: 199: delay_tenth_s(2);
  3179  000B96  0E02               	movlw	2
  3180  000B98  EC0E  F00C         	call	_delay_tenth_s
  3181                           
  3182                           ;Movement.c: 200: stop(mL,mR);
  3183  000B9C  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3184  000BA0  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3185  000BA4  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3186  000BA8  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3187  000BAC  ECB5  F009         	call	_stop	;wreg free
  3188                           
  3189                           ;Movement.c: 201: return -1;
  3190  000BB0  0EFF               	movlw	255
  3191  000BB2  0012               	return	
  3192  000BB4                     __end_of_ScanWithRange:
  3193                           	opt stack 0
  3194                           tblptru	equ	0xFF8
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           intcon	equ	0xFF2
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           indf1	equ	0xFE7
  3201                           fsr1h	equ	0xFE2
  3202                           fsr1l	equ	0xFE1
  3203                           indf2	equ	0xFDF
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           fsr2h	equ	0xFDA
  3207                           fsr2l	equ	0xFD9
  3208                           status	equ	0xFD8
  3209                           
  3210 ;; *************** function _turnRight *****************
  3211 ;; Defined at:
  3212 ;;		line 98 in file "dc_motor.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3215 ;;		 -> main@mL(9), 
  3216 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3217 ;;		 -> main@mR(9), 
  3218 ;;  power           1   11[BANK0 ] unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;		None               void
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3230 ;;      Params:         0       5       0       0
  3231 ;;      Locals:         0       0       0       0
  3232 ;;      Temps:          0       0       0       0
  3233 ;;      Totals:         0       5       0       0
  3234 ;;Total ram usage:        5 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    6
  3237 ;; This function calls:
  3238 ;;		_fullSpeedAhead
  3239 ;; This function is called by:
  3240 ;;		_ScanWithRange
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text10
  3245  0017A0                     __ptext10:
  3246                           	opt stack 0
  3247  0017A0                     _turnRight:
  3248                           	opt stack 23
  3249                           
  3250                           ;dc_motor.c: 102: mL->direction=0;
  3251                           
  3252                           ;incstack = 0
  3253  0017A0  0100               	movlb	0	; () banked
  3254  0017A2  EE20 F001          	lfsr	2,1
  3255  0017A6  5167               	movf	turnRight@mL& (0+255),w,b
  3256  0017A8  26D9               	addwf	fsr2l,f,c
  3257  0017AA  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3258  0017AC  22DA               	addwfc	fsr2h,f,c
  3259  0017AE  0E00               	movlw	0
  3260  0017B0  6EDF               	movwf	indf2,c
  3261                           
  3262                           ;dc_motor.c: 103: mR->direction=1;
  3263  0017B2  0100               	movlb	0	; () banked
  3264  0017B4  EE20 F001          	lfsr	2,1
  3265  0017B8  5169               	movf	turnRight@mR& (0+255),w,b
  3266  0017BA  26D9               	addwf	fsr2l,f,c
  3267  0017BC  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3268  0017BE  22DA               	addwfc	fsr2h,f,c
  3269  0017C0  0E01               	movlw	1
  3270  0017C2  6EDF               	movwf	indf2,c
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3274  0017C4  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3275  0017C8  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3276  0017CC  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3277  0017D0  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3278  0017D4  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3279  0017D8  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  3280  0017DC  0012               	return		;funcret
  3281  0017DE                     __end_of_turnRight:
  3282                           	opt stack 0
  3283                           tblptru	equ	0xFF8
  3284                           prodh	equ	0xFF4
  3285                           prodl	equ	0xFF3
  3286                           intcon	equ	0xFF2
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           indf1	equ	0xFE7
  3290                           fsr1h	equ	0xFE2
  3291                           fsr1l	equ	0xFE1
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           postdec2	equ	0xFDD
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _turnLeft *****************
  3300 ;; Defined at:
  3301 ;;		line 87 in file "dc_motor.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3304 ;;		 -> main@mL(9), 
  3305 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3306 ;;		 -> main@mR(9), 
  3307 ;;  power           1   11[BANK0 ] unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;		None               void
  3312 ;; Registers used:
  3313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3319 ;;      Params:         0       5       0       0
  3320 ;;      Locals:         0       0       0       0
  3321 ;;      Temps:          0       0       0       0
  3322 ;;      Totals:         0       5       0       0
  3323 ;;Total ram usage:        5 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    6
  3326 ;; This function calls:
  3327 ;;		_fullSpeedAhead
  3328 ;; This function is called by:
  3329 ;;		_ScanWithRange
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text11
  3334  0017DE                     __ptext11:
  3335                           	opt stack 0
  3336  0017DE                     _turnLeft:
  3337                           	opt stack 23
  3338                           
  3339                           ;dc_motor.c: 91: mL->direction=1;
  3340                           
  3341                           ;incstack = 0
  3342  0017DE  0100               	movlb	0	; () banked
  3343  0017E0  EE20 F001          	lfsr	2,1
  3344  0017E4  5167               	movf	turnLeft@mL& (0+255),w,b
  3345  0017E6  26D9               	addwf	fsr2l,f,c
  3346  0017E8  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3347  0017EA  22DA               	addwfc	fsr2h,f,c
  3348  0017EC  0E01               	movlw	1
  3349  0017EE  6EDF               	movwf	indf2,c
  3350                           
  3351                           ;dc_motor.c: 92: mR->direction=0;
  3352  0017F0  0100               	movlb	0	; () banked
  3353  0017F2  EE20 F001          	lfsr	2,1
  3354  0017F6  5169               	movf	turnLeft@mR& (0+255),w,b
  3355  0017F8  26D9               	addwf	fsr2l,f,c
  3356  0017FA  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3357  0017FC  22DA               	addwfc	fsr2h,f,c
  3358  0017FE  0E00               	movlw	0
  3359  001800  6EDF               	movwf	indf2,c
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3363  001802  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3364  001806  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3365  00180A  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3366  00180E  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3367  001812  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3368  001816  EC86  F00A         	call	_fullSpeedAhead	;wreg free
  3369  00181A  0012               	return		;funcret
  3370  00181C                     __end_of_turnLeft:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           intcon	equ	0xFF2
  3376                           postinc0	equ	0xFEE
  3377                           wreg	equ	0xFE8
  3378                           indf1	equ	0xFE7
  3379                           fsr1h	equ	0xFE2
  3380                           fsr1l	equ	0xFE1
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _fullSpeedAhead *****************
  3389 ;; Defined at:
  3390 ;;		line 108 in file "dc_motor.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3393 ;;		 -> main@mL(9), 
  3394 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3395 ;;		 -> main@mR(9), 
  3396 ;;  power           1    6[BANK0 ] unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;		None
  3399 ;; Return value:  Size  Location     Type
  3400 ;;		None               void
  3401 ;; Registers used:
  3402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3408 ;;      Params:         0       5       0       0
  3409 ;;      Locals:         0       0       0       0
  3410 ;;      Temps:          1       0       0       0
  3411 ;;      Totals:         1       5       0       0
  3412 ;;Total ram usage:        6 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    5
  3415 ;; This function calls:
  3416 ;;		_setMotorPWM
  3417 ;; This function is called by:
  3418 ;;		_turnLeft
  3419 ;;		_turnRight
  3420 ;;		_fullSpeedBack
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text12
  3426  00150C                     __ptext12:
  3427                           	opt stack 0
  3428  00150C                     _fullSpeedAhead:
  3429                           	opt stack 24
  3430                           
  3431                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3432                           
  3433                           ;incstack = 0
  3434  00150C  D02C               	goto	l65
  3435  00150E                     l2867:
  3436                           
  3437                           ;dc_motor.c: 112: if(mL->power<power){
  3438  00150E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3439  001512  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3440  001516  0100               	movlb	0	; () banked
  3441  001518  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3442  00151A  5CDE               	subwf	postinc2,w,c
  3443  00151C  B0D8               	btfsc	status,0,c
  3444  00151E  D005               	goto	l2871
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;dc_motor.c: 113: mL->power++;
  3448  001520  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3449  001524  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3450  001528  2ADF               	incf	indf2,f,c
  3451  00152A                     l2871:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;dc_motor.c: 114: }
  3455                           ;dc_motor.c: 115: if(mR->power<power){
  3456  00152A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3457  00152E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3458  001532  0100               	movlb	0	; () banked
  3459  001534  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3460  001536  5CDE               	subwf	postinc2,w,c
  3461  001538  B0D8               	btfsc	status,0,c
  3462  00153A  D005               	goto	l2875
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;dc_motor.c: 116: mR->power++;
  3466  00153C  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3467  001540  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3468  001544  2ADF               	incf	indf2,f,c
  3469  001546                     l2875:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;dc_motor.c: 117: }
  3473                           ;dc_motor.c: 118: setMotorPWM(mL);
  3474  001546  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3475  00154A  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3476  00154E  EC5D  F007         	call	_setMotorPWM	;wreg free
  3477                           
  3478                           ;dc_motor.c: 119: setMotorPWM(mR);
  3479  001552  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3480  001556  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3481  00155A  EC5D  F007         	call	_setMotorPWM	;wreg free
  3482                           
  3483                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3484  00155E  0E21               	movlw	33
  3485  001560                     u2967:
  3486  001560  2EE8               	decfsz	wreg,f,c
  3487  001562  D7FE               	goto	u2967
  3488  001564  F000               	nop	
  3489  001566                     l65:
  3490  001566  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3491  00156A  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3492  00156E  0100               	movlb	0	; () banked
  3493  001570  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3494  001572  5CDE               	subwf	postinc2,w,c
  3495  001574  A0D8               	btfss	status,0,c
  3496  001576  D7CB               	goto	l2867
  3497                           
  3498                           ; BSR set to: 0
  3499  001578  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3500  00157C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3501  001580  0100               	movlb	0	; () banked
  3502  001582  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3503  001584  5CDE               	subwf	postinc2,w,c
  3504  001586  B0D8               	btfsc	status,0,c
  3505  001588  0012               	return	
  3506  00158A  D7C1               	goto	l2867
  3507  00158C                     __end_of_fullSpeedAhead:
  3508                           	opt stack 0
  3509                           tblptru	equ	0xFF8
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           indf1	equ	0xFE7
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _delay_tenth_s *****************
  3526 ;; Defined at:
  3527 ;;		line 32 in file "Movement.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  tenth_second    1    wreg     unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3532 ;;  i               2   37[COMRAM] unsigned int 
  3533 ;; Return value:  Size  Location     Type
  3534 ;;		None               void
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3542 ;;      Params:         0       0       0       0
  3543 ;;      Locals:         3       0       0       0
  3544 ;;      Temps:          1       0       0       0
  3545 ;;      Totals:         4       0       0       0
  3546 ;;Total ram usage:        4 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    3
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_ScanWithRange
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text13
  3558  00181C                     __ptext13:
  3559                           	opt stack 0
  3560  00181C                     _delay_tenth_s:
  3561                           	opt stack 27
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;incstack = 0
  3565                           ;delay_tenth_s@tenth_seconds stored from wreg
  3566  00181C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3567                           
  3568                           ;Movement.c: 33: unsigned int i=0;
  3569  00181E  0E00               	movlw	0
  3570  001820  6E27               	movwf	delay_tenth_s@i+1,c
  3571  001822  0E00               	movlw	0
  3572  001824  6E26               	movwf	delay_tenth_s@i,c
  3573                           
  3574                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3575  001826  0E00               	movlw	0
  3576  001828  6E27               	movwf	delay_tenth_s@i+1,c
  3577  00182A  0E01               	movlw	1
  3578  00182C  6E26               	movwf	delay_tenth_s@i,c
  3579  00182E  D009               	goto	l2193
  3580  001830                     l2189:
  3581                           
  3582                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3583  001830  0E82               	movlw	130
  3584  001832  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3585  001834  0EDE               	movlw	222
  3586  001836                     u2977:
  3587  001836  2EE8               	decfsz	wreg,f,c
  3588  001838  D7FE               	goto	u2977
  3589  00183A  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3590  00183C  D7FC               	goto	u2977
  3591  00183E  4A26               	infsnz	delay_tenth_s@i,f,c
  3592  001840  2A27               	incf	delay_tenth_s@i+1,f,c
  3593  001842                     l2193:
  3594  001842  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3595  001844  0D02               	mullw	2
  3596  001846  5026               	movf	delay_tenth_s@i,w,c
  3597  001848  5CF3               	subwf	prodl,w,c
  3598  00184A  5027               	movf	delay_tenth_s@i+1,w,c
  3599  00184C  58F4               	subwfb	prodh,w,c
  3600  00184E  A0D8               	btfss	status,0,c
  3601  001850  0012               	return	
  3602  001852  D7EE               	goto	l2189
  3603  001854                     __end_of_delay_tenth_s:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           indf1	equ	0xFE7
  3612                           fsr1h	equ	0xFE2
  3613                           fsr1l	equ	0xFE1
  3614                           indf2	equ	0xFDF
  3615                           postinc2	equ	0xFDE
  3616                           postdec2	equ	0xFDD
  3617                           fsr2h	equ	0xFDA
  3618                           fsr2l	equ	0xFD9
  3619                           status	equ	0xFD8
  3620                           
  3621 ;; *************** function _ScanIR *****************
  3622 ;; Defined at:
  3623 ;;		line 45 in file "Movement.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3626 ;;		 -> main@mL(9), 
  3627 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3628 ;;		 -> main@mR(9), 
  3629 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3630 ;;		 -> main@Move(1), 
  3631 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3632 ;;		 -> main@MoveTime(200), 
  3633 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3634 ;;		 -> main@MoveType(100), 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3637 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3638 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      unsigned char 
  3641 ;; Registers used:
  3642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3648 ;;      Params:         0      10       0       0
  3649 ;;      Locals:         0      46       0       0
  3650 ;;      Temps:          1       0       0       0
  3651 ;;      Totals:         1      56       0       0
  3652 ;;Total ram usage:       57 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    7
  3655 ;; This function calls:
  3656 ;;		_LCD_String
  3657 ;;		_SendLCD
  3658 ;;		_SetLine
  3659 ;;		_grabLeftIR
  3660 ;;		_grabRightIR
  3661 ;;		_sprintf
  3662 ;;		_stop
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text14
  3669  0010EE                     __ptext14:
  3670                           	opt stack 0
  3671  0010EE                     _ScanIR:
  3672                           	opt stack 23
  3673                           
  3674                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3675                           
  3676                           ;incstack = 0
  3677  0010EE  C0BE  F0A1         	movff	ScanIR@F3883,ScanIR@SensorResult
  3678  0010F2  C0BF  F0A2         	movff	ScanIR@F3883+1,ScanIR@SensorResult+1
  3679  0010F6  C0C0  F0A3         	movff	ScanIR@F3883+2,ScanIR@SensorResult+2
  3680  0010FA  C0C1  F0A4         	movff	ScanIR@F3883+3,ScanIR@SensorResult+3
  3681                           
  3682                           ;Movement.c: 50: char buf[40];
  3683                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3684  0010FE  0E09               	movlw	9
  3685  001100  0100               	movlb	0	; () banked
  3686  001102  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3687  001104  0EC4               	movlw	196
  3688  001106  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3692  001108  ECFF  F00A         	call	_grabLeftIR	;wreg free
  3693  00110C  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3694  001110  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3695                           
  3696                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3697  001114  ECC6  F00A         	call	_grabRightIR	;wreg free
  3698  001118  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3699  00111C  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3700                           
  3701                           ;Movement.c: 62: CAP1BUFH=0;
  3702  001120  0E00               	movlw	0
  3703  001122  6E69               	movwf	3945,c	;volatile
  3704                           
  3705                           ;Movement.c: 63: CAP1BUFL=0;
  3706  001124  0E00               	movlw	0
  3707  001126  6E68               	movwf	3944,c	;volatile
  3708                           
  3709                           ;Movement.c: 64: CAP2BUFH=0;
  3710  001128  0E00               	movlw	0
  3711  00112A  6E67               	movwf	3943,c	;volatile
  3712                           
  3713                           ;Movement.c: 65: CAP2BUFL=0;
  3714  00112C  0E00               	movlw	0
  3715  00112E  6E66               	movwf	3942,c	;volatile
  3716                           
  3717                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3718  001130  0E00               	movlw	0
  3719  001132  6E28               	movwf	SendLCD@type,c
  3720  001134  0E01               	movlw	1
  3721  001136  EC77  F00C         	call	_SendLCD
  3722                           
  3723                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3724  00113A  0E21               	movlw	33
  3725  00113C                     u2987:
  3726  00113C  2EE8               	decfsz	wreg,f,c
  3727  00113E  D7FE               	goto	u2987
  3728  001140  F000               	nop	
  3729                           
  3730                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3731  001142  0E00               	movlw	0
  3732  001144  6E28               	movwf	SendLCD@type,c
  3733  001146  0E02               	movlw	2
  3734  001148  EC77  F00C         	call	_SendLCD
  3735                           
  3736                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3737  00114C  0E06               	movlw	6
  3738  00114E  6E39               	movwf	??_ScanIR& (0+255),c
  3739  001150  0E30               	movlw	48
  3740  001152                     u2997:
  3741  001152  2EE8               	decfsz	wreg,f,c
  3742  001154  D7FE               	goto	u2997
  3743  001156  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3744  001158  D7FC               	goto	u2997
  3745  00115A  D000               	nop2	
  3746                           
  3747                           ;Movement.c: 72: SetLine(1);
  3748  00115C  0E01               	movlw	1
  3749  00115E  EC5F  F00C         	call	_SetLine
  3750                           
  3751                           ;Movement.c: 73: LCD_String("     ScanIR");
  3752  001162  0E2D               	movlw	low STR_1
  3753  001164  6E2A               	movwf	LCD_String@string,c
  3754  001166  0E03               	movlw	high STR_1
  3755  001168  6E2B               	movwf	LCD_String@string+1,c
  3756  00116A  EC38  F00B         	call	_LCD_String	;wreg free
  3757                           
  3758                           ;Movement.c: 74: SetLine(2);
  3759  00116E  0E02               	movlw	2
  3760  001170  EC5F  F00C         	call	_SetLine
  3761                           
  3762                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3763  001174  0E77               	movlw	low ScanIR@buf
  3764  001176  6E30               	movwf	sprintf@sp,c
  3765  001178  0E00               	movlw	high ScanIR@buf
  3766  00117A  6E31               	movwf	sprintf@sp+1,c
  3767  00117C  0E0C               	movlw	low (STR_6+1)
  3768  00117E  6E32               	movwf	sprintf@f,c
  3769  001180  0E03               	movlw	high (STR_6+1)
  3770  001182  6E33               	movwf	sprintf@f+1,c
  3771  001184  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3772  001188  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3773  00118C  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3774  001190  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3775  001194  ECDA  F005         	call	_sprintf	;wreg free
  3776                           
  3777                           ;Movement.c: 76: LCD_String(buf);
  3778  001198  0E77               	movlw	low ScanIR@buf
  3779  00119A  6E2A               	movwf	LCD_String@string,c
  3780  00119C  0E00               	movlw	high ScanIR@buf
  3781  00119E  6E2B               	movwf	LCD_String@string+1,c
  3782  0011A0  EC38  F00B         	call	_LCD_String	;wreg free
  3783                           
  3784                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3785                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3786  0011A4  0100               	movlb	0	; () banked
  3787  0011A6  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3788  0011A8  0100               	movlb	0	; () banked
  3789  0011AA  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3790  0011AC  0100               	movlb	0	; () banked
  3791  0011AE  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3792  0011B0  0100               	movlb	0	; () banked
  3793  0011B2  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3794  0011B4  B0D8               	btfsc	status,0,c
  3795  0011B6  D00C               	goto	l3067
  3796                           
  3797                           ; BSR set to: 0
  3798  0011B8  0100               	movlb	0	; () banked
  3799  0011BA  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3800  0011BC  0100               	movlb	0	; () banked
  3801  0011BE  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3802  0011C0  0100               	movlb	0	; () banked
  3803  0011C2  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3804  0011C4  0100               	movlb	0	; () banked
  3805  0011C6  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3806  0011C8  B0D8               	btfsc	status,0,c
  3807  0011CA  D002               	goto	l3067
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;Movement.c: 82: return 2;
  3811  0011CC  0E02               	movlw	2
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;Movement.c: 83: } else {
  3815                           
  3816                           ; BSR set to: 0
  3817  0011CE  0012               	return	
  3818  0011D0                     l3067:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;Movement.c: 84: stop(mL,mR);
  3822  0011D0  C06D  F062         	movff	ScanIR@mL,stop@mL
  3823  0011D4  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3824  0011D8  C06F  F064         	movff	ScanIR@mR,stop@mR
  3825  0011DC  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3826  0011E0  ECB5  F009         	call	_stop	;wreg free
  3827                           
  3828                           ;Movement.c: 85: return 0;
  3829  0011E4  0E00               	movlw	0
  3830  0011E6  0012               	return	
  3831  0011E8                     __end_of_ScanIR:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           indf1	equ	0xFE7
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _stop *****************
  3850 ;; Defined at:
  3851 ;;		line 67 in file "dc_motor.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3854 ;;		 -> main@mL(9), 
  3855 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3856 ;;		 -> main@mR(9), 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3868 ;;      Params:         0       4       0       0
  3869 ;;      Locals:         0       0       0       0
  3870 ;;      Temps:          0       0       0       0
  3871 ;;      Totals:         0       4       0       0
  3872 ;;Total ram usage:        4 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    5
  3875 ;; This function calls:
  3876 ;;		_setMotorPWM
  3877 ;; This function is called by:
  3878 ;;		_ScanIR
  3879 ;;		_ScanWithRange
  3880 ;;		_main
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text15
  3885  00136A                     __ptext15:
  3886                           	opt stack 0
  3887  00136A                     _stop:
  3888                           	opt stack 25
  3889                           
  3890                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3891                           
  3892                           ;incstack = 0
  3893  00136A  D028               	goto	l2899
  3894  00136C                     l2885:
  3895                           
  3896                           ;dc_motor.c: 71: if(mL->power>0){
  3897  00136C  C062  FFD9         	movff	stop@mL,fsr2l
  3898  001370  C063  FFDA         	movff	stop@mL+1,fsr2h
  3899  001374  50DF               	movf	indf2,w,c
  3900  001376  B4D8               	btfsc	status,2,c
  3901  001378  D005               	goto	l2889
  3902                           
  3903                           ;dc_motor.c: 72: mL->power--;
  3904  00137A  C062  FFD9         	movff	stop@mL,fsr2l
  3905  00137E  C063  FFDA         	movff	stop@mL+1,fsr2h
  3906  001382  06DF               	decf	indf2,f,c
  3907  001384                     l2889:
  3908                           
  3909                           ;dc_motor.c: 73: }
  3910                           ;dc_motor.c: 74: if(mR->power>0){
  3911  001384  C064  FFD9         	movff	stop@mR,fsr2l
  3912  001388  C065  FFDA         	movff	stop@mR+1,fsr2h
  3913  00138C  50DF               	movf	indf2,w,c
  3914  00138E  B4D8               	btfsc	status,2,c
  3915  001390  D005               	goto	l2893
  3916                           
  3917                           ;dc_motor.c: 75: mR->power--;
  3918  001392  C064  FFD9         	movff	stop@mR,fsr2l
  3919  001396  C065  FFDA         	movff	stop@mR+1,fsr2h
  3920  00139A  06DF               	decf	indf2,f,c
  3921  00139C                     l2893:
  3922                           
  3923                           ;dc_motor.c: 76: }
  3924                           ;dc_motor.c: 77: setMotorPWM(mL);
  3925  00139C  C062  F032         	movff	stop@mL,setMotorPWM@m
  3926  0013A0  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3927  0013A4  EC5D  F007         	call	_setMotorPWM	;wreg free
  3928                           
  3929                           ;dc_motor.c: 78: setMotorPWM(mR);
  3930  0013A8  C064  F032         	movff	stop@mR,setMotorPWM@m
  3931  0013AC  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3932  0013B0  EC5D  F007         	call	_setMotorPWM	;wreg free
  3933                           
  3934                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3935  0013B4  0E21               	movlw	33
  3936  0013B6                     u3007:
  3937  0013B6  2EE8               	decfsz	wreg,f,c
  3938  0013B8  D7FE               	goto	u3007
  3939  0013BA  F000               	nop	
  3940  0013BC                     l2899:
  3941  0013BC  C062  FFD9         	movff	stop@mL,fsr2l
  3942  0013C0  C063  FFDA         	movff	stop@mL+1,fsr2h
  3943  0013C4  50DF               	movf	indf2,w,c
  3944  0013C6  A4D8               	btfss	status,2,c
  3945  0013C8  D7D1               	goto	l2885
  3946  0013CA  C064  FFD9         	movff	stop@mR,fsr2l
  3947  0013CE  C065  FFDA         	movff	stop@mR+1,fsr2h
  3948  0013D2  50DF               	movf	indf2,w,c
  3949  0013D4  A4D8               	btfss	status,2,c
  3950  0013D6  D7CA               	goto	l2885
  3951                           
  3952                           ;dc_motor.c: 80: }
  3953                           ;dc_motor.c: 81: mL->direction=1;
  3954  0013D8  0100               	movlb	0	; () banked
  3955  0013DA  EE20 F001          	lfsr	2,1
  3956  0013DE  5162               	movf	stop@mL& (0+255),w,b
  3957  0013E0  26D9               	addwf	fsr2l,f,c
  3958  0013E2  5163               	movf	(stop@mL+1)& (0+255),w,b
  3959  0013E4  22DA               	addwfc	fsr2h,f,c
  3960  0013E6  0E01               	movlw	1
  3961  0013E8  6EDF               	movwf	indf2,c
  3962                           
  3963                           ;dc_motor.c: 82: mR->direction=1;
  3964  0013EA  0100               	movlb	0	; () banked
  3965  0013EC  EE20 F001          	lfsr	2,1
  3966  0013F0  5164               	movf	stop@mR& (0+255),w,b
  3967  0013F2  26D9               	addwf	fsr2l,f,c
  3968  0013F4  5165               	movf	(stop@mR+1)& (0+255),w,b
  3969  0013F6  22DA               	addwfc	fsr2h,f,c
  3970  0013F8  0E01               	movlw	1
  3971  0013FA  6EDF               	movwf	indf2,c
  3972                           
  3973                           ; BSR set to: 0
  3974  0013FC  0012               	return		;funcret
  3975  0013FE                     __end_of_stop:
  3976                           	opt stack 0
  3977                           tblptru	equ	0xFF8
  3978                           prodh	equ	0xFF4
  3979                           prodl	equ	0xFF3
  3980                           intcon	equ	0xFF2
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           indf1	equ	0xFE7
  3984                           fsr1h	equ	0xFE2
  3985                           fsr1l	equ	0xFE1
  3986                           indf2	equ	0xFDF
  3987                           postinc2	equ	0xFDE
  3988                           postdec2	equ	0xFDD
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _setMotorPWM *****************
  3994 ;; Defined at:
  3995 ;;		line 26 in file "dc_motor.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3998 ;;		 -> main@mR(9), main@mL(9), 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  PWMduty         2    0[BANK0 ] int 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4010 ;;      Params:         2       0       0       0
  4011 ;;      Locals:         0       2       0       0
  4012 ;;      Temps:          5       0       0       0
  4013 ;;      Totals:         7       2       0       0
  4014 ;;Total ram usage:        9 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    4
  4017 ;; This function calls:
  4018 ;;		___awdiv
  4019 ;;		___wmul
  4020 ;; This function is called by:
  4021 ;;		_stop
  4022 ;;		_fullSpeedAhead
  4023 ;;		_setMotorFullSpeed
  4024 ;;		_stopMotor
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text16
  4029  000EBA                     __ptext16:
  4030                           	opt stack 0
  4031  000EBA                     _setMotorPWM:
  4032                           	opt stack 25
  4033                           
  4034                           ;dc_motor.c: 28: int PWMduty;
  4035                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;incstack = 0
  4039  000EBA  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4040  000EBE  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4041  000EC2  50DF               	movf	indf2,w,c
  4042  000EC4  6E34               	movwf	??_setMotorPWM& (0+255),c
  4043  000EC6  5034               	movf	??_setMotorPWM,w,c
  4044  000EC8  6E24               	movwf	___wmul@multiplier,c
  4045  000ECA  6A25               	clrf	___wmul@multiplier+1,c
  4046  000ECC  EE20 F007          	lfsr	2,7
  4047  000ED0  5032               	movf	setMotorPWM@m,w,c
  4048  000ED2  26D9               	addwf	fsr2l,f,c
  4049  000ED4  5033               	movf	setMotorPWM@m+1,w,c
  4050  000ED6  22DA               	addwfc	fsr2h,f,c
  4051  000ED8  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4052  000EDC  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4053  000EE0  ECB7  F00C         	call	___wmul	;wreg free
  4054  000EE4  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4055  000EE8  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4056  000EEC  0E00               	movlw	0
  4057  000EEE  6E2D               	movwf	___awdiv@divisor+1,c
  4058  000EF0  0E64               	movlw	100
  4059  000EF2  6E2C               	movwf	___awdiv@divisor,c
  4060  000EF4  EC44  F00A         	call	___awdiv	;wreg free
  4061  000EF8  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4062  000EFC  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4063                           
  4064                           ;dc_motor.c: 32: if (m->direction)
  4065  000F00  EE20 F001          	lfsr	2,1
  4066  000F04  5032               	movf	setMotorPWM@m,w,c
  4067  000F06  26D9               	addwf	fsr2l,f,c
  4068  000F08  5033               	movf	setMotorPWM@m+1,w,c
  4069  000F0A  22DA               	addwfc	fsr2h,f,c
  4070  000F0C  50DF               	movf	indf2,w,c
  4071  000F0E  B4D8               	btfsc	status,2,c
  4072  000F10  D02E               	goto	l2863
  4073                           
  4074                           ;dc_motor.c: 33: {
  4075                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4076  000F12  EE20 F006          	lfsr	2,6
  4077  000F16  5032               	movf	setMotorPWM@m,w,c
  4078  000F18  26D9               	addwf	fsr2l,f,c
  4079  000F1A  5033               	movf	setMotorPWM@m+1,w,c
  4080  000F1C  22DA               	addwfc	fsr2h,f,c
  4081  000F1E  50DF               	movf	indf2,w,c
  4082  000F20  6E34               	movwf	??_setMotorPWM& (0+255),c
  4083  000F22  0E01               	movlw	1
  4084  000F24  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4085  000F26  2A34               	incf	??_setMotorPWM,f,c
  4086  000F28  D002               	goto	u2244
  4087  000F2A                     u2245:
  4088  000F2A  90D8               	bcf	status,0,c
  4089  000F2C  3635               	rlcf	??_setMotorPWM+1,f,c
  4090  000F2E                     u2244:
  4091  000F2E  2E34               	decfsz	??_setMotorPWM,f,c
  4092  000F30  D7FC               	goto	u2245
  4093  000F32  5035               	movf	??_setMotorPWM+1,w,c
  4094  000F34  108A               	iorwf	3978,w,c	;volatile
  4095  000F36  6E8A               	movwf	3978,c	;volatile
  4096                           
  4097                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4098  000F38  EE20 F007          	lfsr	2,7
  4099  000F3C  5032               	movf	setMotorPWM@m,w,c
  4100  000F3E  26D9               	addwf	fsr2l,f,c
  4101  000F40  5033               	movf	setMotorPWM@m+1,w,c
  4102  000F42  22DA               	addwfc	fsr2h,f,c
  4103  000F44  CFDE F034          	movff	postinc2,??_setMotorPWM
  4104  000F48  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4105  000F4C  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4106  000F50  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4107  000F54  1E36               	comf	??_setMotorPWM+2,f,c
  4108  000F56  1E37               	comf	??_setMotorPWM+3,f,c
  4109  000F58  4A36               	infsnz	??_setMotorPWM+2,f,c
  4110  000F5A  2A37               	incf	??_setMotorPWM+3,f,c
  4111  000F5C  5034               	movf	??_setMotorPWM,w,c
  4112  000F5E  2436               	addwf	??_setMotorPWM+2,w,c
  4113  000F60  0100               	movlb	0	; () banked
  4114  000F62  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4115  000F64  5035               	movf	??_setMotorPWM+1,w,c
  4116  000F66  2037               	addwfc	??_setMotorPWM+3,w,c
  4117  000F68  0100               	movlb	0	; () banked
  4118  000F6A  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4119                           
  4120                           ;dc_motor.c: 36: }
  4121  000F6C  D014               	goto	l35
  4122  000F6E                     l2863:
  4123                           
  4124                           ;dc_motor.c: 37: else
  4125                           ;dc_motor.c: 38: {
  4126                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4127  000F6E  EE20 F006          	lfsr	2,6
  4128  000F72  5032               	movf	setMotorPWM@m,w,c
  4129  000F74  26D9               	addwf	fsr2l,f,c
  4130  000F76  5033               	movf	setMotorPWM@m+1,w,c
  4131  000F78  22DA               	addwfc	fsr2h,f,c
  4132  000F7A  50DF               	movf	indf2,w,c
  4133  000F7C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4134  000F7E  0E01               	movlw	1
  4135  000F80  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4136  000F82  2A34               	incf	??_setMotorPWM,f,c
  4137  000F84  D002               	goto	u2254
  4138  000F86                     u2255:
  4139  000F86  90D8               	bcf	status,0,c
  4140  000F88  3635               	rlcf	??_setMotorPWM+1,f,c
  4141  000F8A                     u2254:
  4142  000F8A  2E34               	decfsz	??_setMotorPWM,f,c
  4143  000F8C  D7FC               	goto	u2255
  4144  000F8E  5035               	movf	??_setMotorPWM+1,w,c
  4145  000F90  0AFF               	xorlw	255
  4146  000F92  148A               	andwf	3978,w,c	;volatile
  4147  000F94  6E8A               	movwf	3978,c	;volatile
  4148  000F96                     l35:
  4149                           
  4150                           ;dc_motor.c: 40: }
  4151                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4152  000F96  EE20 F002          	lfsr	2,2
  4153  000F9A  5032               	movf	setMotorPWM@m,w,c
  4154  000F9C  26D9               	addwf	fsr2l,f,c
  4155  000F9E  5033               	movf	setMotorPWM@m+1,w,c
  4156  000FA0  22DA               	addwfc	fsr2h,f,c
  4157  000FA2  CFDE F034          	movff	postinc2,??_setMotorPWM
  4158  000FA6  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4159  000FAA  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4160  000FAE  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4161  000FB2  0100               	movlb	0	; () banked
  4162  000FB4  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4163  000FB6  46E8               	rlncf	wreg,f,c
  4164  000FB8  0BFC               	andlw	252
  4165  000FBA  6EDF               	movwf	indf2,c
  4166                           
  4167                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4168  000FBC  EE20 F004          	lfsr	2,4
  4169  000FC0  5032               	movf	setMotorPWM@m,w,c
  4170  000FC2  26D9               	addwf	fsr2l,f,c
  4171  000FC4  5033               	movf	setMotorPWM@m+1,w,c
  4172  000FC6  22DA               	addwfc	fsr2h,f,c
  4173  000FC8  CFDE F034          	movff	postinc2,??_setMotorPWM
  4174  000FCC  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4175  000FD0  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4176  000FD4  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4177  000FD8  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4178  000FDC  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4179  000FE0  0E06               	movlw	6
  4180  000FE2  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4181  000FE4                     u2265:
  4182  000FE4  3437               	rlcf	??_setMotorPWM+3,w,c
  4183  000FE6  3237               	rrcf	??_setMotorPWM+3,f,c
  4184  000FE8  3236               	rrcf	??_setMotorPWM+2,f,c
  4185  000FEA  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4186  000FEC  D7FB               	goto	u2265
  4187  000FEE  5036               	movf	??_setMotorPWM+2,w,c
  4188  000FF0  6EDF               	movwf	indf2,c
  4189                           
  4190                           ; BSR set to: 0
  4191  000FF2  0012               	return		;funcret
  4192  000FF4                     __end_of_setMotorPWM:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           indf1	equ	0xFE7
  4201                           fsr1h	equ	0xFE2
  4202                           fsr1l	equ	0xFE1
  4203                           indf2	equ	0xFDF
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function ___awdiv *****************
  4211 ;; Defined at:
  4212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  dividend        2   41[COMRAM] int 
  4215 ;;  divisor         2   43[COMRAM] int 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  quotient        2   47[COMRAM] int 
  4218 ;;  sign            1   46[COMRAM] unsigned char 
  4219 ;;  counter         1   45[COMRAM] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2   41[COMRAM] int 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4229 ;;      Params:         4       0       0       0
  4230 ;;      Locals:         4       0       0       0
  4231 ;;      Temps:          0       0       0       0
  4232 ;;      Totals:         8       0       0       0
  4233 ;;Total ram usage:        8 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    3
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_setMotorPWM
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text17
  4244  001488                     __ptext17:
  4245                           	opt stack 0
  4246  001488                     ___awdiv:
  4247                           	opt stack 25
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;incstack = 0
  4251  001488  0E00               	movlw	0
  4252  00148A  6E2F               	movwf	___awdiv@sign,c
  4253  00148C  AE2D               	btfss	___awdiv@divisor+1,7,c
  4254  00148E  D006               	goto	l2821
  4255  001490  6C2C               	negf	___awdiv@divisor,c
  4256  001492  1E2D               	comf	___awdiv@divisor+1,f,c
  4257  001494  B0D8               	btfsc	status,0,c
  4258  001496  2A2D               	incf	___awdiv@divisor+1,f,c
  4259  001498  0E01               	movlw	1
  4260  00149A  6E2F               	movwf	___awdiv@sign,c
  4261  00149C                     l2821:
  4262  00149C  AE2B               	btfss	___awdiv@dividend+1,7,c
  4263  00149E  D006               	goto	l2827
  4264  0014A0  6C2A               	negf	___awdiv@dividend,c
  4265  0014A2  1E2B               	comf	___awdiv@dividend+1,f,c
  4266  0014A4  B0D8               	btfsc	status,0,c
  4267  0014A6  2A2B               	incf	___awdiv@dividend+1,f,c
  4268  0014A8  0E01               	movlw	1
  4269  0014AA  1A2F               	xorwf	___awdiv@sign,f,c
  4270  0014AC                     l2827:
  4271  0014AC  0E00               	movlw	0
  4272  0014AE  6E31               	movwf	___awdiv@quotient+1,c
  4273  0014B0  0E00               	movlw	0
  4274  0014B2  6E30               	movwf	___awdiv@quotient,c
  4275  0014B4  502C               	movf	___awdiv@divisor,w,c
  4276  0014B6  102D               	iorwf	___awdiv@divisor+1,w,c
  4277  0014B8  B4D8               	btfsc	status,2,c
  4278  0014BA  D01C               	goto	l2849
  4279  0014BC  0E01               	movlw	1
  4280  0014BE  6E2E               	movwf	___awdiv@counter,c
  4281  0014C0  D004               	goto	l2835
  4282  0014C2                     l2833:
  4283  0014C2  90D8               	bcf	status,0,c
  4284  0014C4  362C               	rlcf	___awdiv@divisor,f,c
  4285  0014C6  362D               	rlcf	___awdiv@divisor+1,f,c
  4286  0014C8  2A2E               	incf	___awdiv@counter,f,c
  4287  0014CA                     l2835:
  4288  0014CA  AE2D               	btfss	___awdiv@divisor+1,7,c
  4289  0014CC  D7FA               	goto	l2833
  4290  0014CE                     l2837:
  4291  0014CE  90D8               	bcf	status,0,c
  4292  0014D0  3630               	rlcf	___awdiv@quotient,f,c
  4293  0014D2  3631               	rlcf	___awdiv@quotient+1,f,c
  4294  0014D4  502C               	movf	___awdiv@divisor,w,c
  4295  0014D6  5C2A               	subwf	___awdiv@dividend,w,c
  4296  0014D8  502D               	movf	___awdiv@divisor+1,w,c
  4297  0014DA  582B               	subwfb	___awdiv@dividend+1,w,c
  4298  0014DC  A0D8               	btfss	status,0,c
  4299  0014DE  D005               	goto	l2845
  4300  0014E0  502C               	movf	___awdiv@divisor,w,c
  4301  0014E2  5E2A               	subwf	___awdiv@dividend,f,c
  4302  0014E4  502D               	movf	___awdiv@divisor+1,w,c
  4303  0014E6  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4304  0014E8  8030               	bsf	___awdiv@quotient,0,c
  4305  0014EA                     l2845:
  4306  0014EA  90D8               	bcf	status,0,c
  4307  0014EC  322D               	rrcf	___awdiv@divisor+1,f,c
  4308  0014EE  322C               	rrcf	___awdiv@divisor,f,c
  4309  0014F0  2E2E               	decfsz	___awdiv@counter,f,c
  4310  0014F2  D7ED               	goto	l2837
  4311  0014F4                     l2849:
  4312  0014F4  502F               	movf	___awdiv@sign,w,c
  4313  0014F6  B4D8               	btfsc	status,2,c
  4314  0014F8  D004               	goto	l2853
  4315  0014FA  6C30               	negf	___awdiv@quotient,c
  4316  0014FC  1E31               	comf	___awdiv@quotient+1,f,c
  4317  0014FE  B0D8               	btfsc	status,0,c
  4318  001500  2A31               	incf	___awdiv@quotient+1,f,c
  4319  001502                     l2853:
  4320  001502  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4321  001506  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4322  00150A  0012               	return	
  4323  00150C                     __end_of___awdiv:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           indf1	equ	0xFE7
  4332                           fsr1h	equ	0xFE2
  4333                           fsr1l	equ	0xFE1
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function _sprintf *****************
  4342 ;; Defined at:
  4343 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4346 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4347 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4348 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  tmpval          4    0        struct .
  4351 ;;  cp              3    0        PTR const unsigned char 
  4352 ;;  width           2   10[BANK0 ] int 
  4353 ;;  val             2    7[BANK0 ] unsigned int 
  4354 ;;  ap              2    4[BANK0 ] PTR void [1]
  4355 ;;		 -> ?_sprintf(2), 
  4356 ;;  len             2    0        unsigned int 
  4357 ;;  c               1   12[BANK0 ] char 
  4358 ;;  flag            1    9[BANK0 ] unsigned char 
  4359 ;;  prec            1    6[BANK0 ] char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  2   47[COMRAM] int 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4369 ;;      Params:         8       0       0       0
  4370 ;;      Locals:         0       9       0       0
  4371 ;;      Temps:          0       4       0       0
  4372 ;;      Totals:         8      13       0       0
  4373 ;;Total ram usage:       21 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    4
  4376 ;; This function calls:
  4377 ;;		___lwdiv
  4378 ;;		___lwmod
  4379 ;;		___wmul
  4380 ;;		_isdigit
  4381 ;; This function is called by:
  4382 ;;		_ScanIR
  4383 ;;		_ScanWithRange
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text18
  4389  000BB4                     __ptext18:
  4390                           	opt stack 0
  4391  000BB4                     _sprintf:
  4392                           	opt stack 26
  4393                           
  4394                           ;doprnt.c: 494: va_list ap;
  4395                           ;doprnt.c: 499: signed char c;
  4396                           ;doprnt.c: 501: int width;
  4397                           ;doprnt.c: 506: signed char prec;
  4398                           ;doprnt.c: 508: unsigned char flag;
  4399                           ;doprnt.c: 523: union {
  4400                           ;doprnt.c: 524: unsigned long vd;
  4401                           ;doprnt.c: 525: double integ;
  4402                           ;doprnt.c: 526: } tmpval;
  4403                           ;doprnt.c: 528: unsigned int val;
  4404                           ;doprnt.c: 529: unsigned len;
  4405                           ;doprnt.c: 530: const char * cp;
  4406                           ;doprnt.c: 533: *ap = __va_start();
  4407                           
  4408                           ;incstack = 0
  4409  000BB4  0E34               	movlw	low (?_sprintf+4)
  4410  000BB6  0100               	movlb	0	; () banked
  4411  000BB8  6F64               	movwf	sprintf@ap& (0+255),b
  4412  000BBA  0E00               	movlw	high (?_sprintf+4)
  4413  000BBC  0100               	movlb	0	; () banked
  4414  000BBE  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4415                           
  4416                           ;doprnt.c: 536: while(c = *f++) {
  4417  000BC0  D168               	goto	l3021
  4418  000BC2                     l2915:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;doprnt.c: 538: if(c != '%')
  4422  000BC2  0E25               	movlw	37
  4423  000BC4  0100               	movlb	0	; () banked
  4424  000BC6  196C               	xorwf	sprintf@c& (0+255),w,b
  4425  000BC8  B4D8               	btfsc	status,2,c
  4426  000BCA  D009               	goto	l2921
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;doprnt.c: 540: {
  4430                           ;doprnt.c: 541: ((*sp++ = (c)));
  4431  000BCC  C030  FFD9         	movff	sprintf@sp,fsr2l
  4432  000BD0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4433  000BD4  C06C  FFDF         	movff	sprintf@c,indf2
  4434                           
  4435                           ; BSR set to: 0
  4436  000BD8  4A30               	infsnz	sprintf@sp,f,c
  4437  000BDA  2A31               	incf	sprintf@sp+1,f,c
  4438                           
  4439                           ;doprnt.c: 542: continue;
  4440  000BDC  D15A               	goto	l3021
  4441  000BDE                     l2921:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 543: }
  4445                           ;doprnt.c: 546: width = 0;
  4446  000BDE  0E00               	movlw	0
  4447  000BE0  0100               	movlb	0	; () banked
  4448  000BE2  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4449  000BE4  0E00               	movlw	0
  4450  000BE6  6F6A               	movwf	sprintf@width& (0+255),b
  4451                           
  4452                           ;doprnt.c: 548: flag = 0;
  4453  000BE8  0E00               	movlw	0
  4454  000BEA  0100               	movlb	0	; () banked
  4455  000BEC  6F69               	movwf	sprintf@flag& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;doprnt.c: 551: switch(*f) {
  4459                           
  4460                           ;doprnt.c: 550: for(;;) {
  4461  000BEE  D004               	goto	l2927
  4462  000BF0                     l2923:
  4463                           
  4464                           ;doprnt.c: 580: flag |= 0x04;
  4465  000BF0  0100               	movlb	0	; () banked
  4466  000BF2  8569               	bsf	sprintf@flag& (0+255),2,b
  4467                           
  4468                           ;doprnt.c: 581: f++;
  4469  000BF4  4A32               	infsnz	sprintf@f,f,c
  4470  000BF6  2A33               	incf	sprintf@f+1,f,c
  4471  000BF8                     l2927:
  4472  000BF8  C032  FFF6         	movff	sprintf@f,tblptrl
  4473  000BFC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4474  000C00                     	if	0	;tblptru may be non-zero
  4475  000C00                     	endif
  4476  000C00                     	if	0	;tblptru may be non-zero
  4477  000C00                     	endif
  4478  000C00  0008               	tblrd		*
  4479  000C02  50F5               	movf	tablat,w,c
  4480                           
  4481                           ; Switch size 1, requested type "space"
  4482                           ; Number of cases is 1, Range of values is 48 to 48
  4483                           ; switch strategies available:
  4484                           ; Name         Instructions Cycles
  4485                           ; simple_byte            4     3 (average)
  4486                           ;	Chosen strategy is simple_byte
  4487  000C04  0A30               	xorlw	48	; case 48
  4488  000C06  B4D8               	btfsc	status,2,c
  4489  000C08  D7F3               	goto	l2923
  4490                           
  4491                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4492                           
  4493                           ;doprnt.c: 586: }
  4494                           
  4495                           ;doprnt.c: 585: break;
  4496  000C0A  C032  FFF6         	movff	sprintf@f,tblptrl
  4497  000C0E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4498  000C12                     	if	0	;tblptru may be non-zero
  4499  000C12                     	endif
  4500  000C12                     	if	0	;tblptru may be non-zero
  4501  000C12                     	endif
  4502  000C12  0008               	tblrd		*
  4503  000C14  50F5               	movf	tablat,w,c
  4504  000C16  ECDB  F00C         	call	_isdigit
  4505  000C1A  A0D8               	btfss	status,0,c
  4506  000C1C  D03E               	goto	l2943
  4507                           
  4508                           ;doprnt.c: 598: width = 0;
  4509  000C1E  0E00               	movlw	0
  4510  000C20  0100               	movlb	0	; () banked
  4511  000C22  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4512  000C24  0E00               	movlw	0
  4513  000C26  6F6A               	movwf	sprintf@width& (0+255),b
  4514  000C28                     l2933:
  4515                           
  4516                           ;doprnt.c: 600: width *= 10;
  4517  000C28  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4518  000C2C  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4519  000C30  0E00               	movlw	0
  4520  000C32  6E27               	movwf	___wmul@multiplicand+1,c
  4521  000C34  0E0A               	movlw	10
  4522  000C36  6E26               	movwf	___wmul@multiplicand,c
  4523  000C38  ECB7  F00C         	call	___wmul	;wreg free
  4524  000C3C  C024  F06A         	movff	?___wmul,sprintf@width
  4525  000C40  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4526                           
  4527                           ;doprnt.c: 601: width += *f++ - '0';
  4528  000C44  0ED0               	movlw	208
  4529  000C46  0100               	movlb	0	; () banked
  4530  000C48  6F60               	movwf	??_sprintf& (0+255),b
  4531  000C4A  0EFF               	movlw	255
  4532  000C4C  0100               	movlb	0	; () banked
  4533  000C4E  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4534  000C50  C032  FFF6         	movff	sprintf@f,tblptrl
  4535  000C54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4536  000C58                     	if	0	;tblptru may be non-zero
  4537  000C58                     	endif
  4538  000C58                     	if	0	;tblptru may be non-zero
  4539  000C58                     	endif
  4540  000C58  0008               	tblrd		*
  4541  000C5A  50F5               	movf	tablat,w,c
  4542  000C5C  0100               	movlb	0	; () banked
  4543  000C5E  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4544  000C60  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4545  000C62  0100               	movlb	0	; () banked
  4546  000C64  5160               	movf	??_sprintf& (0+255),w,b
  4547  000C66  0100               	movlb	0	; () banked
  4548  000C68  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4549  000C6A  0100               	movlb	0	; () banked
  4550  000C6C  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4551  000C6E  0100               	movlb	0	; () banked
  4552  000C70  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4553  000C72  0100               	movlb	0	; () banked
  4554  000C74  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4555  000C76  0100               	movlb	0	; () banked
  4556  000C78  276A               	addwf	sprintf@width& (0+255),f,b
  4557  000C7A  0100               	movlb	0	; () banked
  4558  000C7C  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4559  000C7E  0100               	movlb	0	; () banked
  4560  000C80  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4561                           
  4562                           ; BSR set to: 0
  4563  000C82  4A32               	infsnz	sprintf@f,f,c
  4564  000C84  2A33               	incf	sprintf@f+1,f,c
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4568  000C86  C032  FFF6         	movff	sprintf@f,tblptrl
  4569  000C8A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4570  000C8E                     	if	0	;tblptru may be non-zero
  4571  000C8E                     	endif
  4572  000C8E                     	if	0	;tblptru may be non-zero
  4573  000C8E                     	endif
  4574  000C8E  0008               	tblrd		*
  4575  000C90  50F5               	movf	tablat,w,c
  4576  000C92  ECDB  F00C         	call	_isdigit
  4577  000C96  B0D8               	btfsc	status,0,c
  4578  000C98  D7C7               	goto	l2933
  4579  000C9A                     l2943:
  4580  000C9A  C032  FFF6         	movff	sprintf@f,tblptrl
  4581  000C9E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4582  000CA2  4A32               	infsnz	sprintf@f,f,c
  4583  000CA4  2A33               	incf	sprintf@f+1,f,c
  4584  000CA6                     	if	0	;tblptru may be non-zero
  4585  000CA6                     	endif
  4586  000CA6                     	if	0	;tblptru may be non-zero
  4587  000CA6                     	endif
  4588  000CA6  0008               	tblrd		*
  4589  000CA8  CFF5 F06C          	movff	tablat,sprintf@c
  4590  000CAC  0100               	movlb	0	; () banked
  4591  000CAE  516C               	movf	sprintf@c& (0+255),w,b
  4592                           
  4593                           ; Switch size 1, requested type "space"
  4594                           ; Number of cases is 3, Range of values is 0 to 105
  4595                           ; switch strategies available:
  4596                           ; Name         Instructions Cycles
  4597                           ; simple_byte           10     6 (average)
  4598                           ;	Chosen strategy is simple_byte
  4599  000CB0  0A00               	xorlw	0	; case 0
  4600  000CB2  B4D8               	btfsc	status,2,c
  4601  000CB4  D0FB               	goto	l3023
  4602  000CB6  0A64               	xorlw	100	; case 100
  4603  000CB8  B4D8               	btfsc	status,2,c
  4604  000CBA  D003               	goto	l2945
  4605  000CBC  0A0D               	xorlw	13	; case 105
  4606  000CBE  A4D8               	btfss	status,2,c
  4607  000CC0  D0E8               	goto	l3021
  4608  000CC2                     l2945:
  4609                           
  4610                           ;doprnt.c: 1253: {
  4611                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4612  000CC2  C064  FFD9         	movff	sprintf@ap,fsr2l
  4613  000CC6  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4614  000CCA  CFDE F067          	movff	postinc2,sprintf@val
  4615  000CCE  CFDD F068          	movff	postdec2,sprintf@val+1
  4616  000CD2  0E02               	movlw	2
  4617  000CD4  0100               	movlb	0	; () banked
  4618  000CD6  2764               	addwf	sprintf@ap& (0+255),f,b
  4619  000CD8  0E00               	movlw	0
  4620  000CDA  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 1261: if((int)val < 0) {
  4624  000CDC  0100               	movlb	0	; () banked
  4625  000CDE  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4626  000CE0  D008               	goto	l2955
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 1262: flag |= 0x03;
  4630  000CE2  0E03               	movlw	3
  4631  000CE4  0100               	movlb	0	; () banked
  4632  000CE6  1369               	iorwf	sprintf@flag& (0+255),f,b
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;doprnt.c: 1263: val = -val;
  4636  000CE8  0100               	movlb	0	; () banked
  4637  000CEA  6D67               	negf	sprintf@val& (0+255),b
  4638  000CEC  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4639  000CEE  B0D8               	btfsc	status,0,c
  4640  000CF0  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4641  000CF2                     l2955:
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;doprnt.c: 1264: }
  4645                           ;doprnt.c: 1266: }
  4646                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4647  000CF2  0E01               	movlw	1
  4648  000CF4  0100               	movlb	0	; () banked
  4649  000CF6  6F6C               	movwf	sprintf@c& (0+255),b
  4650  000CF8                     l2957:
  4651                           
  4652                           ; BSR set to: 0
  4653  000CF8  0E05               	movlw	5
  4654  000CFA  0100               	movlb	0	; () banked
  4655  000CFC  196C               	xorwf	sprintf@c& (0+255),w,b
  4656  000CFE  B4D8               	btfsc	status,2,c
  4657  000D00  D016               	goto	l2969
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;doprnt.c: 1306: if(val < dpowers[c])
  4661                           
  4662                           ; BSR set to: 0
  4663                           
  4664                           ; BSR set to: 0
  4665  000D02  0100               	movlb	0	; () banked
  4666  000D04  516C               	movf	sprintf@c& (0+255),w,b
  4667  000D06  0D02               	mullw	2
  4668  000D08  0E01               	movlw	low _dpowers
  4669  000D0A  24F3               	addwf	prodl,w,c
  4670  000D0C  6EF6               	movwf	tblptrl,c
  4671  000D0E  0E03               	movlw	high _dpowers
  4672  000D10  20F4               	addwfc	prodh,w,c
  4673  000D12  6EF7               	movwf	tblptrh,c
  4674  000D14                     	if	0	;There are less than 3 active tblptr bytes
  4675  000D14                     	endif
  4676  000D14  0009               	tblrd		*+
  4677  000D16  50F5               	movf	tablat,w,c
  4678  000D18  0100               	movlb	0	; () banked
  4679  000D1A  5D67               	subwf	sprintf@val& (0+255),w,b
  4680  000D1C  0009               	tblrd		*+
  4681  000D1E  50F5               	movf	tablat,w,c
  4682  000D20  0100               	movlb	0	; () banked
  4683  000D22  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4684  000D24  A0D8               	btfss	status,0,c
  4685  000D26  D003               	goto	l2969
  4686                           
  4687                           ; BSR set to: 0
  4688                           
  4689                           ; BSR set to: 0
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;doprnt.c: 1307: break;
  4693  000D28  0100               	movlb	0	; () banked
  4694  000D2A  2B6C               	incf	sprintf@c& (0+255),f,b
  4695  000D2C  D7E5               	goto	l2957
  4696  000D2E                     l2969:
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4700  000D2E  0100               	movlb	0	; () banked
  4701  000D30  516A               	movf	sprintf@width& (0+255),w,b
  4702  000D32  0100               	movlb	0	; () banked
  4703  000D34  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4704  000D36  B4D8               	btfsc	status,2,c
  4705  000D38  D00B               	goto	l2975
  4706                           
  4707                           ; BSR set to: 0
  4708  000D3A  C069  F060         	movff	sprintf@flag,??_sprintf
  4709  000D3E  0E03               	movlw	3
  4710  000D40  0100               	movlb	0	; () banked
  4711  000D42  1760               	andwf	??_sprintf& (0+255),f,b
  4712  000D44  B4D8               	btfsc	status,2,c
  4713  000D46  D004               	goto	l2975
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;doprnt.c: 1346: width--;
  4717  000D48  0100               	movlb	0	; () banked
  4718  000D4A  076A               	decf	sprintf@width& (0+255),f,b
  4719  000D4C  A0D8               	btfss	status,0,c
  4720  000D4E  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4721  000D50                     l2975:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1381: if(width > c)
  4725  000D50  0E80               	movlw	128
  4726  000D52  0100               	movlb	0	; () banked
  4727  000D54  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4728  000D56  0E7F               	movlw	127
  4729  000D58  0100               	movlb	0	; () banked
  4730  000D5A  6F60               	movwf	??_sprintf& (0+255),b
  4731  000D5C  0100               	movlb	0	; () banked
  4732  000D5E  516A               	movf	sprintf@width& (0+255),w,b
  4733  000D60  0100               	movlb	0	; () banked
  4734  000D62  5D6C               	subwf	sprintf@c& (0+255),w,b
  4735  000D64  0100               	movlb	0	; () banked
  4736  000D66  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4737  000D68  0A80               	xorlw	128
  4738  000D6A  0100               	movlb	0	; () banked
  4739  000D6C  5960               	subwfb	??_sprintf& (0+255),w,b
  4740  000D6E  B0D8               	btfsc	status,0,c
  4741  000D70  D00B               	goto	l2979
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;doprnt.c: 1382: width -= c;
  4745  000D72  0100               	movlb	0	; () banked
  4746  000D74  516C               	movf	sprintf@c& (0+255),w,b
  4747  000D76  0100               	movlb	0	; () banked
  4748  000D78  5F6A               	subwf	sprintf@width& (0+255),f,b
  4749  000D7A  0E00               	movlw	0
  4750  000D7C  0100               	movlb	0	; () banked
  4751  000D7E  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4752  000D80  0EFF               	movlw	255
  4753  000D82  0100               	movlb	0	; () banked
  4754  000D84  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4755  000D86  D005               	goto	l2981
  4756  000D88                     l2979:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;doprnt.c: 1383: else
  4760                           ;doprnt.c: 1384: width = 0;
  4761  000D88  0E00               	movlw	0
  4762  000D8A  0100               	movlb	0	; () banked
  4763  000D8C  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4764  000D8E  0E00               	movlw	0
  4765  000D90  6F6A               	movwf	sprintf@width& (0+255),b
  4766  000D92                     l2981:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;doprnt.c: 1387: if(flag & 0x04) {
  4770  000D92  0100               	movlb	0	; () banked
  4771  000D94  A569               	btfss	sprintf@flag& (0+255),2,b
  4772  000D96  D022               	goto	l2997
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;doprnt.c: 1392: if(flag & 0x03)
  4776  000D98  C069  F060         	movff	sprintf@flag,??_sprintf
  4777  000D9C  0E03               	movlw	3
  4778  000D9E  0100               	movlb	0	; () banked
  4779  000DA0  1760               	andwf	??_sprintf& (0+255),f,b
  4780  000DA2  B4D8               	btfsc	status,2,c
  4781  000DA4  D008               	goto	l2989
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4785  000DA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4786  000DAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4787  000DAE  0E2D               	movlw	45
  4788  000DB0  6EDF               	movwf	indf2,c
  4789                           
  4790                           ; BSR set to: 0
  4791  000DB2  4A30               	infsnz	sprintf@sp,f,c
  4792  000DB4  2A31               	incf	sprintf@sp+1,f,c
  4793  000DB6                     l2989:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 1415: if(width)
  4797  000DB6  0100               	movlb	0	; () banked
  4798  000DB8  516A               	movf	sprintf@width& (0+255),w,b
  4799  000DBA  0100               	movlb	0	; () banked
  4800  000DBC  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4801  000DBE  B4D8               	btfsc	status,2,c
  4802  000DC0  D034               	goto	l3011
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4806                           
  4807                           ; BSR set to: 0
  4808                           
  4809                           ;doprnt.c: 1416: do
  4810  000DC2  C030  FFD9         	movff	sprintf@sp,fsr2l
  4811  000DC6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4812  000DCA  0E30               	movlw	48
  4813  000DCC  6EDF               	movwf	indf2,c
  4814                           
  4815                           ; BSR set to: 0
  4816  000DCE  4A30               	infsnz	sprintf@sp,f,c
  4817  000DD0  2A31               	incf	sprintf@sp+1,f,c
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 1418: while(--width);
  4821  000DD2  0100               	movlb	0	; () banked
  4822  000DD4  076A               	decf	sprintf@width& (0+255),f,b
  4823  000DD6  A0D8               	btfss	status,0,c
  4824  000DD8  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4825  000DDA  D7ED               	goto	l2989
  4826  000DDC                     l2997:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 1422: {
  4830                           ;doprnt.c: 1424: if(width
  4831                           ;doprnt.c: 1428: )
  4832  000DDC  0100               	movlb	0	; () banked
  4833  000DDE  516A               	movf	sprintf@width& (0+255),w,b
  4834  000DE0  0100               	movlb	0	; () banked
  4835  000DE2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4836  000DE4  B4D8               	btfsc	status,2,c
  4837  000DE6  D012               	goto	l3005
  4838  000DE8                     l2999:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4842  000DE8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4843  000DEC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4844  000DF0  0E20               	movlw	32
  4845  000DF2  6EDF               	movwf	indf2,c
  4846                           
  4847                           ; BSR set to: 0
  4848  000DF4  4A30               	infsnz	sprintf@sp,f,c
  4849  000DF6  2A31               	incf	sprintf@sp+1,f,c
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;doprnt.c: 1431: while(--width);
  4853  000DF8  0100               	movlb	0	; () banked
  4854  000DFA  076A               	decf	sprintf@width& (0+255),f,b
  4855  000DFC  A0D8               	btfss	status,0,c
  4856  000DFE  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4857  000E00  0100               	movlb	0	; () banked
  4858  000E02  516A               	movf	sprintf@width& (0+255),w,b
  4859  000E04  0100               	movlb	0	; () banked
  4860  000E06  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4861  000E08  A4D8               	btfss	status,2,c
  4862  000E0A  D7EE               	goto	l2999
  4863  000E0C                     l3005:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;doprnt.c: 1438: if(flag & 0x03)
  4867  000E0C  C069  F060         	movff	sprintf@flag,??_sprintf
  4868  000E10  0E03               	movlw	3
  4869  000E12  0100               	movlb	0	; () banked
  4870  000E14  1760               	andwf	??_sprintf& (0+255),f,b
  4871  000E16  B4D8               	btfsc	status,2,c
  4872  000E18  D008               	goto	l3011
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4876  000E1A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4877  000E1E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4878  000E22  0E2D               	movlw	45
  4879  000E24  6EDF               	movwf	indf2,c
  4880                           
  4881                           ; BSR set to: 0
  4882  000E26  4A30               	infsnz	sprintf@sp,f,c
  4883  000E28  2A31               	incf	sprintf@sp+1,f,c
  4884  000E2A                     l3011:
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;doprnt.c: 1469: }
  4888                           ;doprnt.c: 1472: prec = c;
  4889  000E2A  C06C  F066         	movff	sprintf@c,sprintf@prec
  4890                           
  4891                           ;doprnt.c: 1474: while(prec--) {
  4892  000E2E  D02B               	goto	l3019
  4893  000E30                     l3013:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;doprnt.c: 1478: {
  4897                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4898  000E30  0100               	movlb	0	; () banked
  4899  000E32  5166               	movf	sprintf@prec& (0+255),w,b
  4900  000E34  0D02               	mullw	2
  4901  000E36  0E01               	movlw	low _dpowers
  4902  000E38  24F3               	addwf	prodl,w,c
  4903  000E3A  6EF6               	movwf	tblptrl,c
  4904  000E3C  0E03               	movlw	high _dpowers
  4905  000E3E  20F4               	addwfc	prodh,w,c
  4906  000E40  6EF7               	movwf	tblptrh,c
  4907  000E42                     	if	0	;There are less than 3 active tblptr bytes
  4908  000E42                     	endif
  4909  000E42  0009               	tblrd		*+
  4910  000E44  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4911  000E48  000A               	tblrd		*-
  4912  000E4A  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4913  000E4E  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4914  000E52  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4915  000E56  EC67  F00B         	call	___lwdiv	;wreg free
  4916  000E5A  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4917  000E5E  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4918  000E62  0E00               	movlw	0
  4919  000E64  6E2E               	movwf	___lwmod@divisor+1,c
  4920  000E66  0E0A               	movlw	10
  4921  000E68  6E2D               	movwf	___lwmod@divisor,c
  4922  000E6A  EC90  F00B         	call	___lwmod	;wreg free
  4923  000E6E  502B               	movf	?___lwmod,w,c
  4924  000E70  0F30               	addlw	48
  4925  000E72  0100               	movlb	0	; () banked
  4926  000E74  6F6C               	movwf	sprintf@c& (0+255),b
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;doprnt.c: 1523: }
  4930                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4931  000E76  C030  FFD9         	movff	sprintf@sp,fsr2l
  4932  000E7A  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4933  000E7E  C06C  FFDF         	movff	sprintf@c,indf2
  4934                           
  4935                           ; BSR set to: 0
  4936  000E82  4A30               	infsnz	sprintf@sp,f,c
  4937  000E84  2A31               	incf	sprintf@sp+1,f,c
  4938  000E86                     l3019:
  4939                           
  4940                           ; BSR set to: 0
  4941  000E86  0100               	movlb	0	; () banked
  4942  000E88  0766               	decf	sprintf@prec& (0+255),f,b
  4943  000E8A  0100               	movlb	0	; () banked
  4944  000E8C  2966               	incf	sprintf@prec& (0+255),w,b
  4945  000E8E  A4D8               	btfss	status,2,c
  4946  000E90  D7CF               	goto	l3013
  4947  000E92                     l3021:
  4948  000E92  C032  FFF6         	movff	sprintf@f,tblptrl
  4949  000E96  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4950  000E9A  4A32               	infsnz	sprintf@f,f,c
  4951  000E9C  2A33               	incf	sprintf@f+1,f,c
  4952  000E9E                     	if	0	;tblptru may be non-zero
  4953  000E9E                     	endif
  4954  000E9E                     	if	0	;tblptru may be non-zero
  4955  000E9E                     	endif
  4956  000E9E  0008               	tblrd		*
  4957  000EA0  CFF5 F06C          	movff	tablat,sprintf@c
  4958  000EA4  0100               	movlb	0	; () banked
  4959  000EA6  516C               	movf	sprintf@c& (0+255),w,b
  4960  000EA8  A4D8               	btfss	status,2,c
  4961  000EAA  D68B               	goto	l2915
  4962  000EAC                     l3023:
  4963                           
  4964                           ;doprnt.c: 1538: *sp = 0;
  4965  000EAC  C030  FFD9         	movff	sprintf@sp,fsr2l
  4966  000EB0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4967  000EB4  0E00               	movlw	0
  4968  000EB6  6EDF               	movwf	indf2,c
  4969  000EB8  0012               	return	
  4970  000EBA                     __end_of_sprintf:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           intcon	equ	0xFF2
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           indf1	equ	0xFE7
  4982                           fsr1h	equ	0xFE2
  4983                           fsr1l	equ	0xFE1
  4984                           indf2	equ	0xFDF
  4985                           postinc2	equ	0xFDE
  4986                           postdec2	equ	0xFDD
  4987                           fsr2h	equ	0xFDA
  4988                           fsr2l	equ	0xFD9
  4989                           status	equ	0xFD8
  4990                           
  4991 ;; *************** function _isdigit *****************
  4992 ;; Defined at:
  4993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  c               1    wreg     unsigned char 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  c               1   37[COMRAM] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;		None               void
  5000 ;; Registers used:
  5001 ;;		wreg, status,2, status,0
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5007 ;;      Params:         0       0       0       0
  5008 ;;      Locals:         2       0       0       0
  5009 ;;      Temps:          1       0       0       0
  5010 ;;      Totals:         3       0       0       0
  5011 ;;Total ram usage:        3 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    3
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_sprintf
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text19
  5022  0019B6                     __ptext19:
  5023                           	opt stack 0
  5024  0019B6                     _isdigit:
  5025                           	opt stack 26
  5026                           
  5027                           ;incstack = 0
  5028                           ;isdigit@c stored from wreg
  5029  0019B6  6E26               	movwf	isdigit@c,c
  5030  0019B8  0E00               	movlw	0
  5031  0019BA  6E25               	movwf	_isdigit$1962,c
  5032  0019BC  0E3A               	movlw	58
  5033  0019BE  6026               	cpfslt	isdigit@c,c
  5034  0019C0  D005               	goto	l2063
  5035  0019C2  0E2F               	movlw	47
  5036  0019C4  6426               	cpfsgt	isdigit@c,c
  5037  0019C6  D002               	goto	l2063
  5038  0019C8  0E01               	movlw	1
  5039  0019CA  6E25               	movwf	_isdigit$1962,c
  5040  0019CC                     l2063:
  5041  0019CC  C025  F024         	movff	_isdigit$1962,??_isdigit
  5042  0019D0  3024               	rrcf	??_isdigit,w,c
  5043  0019D2  0012               	return	
  5044  0019D4                     __end_of_isdigit:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           indf1	equ	0xFE7
  5056                           fsr1h	equ	0xFE2
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function ___wmul *****************
  5066 ;; Defined at:
  5067 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  multiplier      2   35[COMRAM] unsigned int 
  5070 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  product         2   39[COMRAM] unsigned int 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;                  2   35[COMRAM] unsigned int 
  5075 ;; Registers used:
  5076 ;;		wreg, status,2, status,0, prodl, prodh
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5082 ;;      Params:         4       0       0       0
  5083 ;;      Locals:         2       0       0       0
  5084 ;;      Temps:          0       0       0       0
  5085 ;;      Totals:         6       0       0       0
  5086 ;;Total ram usage:        6 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    3
  5089 ;; This function calls:
  5090 ;;		Nothing
  5091 ;; This function is called by:
  5092 ;;		_setMotorPWM
  5093 ;;		_sprintf
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text20
  5098  00196E                     __ptext20:
  5099                           	opt stack 0
  5100  00196E                     ___wmul:
  5101                           	opt stack 25
  5102                           
  5103                           ;incstack = 0
  5104  00196E  5024               	movf	___wmul@multiplier,w,c
  5105  001970  0226               	mulwf	___wmul@multiplicand,c
  5106  001972  CFF3 F028          	movff	prodl,___wmul@product
  5107  001976  CFF4 F029          	movff	prodh,___wmul@product+1
  5108  00197A  5024               	movf	___wmul@multiplier,w,c
  5109  00197C  0227               	mulwf	___wmul@multiplicand+1,c
  5110  00197E  50F3               	movf	prodl,w,c
  5111  001980  2629               	addwf	___wmul@product+1,f,c
  5112  001982  5025               	movf	___wmul@multiplier+1,w,c
  5113  001984  0226               	mulwf	___wmul@multiplicand,c
  5114  001986  50F3               	movf	prodl,w,c
  5115  001988  2629               	addwf	___wmul@product+1,f,c
  5116  00198A  C028  F024         	movff	___wmul@product,?___wmul
  5117  00198E  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5118  001992  0012               	return	
  5119  001994                     __end_of___wmul:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           prodh	equ	0xFF4
  5126                           prodl	equ	0xFF3
  5127                           intcon	equ	0xFF2
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           indf1	equ	0xFE7
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           indf2	equ	0xFDF
  5134                           postinc2	equ	0xFDE
  5135                           postdec2	equ	0xFDD
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function ___lwmod *****************
  5141 ;; Defined at:
  5142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  dividend        2   42[COMRAM] unsigned int 
  5145 ;;  divisor         2   44[COMRAM] unsigned int 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  counter         1   46[COMRAM] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  2   42[COMRAM] unsigned int 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5157 ;;      Params:         4       0       0       0
  5158 ;;      Locals:         1       0       0       0
  5159 ;;      Temps:          0       0       0       0
  5160 ;;      Totals:         5       0       0       0
  5161 ;;Total ram usage:        5 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    3
  5164 ;; This function calls:
  5165 ;;		Nothing
  5166 ;; This function is called by:
  5167 ;;		_sprintf
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           	psect	text21
  5172  001720                     __ptext21:
  5173                           	opt stack 0
  5174  001720                     ___lwmod:
  5175                           	opt stack 26
  5176                           
  5177                           ;incstack = 0
  5178  001720  502D               	movf	___lwmod@divisor,w,c
  5179  001722  102E               	iorwf	___lwmod@divisor+1,w,c
  5180  001724  B4D8               	btfsc	status,2,c
  5181  001726  D018               	goto	l882
  5182  001728  0E01               	movlw	1
  5183  00172A  6E2F               	movwf	___lwmod@counter,c
  5184  00172C  D004               	goto	l2095
  5185  00172E                     l2093:
  5186  00172E  90D8               	bcf	status,0,c
  5187  001730  362D               	rlcf	___lwmod@divisor,f,c
  5188  001732  362E               	rlcf	___lwmod@divisor+1,f,c
  5189  001734  2A2F               	incf	___lwmod@counter,f,c
  5190  001736                     l2095:
  5191  001736  AE2E               	btfss	___lwmod@divisor+1,7,c
  5192  001738  D7FA               	goto	l2093
  5193  00173A                     l2097:
  5194  00173A  502D               	movf	___lwmod@divisor,w,c
  5195  00173C  5C2B               	subwf	___lwmod@dividend,w,c
  5196  00173E  502E               	movf	___lwmod@divisor+1,w,c
  5197  001740  582C               	subwfb	___lwmod@dividend+1,w,c
  5198  001742  A0D8               	btfss	status,0,c
  5199  001744  D004               	goto	l2101
  5200  001746  502D               	movf	___lwmod@divisor,w,c
  5201  001748  5E2B               	subwf	___lwmod@dividend,f,c
  5202  00174A  502E               	movf	___lwmod@divisor+1,w,c
  5203  00174C  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5204  00174E                     l2101:
  5205  00174E  90D8               	bcf	status,0,c
  5206  001750  322E               	rrcf	___lwmod@divisor+1,f,c
  5207  001752  322D               	rrcf	___lwmod@divisor,f,c
  5208  001754  2E2F               	decfsz	___lwmod@counter,f,c
  5209  001756  D7F1               	goto	l2097
  5210  001758                     l882:
  5211  001758  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5212  00175C  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5213  001760  0012               	return		;funcret
  5214  001762                     __end_of___lwmod:
  5215                           	opt stack 0
  5216                           tblptru	equ	0xFF8
  5217                           tblptrh	equ	0xFF7
  5218                           tblptrl	equ	0xFF6
  5219                           tablat	equ	0xFF5
  5220                           prodh	equ	0xFF4
  5221                           prodl	equ	0xFF3
  5222                           intcon	equ	0xFF2
  5223                           postinc0	equ	0xFEE
  5224                           wreg	equ	0xFE8
  5225                           indf1	equ	0xFE7
  5226                           fsr1h	equ	0xFE2
  5227                           fsr1l	equ	0xFE1
  5228                           indf2	equ	0xFDF
  5229                           postinc2	equ	0xFDE
  5230                           postdec2	equ	0xFDD
  5231                           fsr2h	equ	0xFDA
  5232                           fsr2l	equ	0xFD9
  5233                           status	equ	0xFD8
  5234                           
  5235 ;; *************** function ___lwdiv *****************
  5236 ;; Defined at:
  5237 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  dividend        2   35[COMRAM] unsigned int 
  5240 ;;  divisor         2   37[COMRAM] unsigned int 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  quotient        2   39[COMRAM] unsigned int 
  5243 ;;  counter         1   41[COMRAM] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  2   35[COMRAM] unsigned int 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5253 ;;      Params:         4       0       0       0
  5254 ;;      Locals:         3       0       0       0
  5255 ;;      Temps:          0       0       0       0
  5256 ;;      Totals:         7       0       0       0
  5257 ;;Total ram usage:        7 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    3
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_sprintf
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text22
  5268  0016CE                     __ptext22:
  5269                           	opt stack 0
  5270  0016CE                     ___lwdiv:
  5271                           	opt stack 26
  5272                           
  5273                           ;incstack = 0
  5274  0016CE  0E00               	movlw	0
  5275  0016D0  6E29               	movwf	___lwdiv@quotient+1,c
  5276  0016D2  0E00               	movlw	0
  5277  0016D4  6E28               	movwf	___lwdiv@quotient,c
  5278  0016D6  5026               	movf	___lwdiv@divisor,w,c
  5279  0016D8  1027               	iorwf	___lwdiv@divisor+1,w,c
  5280  0016DA  B4D8               	btfsc	status,2,c
  5281  0016DC  D01C               	goto	l872
  5282  0016DE  0E01               	movlw	1
  5283  0016E0  6E2A               	movwf	___lwdiv@counter,c
  5284  0016E2  D004               	goto	l2075
  5285  0016E4                     l2073:
  5286  0016E4  90D8               	bcf	status,0,c
  5287  0016E6  3626               	rlcf	___lwdiv@divisor,f,c
  5288  0016E8  3627               	rlcf	___lwdiv@divisor+1,f,c
  5289  0016EA  2A2A               	incf	___lwdiv@counter,f,c
  5290  0016EC                     l2075:
  5291  0016EC  AE27               	btfss	___lwdiv@divisor+1,7,c
  5292  0016EE  D7FA               	goto	l2073
  5293  0016F0                     l2077:
  5294  0016F0  90D8               	bcf	status,0,c
  5295  0016F2  3628               	rlcf	___lwdiv@quotient,f,c
  5296  0016F4  3629               	rlcf	___lwdiv@quotient+1,f,c
  5297  0016F6  5026               	movf	___lwdiv@divisor,w,c
  5298  0016F8  5C24               	subwf	___lwdiv@dividend,w,c
  5299  0016FA  5027               	movf	___lwdiv@divisor+1,w,c
  5300  0016FC  5825               	subwfb	___lwdiv@dividend+1,w,c
  5301  0016FE  A0D8               	btfss	status,0,c
  5302  001700  D005               	goto	l2085
  5303  001702  5026               	movf	___lwdiv@divisor,w,c
  5304  001704  5E24               	subwf	___lwdiv@dividend,f,c
  5305  001706  5027               	movf	___lwdiv@divisor+1,w,c
  5306  001708  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5307  00170A  8028               	bsf	___lwdiv@quotient,0,c
  5308  00170C                     l2085:
  5309  00170C  90D8               	bcf	status,0,c
  5310  00170E  3227               	rrcf	___lwdiv@divisor+1,f,c
  5311  001710  3226               	rrcf	___lwdiv@divisor,f,c
  5312  001712  2E2A               	decfsz	___lwdiv@counter,f,c
  5313  001714  D7ED               	goto	l2077
  5314  001716                     l872:
  5315  001716  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5316  00171A  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5317  00171E  0012               	return		;funcret
  5318  001720                     __end_of___lwdiv:
  5319                           	opt stack 0
  5320                           tblptru	equ	0xFF8
  5321                           tblptrh	equ	0xFF7
  5322                           tblptrl	equ	0xFF6
  5323                           tablat	equ	0xFF5
  5324                           prodh	equ	0xFF4
  5325                           prodl	equ	0xFF3
  5326                           intcon	equ	0xFF2
  5327                           postinc0	equ	0xFEE
  5328                           wreg	equ	0xFE8
  5329                           indf1	equ	0xFE7
  5330                           fsr1h	equ	0xFE2
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _grabRightIR *****************
  5340 ;; Defined at:
  5341 ;;		line 74 in file "IR_Reading.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5346 ;;  i               1   42[COMRAM] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  2   35[COMRAM] unsigned int 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5356 ;;      Params:         2       0       0       0
  5357 ;;      Locals:         3       0       0       0
  5358 ;;      Temps:          3       0       0       0
  5359 ;;      Totals:         8       0       0       0
  5360 ;;Total ram usage:        8 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    3
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_ScanIR
  5367 ;;		_ScanWithRange
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text23
  5373  00158C                     __ptext23:
  5374                           	opt stack 0
  5375  00158C                     _grabRightIR:
  5376                           	opt stack 27
  5377                           
  5378                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5379                           
  5380                           ;incstack = 0
  5381  00158C  0E00               	movlw	0
  5382  00158E  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5383  001590  0E00               	movlw	0
  5384  001592  6E29               	movwf	grabRightIR@IR_signal,c
  5385                           
  5386                           ;IR_Reading.c: 77: unsigned char i=0;
  5387  001594  0E00               	movlw	0
  5388  001596  6E2B               	movwf	grabRightIR@i,c
  5389                           
  5390                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5391  001598  0E00               	movlw	0
  5392  00159A  6E2B               	movwf	grabRightIR@i,c
  5393  00159C                     l2137:
  5394  00159C  0E03               	movlw	3
  5395  00159E  642B               	cpfsgt	grabRightIR@i,c
  5396  0015A0  D001               	goto	l2141
  5397  0015A2  D01E               	goto	l2147
  5398  0015A4                     l2141:
  5399                           
  5400                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5401  0015A4  5069               	movf	3945,w,c	;volatile
  5402  0015A6  6E26               	movwf	??_grabRightIR& (0+255),c
  5403  0015A8  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5404  0015AA  0E07               	movlw	7
  5405  0015AC                     u1465:
  5406  0015AC  90D8               	bcf	status,0,c
  5407  0015AE  3626               	rlcf	??_grabRightIR,f,c
  5408  0015B0  3627               	rlcf	??_grabRightIR+1,f,c
  5409  0015B2  2EE8               	decfsz	wreg,f,c
  5410  0015B4  D7FB               	goto	u1465
  5411  0015B6  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5412  0015BA  90D8               	bcf	status,0,c
  5413  0015BC  3228               	rrcf	??_grabRightIR+2,f,c
  5414  0015BE  5028               	movf	??_grabRightIR+2,w,c
  5415  0015C0  1226               	iorwf	??_grabRightIR,f,c
  5416  0015C2  0E00               	movlw	0
  5417  0015C4  1227               	iorwf	??_grabRightIR+1,f,c
  5418  0015C6  5026               	movf	??_grabRightIR,w,c
  5419  0015C8  2629               	addwf	grabRightIR@IR_signal,f,c
  5420  0015CA  5027               	movf	??_grabRightIR+1,w,c
  5421  0015CC  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5422                           
  5423                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5424  0015CE  0E82               	movlw	130
  5425  0015D0  6E26               	movwf	??_grabRightIR& (0+255),c
  5426  0015D2  0EDE               	movlw	222
  5427  0015D4                     u3017:
  5428  0015D4  2EE8               	decfsz	wreg,f,c
  5429  0015D6  D7FE               	goto	u3017
  5430  0015D8  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5431  0015DA  D7FC               	goto	u3017
  5432  0015DC  2A2B               	incf	grabRightIR@i,f,c
  5433  0015DE  D7DE               	goto	l2137
  5434  0015E0                     l2147:
  5435                           
  5436                           ;IR_Reading.c: 83: }
  5437                           ;IR_Reading.c: 85: return IR_signal>>2;
  5438  0015E0  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5439  0015E4  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5440  0015E8  90D8               	bcf	status,0,c
  5441  0015EA  3227               	rrcf	??_grabRightIR+1,f,c
  5442  0015EC  3226               	rrcf	??_grabRightIR,f,c
  5443  0015EE  90D8               	bcf	status,0,c
  5444  0015F0  3227               	rrcf	??_grabRightIR+1,f,c
  5445  0015F2  3226               	rrcf	??_grabRightIR,f,c
  5446  0015F4  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5447  0015F8  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5448  0015FC  0012               	return	
  5449  0015FE                     __end_of_grabRightIR:
  5450                           	opt stack 0
  5451                           tblptru	equ	0xFF8
  5452                           tblptrh	equ	0xFF7
  5453                           tblptrl	equ	0xFF6
  5454                           tablat	equ	0xFF5
  5455                           prodh	equ	0xFF4
  5456                           prodl	equ	0xFF3
  5457                           intcon	equ	0xFF2
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           indf1	equ	0xFE7
  5461                           fsr1h	equ	0xFE2
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _grabLeftIR *****************
  5471 ;; Defined at:
  5472 ;;		line 90 in file "IR_Reading.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5477 ;;  i               1   42[COMRAM] unsigned char 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  2   35[COMRAM] unsigned int 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5487 ;;      Params:         2       0       0       0
  5488 ;;      Locals:         3       0       0       0
  5489 ;;      Temps:          3       0       0       0
  5490 ;;      Totals:         8       0       0       0
  5491 ;;Total ram usage:        8 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    3
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_ScanIR
  5498 ;;		_ScanWithRange
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text24
  5504  0015FE                     __ptext24:
  5505                           	opt stack 0
  5506  0015FE                     _grabLeftIR:
  5507                           	opt stack 27
  5508                           
  5509                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5510                           
  5511                           ;incstack = 0
  5512  0015FE  0E00               	movlw	0
  5513  001600  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5514  001602  0E00               	movlw	0
  5515  001604  6E29               	movwf	grabLeftIR@IR_signal,c
  5516                           
  5517                           ;IR_Reading.c: 93: unsigned char i=0;
  5518  001606  0E00               	movlw	0
  5519  001608  6E2B               	movwf	grabLeftIR@i,c
  5520                           
  5521                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5522  00160A  0E00               	movlw	0
  5523  00160C  6E2B               	movwf	grabLeftIR@i,c
  5524  00160E                     l2153:
  5525  00160E  0E03               	movlw	3
  5526  001610  642B               	cpfsgt	grabLeftIR@i,c
  5527  001612  D001               	goto	l2157
  5528  001614  D01E               	goto	l2163
  5529  001616                     l2157:
  5530                           
  5531                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5532  001616  5067               	movf	3943,w,c	;volatile
  5533  001618  6E26               	movwf	??_grabLeftIR& (0+255),c
  5534  00161A  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5535  00161C  0E07               	movlw	7
  5536  00161E                     u1495:
  5537  00161E  90D8               	bcf	status,0,c
  5538  001620  3626               	rlcf	??_grabLeftIR,f,c
  5539  001622  3627               	rlcf	??_grabLeftIR+1,f,c
  5540  001624  2EE8               	decfsz	wreg,f,c
  5541  001626  D7FB               	goto	u1495
  5542  001628  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5543  00162C  90D8               	bcf	status,0,c
  5544  00162E  3228               	rrcf	??_grabLeftIR+2,f,c
  5545  001630  5028               	movf	??_grabLeftIR+2,w,c
  5546  001632  1226               	iorwf	??_grabLeftIR,f,c
  5547  001634  0E00               	movlw	0
  5548  001636  1227               	iorwf	??_grabLeftIR+1,f,c
  5549  001638  5026               	movf	??_grabLeftIR,w,c
  5550  00163A  2629               	addwf	grabLeftIR@IR_signal,f,c
  5551  00163C  5027               	movf	??_grabLeftIR+1,w,c
  5552  00163E  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5553                           
  5554                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5555  001640  0E82               	movlw	130
  5556  001642  6E26               	movwf	??_grabLeftIR& (0+255),c
  5557  001644  0EDE               	movlw	222
  5558  001646                     u3027:
  5559  001646  2EE8               	decfsz	wreg,f,c
  5560  001648  D7FE               	goto	u3027
  5561  00164A  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5562  00164C  D7FC               	goto	u3027
  5563  00164E  2A2B               	incf	grabLeftIR@i,f,c
  5564  001650  D7DE               	goto	l2153
  5565  001652                     l2163:
  5566                           
  5567                           ;IR_Reading.c: 99: }
  5568                           ;IR_Reading.c: 101: return IR_signal>>2;
  5569  001652  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5570  001656  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5571  00165A  90D8               	bcf	status,0,c
  5572  00165C  3227               	rrcf	??_grabLeftIR+1,f,c
  5573  00165E  3226               	rrcf	??_grabLeftIR,f,c
  5574  001660  90D8               	bcf	status,0,c
  5575  001662  3227               	rrcf	??_grabLeftIR+1,f,c
  5576  001664  3226               	rrcf	??_grabLeftIR,f,c
  5577  001666  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5578  00166A  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5579  00166E  0012               	return	
  5580  001670                     __end_of_grabLeftIR:
  5581                           	opt stack 0
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           indf1	equ	0xFE7
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _SetLine *****************
  5602 ;; Defined at:
  5603 ;;		line 74 in file "LCD.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  line            1    wreg     unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  line            1   41[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5617 ;;      Params:         0       0       0       0
  5618 ;;      Locals:         1       0       0       0
  5619 ;;      Temps:          0       0       0       0
  5620 ;;      Totals:         1       0       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    6
  5624 ;; This function calls:
  5625 ;;		_SendLCD
  5626 ;; This function is called by:
  5627 ;;		_ScanIR
  5628 ;;		_ScanWithRange
  5629 ;;		_main
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text25
  5634  0018BE                     __ptext25:
  5635                           	opt stack 0
  5636  0018BE                     _SetLine:
  5637                           	opt stack 24
  5638                           
  5639                           ;incstack = 0
  5640                           ;SetLine@line stored from wreg
  5641  0018BE  6E2A               	movwf	SetLine@line,c
  5642                           
  5643                           ;LCD.c: 75: if (line==1) {
  5644  0018C0  042A               	decf	SetLine@line,w,c
  5645  0018C2  A4D8               	btfss	status,2,c
  5646  0018C4  D006               	goto	l2171
  5647                           
  5648                           ;LCD.c: 76: SendLCD(0x80,0);
  5649  0018C6  0E00               	movlw	0
  5650  0018C8  6E28               	movwf	SendLCD@type,c
  5651  0018CA  0E80               	movlw	128
  5652  0018CC  EC77  F00C         	call	_SendLCD
  5653                           
  5654                           ;LCD.c: 77: } else if (line==2) {
  5655  0018D0  D009               	goto	l2175
  5656  0018D2                     l2171:
  5657  0018D2  0E02               	movlw	2
  5658  0018D4  182A               	xorwf	SetLine@line,w,c
  5659  0018D6  A4D8               	btfss	status,2,c
  5660  0018D8  D005               	goto	l2175
  5661                           
  5662                           ;LCD.c: 78: SendLCD(0xC0,0);
  5663  0018DA  0E00               	movlw	0
  5664  0018DC  6E28               	movwf	SendLCD@type,c
  5665  0018DE  0EC0               	movlw	192
  5666  0018E0  EC77  F00C         	call	_SendLCD
  5667  0018E4                     l2175:
  5668                           
  5669                           ;LCD.c: 79: }
  5670                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5671  0018E4  0E21               	movlw	33
  5672  0018E6                     u3037:
  5673  0018E6  2EE8               	decfsz	wreg,f,c
  5674  0018E8  D7FE               	goto	u3037
  5675  0018EA  F000               	nop	
  5676  0018EC  0012               	return		;funcret
  5677  0018EE                     __end_of_SetLine:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           intcon	equ	0xFF2
  5686                           postinc0	equ	0xFEE
  5687                           wreg	equ	0xFE8
  5688                           indf1	equ	0xFE7
  5689                           fsr1h	equ	0xFE2
  5690                           fsr1l	equ	0xFE1
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _LCD_String *****************
  5699 ;; Defined at:
  5700 ;;		line 83 in file "LCD.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  string          2   41[COMRAM] PTR unsigned char 
  5703 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5704 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5705 ;;		 -> STR_1(12), 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5717 ;;      Params:         2       0       0       0
  5718 ;;      Locals:         0       0       0       0
  5719 ;;      Temps:          0       0       0       0
  5720 ;;      Totals:         2       0       0       0
  5721 ;;Total ram usage:        2 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    6
  5724 ;; This function calls:
  5725 ;;		_SendLCD
  5726 ;; This function is called by:
  5727 ;;		_ScanIR
  5728 ;;		_ScanWithRange
  5729 ;;		_main
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text26
  5734  001670                     __ptext26:
  5735                           	opt stack 0
  5736  001670                     _LCD_String:
  5737                           	opt stack 23
  5738                           
  5739                           ;LCD.c: 85: while(*string != 0){
  5740                           
  5741                           ;incstack = 0
  5742  001670  D01A               	goto	l2185
  5743  001672                     l2179:
  5744                           
  5745                           ;LCD.c: 88: SendLCD(*string++,1);
  5746  001672  0E01               	movlw	1
  5747  001674  6E28               	movwf	SendLCD@type,c
  5748  001676  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5749  00167A  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5750  00167E  6AF8               	clrf	tblptru,c
  5751  001680  0E02               	movlw	(high __ramtop+-1)
  5752  001682  64F7               	cpfsgt	tblptrh,c
  5753  001684  D003               	bra	u1537
  5754  001686  0008               	tblrd		*
  5755  001688  50F5               	movf	tablat,w,c
  5756  00168A  D005               	bra	u1530
  5757  00168C                     u1537:
  5758  00168C  CFF6 FFE1          	movff	tblptrl,fsr1l
  5759  001690  CFF7 FFE2          	movff	tblptrh,fsr1h
  5760  001694  50E7               	movf	indf1,w,c
  5761  001696                     u1530:
  5762  001696  EC77  F00C         	call	_SendLCD
  5763  00169A  4A2A               	infsnz	LCD_String@string,f,c
  5764  00169C  2A2B               	incf	LCD_String@string+1,f,c
  5765                           
  5766                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5767  00169E  0E21               	movlw	33
  5768  0016A0                     u3047:
  5769  0016A0  2EE8               	decfsz	wreg,f,c
  5770  0016A2  D7FE               	goto	u3047
  5771  0016A4  F000               	nop	
  5772  0016A6                     l2185:
  5773  0016A6  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5774  0016AA  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5775  0016AE  6AF8               	clrf	tblptru,c
  5776  0016B0  0E02               	movlw	(high __ramtop+-1)
  5777  0016B2  64F7               	cpfsgt	tblptrh,c
  5778  0016B4  D003               	bra	u1547
  5779  0016B6  0008               	tblrd		*
  5780  0016B8  50F5               	movf	tablat,w,c
  5781  0016BA  D005               	bra	u1540
  5782  0016BC                     u1547:
  5783  0016BC  CFF6 FFE1          	movff	tblptrl,fsr1l
  5784  0016C0  CFF7 FFE2          	movff	tblptrh,fsr1h
  5785  0016C4  50E7               	movf	indf1,w,c
  5786  0016C6                     u1540:
  5787  0016C6  0900               	iorlw	0
  5788  0016C8  B4D8               	btfsc	status,2,c
  5789  0016CA  0012               	return	
  5790  0016CC  D7D2               	goto	l2179
  5791  0016CE                     __end_of_LCD_String:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           indf1	equ	0xFE7
  5803                           fsr1h	equ	0xFE2
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _SendLCD *****************
  5813 ;; Defined at:
  5814 ;;		line 27 in file "LCD.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  Byte            1    wreg     unsigned char 
  5817 ;;  type            1   39[COMRAM] unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  Byte            1   40[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;		None               void
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5829 ;;      Params:         1       0       0       0
  5830 ;;      Locals:         1       0       0       0
  5831 ;;      Temps:          0       0       0       0
  5832 ;;      Totals:         2       0       0       0
  5833 ;;Total ram usage:        2 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    5
  5836 ;; This function calls:
  5837 ;;		_LCDout
  5838 ;; This function is called by:
  5839 ;;		_initLCD
  5840 ;;		_SetLine
  5841 ;;		_LCD_String
  5842 ;;		_ScanIR
  5843 ;;		_ScanWithRange
  5844 ;;		_main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text27
  5849  0018EE                     __ptext27:
  5850                           	opt stack 0
  5851  0018EE                     _SendLCD:
  5852                           	opt stack 24
  5853                           
  5854                           ;incstack = 0
  5855                           ;SendLCD@Byte stored from wreg
  5856  0018EE  6E29               	movwf	SendLCD@Byte,c
  5857                           
  5858                           ;LCD.c: 30: LATAbits.LATA6=type;
  5859  0018F0  B028               	btfsc	SendLCD@type,0,c
  5860  0018F2  D002               	bra	u1325
  5861  0018F4  9C89               	bcf	3977,6,c	;volatile
  5862  0018F6  D001               	bra	u1326
  5863  0018F8                     u1325:
  5864  0018F8  8C89               	bsf	3977,6,c	;volatile
  5865  0018FA                     u1326:
  5866                           
  5867                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5868  0018FA  3829               	swapf	SendLCD@Byte,w,c
  5869  0018FC  0B0F               	andlw	15
  5870  0018FE  0B0F               	andlw	15
  5871  001900  ECF4  F008         	call	_LCDout
  5872                           
  5873                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5874  001904  0E06               	movlw	6
  5875  001906                     u3057:
  5876  001906  2EE8               	decfsz	wreg,f,c
  5877  001908  D7FE               	goto	u3057
  5878  00190A  D000               	nop2		;nop
  5879                           
  5880                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5881  00190C  5029               	movf	SendLCD@Byte,w,c
  5882  00190E  0B0F               	andlw	15
  5883  001910  ECF4  F008         	call	_LCDout
  5884                           
  5885                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5886  001914  0E21               	movlw	33
  5887  001916                     u3067:
  5888  001916  2EE8               	decfsz	wreg,f,c
  5889  001918  D7FE               	goto	u3067
  5890  00191A  F000               	nop	
  5891  00191C  0012               	return		;funcret
  5892  00191E                     __end_of_SendLCD:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           indf1	equ	0xFE7
  5904                           fsr1h	equ	0xFE2
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _LCDout *****************
  5914 ;; Defined at:
  5915 ;;		line 14 in file "LCD.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  number          1    wreg     unsigned char 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  number          1   38[COMRAM] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;		None               void
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5929 ;;      Params:         0       0       0       0
  5930 ;;      Locals:         1       0       0       0
  5931 ;;      Temps:          3       0       0       0
  5932 ;;      Totals:         4       0       0       0
  5933 ;;Total ram usage:        4 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    4
  5936 ;; This function calls:
  5937 ;;		_E_TOG
  5938 ;; This function is called by:
  5939 ;;		_SendLCD
  5940 ;;		_initLCD
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text28
  5945  0011E8                     __ptext28:
  5946                           	opt stack 0
  5947  0011E8                     _LCDout:
  5948                           	opt stack 24
  5949                           
  5950                           ;incstack = 0
  5951                           ;LCDout@number stored from wreg
  5952  0011E8  6E27               	movwf	LCDout@number,c
  5953                           
  5954                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5955  0011EA  5027               	movf	LCDout@number,w,c
  5956  0011EC  6E24               	movwf	??_LCDout& (0+255),c
  5957  0011EE  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5958  0011F0  0E07               	movlw	7
  5959  0011F2                     u1215:
  5960  0011F2  90D8               	bcf	status,0,c
  5961  0011F4  3624               	rlcf	??_LCDout,f,c
  5962  0011F6  3625               	rlcf	??_LCDout+1,f,c
  5963  0011F8  2EE8               	decfsz	wreg,f,c
  5964  0011FA  D7FB               	goto	u1215
  5965  0011FC  0E07               	movlw	7
  5966  0011FE  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5967  001200                     u1225:
  5968  001200  3425               	rlcf	??_LCDout+1,w,c
  5969  001202  3225               	rrcf	??_LCDout+1,f,c
  5970  001204  3224               	rrcf	??_LCDout,f,c
  5971  001206  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5972  001208  D7FB               	goto	u1225
  5973  00120A  4624               	rlncf	??_LCDout,f,c
  5974  00120C  508B               	movf	3979,w,c	;volatile
  5975  00120E  1824               	xorwf	??_LCDout,w,c
  5976  001210  0BFD               	andlw	-3
  5977  001212  1824               	xorwf	??_LCDout,w,c
  5978  001214  6E8B               	movwf	3979,c	;volatile
  5979                           
  5980                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5981  001216  5027               	movf	LCDout@number,w,c
  5982  001218  6E24               	movwf	??_LCDout& (0+255),c
  5983  00121A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5984  00121C  0E06               	movlw	6
  5985  00121E                     u1235:
  5986  00121E  90D8               	bcf	status,0,c
  5987  001220  3624               	rlcf	??_LCDout,f,c
  5988  001222  3625               	rlcf	??_LCDout+1,f,c
  5989  001224  2EE8               	decfsz	wreg,f,c
  5990  001226  D7FB               	goto	u1235
  5991  001228  0E07               	movlw	7
  5992  00122A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5993  00122C                     u1245:
  5994  00122C  3425               	rlcf	??_LCDout+1,w,c
  5995  00122E  3225               	rrcf	??_LCDout+1,f,c
  5996  001230  3224               	rrcf	??_LCDout,f,c
  5997  001232  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5998  001234  D7FB               	goto	u1245
  5999  001236  4624               	rlncf	??_LCDout,f,c
  6000  001238  4624               	rlncf	??_LCDout,f,c
  6001  00123A  508B               	movf	3979,w,c	;volatile
  6002  00123C  1824               	xorwf	??_LCDout,w,c
  6003  00123E  0BFB               	andlw	-5
  6004  001240  1824               	xorwf	??_LCDout,w,c
  6005  001242  6E8B               	movwf	3979,c	;volatile
  6006                           
  6007                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6008  001244  5027               	movf	LCDout@number,w,c
  6009  001246  6E24               	movwf	??_LCDout& (0+255),c
  6010  001248  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6011  00124A  0E05               	movlw	5
  6012  00124C                     u1255:
  6013  00124C  90D8               	bcf	status,0,c
  6014  00124E  3624               	rlcf	??_LCDout,f,c
  6015  001250  3625               	rlcf	??_LCDout+1,f,c
  6016  001252  2EE8               	decfsz	wreg,f,c
  6017  001254  D7FB               	goto	u1255
  6018  001256  0E07               	movlw	7
  6019  001258  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6020  00125A                     u1265:
  6021  00125A  3425               	rlcf	??_LCDout+1,w,c
  6022  00125C  3225               	rrcf	??_LCDout+1,f,c
  6023  00125E  3224               	rrcf	??_LCDout,f,c
  6024  001260  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6025  001262  D7FB               	goto	u1265
  6026  001264  508C               	movf	3980,w,c	;volatile
  6027  001266  1824               	xorwf	??_LCDout,w,c
  6028  001268  0BFE               	andlw	-2
  6029  00126A  1824               	xorwf	??_LCDout,w,c
  6030  00126C  6E8C               	movwf	3980,c	;volatile
  6031                           
  6032                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6033  00126E  5027               	movf	LCDout@number,w,c
  6034  001270  6E24               	movwf	??_LCDout& (0+255),c
  6035  001272  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6036  001274  3A24               	swapf	??_LCDout,f,c
  6037  001276  3A25               	swapf	??_LCDout+1,f,c
  6038  001278  0EF0               	movlw	240
  6039  00127A  1625               	andwf	??_LCDout+1,f,c
  6040  00127C  5024               	movf	??_LCDout,w,c
  6041  00127E  0B0F               	andlw	15
  6042  001280  1225               	iorwf	??_LCDout+1,f,c
  6043  001282  0EF0               	movlw	240
  6044  001284  1624               	andwf	??_LCDout,f,c
  6045  001286  0E07               	movlw	7
  6046  001288  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6047  00128A                     u1275:
  6048  00128A  3425               	rlcf	??_LCDout+1,w,c
  6049  00128C  3225               	rrcf	??_LCDout+1,f,c
  6050  00128E  3224               	rrcf	??_LCDout,f,c
  6051  001290  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6052  001292  D7FB               	goto	u1275
  6053  001294  4624               	rlncf	??_LCDout,f,c
  6054  001296  508C               	movf	3980,w,c	;volatile
  6055  001298  1824               	xorwf	??_LCDout,w,c
  6056  00129A  0BFD               	andlw	-3
  6057  00129C  1824               	xorwf	??_LCDout,w,c
  6058  00129E  6E8C               	movwf	3980,c	;volatile
  6059                           
  6060                           ;LCD.c: 21: E_TOG();
  6061  0012A0  EC01  F00D         	call	_E_TOG	;wreg free
  6062                           
  6063                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6064  0012A4  0E03               	movlw	3
  6065  0012A6                     u3077:
  6066  0012A6  2EE8               	decfsz	wreg,f,c
  6067  0012A8  D7FE               	goto	u3077
  6068  0012AA  F000               	nop	
  6069  0012AC  0012               	return		;funcret
  6070  0012AE                     __end_of_LCDout:
  6071                           	opt stack 0
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf1	equ	0xFE7
  6082                           fsr1h	equ	0xFE2
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _E_TOG *****************
  6092 ;; Defined at:
  6093 ;;		line 5 in file "LCD.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;		None               void
  6100 ;; Registers used:
  6101 ;;		wreg
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6107 ;;      Params:         0       0       0       0
  6108 ;;      Locals:         0       0       0       0
  6109 ;;      Temps:          0       0       0       0
  6110 ;;      Totals:         0       0       0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    3
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_LCDout
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text29
  6122  001A02                     __ptext29:
  6123                           	opt stack 0
  6124  001A02                     _E_TOG:
  6125                           	opt stack 24
  6126                           
  6127                           ;LCD.c: 8: LATCbits.LATC0=1;
  6128                           
  6129                           ;incstack = 0
  6130  001A02  808B               	bsf	3979,0,c	;volatile
  6131                           
  6132                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6133  001A04  0E03               	movlw	3
  6134  001A06                     u3087:
  6135  001A06  2EE8               	decfsz	wreg,f,c
  6136  001A08  D7FE               	goto	u3087
  6137  001A0A  F000               	nop	
  6138                           
  6139                           ;LCD.c: 10: LATCbits.LATC0=0;
  6140  001A0C  908B               	bcf	3979,0,c	;volatile
  6141  001A0E  0012               	return		;funcret
  6142  001A10                     __end_of_E_TOG:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           indf1	equ	0xFE7
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _InterruptHandlerLow *****************
  6164 ;; Defined at:
  6165 ;;		line 18 in file "main.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;		None               void
  6172 ;; Registers used:
  6173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6179 ;;      Params:         0       0       0       0
  6180 ;;      Locals:         0       0       0       0
  6181 ;;      Temps:         17       0       0       0
  6182 ;;      Totals:        17       0       0       0
  6183 ;;Total ram usage:       17 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    2
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		Interrupt level 1
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	intcodelo
  6194  000018                     __pintcodelo:
  6195                           	opt stack 0
  6196  000018                     _InterruptHandlerLow:
  6197                           	opt stack 23
  6198                           
  6199                           ;incstack = 0
  6200  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6201  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6202  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6203  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6204  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6205  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6206  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6207  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6208  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6209  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6210  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6211  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6212  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6213  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6214  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6215  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6216  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6217  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6218                           
  6219                           ;main.c: 20: if (PIR1bits.RCIF) {
  6220  00005E  AA9E               	btfss	3998,5,c	;volatile
  6221  000060  D016               	goto	i1l369
  6222                           
  6223                           ;main.c: 21: ReceivedString[i]=RCREG;
  6224  000062  503A               	movf	_i,w,c	;volatile
  6225  000064  0D01               	mullw	1
  6226  000066  0EC6               	movlw	low _ReceivedString
  6227  000068  24F3               	addwf	prodl,w,c
  6228  00006A  6ED9               	movwf	fsr2l,c
  6229  00006C  0E00               	movlw	high _ReceivedString
  6230  00006E  20F4               	addwfc	prodh,w,c
  6231  000070  6EDA               	movwf	fsr2h,c
  6232  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6233                           
  6234                           ;main.c: 22: RFID_Read=1;
  6235  000076  0E01               	movlw	1
  6236  000078  0101               	movlb	1	; () banked
  6237  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;main.c: 23: if (i==15){
  6241  00007C  0E0F               	movlw	15
  6242  00007E  183A               	xorwf	_i,w,c	;volatile
  6243  000080  A4D8               	btfss	status,2,c
  6244  000082  D003               	goto	i1l2597
  6245                           
  6246                           ; BSR set to: 1
  6247                           ;main.c: 24: i=0;
  6248  000084  0E00               	movlw	0
  6249  000086  6E3A               	movwf	_i,c	;volatile
  6250                           
  6251                           ;main.c: 25: }else{
  6252  000088  D001               	goto	i1l2599
  6253  00008A                     i1l2597:
  6254                           
  6255                           ; BSR set to: 1
  6256                           ;main.c: 26: i++;
  6257  00008A  2A3A               	incf	_i,f,c	;volatile
  6258  00008C                     i1l2599:
  6259                           
  6260                           ; BSR set to: 1
  6261                           ;main.c: 27: }
  6262                           ;main.c: 28: PIR1bits.RCIF=0;
  6263  00008C  9A9E               	bcf	3998,5,c	;volatile
  6264  00008E                     i1l369:
  6265  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6266  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6267  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6268  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6269  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6270  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6271  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6272  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6273  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6274  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6275  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6276  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6277  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6278  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6279  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6280  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6281  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6282  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6283  0000D4  0010               	retfie	
  6284  0000D6                     __end_of_InterruptHandlerLow:
  6285                           	opt stack 0
  6286                           pclatu	equ	0xFFB
  6287                           pclath	equ	0xFFA
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           postinc0	equ	0xFEE
  6296                           fsr0h	equ	0xFEA
  6297                           fsr0l	equ	0xFE9
  6298                           wreg	equ	0xFE8
  6299                           indf1	equ	0xFE7
  6300                           fsr1h	equ	0xFE2
  6301                           fsr1l	equ	0xFE1
  6302                           bsr	equ	0xFE0
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           postdec2	equ	0xFDD
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310 ;; *************** function _InterruptHandlerHigh *****************
  6311 ;; Defined at:
  6312 ;;		line 34 in file "main.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;		None
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;		None
  6317 ;; Return value:  Size  Location     Type
  6318 ;;		None               void
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6326 ;;      Params:         0       0       0       0
  6327 ;;      Locals:         0       0       0       0
  6328 ;;      Temps:         14       0       0       0
  6329 ;;      Totals:        14       0       0       0
  6330 ;;Total ram usage:       14 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    1
  6333 ;; This function calls:
  6334 ;;		i2_delay_tenth_s
  6335 ;; This function is called by:
  6336 ;;		Interrupt level 2
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	intcode
  6341  000008                     __pintcode:
  6342                           	opt stack 0
  6343  000008                     _InterruptHandlerHigh:
  6344                           	opt stack 23
  6345                           
  6346                           ;incstack = 0
  6347  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6348  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6349  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6350  000012  EFFF  F009         	goto	int_func
  6351                           pclatu	equ	0xFFB
  6352                           pclath	equ	0xFFA
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           postinc0	equ	0xFEE
  6361                           fsr0h	equ	0xFEA
  6362                           fsr0l	equ	0xFE9
  6363                           wreg	equ	0xFE8
  6364                           indf1	equ	0xFE7
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           bsr	equ	0xFE0
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375                           	psect	intcode_body
  6376  0013FE                     __pintcode_body:
  6377                           	opt stack 23
  6378  0013FE                     int_func:
  6379                           	opt stack 23
  6380  0013FE  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6381  001402  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6382  001406  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6383  00140A  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6384  00140E  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6385  001412  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6386  001416  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6387  00141A  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6388  00141E  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6389  001422  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6390  001426  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6391  00142A  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6392                           
  6393                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6394  00142E  A2F2               	btfss	intcon,1,c	;volatile
  6395  001430  D00D               	goto	i2l377
  6396                           
  6397                           ;main.c: 36: if (mode==-1) {
  6398  001432  283B               	incf	_mode,w,c	;volatile
  6399  001434  A4D8               	btfss	status,2,c
  6400  001436  D003               	goto	i2l2607
  6401                           
  6402                           ;main.c: 38: mode=1;
  6403  001438  0E01               	movlw	1
  6404  00143A  6E3B               	movwf	_mode,c	;volatile
  6405                           
  6406                           ;main.c: 39: } else if (mode==0) {
  6407  00143C  D003               	goto	i2l2611
  6408  00143E                     i2l2607:
  6409  00143E  503B               	movf	_mode,w,c	;volatile
  6410  001440  A4D8               	btfss	status,2,c
  6411                           
  6412                           ;main.c: 43: mode=-1;
  6413                           
  6414                           ;main.c: 41: } else {
  6415  001442  683B               	setf	_mode,c	;volatile
  6416  001444                     i2l2611:
  6417                           
  6418                           ;main.c: 44: }
  6419                           ;main.c: 46: delay_tenth_s(2);
  6420  001444  0E02               	movlw	2
  6421  001446  EC2A  F00C         	call	i2_delay_tenth_s
  6422                           
  6423                           ;main.c: 47: INTCONbits.INT0IF=0;
  6424  00144A  92F2               	bcf	intcon,1,c	;volatile
  6425  00144C                     i2l377:
  6426  00144C  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6427  001450  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6428  001454  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6429  001458  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6430  00145C  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6431  001460  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6432  001464  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6433  001468  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6434  00146C  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6435  001470  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6436  001474  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6437  001478  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6438  00147C  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6439  001480  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6440  001484  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6441  001486  0011               	retfie		f
  6442  001488                     __end_of_InterruptHandlerHigh:
  6443                           	opt stack 0
  6444                           pclatu	equ	0xFFB
  6445                           pclath	equ	0xFFA
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           postinc0	equ	0xFEE
  6454                           fsr0h	equ	0xFEA
  6455                           fsr0l	equ	0xFE9
  6456                           wreg	equ	0xFE8
  6457                           indf1	equ	0xFE7
  6458                           fsr1h	equ	0xFE2
  6459                           fsr1l	equ	0xFE1
  6460                           bsr	equ	0xFE0
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function i2_delay_tenth_s *****************
  6469 ;; Defined at:
  6470 ;;		line 32 in file "Movement.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  tenth_second    1    wreg     unsigned char 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6475 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;		None               void
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6485 ;;      Params:         0       0       0       0
  6486 ;;      Locals:         3       0       0       0
  6487 ;;      Temps:          1       0       0       0
  6488 ;;      Totals:         4       0       0       0
  6489 ;;Total ram usage:        4 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_InterruptHandlerHigh
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text32
  6499  001854                     __ptext32:
  6500                           	opt stack 0
  6501  001854                     i2_delay_tenth_s:
  6502                           	opt stack 23
  6503                           
  6504                           ;incstack = 0
  6505                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6506  001854  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6507                           
  6508                           ;Movement.c: 33: unsigned int i=0;
  6509  001856  0E00               	movlw	0
  6510  001858  6E04               	movwf	i2delay_tenth_s@i+1,c
  6511  00185A  0E00               	movlw	0
  6512  00185C  6E03               	movwf	i2delay_tenth_s@i,c
  6513                           
  6514                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6515  00185E  0E00               	movlw	0
  6516  001860  6E04               	movwf	i2delay_tenth_s@i+1,c
  6517  001862  0E01               	movlw	1
  6518  001864  6E03               	movwf	i2delay_tenth_s@i,c
  6519  001866  D009               	goto	i2l2569
  6520  001868                     i2l2565:
  6521                           
  6522                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6523  001868  0E82               	movlw	130
  6524  00186A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6525  00186C  0EDE               	movlw	222
  6526  00186E                     i2u309_47:
  6527  00186E  2EE8               	decfsz	wreg,f,c
  6528  001870  D7FE               	goto	i2u309_47
  6529  001872  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6530  001874  D7FC               	goto	i2u309_47
  6531  001876  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6532  001878  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6533  00187A                     i2l2569:
  6534  00187A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6535  00187C  0D02               	mullw	2
  6536  00187E  5003               	movf	i2delay_tenth_s@i,w,c
  6537  001880  5CF3               	subwf	prodl,w,c
  6538  001882  5004               	movf	i2delay_tenth_s@i+1,w,c
  6539  001884  58F4               	subwfb	prodh,w,c
  6540  001886  A0D8               	btfss	status,0,c
  6541  001888  0012               	return	
  6542  00188A  D7EE               	goto	i2l2565
  6543  00188C                     __end_ofi2_delay_tenth_s:
  6544                           	opt stack 0
  6545                           pclatu	equ	0xFFB
  6546                           pclath	equ	0xFFA
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           postinc0	equ	0xFEE
  6555                           fsr0h	equ	0xFEA
  6556                           fsr0l	equ	0xFE9
  6557                           wreg	equ	0xFE8
  6558                           indf1	equ	0xFE7
  6559                           fsr1h	equ	0xFE2
  6560                           fsr1l	equ	0xFE1
  6561                           bsr	equ	0xFE0
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           pclatu	equ	0xFFB
  6569                           pclath	equ	0xFFA
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           fsr0h	equ	0xFEA
  6579                           fsr0l	equ	0xFE9
  6580                           wreg	equ	0xFE8
  6581                           indf1	equ	0xFE7
  6582                           fsr1h	equ	0xFE2
  6583                           fsr1l	equ	0xFE1
  6584                           bsr	equ	0xFE0
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592                           	psect	rparam
  6593  0000                     pclatu	equ	0xFFB
  6594                           pclath	equ	0xFFA
  6595                           tblptru	equ	0xFF8
  6596                           tblptrh	equ	0xFF7
  6597                           tblptrl	equ	0xFF6
  6598                           tablat	equ	0xFF5
  6599                           prodh	equ	0xFF4
  6600                           prodl	equ	0xFF3
  6601                           intcon	equ	0xFF2
  6602                           postinc0	equ	0xFEE
  6603                           fsr0h	equ	0xFEA
  6604                           fsr0l	equ	0xFE9
  6605                           wreg	equ	0xFE8
  6606                           indf1	equ	0xFE7
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           bsr	equ	0xFE0
  6610                           indf2	equ	0xFDF
  6611                           postinc2	equ	0xFDE
  6612                           postdec2	equ	0xFDD
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617                           	psect	temp
  6618  00003C                     btemp:
  6619                           	opt stack 0
  6620  00003C                     	ds	1
  6621  0000                     int$flags	set	btemp
  6622                           pclatu	equ	0xFFB
  6623                           pclath	equ	0xFFA
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           postinc0	equ	0xFEE
  6632                           fsr0h	equ	0xFEA
  6633                           fsr0l	equ	0xFE9
  6634                           wreg	equ	0xFE8
  6635                           indf1	equ	0xFE7
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           bsr	equ	0xFE0
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           postdec2	equ	0xFDD
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     94     118
    BANK1           256    250     255
    BANK2           239    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   56491
                                             84 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     403
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       71    61     10   21622
                                             13 BANK0     71    61     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF     76      76       9       49.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5E      76       4       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226       5        0.0%
DATA                 0      0     226      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 21:09:51 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F96  
                                  l65 1566                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A10                                   l223 0A4C  
                                 l226 0B38                                   l382 03F8  
                                 l872 1716                                   l882 1758  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l2101 174E                                  l3011 0E2A  
                                l2141 15A4                                  l3013 0E30  
                                l3005 0E0C                                  l3021 0E92  
                                l2063 19CC                                  l3023 0EAC  
                                l2153 160E                                  l2137 159C  
                                l2073 16E4                                  l2171 18D2  
                                l2163 1652                                  l2147 15E0  
                                l2075 16EC                                  l3019 0E86  
                                l2157 1616                                  l2085 170C  
                                l2077 16F0                                  l2093 172E  
                                l2175 18E4                                  l2095 1736  
                                l2335 195C                                  l2185 16A6  
                                l2097 173A                                  l2193 1842  
                                l3145 0B34                                  l3137 0A90  
                                l3313 0658                                  l3305 05FC  
                                l3225 03FE                                  l2179 1672  
                                l3067 11D0                                  l3163 0B62  
                                l3139 0AA8                                  l3331 06E0  
                                l2189 1830                                  l3157 0B50  
                                l3093 0936                                  l3165 0B68  
                                l3317 066E                                  l3309 064A  
                                l2551 10A4                                  l2543 1054  
                                l3343 0730                                  l3327 06D6  
                                l3351 0752                                  l3263 04D6  
                                l3337 0720                                  l2539 104C  
                                l3371 0822                                  l3339 0726  
                                l3283 0528                                  l3259 04A4  
                                l2821 149C                                  l3349 074C  
                                l2559 10EA                                  l3359 07BA  
                                l3383 0864                                  l2921 0BDE  
                                l2833 14C2                                  l3369 081C  
                                l2923 0BF0                                  l2915 0BC2  
                                l2835 14CA                                  l2827 14AC  
                                l3379 0862                                  l3299 05A2  
                                l2933 0C28                                  l2853 1502  
                                l2845 14EA                                  l2837 14CE  
                                l2943 0C9A                                  l2927 0BF8  
                                l2863 0F6E                                  l2871 152A  
                                l2945 0CC2                                  l2849 14F4  
                                l2955 0CF2                                  l2875 1546  
                                l2867 150E                                  l2981 0D92  
                                l2957 0CF8                                  l2893 139C  
                                l2885 136C                                  l2975 0D50  
                                l2969 0D2E                                  l2889 1384  
                                l2979 0D88                                  l2899 13BC  
                                l2989 0DB6                                  l2997 0DDC  
                                l2999 0DE8                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1215 11F2  
                                u1225 1200                                  u1235 121E  
                                u1245 122C                                  u1325 18F8  
                                u1326 18FA                                  _LATB 000F8A  
                                u1255 124C                                  u3007 13B6  
                                u1265 125A                                  u3017 15D4  
                                u1530 1696                                  u1275 128A  
                                u3027 1646                                  u1540 16C6  
                                u2244 0F2E                                  u3037 18E6  
                                u2245 0F2A                                  u2254 0F8A  
                                u3047 16A0                                  u2255 0F86  
                                u3057 1906                                  u1537 168C  
                                u1465 15AC                                  u2265 0FE4  
                                u3067 1916                                  u1547 16BC  
                                u3077 12A6                                  u3087 1A06  
                                u1495 161E                                  u2740 06A0  
                                u2750 06B4                                  u2742 06A2  
                                u1775 1958                                  u1776 195A  
                                u2752 06B6                                  u1795 196A  
                                u2907 1326                                  u2827 0454  
                                u1796 196C                                  u2917 133C  
                                u2837 046C                                  u2927 1350  
                                u2847 12C0                                  u2937 1362  
                                u2857 12D6                                  u2947 096A  
                                u2867 12E6                                  u2957 0982  
                                u2877 12F4                                  u2967 1560  
                                u2887 1302                                  u2977 1836  
                                u2897 1314                                  u2987 113C  
                                u2997 1152                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B6                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 136A                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 1854  
                     __end_of_SendLCD 191E                       __end_of_SetLine 18EE  
                  ScanWithRange@F3894 00C2                           ScanIR@F3883 00BE  
                               ?_main 0001                       __end_of___awdiv 150C  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1720                       __end_of___lwmod 1762  
                               i1l369 008E                                 i2l377 144C  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1A02                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 136A                    ScanWithRange@power 00AA  
                     __end_of_dpowers 030B                       __end_of_isdigit 19D4  
                               main@i 00BD                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0EBA                __size_of_ScanWithRange 032E  
                      __CFG_MCLRE$OFF 000000                       __initialization 191E  
                        __end_of_main 0886                          __end_of_stop 13FE  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 196E                   VerifySignal@hexByte 002C  
                              ??_main 00B4                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2597 008A                                i1l2599 008C  
                              i2l2611 1444                        __CFG_WDTEN$OFF 000000  
                              i2l2607 143E                                i2l2565 1868  
                              i2l2569 187A                 __end_of_delay_tenth_s 1854  
                              _LCDout 11E8                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 188C                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 10EE  
                           ??_SetLine 002A                                ___wmul 196E  
                           ??___awdiv 002E                      __end_of_initRFID 19F0  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1994                  __size_of_grabRightIR 0072  
                              clear_0 1930                      ___awdiv@quotient 0030  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0886                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AB                      __end_of_turnLeft 181C  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 193A  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1A10                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1762                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002E  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 1480  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BE  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 16CE                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15FE                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 1948                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 18BE                ScanWithRange@RFID_Read 0075  
                             _SendLCD 18EE                               __Hparam 0000  
                             _SetLine 18BE                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1488  
                     __size_of___wmul 0026                               ___lwdiv 16CE  
                             ___lwmod 1720                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 191E  
                     ??_ScanWithRange 0077                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 19F0                               __ptext2 19D4  
                             __ptext3 188C                               __ptext4 12AE  
                             __ptext5 1994                               __ptext6 1762  
                             __ptext7 1948                               __ptext8 0FF4  
                             __ptext9 0886                             _T0CONbits 000FD5  
                             _initLCD 12AE                     __end_of_initTimer 1A02  
                             _dpowers 0301                               _isdigit 19B6  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0BB4  
                      __pintcode_body 13FE                  end_of_initialization 193A  
                      ScanWithRange@i 00A6                        ScanWithRange@n 00A4  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 13FE  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 17DE                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B2                        __end_of_LCDout 12AE  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 11E8                        _fullSpeedAhead 150C  
                      _ReceivedString 00C6                        __end_of___wmul 1994  
                         _BAUDCONbits 000FAA                        __end_of_initIR 19B6  
              __size_of_delay_tenth_s 0038                   start_initialization 191E  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1488  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 158C  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 15FE  
                        _initMotorPWM 188C                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1962 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 181C  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 10EE                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B7  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 19F0  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u309_47 186E                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3897 01FA  
                         _grabRightIR 158C                 ScanWithRange@LeftFlag 00B0  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0BB4  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 17A0                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007C  
                 __end_of_setMotorPWM 0FF4                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 17A0                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1670                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 17A0  
                            __ptext11 17DE                              __ptext20 196E  
                            __ptext12 150C                              __ptext21 1720  
                            __ptext13 181C                              __ptext22 16CE  
                            __ptext14 10EE                              __ptext23 158C  
                            __ptext15 136A                              __ptext32 1854  
                            __ptext24 15FE                              __ptext16 0EBA  
                            __ptext25 18BE                              __ptext17 1488  
                            __ptext26 1670                              __ptext18 0BB4  
                            __ptext27 18EE                              __ptext19 19B6  
                            __ptext28 11E8                              __ptext29 1A02  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 19D4             ScanWithRange@SensorResult 00AC  
                      turnRight@power 006B                         __size_of_main 0536  
                  main@DirectionFound 00BB                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00FA  
                            int$flags 003C                              main@Move 00BC  
                 _InterruptHandlerLow 0018                            _LCD_String 1670  
                            _turnLeft 17DE                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0EBA  
                        _VerifySignal 0FF4                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A8                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
