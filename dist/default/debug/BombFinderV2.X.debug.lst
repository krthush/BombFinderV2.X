

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 21:12:51 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _CAP1BUFH	set	3945
    65  0000                     _CAP1BUFL	set	3944
    66  0000                     _CAP1CON	set	3939
    67  0000                     _CAP2BUFH	set	3943
    68  0000                     _CAP2BUFL	set	3942
    69  0000                     _CAP2CON	set	3938
    70  0000                     _LATAbits	set	3977
    71  0000                     _LATB	set	3978
    72  0000                     _LATBbits	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  000172                     __pcinit:
   189                           	opt stack 0
   190  000172                     start_initialization:
   191                           	opt stack 0
   192  000172                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (96 bytes)
   196  000172  EE01  F097         	lfsr	0,__pbssBANK1
   197  000176  0E60               	movlw	96
   198  000178                     clear_0:
   199  000178  6AEE               	clrf	postinc0,c
   200  00017A  06E8               	decf	wreg,f,c
   201  00017C  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK0 (8 bytes)
   204  00017E  EE00  F0BF         	lfsr	0,__pbssBANK0
   205  000182  0E08               	movlw	8
   206  000184                     clear_1:
   207  000184  6AEE               	clrf	postinc0,c
   208  000186  06E8               	decf	wreg,f,c
   209  000188  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  00018A  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  00018C  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  00018E                     end_of_initialization:
   215                           	opt stack 0
   216  00018E                     __end_of__initialization:
   217                           	opt stack 0
   218  00018E  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  000190  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  000192  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  000194  6EF8               	movwf	tblptru,c
   222  000196  0100               	movlb	0
   223  000198  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BF                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BF                     ScanIR@F3879:
   245                           	opt stack 0
   246  0000BF                     	ds	4
   247  0000C3                     ScanWithRange@F3892:
   248                           	opt stack 0
   249  0000C3                     	ds	4
   250                           tblptru	equ	0xFF8
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           
   254                           	psect	bssBANK1
   255  000197                     __pbssBANK1:
   256                           	opt stack 0
   257  000197                     main@F3893:
   258                           	opt stack 0
   259  000197                     	ds	50
   260  0001C9                     main@F3895:
   261                           	opt stack 0
   262  0001C9                     	ds	25
   263  0001E2                     main@F3898:
   264                           	opt stack 0
   265  0001E2                     	ds	4
   266  0001E6                     _ReceivedString:
   267                           	opt stack 0
   268  0001E6                     	ds	16
   269  0001F6                     _RFID_Read:
   270                           	opt stack 0
   271  0001F6                     	ds	1
   272                           tblptru	equ	0xFF8
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           
   276                           	psect	cstackBANK1
   277  000100                     __pcstackBANK1:
   278                           	opt stack 0
   279  000100                     main@buf:
   280                           	opt stack 0
   281                           
   282                           ; 40 bytes @ 0x0
   283  000100                     	ds	40
   284  000128                     main@Message:
   285                           	opt stack 0
   286                           
   287                           ; 10 bytes @ 0x28
   288  000128                     	ds	10
   289  000132                     main@MoveType:
   290                           	opt stack 0
   291                           
   292                           ; 25 bytes @ 0x32
   293  000132                     	ds	25
   294  00014B                     main@MoveTime:
   295                           	opt stack 0
   296                           
   297                           ; 50 bytes @ 0x4B
   298  00014B                     	ds	50
   299  00017D                     main@ScanAngle:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x7D
   303  00017D                     	ds	1
   304  00017E                     main@SensorResult:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x7E
   308  00017E                     	ds	4
   309  000182                     main@DirectionFound:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x82
   313  000182                     	ds	1
   314  000183                     main@i:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x83
   318  000183                     	ds	1
   319  000184                     main@Move:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x84
   323  000184                     	ds	1
   324  000185                     main@mL:
   325                           	opt stack 0
   326                           
   327                           ; 9 bytes @ 0x85
   328  000185                     	ds	9
   329  00018E                     main@mR:
   330                           	opt stack 0
   331                           
   332                           ; 9 bytes @ 0x8E
   333  00018E                     	ds	9
   334                           tblptru	equ	0xFF8
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     ??_sprintf:
   342  000060                     setMotorPWM@PWMduty:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x0
   346  000060                     	ds	2
   347  000062                     stop@mL:
   348                           	opt stack 0
   349  000062                     fullSpeed@mL:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2
   353  000062                     	ds	2
   354  000064                     stop@mR:
   355                           	opt stack 0
   356  000064                     fullSpeed@mR:
   357                           	opt stack 0
   358  000064                     sprintf@ap:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x4
   362  000064                     	ds	2
   363  000066                     fullSpeed@power:
   364                           	opt stack 0
   365  000066                     sprintf@prec:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x6
   369  000066                     	ds	1
   370  000067                     turnLeft@mL:
   371                           	opt stack 0
   372  000067                     turnRight@mL:
   373                           	opt stack 0
   374  000067                     fullSpeedBack@mL:
   375                           	opt stack 0
   376  000067                     sprintf@val:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x7
   380  000067                     	ds	2
   381  000069                     sprintf@flag:
   382                           	opt stack 0
   383  000069                     turnLeft@mR:
   384                           	opt stack 0
   385  000069                     turnRight@mR:
   386                           	opt stack 0
   387  000069                     fullSpeedBack@mR:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x9
   391  000069                     	ds	1
   392  00006A                     sprintf@width:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0xA
   396  00006A                     	ds	1
   397  00006B                     turnLeft@power:
   398                           	opt stack 0
   399  00006B                     turnRight@power:
   400                           	opt stack 0
   401  00006B                     fullSpeedBack@power:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0xB
   405  00006B                     	ds	1
   406  00006C                     sprintf@c:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0xC
   410  00006C                     	ds	1
   411  00006D                     ScanIR@mL:
   412                           	opt stack 0
   413  00006D                     ScanWithRange@mL:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0xD
   417  00006D                     	ds	2
   418  00006F                     ScanIR@mR:
   419                           	opt stack 0
   420  00006F                     ScanWithRange@mR:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0xF
   424  00006F                     	ds	2
   425  000071                     ScanWithRange@loops:
   426                           	opt stack 0
   427  000071                     ScanIR@buf:
   428                           	opt stack 0
   429                           
   430                           ; 40 bytes @ 0x11
   431  000071                     	ds	2
   432  000073                     ScanWithRange@MoveTime:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x13
   436  000073                     	ds	2
   437  000075                     ScanWithRange@Move:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x15
   441  000075                     	ds	2
   442  000077                     ScanWithRange@MoveType:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x17
   446  000077                     	ds	2
   447  000079                     ScanWithRange@RFID_Read:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x19
   451  000079                     	ds	2
   452  00007B                     ??_ScanWithRange:
   453                           
   454                           ; 0 bytes @ 0x1B
   455  00007B                     	ds	6
   456  000081                     ScanWithRange@buf:
   457                           	opt stack 0
   458                           
   459                           ; 40 bytes @ 0x21
   460  000081                     	ds	24
   461  000099                     ScanIR@DirectionMoveThreshold:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x39
   465  000099                     	ds	2
   466  00009B                     ScanIR@SensorResult:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x3B
   470  00009B                     	ds	14
   471  0000A9                     ScanWithRange@i:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x49
   475  0000A9                     	ds	2
   476  0000AB                     ScanWithRange@DirectionFoundThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x4B
   480  0000AB                     	ds	2
   481  0000AD                     ScanWithRange@MotorPower:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x4D
   485  0000AD                     	ds	1
   486  0000AE                     ScanWithRange@MiniLeftFlick:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x4E
   490  0000AE                     	ds	1
   491  0000AF                     ScanWithRange@LeftFlag:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x4F
   495  0000AF                     	ds	2
   496  0000B1                     ScanWithRange@TimeAboveThreshold:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x51
   500  0000B1                     	ds	2
   501  0000B3                     ScanWithRange@SensorResult:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x53
   505  0000B3                     	ds	4
   506  0000B7                     ScanWithRange@LeftFlick:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x57
   510  0000B7                     	ds	1
   511  0000B8                     ScanWithRange@RightFlag:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x58
   515  0000B8                     	ds	2
   516  0000BA                     ??_main:
   517                           
   518                           ; 0 bytes @ 0x5A
   519  0000BA                     	ds	5
   520                           tblptru	equ	0xFF8
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           
   524                           	psect	cstackCOMRAM
   525  000001                     __pcstackCOMRAM:
   526                           	opt stack 0
   527  000001                     ??i2_delay_tenth_s:
   528                           
   529                           ; 0 bytes @ 0x0
   530  000001                     	ds	1
   531  000002                     i2delay_tenth_s@tenth_seconds:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1
   535  000002                     	ds	1
   536  000003                     i2delay_tenth_s@i:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x2
   540  000003                     	ds	2
   541  000005                     ??_InterruptHandlerHigh:
   542                           
   543                           ; 0 bytes @ 0x4
   544  000005                     	ds	14
   545  000013                     ??_InterruptHandlerLow:
   546                           
   547                           ; 0 bytes @ 0x12
   548  000013                     	ds	17
   549  000024                     ??_isdigit:
   550  000024                     ??_LCDout:
   551  000024                     ??_delay_tenth_s:
   552  000024                     ?_grabRightIR:
   553                           	opt stack 0
   554  000024                     ?_grabLeftIR:
   555                           	opt stack 0
   556  000024                     ?___wmul:
   557                           	opt stack 0
   558  000024                     ?___lwdiv:
   559                           	opt stack 0
   560  000024                     enableSensor@status:
   561                           	opt stack 0
   562  000024                     VerifySignal@Signal:
   563                           	opt stack 0
   564  000024                     ___wmul@multiplier:
   565                           	opt stack 0
   566  000024                     ___lwdiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x23
   570  000024                     	ds	1
   571  000025                     enableSensor@sensor:
   572                           	opt stack 0
   573  000025                     delay_tenth_s@tenth_seconds:
   574                           	opt stack 0
   575  000025                     _isdigit$2084:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x24
   579  000025                     	ds	1
   580  000026                     ??_grabRightIR:
   581  000026                     ??_grabLeftIR:
   582  000026                     ??_VerifySignal:
   583  000026                     isdigit@c:
   584                           	opt stack 0
   585  000026                     delay_tenth_s@i:
   586                           	opt stack 0
   587  000026                     ___wmul@multiplicand:
   588                           	opt stack 0
   589  000026                     ___lwdiv@divisor:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x25
   593  000026                     	ds	1
   594  000027                     LCDout@number:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x26
   598  000027                     	ds	1
   599  000028                     SendLCD@type:
   600                           	opt stack 0
   601  000028                     ___wmul@product:
   602                           	opt stack 0
   603  000028                     ___lwdiv@quotient:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x27
   607  000028                     	ds	1
   608  000029                     SendLCD@Byte:
   609                           	opt stack 0
   610  000029                     grabRightIR@IR_signal:
   611                           	opt stack 0
   612  000029                     grabLeftIR@IR_signal:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x28
   616  000029                     	ds	1
   617  00002A                     ??_initLCD:
   618  00002A                     ?___awdiv:
   619                           	opt stack 0
   620  00002A                     SetLine@line:
   621                           	opt stack 0
   622  00002A                     VerifySignal@i:
   623                           	opt stack 0
   624  00002A                     ___lwdiv@counter:
   625                           	opt stack 0
   626  00002A                     LCD_String@string:
   627                           	opt stack 0
   628  00002A                     ___awdiv@dividend:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x29
   632  00002A                     	ds	1
   633  00002B                     ?___lwmod:
   634                           	opt stack 0
   635  00002B                     grabRightIR@i:
   636                           	opt stack 0
   637  00002B                     grabLeftIR@i:
   638                           	opt stack 0
   639  00002B                     VerifySignal@checksum:
   640                           	opt stack 0
   641  00002B                     ___lwmod@dividend:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2A
   645  00002B                     	ds	1
   646  00002C                     VerifySignal@hexByte:
   647                           	opt stack 0
   648  00002C                     ___awdiv@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2B
   652  00002C                     	ds	1
   653  00002D                     ___lwmod@divisor:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x2C
   657  00002D                     	ds	1
   658  00002E                     ___awdiv@counter:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x2D
   662  00002E                     	ds	1
   663  00002F                     ___awdiv@sign:
   664                           	opt stack 0
   665  00002F                     ___lwmod@counter:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2E
   669  00002F                     	ds	1
   670  000030                     ?_sprintf:
   671                           	opt stack 0
   672  000030                     sprintf@sp:
   673                           	opt stack 0
   674  000030                     ___awdiv@quotient:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2F
   678  000030                     	ds	2
   679  000032                     setMotorPWM@m:
   680                           	opt stack 0
   681  000032                     sprintf@f:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x31
   685  000032                     	ds	2
   686  000034                     ??_setMotorPWM:
   687                           
   688                           ; 0 bytes @ 0x33
   689  000034                     	ds	5
   690  000039                     ??_ScanIR:
   691                           
   692                           ; 0 bytes @ 0x38
   693  000039                     	ds	1
   694  00003A                     tblptru	equ	0xFF8
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           
   698                           ; 0 bytes @ 0x39
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 51 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  MoveTime       50   75[BANK1 ] int [25]
   709 ;;  buf            40    0[BANK1 ] unsigned char [40]
   710 ;;  MoveType       25   50[BANK1 ] unsigned char [25]
   711 ;;  Message        10   40[BANK1 ] unsigned char [10]
   712 ;;  mR              9  142[BANK1 ] struct DC_motor
   713 ;;  mL              9  133[BANK1 ] struct DC_motor
   714 ;;  SensorResult    4  126[BANK1 ] unsigned int [2]
   715 ;;  Move            1  132[BANK1 ] char 
   716 ;;  i               1  131[BANK1 ] unsigned char 
   717 ;;  DirectionFou    1  130[BANK1 ] char 
   718 ;;  ScanAngle       1  125[BANK1 ] unsigned char 
   719 ;; Return value:  Size  Location     Type
   720 ;;		None               void
   721 ;; Registers used:
   722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   728 ;;      Params:         0       0       0       0
   729 ;;      Locals:         0       0     151       0
   730 ;;      Temps:          0       5       0       0
   731 ;;      Totals:         0       5     151       0
   732 ;;Total ram usage:      156 bytes
   733 ;; Hardware stack levels required when called:    8
   734 ;; This function calls:
   735 ;;		_LCD_String
   736 ;;		_ScanIR
   737 ;;		_ScanWithRange
   738 ;;		_SendLCD
   739 ;;		_SetLine
   740 ;;		_VerifySignal
   741 ;;		_delay_tenth_s
   742 ;;		_enableSensor
   743 ;;		_fullSpeed
   744 ;;		_fullSpeedBack
   745 ;;		_grabLeftIR
   746 ;;		_grabRightIR
   747 ;;		_initIR
   748 ;;		_initLCD
   749 ;;		_initMotorPWM
   750 ;;		_initRFID
   751 ;;		_initTimer
   752 ;;		_sprintf
   753 ;;		_stop
   754 ;;		_turnLeft
   755 ;;		_turnRight
   756 ;; This function is called by:
   757 ;;		Startup code after reset
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text0
   762  000350                     __ptext0:
   763                           	opt stack 0
   764  000350                     _main:
   765                           	opt stack 23
   766                           
   767                           ;main.c: 54: unsigned char Message[10];
   768                           ;main.c: 55: unsigned char i=0;
   769                           
   770                           ;incstack = 0
   771  000350  0E00               	movlw	0
   772  000352  0101               	movlb	1	; () banked
   773  000354  6F83               	movwf	main@i& (0+255),b
   774                           
   775                           ;main.c: 56: signed char DirectionFound=0;
   776  000356  0E00               	movlw	0
   777  000358  0101               	movlb	1	; () banked
   778  00035A  6F82               	movwf	main@DirectionFound& (0+255),b
   779                           
   780                           ; BSR set to: 1
   781                           ;main.c: 57: signed int MoveTime[25] = { 0 };
   782  00035C  EE21  F097         	lfsr	2,main@F3893
   783  000360  EE11  F04B         	lfsr	1,main@MoveTime
   784  000364  0E31               	movlw	49
   785  000366                     u2791:
   786  000366  CFDB FFE3          	movff	plusw2,plusw1
   787  00036A  06E8               	decf	wreg,f,c
   788  00036C  E2FC               	bc	u2791
   789                           
   790                           ; BSR set to: 1
   791                           ;main.c: 60: unsigned char MoveType[25] = { 0 };
   792  00036E  EE21  F0C9         	lfsr	2,main@F3895
   793  000372  EE11  F032         	lfsr	1,main@MoveType
   794  000376  0E18               	movlw	24
   795  000378                     u2801:
   796  000378  CFDB FFE3          	movff	plusw2,plusw1
   797  00037C  06E8               	decf	wreg,f,c
   798  00037E  E2FC               	bc	u2801
   799                           
   800                           ;main.c: 63: signed char Move=0;
   801  000380  0E00               	movlw	0
   802  000382  0101               	movlb	1	; () banked
   803  000384  6F84               	movwf	main@Move& (0+255),b
   804                           
   805                           ; BSR set to: 1
   806                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   807  000386  C1E2  F17E         	movff	main@F3898,main@SensorResult
   808  00038A  C1E3  F17F         	movff	main@F3898+1,main@SensorResult+1
   809  00038E  C1E4  F180         	movff	main@F3898+2,main@SensorResult+2
   810  000392  C1E5  F181         	movff	main@F3898+3,main@SensorResult+3
   811                           
   812                           ;main.c: 65: char buf[40];
   813                           ;main.c: 67: unsigned char ScanAngle=60;
   814  000396  0E3C               	movlw	60
   815  000398  0101               	movlb	1	; () banked
   816  00039A  6F7D               	movwf	main@ScanAngle& (0+255),b
   817                           
   818                           ; BSR set to: 1
   819                           ;main.c: 76: INTCONbits.GIEH=1;
   820  00039C  8EF2               	bsf	intcon,7,c	;volatile
   821                           
   822                           ; BSR set to: 1
   823                           ;main.c: 77: INTCONbits.GIEL=1;
   824  00039E  8CF2               	bsf	intcon,6,c	;volatile
   825                           
   826                           ; BSR set to: 1
   827                           ;main.c: 78: INTCONbits.PEIE=1;
   828  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   829                           
   830                           ; BSR set to: 1
   831                           ;main.c: 79: RCONbits.IPEN=1;
   832  0003A2  8ED0               	bsf	4048,7,c	;volatile
   833                           
   834                           ; BSR set to: 1
   835                           ;main.c: 82: IPR1bits.RCIP=0;
   836  0003A4  9A9F               	bcf	3999,5,c	;volatile
   837                           
   838                           ; BSR set to: 1
   839                           ;main.c: 83: PIE1bits.RCIE=1;
   840  0003A6  8A9D               	bsf	3997,5,c	;volatile
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 86: TRISCbits.RC3=1;
   844  0003A8  8694               	bsf	3988,3,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 87: INTCONbits.INT0IE=1;
   848  0003AA  88F2               	bsf	intcon,4,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 90: PIR1bits.RC1IF=0;
   852  0003AC  9A9E               	bcf	3998,5,c	;volatile
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 91: INTCONbits.INT0IF=0;
   856  0003AE  92F2               	bcf	intcon,1,c	;volatile
   857                           
   858                           ;main.c: 94: struct DC_motor mL, mR;
   859                           ;main.c: 95: mL.power=0;
   860  0003B0  0E00               	movlw	0
   861  0003B2  0101               	movlb	1	; () banked
   862  0003B4  6F85               	movwf	main@mL& (0+255),b
   863                           
   864                           ;main.c: 96: mL.direction=1;
   865  0003B6  0E01               	movlw	1
   866  0003B8  0101               	movlb	1	; () banked
   867  0003BA  6F86               	movwf	(main@mL+1)& (0+255),b
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   871  0003BC  0E79               	movlw	121
   872  0003BE  0101               	movlb	1	; () banked
   873  0003C0  6F87               	movwf	(main@mL+2)& (0+255),b
   874  0003C2  0E0F               	movlw	15
   875  0003C4  0101               	movlb	1	; () banked
   876  0003C6  6F88               	movwf	(main@mL+3)& (0+255),b
   877                           
   878                           ; BSR set to: 1
   879                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   880  0003C8  0E78               	movlw	120
   881  0003CA  0101               	movlb	1	; () banked
   882  0003CC  6F89               	movwf	(main@mL+4)& (0+255),b
   883  0003CE  0E0F               	movlw	15
   884  0003D0  0101               	movlb	1	; () banked
   885  0003D2  6F8A               	movwf	(main@mL+5)& (0+255),b
   886                           
   887                           ;main.c: 99: mL.dir_pin=0;
   888  0003D4  0E00               	movlw	0
   889  0003D6  0101               	movlb	1	; () banked
   890  0003D8  6F8B               	movwf	(main@mL+6)& (0+255),b
   891                           
   892                           ;main.c: 100: mL.PWMperiod=199;
   893  0003DA  0E00               	movlw	0
   894  0003DC  0101               	movlb	1	; () banked
   895  0003DE  6F8D               	movwf	(main@mL+8)& (0+255),b
   896  0003E0  0EC7               	movlw	199
   897  0003E2  6F8C               	movwf	(main@mL+7)& (0+255),b
   898                           
   899                           ;main.c: 102: mR.power=0;
   900  0003E4  0E00               	movlw	0
   901  0003E6  0101               	movlb	1	; () banked
   902  0003E8  6F8E               	movwf	main@mR& (0+255),b
   903                           
   904                           ;main.c: 103: mR.direction=1;
   905  0003EA  0E01               	movlw	1
   906  0003EC  0101               	movlb	1	; () banked
   907  0003EE  6F8F               	movwf	(main@mR+1)& (0+255),b
   908                           
   909                           ; BSR set to: 1
   910                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   911  0003F0  0E77               	movlw	119
   912  0003F2  0101               	movlb	1	; () banked
   913  0003F4  6F90               	movwf	(main@mR+2)& (0+255),b
   914  0003F6  0E0F               	movlw	15
   915  0003F8  0101               	movlb	1	; () banked
   916  0003FA  6F91               	movwf	(main@mR+3)& (0+255),b
   917                           
   918                           ; BSR set to: 1
   919                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   920  0003FC  0E76               	movlw	118
   921  0003FE  0101               	movlb	1	; () banked
   922  000400  6F92               	movwf	(main@mR+4)& (0+255),b
   923  000402  0E0F               	movlw	15
   924  000404  0101               	movlb	1	; () banked
   925  000406  6F93               	movwf	(main@mR+5)& (0+255),b
   926                           
   927                           ;main.c: 106: mR.dir_pin=2;
   928  000408  0E02               	movlw	2
   929  00040A  0101               	movlb	1	; () banked
   930  00040C  6F94               	movwf	(main@mR+6)& (0+255),b
   931                           
   932                           ;main.c: 107: mR.PWMperiod=199;
   933  00040E  0E00               	movlw	0
   934  000410  0101               	movlb	1	; () banked
   935  000412  6F96               	movwf	(main@mR+8)& (0+255),b
   936  000414  0EC7               	movlw	199
   937  000416  6F95               	movwf	(main@mR+7)& (0+255),b
   938                           
   939                           ;main.c: 109: OSCCON = 0x72;
   940  000418  0E72               	movlw	114
   941  00041A  6ED3               	movwf	4051,c	;volatile
   942  00041C                     l395:
   943  00041C  B4D3               	btfsc	4051,2,c	;volatile
   944  00041E  D36F               	goto	l3618
   945  000420  D7FD               	goto	l395
   946  000422                     l3416:
   947                           
   948                           ;main.c: 121: stop(&mL, &mR);
   949  000422  0E85               	movlw	low main@mL
   950  000424  0100               	movlb	0	; () banked
   951  000426  6F62               	movwf	stop@mL& (0+255),b
   952  000428  0E01               	movlw	high main@mL
   953  00042A  0100               	movlb	0	; () banked
   954  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   955  00042E  0E8E               	movlw	low main@mR
   956  000430  0100               	movlb	0	; () banked
   957  000432  6F64               	movwf	stop@mR& (0+255),b
   958  000434  0E01               	movlw	high main@mR
   959  000436  0100               	movlb	0	; () banked
   960  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   961  00043A  ECBB  F00B         	call	_stop	;wreg free
   962                           
   963                           ;main.c: 124: RFID_Read=0;
   964  00043E  0E00               	movlw	0
   965  000440  0101               	movlb	1	; () banked
   966  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   967                           
   968                           ; BSR set to: 1
   969                           ;main.c: 125: Move=0;
   970  000444  0E00               	movlw	0
   971  000446  0101               	movlb	1	; () banked
   972  000448  6F84               	movwf	main@Move& (0+255),b
   973                           
   974                           ; BSR set to: 1
   975                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   976  00044A  EC05  F00D         	call	_grabLeftIR	;wreg free
   977  00044E  C024  F17E         	movff	?_grabLeftIR,main@SensorResult
   978  000452  C025  F17F         	movff	?_grabLeftIR+1,main@SensorResult+1
   979                           
   980                           ;main.c: 129: SensorResult[1]=grabRightIR();
   981  000456  ECCC  F00C         	call	_grabRightIR	;wreg free
   982  00045A  C024  F180         	movff	?_grabRightIR,main@SensorResult+2
   983  00045E  C025  F181         	movff	?_grabRightIR+1,main@SensorResult+3
   984                           
   985                           ;main.c: 133: CAP1BUFH=0;
   986  000462  0E00               	movlw	0
   987  000464  6E69               	movwf	3945,c	;volatile
   988                           
   989                           ;main.c: 134: CAP1BUFL=0;
   990  000466  0E00               	movlw	0
   991  000468  6E68               	movwf	3944,c	;volatile
   992                           
   993                           ;main.c: 135: CAP2BUFH=0;
   994  00046A  0E00               	movlw	0
   995  00046C  6E67               	movwf	3943,c	;volatile
   996                           
   997                           ;main.c: 136: CAP2BUFL=0;
   998  00046E  0E00               	movlw	0
   999  000470  6E66               	movwf	3942,c	;volatile
  1000                           
  1001                           ;main.c: 139: SendLCD(0b00000001,0);
  1002  000472  0E00               	movlw	0
  1003  000474  6E28               	movwf	SendLCD@type,c
  1004  000476  0E01               	movlw	1
  1005  000478  ECA1  F000         	call	_SendLCD
  1006                           
  1007                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1008  00047C  0E21               	movlw	33
  1009  00047E                     u3067:
  1010  00047E  2EE8               	decfsz	wreg,f,c
  1011  000480  D7FE               	goto	u3067
  1012  000482  F000               	nop	
  1013                           
  1014                           ;main.c: 141: SendLCD(0b00000010,0);
  1015  000484  0E00               	movlw	0
  1016  000486  6E28               	movwf	SendLCD@type,c
  1017  000488  0E02               	movlw	2
  1018  00048A  ECA1  F000         	call	_SendLCD
  1019                           
  1020                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1021  00048E  0E06               	movlw	6
  1022  000490  0100               	movlb	0	; () banked
  1023  000492  6FBA               	movwf	??_main& (0+255),b
  1024  000494  0E30               	movlw	48
  1025  000496                     u3077:
  1026  000496  2EE8               	decfsz	wreg,f,c
  1027  000498  D7FE               	goto	u3077
  1028  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1029  00049C  D7FC               	goto	u3077
  1030  00049E  D000               	nop2	
  1031                           
  1032                           ;main.c: 143: SetLine(1);
  1033  0004A0  0E01               	movlw	1
  1034  0004A2  EC89  F000         	call	_SetLine
  1035                           
  1036                           ;main.c: 144: LCD_String("      Inert Mode");
  1037  0004A6  0E1C               	movlw	low STR_5
  1038  0004A8  6E2A               	movwf	LCD_String@string,c
  1039  0004AA  0E03               	movlw	high STR_5
  1040  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1041  0004AE  EC3E  F00D         	call	_LCD_String	;wreg free
  1042                           
  1043                           ;main.c: 145: SetLine(2);
  1044  0004B2  0E02               	movlw	2
  1045  0004B4  EC89  F000         	call	_SetLine
  1046                           
  1047                           ;main.c: 146: if (RFID_Read) {
  1048  0004B8  0101               	movlb	1	; () banked
  1049  0004BA  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1050  0004BC  B4D8               	btfsc	status,2,c
  1051  0004BE  D007               	goto	l3452
  1052                           
  1053                           ; BSR set to: 1
  1054                           ;main.c: 147: LCD_String(Message);
  1055  0004C0  0E28               	movlw	low main@Message
  1056  0004C2  6E2A               	movwf	LCD_String@string,c
  1057  0004C4  0E01               	movlw	high main@Message
  1058  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1059  0004C8  EC3E  F00D         	call	_LCD_String	;wreg free
  1060                           
  1061                           ;main.c: 148: } else {
  1062  0004CC  D318               	goto	l3618
  1063  0004CE                     l3452:
  1064                           
  1065                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1066  0004CE  0E00               	movlw	low main@buf
  1067  0004D0  6E30               	movwf	sprintf@sp,c
  1068  0004D2  0E01               	movlw	high main@buf
  1069  0004D4  6E31               	movwf	sprintf@sp+1,c
  1070  0004D6  0E0B               	movlw	low STR_6
  1071  0004D8  6E32               	movwf	sprintf@f,c
  1072  0004DA  0E03               	movlw	high STR_6
  1073  0004DC  6E33               	movwf	sprintf@f+1,c
  1074  0004DE  C17E  F034         	movff	main@SensorResult,?_sprintf+4
  1075  0004E2  C17F  F035         	movff	main@SensorResult+1,?_sprintf+5
  1076  0004E6  C180  F036         	movff	main@SensorResult+2,?_sprintf+6
  1077  0004EA  C181  F037         	movff	main@SensorResult+3,?_sprintf+7
  1078  0004EE  EC5D  F008         	call	_sprintf	;wreg free
  1079                           
  1080                           ;main.c: 150: LCD_String(buf);
  1081  0004F2  0E00               	movlw	low main@buf
  1082  0004F4  6E2A               	movwf	LCD_String@string,c
  1083  0004F6  0E01               	movlw	high main@buf
  1084  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1085  0004FA  EC3E  F00D         	call	_LCD_String	;wreg free
  1086                           
  1087                           ;main.c: 151: }
  1088                           ;main.c: 153: break;
  1089  0004FE  D2FF               	goto	l3618
  1090  000500                     l3456:
  1091                           
  1092                           ;main.c: 157: initMotorPWM();
  1093  000500  EC40  F00E         	call	_initMotorPWM	;wreg free
  1094                           
  1095                           ;main.c: 158: initTimer();
  1096  000504  EC22  F001         	call	_initTimer	;wreg free
  1097                           
  1098                           ;main.c: 159: initRFID();
  1099  000508  EC14  F001         	call	_initRFID	;wreg free
  1100                           
  1101                           ;main.c: 160: initLCD();
  1102  00050C  EC5D  F00B         	call	_initLCD	;wreg free
  1103                           
  1104                           ;main.c: 161: initIR();
  1105  000510  ECF4  F000         	call	_initIR	;wreg free
  1106                           
  1107                           ;main.c: 163: enableSensor(0, 1);
  1108  000514  0E01               	movlw	1
  1109  000516  6E24               	movwf	enableSensor@status,c
  1110  000518  0E00               	movlw	0
  1111  00051A  ECCE  F000         	call	_enableSensor
  1112                           
  1113                           ;main.c: 164: enableSensor(1, 1);
  1114  00051E  0E01               	movlw	1
  1115  000520  6E24               	movwf	enableSensor@status,c
  1116  000522  0E01               	movlw	1
  1117  000524  ECCE  F000         	call	_enableSensor
  1118                           
  1119                           ;main.c: 167: fullSpeed(&mL, &mR, 100);
  1120  000528  0E85               	movlw	low main@mL
  1121  00052A  0100               	movlb	0	; () banked
  1122  00052C  6F62               	movwf	fullSpeed@mL& (0+255),b
  1123  00052E  0E01               	movlw	high main@mL
  1124  000530  0100               	movlb	0	; () banked
  1125  000532  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1126  000534  0E8E               	movlw	low main@mR
  1127  000536  0100               	movlb	0	; () banked
  1128  000538  6F64               	movwf	fullSpeed@mR& (0+255),b
  1129  00053A  0E01               	movlw	high main@mR
  1130  00053C  0100               	movlb	0	; () banked
  1131  00053E  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1132  000540  0E64               	movlw	100
  1133  000542  0100               	movlb	0	; () banked
  1134  000544  6F66               	movwf	fullSpeed@power& (0+255),b
  1135  000546  EC8C  F00C         	call	_fullSpeed	;wreg free
  1136                           
  1137                           ;main.c: 168: delay_tenth_s(1);
  1138  00054A  0E01               	movlw	1
  1139  00054C  EC5D  F00E         	call	_delay_tenth_s
  1140  000550  D2D5               	goto	l3614
  1141  000552                     l3476:
  1142                           
  1143                           ;main.c: 176: SetLine(1);
  1144  000552  0E01               	movlw	1
  1145  000554  EC89  F000         	call	_SetLine
  1146                           
  1147                           ;main.c: 177: LCD_String("Searching");
  1148  000558  0E44               	movlw	low STR_7
  1149  00055A  6E2A               	movwf	LCD_String@string,c
  1150  00055C  0E03               	movlw	high STR_7
  1151  00055E  6E2B               	movwf	LCD_String@string+1,c
  1152  000560  EC3E  F00D         	call	_LCD_String	;wreg free
  1153                           
  1154                           ;main.c: 179: if (DirectionFound==-1) {
  1155  000564  0101               	movlb	1	; () banked
  1156  000566  2982               	incf	main@DirectionFound& (0+255),w,b
  1157  000568  A4D8               	btfss	status,2,c
  1158  00056A  D03E               	goto	l3494
  1159                           
  1160                           ; BSR set to: 1
  1161                           ;main.c: 184: MoveType[Move]=0;
  1162  00056C  0101               	movlb	1	; () banked
  1163  00056E  5184               	movf	main@Move& (0+255),w,b
  1164  000570  0D01               	mullw	1
  1165  000572  0E32               	movlw	low main@MoveType
  1166  000574  24F3               	addwf	prodl,w,c
  1167  000576  6ED9               	movwf	fsr2l,c
  1168  000578  0E01               	movlw	high main@MoveType
  1169  00057A  20F4               	addwfc	prodh,w,c
  1170  00057C  6EDA               	movwf	fsr2h,c
  1171  00057E  0E00               	movlw	0
  1172  000580  6EDF               	movwf	indf2,c
  1173                           
  1174                           ;main.c: 185: MoveTime[Move]=6;
  1175  000582  0101               	movlb	1	; () banked
  1176  000584  5184               	movf	main@Move& (0+255),w,b
  1177  000586  0D02               	mullw	2
  1178  000588  0E4B               	movlw	low main@MoveTime
  1179  00058A  24F3               	addwf	prodl,w,c
  1180  00058C  6ED9               	movwf	fsr2l,c
  1181  00058E  0E01               	movlw	high main@MoveTime
  1182  000590  20F4               	addwfc	prodh,w,c
  1183  000592  6EDA               	movwf	fsr2h,c
  1184  000594  0E06               	movlw	6
  1185  000596  6EDE               	movwf	postinc2,c
  1186  000598  0E00               	movlw	0
  1187  00059A  6EDD               	movwf	postdec2,c
  1188                           
  1189                           ; BSR set to: 1
  1190                           ;main.c: 186: Move++;
  1191  00059C  0101               	movlb	1	; () banked
  1192  00059E  2B84               	incf	main@Move& (0+255),f,b
  1193                           
  1194                           ; BSR set to: 1
  1195                           ;main.c: 187: fullSpeed(&mL, &mR, 100);
  1196  0005A0  0E85               	movlw	low main@mL
  1197  0005A2  0100               	movlb	0	; () banked
  1198  0005A4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1199  0005A6  0E01               	movlw	high main@mL
  1200  0005A8  0100               	movlb	0	; () banked
  1201  0005AA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1202  0005AC  0E8E               	movlw	low main@mR
  1203  0005AE  0100               	movlb	0	; () banked
  1204  0005B0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1205  0005B2  0E01               	movlw	high main@mR
  1206  0005B4  0100               	movlb	0	; () banked
  1207  0005B6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1208  0005B8  0E64               	movlw	100
  1209  0005BA  0100               	movlb	0	; () banked
  1210  0005BC  6F66               	movwf	fullSpeed@power& (0+255),b
  1211  0005BE  EC8C  F00C         	call	_fullSpeed	;wreg free
  1212                           
  1213                           ;main.c: 188: delay_tenth_s(6);
  1214  0005C2  0E06               	movlw	6
  1215  0005C4  EC5D  F00E         	call	_delay_tenth_s
  1216                           
  1217                           ;main.c: 189: stop(&mL,&mR);
  1218  0005C8  0E85               	movlw	low main@mL
  1219  0005CA  0100               	movlb	0	; () banked
  1220  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1221  0005CE  0E01               	movlw	high main@mL
  1222  0005D0  0100               	movlb	0	; () banked
  1223  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1224  0005D4  0E8E               	movlw	low main@mR
  1225  0005D6  0100               	movlb	0	; () banked
  1226  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1227  0005DA  0E01               	movlw	high main@mR
  1228  0005DC  0100               	movlb	0	; () banked
  1229  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1230  0005E0  ECBB  F00B         	call	_stop	;wreg free
  1231                           
  1232                           ;main.c: 190: DirectionFound=0;
  1233  0005E4  0E00               	movlw	0
  1234  0005E6  D042               	goto	L2
  1235  0005E8                     l3494:
  1236                           
  1237                           ; BSR set to: 1
  1238  0005E8  0101               	movlb	1	; () banked
  1239  0005EA  5182               	movf	main@DirectionFound& (0+255),w,b
  1240  0005EC  0101               	movlb	1	; () banked
  1241  0005EE  A4D8               	btfss	status,2,c
  1242  0005F0  D02B               	goto	l3498
  1243                           
  1244                           ; BSR set to: 1
  1245                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1246                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1247  0005F2  0E85               	movlw	low main@mL
  1248  0005F4  0100               	movlb	0	; () banked
  1249  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1250  0005F8  0E01               	movlw	high main@mL
  1251  0005FA  0100               	movlb	0	; () banked
  1252  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1253  0005FE  0E8E               	movlw	low main@mR
  1254  000600  0100               	movlb	0	; () banked
  1255  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1256  000604  0E01               	movlw	high main@mR
  1257  000606  0100               	movlb	0	; () banked
  1258  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1259  00060A  C17D  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1260  00060E  0100               	movlb	0	; () banked
  1261  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1262  000612  0E4B               	movlw	low main@MoveTime
  1263  000614  0100               	movlb	0	; () banked
  1264  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1265  000618  0E01               	movlw	high main@MoveTime
  1266  00061A  0100               	movlb	0	; () banked
  1267  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1268  00061E  0E84               	movlw	low main@Move
  1269  000620  0100               	movlb	0	; () banked
  1270  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1271  000624  0E01               	movlw	high main@Move
  1272  000626  0100               	movlb	0	; () banked
  1273  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1274  00062A  0E32               	movlw	low main@MoveType
  1275  00062C  0100               	movlb	0	; () banked
  1276  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1277  000630  0E01               	movlw	high main@MoveType
  1278  000632  0100               	movlb	0	; () banked
  1279  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1280  000636  0EF6               	movlw	low _RFID_Read
  1281  000638  0100               	movlb	0	; () banked
  1282  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1283  00063C  0E01               	movlw	high _RFID_Read
  1284  00063E  0100               	movlb	0	; () banked
  1285  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1286  000642  EC90  F005         	call	_ScanWithRange	;wreg free
  1287  000646  D012               	goto	L2
  1288  000648                     l3498:
  1289                           
  1290                           ; BSR set to: 1
  1291  000648  0101               	movlb	1	; () banked
  1292  00064A  0582               	decf	main@DirectionFound& (0+255),w,b
  1293  00064C  A4D8               	btfss	status,2,c
  1294  00064E  D011               	goto	l3502
  1295                           
  1296                           ; BSR set to: 1
  1297                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1298  000650  0E85               	movlw	low main@mL
  1299  000652  0100               	movlb	0	; () banked
  1300  000654  6F6D               	movwf	ScanIR@mL& (0+255),b
  1301  000656  0E01               	movlw	high main@mL
  1302  000658  0100               	movlb	0	; () banked
  1303  00065A  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1304  00065C  0E8E               	movlw	low main@mR
  1305  00065E  0100               	movlb	0	; () banked
  1306  000660  6F6F               	movwf	ScanIR@mR& (0+255),b
  1307  000662  0E01               	movlw	high main@mR
  1308  000664  0100               	movlb	0	; () banked
  1309  000666  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1310  000668  EC7D  F00A         	call	_ScanIR	;wreg free
  1311  00066C                     L2:
  1312  00066C  0101               	movlb	1	; () banked
  1313  00066E  6F82               	movwf	main@DirectionFound& (0+255),b
  1314                           
  1315                           ;main.c: 198: } else if (DirectionFound==2) {
  1316  000670  D246               	goto	l3618
  1317  000672                     l3502:
  1318                           
  1319                           ; BSR set to: 1
  1320  000672  0E02               	movlw	2
  1321  000674  0101               	movlb	1	; () banked
  1322  000676  1982               	xorwf	main@DirectionFound& (0+255),w,b
  1323  000678  A4D8               	btfss	status,2,c
  1324  00067A  D241               	goto	l3618
  1325                           
  1326                           ; BSR set to: 1
  1327                           ;main.c: 200: mode=2;
  1328  00067C  0E02               	movlw	2
  1329  00067E  6E3B               	movwf	_mode,c	;volatile
  1330                           
  1331                           ; BSR set to: 1
  1332                           ;main.c: 201: MoveType[Move]=1;
  1333  000680  0101               	movlb	1	; () banked
  1334  000682  5184               	movf	main@Move& (0+255),w,b
  1335  000684  0D01               	mullw	1
  1336  000686  0E32               	movlw	low main@MoveType
  1337  000688  24F3               	addwf	prodl,w,c
  1338  00068A  6ED9               	movwf	fsr2l,c
  1339  00068C  0E01               	movlw	high main@MoveType
  1340  00068E  20F4               	addwfc	prodh,w,c
  1341  000690  6EDA               	movwf	fsr2h,c
  1342  000692  0E01               	movlw	1
  1343  000694  6EDF               	movwf	indf2,c
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 202: }
  1347                           ;main.c: 204: break;
  1348                           
  1349                           ; BSR set to: 1
  1350                           
  1351                           ; BSR set to: 1
  1352                           
  1353                           ; BSR set to: 1
  1354  000696  D233               	goto	l3618
  1355  000698                     l3508:
  1356                           
  1357                           ;main.c: 211: if (RFID_Read) {
  1358  000698  0101               	movlb	1	; () banked
  1359  00069A  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1360  00069C  B4D8               	btfsc	status,2,c
  1361  00069E  D0A2               	goto	l3550
  1362                           
  1363                           ; BSR set to: 1
  1364                           ;main.c: 212: stop(&mL, &mR);
  1365  0006A0  0E85               	movlw	low main@mL
  1366  0006A2  0100               	movlb	0	; () banked
  1367  0006A4  6F62               	movwf	stop@mL& (0+255),b
  1368  0006A6  0E01               	movlw	high main@mL
  1369  0006A8  0100               	movlb	0	; () banked
  1370  0006AA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1371  0006AC  0E8E               	movlw	low main@mR
  1372  0006AE  0100               	movlb	0	; () banked
  1373  0006B0  6F64               	movwf	stop@mR& (0+255),b
  1374  0006B2  0E01               	movlw	high main@mR
  1375  0006B4  0100               	movlb	0	; () banked
  1376  0006B6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1377  0006B8  ECBB  F00B         	call	_stop	;wreg free
  1378                           
  1379                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1380  0006BC  0E03               	movlw	3
  1381  0006BE  0101               	movlb	1	; () banked
  1382  0006C0  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1383  0006C2  A4D8               	btfss	status,2,c
  1384  0006C4  D002               	goto	u2880
  1385  0006C6  0E01               	movlw	1
  1386  0006C8  D001               	goto	u2882
  1387  0006CA                     u2880:
  1388  0006CA  0E00               	movlw	0
  1389  0006CC                     u2882:
  1390  0006CC  0100               	movlb	0	; () banked
  1391  0006CE  6FBA               	movwf	??_main& (0+255),b
  1392  0006D0  0E02               	movlw	2
  1393  0006D2  0101               	movlb	1	; () banked
  1394  0006D4  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1395  0006D6  A4D8               	btfss	status,2,c
  1396  0006D8  D002               	goto	u2890
  1397  0006DA  0E01               	movlw	1
  1398  0006DC  D001               	goto	u2892
  1399  0006DE                     u2890:
  1400  0006DE  0E00               	movlw	0
  1401  0006E0                     u2892:
  1402  0006E0  0100               	movlb	0	; () banked
  1403  0006E2  15BA               	andwf	??_main& (0+255),w,b
  1404  0006E4  A0E8               	btfss	wreg,0,c
  1405  0006E6  D20B               	goto	l3618
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1409  0006E8  0EE6               	movlw	low _ReceivedString
  1410  0006EA  6E24               	movwf	VerifySignal@Signal,c
  1411  0006EC  0E01               	movlw	high _ReceivedString
  1412  0006EE  6E25               	movwf	VerifySignal@Signal+1,c
  1413  0006F0  EC6D  F00D         	call	_VerifySignal	;wreg free
  1414  0006F4  0900               	iorlw	0
  1415  0006F6  B4D8               	btfsc	status,2,c
  1416  0006F8  D041               	goto	l3542
  1417                           
  1418                           ;main.c: 216: for (i=0; i<10; i++){
  1419  0006FA  0E00               	movlw	0
  1420  0006FC  0101               	movlb	1	; () banked
  1421  0006FE  6F83               	movwf	main@i& (0+255),b
  1422  000700                     l3518:
  1423                           
  1424                           ; BSR set to: 1
  1425  000700  0E09               	movlw	9
  1426  000702  0101               	movlb	1	; () banked
  1427  000704  6583               	cpfsgt	main@i& (0+255),b
  1428  000706  D001               	goto	l3522
  1429  000708  D020               	goto	l3528
  1430  00070A                     l3522:
  1431                           
  1432                           ; BSR set to: 1
  1433                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1434  00070A  0101               	movlb	1	; () banked
  1435  00070C  5183               	movf	main@i& (0+255),w,b
  1436  00070E  0100               	movlb	0	; () banked
  1437  000710  6FBA               	movwf	??_main& (0+255),b
  1438  000712  6BBB               	clrf	(??_main+1)& (0+255),b
  1439  000714  0E01               	movlw	1
  1440  000716  0100               	movlb	0	; () banked
  1441  000718  27BA               	addwf	??_main& (0+255),f,b
  1442  00071A  0E00               	movlw	0
  1443  00071C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1444  00071E  0EE6               	movlw	low _ReceivedString
  1445  000720  0100               	movlb	0	; () banked
  1446  000722  25BA               	addwf	??_main& (0+255),w,b
  1447  000724  6ED9               	movwf	fsr2l,c
  1448  000726  0E01               	movlw	high _ReceivedString
  1449  000728  0100               	movlb	0	; () banked
  1450  00072A  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1451  00072C  6EDA               	movwf	fsr2h,c
  1452  00072E  0101               	movlb	1	; () banked
  1453  000730  5183               	movf	main@i& (0+255),w,b
  1454  000732  0D01               	mullw	1
  1455  000734  0E28               	movlw	low main@Message
  1456  000736  24F3               	addwf	prodl,w,c
  1457  000738  6EE1               	movwf	fsr1l,c
  1458  00073A  0E01               	movlw	high main@Message
  1459  00073C  20F4               	addwfc	prodh,w,c
  1460  00073E  6EE2               	movwf	fsr1h,c
  1461  000740  CFDF FFE7          	movff	indf2,indf1
  1462                           
  1463                           ; BSR set to: 1
  1464  000744  0101               	movlb	1	; () banked
  1465  000746  2B83               	incf	main@i& (0+255),f,b
  1466  000748  D7DB               	goto	l3518
  1467  00074A                     l3528:
  1468                           
  1469                           ; BSR set to: 1
  1470                           ;main.c: 218: }
  1471                           ;main.c: 221: for (i=0; i<16; i++) {
  1472  00074A  0E00               	movlw	0
  1473  00074C  0101               	movlb	1	; () banked
  1474  00074E  6F83               	movwf	main@i& (0+255),b
  1475  000750                     l3530:
  1476                           
  1477                           ; BSR set to: 1
  1478  000750  0E0F               	movlw	15
  1479  000752  0101               	movlb	1	; () banked
  1480  000754  6583               	cpfsgt	main@i& (0+255),b
  1481  000756  D001               	goto	l3534
  1482  000758  D00E               	goto	l3540
  1483  00075A                     l3534:
  1484                           
  1485                           ; BSR set to: 1
  1486                           ;main.c: 222: ReceivedString[i]=0;
  1487  00075A  0101               	movlb	1	; () banked
  1488  00075C  5183               	movf	main@i& (0+255),w,b
  1489  00075E  0D01               	mullw	1
  1490  000760  0EE6               	movlw	low _ReceivedString
  1491  000762  24F3               	addwf	prodl,w,c
  1492  000764  6ED9               	movwf	fsr2l,c
  1493  000766  0E01               	movlw	high _ReceivedString
  1494  000768  20F4               	addwfc	prodh,w,c
  1495  00076A  6EDA               	movwf	fsr2h,c
  1496  00076C  0E00               	movlw	0
  1497  00076E  6EDF               	movwf	indf2,c
  1498                           
  1499                           ; BSR set to: 1
  1500  000770  0101               	movlb	1	; () banked
  1501  000772  2B83               	incf	main@i& (0+255),f,b
  1502  000774  D7ED               	goto	l3530
  1503  000776                     l3540:
  1504                           
  1505                           ; BSR set to: 1
  1506                           ;main.c: 223: }
  1507                           ;main.c: 224: mode=3;
  1508  000776  0E03               	movlw	3
  1509  000778  6E3B               	movwf	_mode,c	;volatile
  1510                           
  1511                           ;main.c: 226: } else {
  1512  00077A  D1C1               	goto	l3618
  1513  00077C                     l3542:
  1514                           
  1515                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1516  00077C  0E85               	movlw	low main@mL
  1517  00077E  0100               	movlb	0	; () banked
  1518  000780  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1519  000782  0E01               	movlw	high main@mL
  1520  000784  0100               	movlb	0	; () banked
  1521  000786  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1522  000788  0E8E               	movlw	low main@mR
  1523  00078A  0100               	movlb	0	; () banked
  1524  00078C  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1525  00078E  0E01               	movlw	high main@mR
  1526  000790  0100               	movlb	0	; () banked
  1527  000792  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1528  000794  0E64               	movlw	100
  1529  000796  0100               	movlb	0	; () banked
  1530  000798  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1531  00079A  ECE3  F00D         	call	_fullSpeedBack	;wreg free
  1532                           
  1533                           ;main.c: 228: delay_tenth_s(5);
  1534  00079E  0E05               	movlw	5
  1535  0007A0  EC5D  F00E         	call	_delay_tenth_s
  1536                           
  1537                           ;main.c: 229: stop(&mL,&mR);
  1538  0007A4  0E85               	movlw	low main@mL
  1539  0007A6  0100               	movlb	0	; () banked
  1540  0007A8  6F62               	movwf	stop@mL& (0+255),b
  1541  0007AA  0E01               	movlw	high main@mL
  1542  0007AC  0100               	movlb	0	; () banked
  1543  0007AE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1544  0007B0  0E8E               	movlw	low main@mR
  1545  0007B2  0100               	movlb	0	; () banked
  1546  0007B4  6F64               	movwf	stop@mR& (0+255),b
  1547  0007B6  0E01               	movlw	high main@mR
  1548  0007B8  0100               	movlb	0	; () banked
  1549  0007BA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1550  0007BC  ECBB  F00B         	call	_stop	;wreg free
  1551                           
  1552                           ;main.c: 230: fullSpeed(&mL,&mR, 100);
  1553  0007C0  0E85               	movlw	low main@mL
  1554  0007C2  0100               	movlb	0	; () banked
  1555  0007C4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1556  0007C6  0E01               	movlw	high main@mL
  1557  0007C8  0100               	movlb	0	; () banked
  1558  0007CA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1559  0007CC  0E8E               	movlw	low main@mR
  1560  0007CE  0100               	movlb	0	; () banked
  1561  0007D0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1562  0007D2  0E01               	movlw	high main@mR
  1563  0007D4  0100               	movlb	0	; () banked
  1564  0007D6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1565  0007D8  0E64               	movlw	100
  1566  0007DA  0100               	movlb	0	; () banked
  1567  0007DC  6F66               	movwf	fullSpeed@power& (0+255),b
  1568  0007DE  EC8C  F00C         	call	_fullSpeed	;wreg free
  1569                           
  1570                           ;main.c: 231: }
  1571                           ;main.c: 232: }
  1572                           ;main.c: 233: } else {
  1573  0007E2  D18D               	goto	l3618
  1574  0007E4                     l3550:
  1575                           
  1576                           ;main.c: 234: DirectionFound=1;
  1577  0007E4  0E01               	movlw	1
  1578  0007E6  0101               	movlb	1	; () banked
  1579  0007E8  6F82               	movwf	main@DirectionFound& (0+255),b
  1580                           
  1581                           ;main.c: 235: mode=1;
  1582  0007EA  0E01               	movlw	1
  1583  0007EC  6E3B               	movwf	_mode,c	;volatile
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;main.c: 237: fullSpeed(&mL,&mR, 100);
  1587  0007EE  0E85               	movlw	low main@mL
  1588  0007F0  0100               	movlb	0	; () banked
  1589  0007F2  6F62               	movwf	fullSpeed@mL& (0+255),b
  1590  0007F4  0E01               	movlw	high main@mL
  1591  0007F6  0100               	movlb	0	; () banked
  1592  0007F8  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1593  0007FA  0E8E               	movlw	low main@mR
  1594  0007FC  0100               	movlb	0	; () banked
  1595  0007FE  6F64               	movwf	fullSpeed@mR& (0+255),b
  1596  000800  0E01               	movlw	high main@mR
  1597  000802  0100               	movlb	0	; () banked
  1598  000804  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1599  000806  0E64               	movlw	100
  1600  000808  0100               	movlb	0	; () banked
  1601  00080A  6F66               	movwf	fullSpeed@power& (0+255),b
  1602  00080C  EC8C  F00C         	call	_fullSpeed	;wreg free
  1603                           
  1604                           ;main.c: 238: delay_tenth_s(1);
  1605  000810  0E01               	movlw	1
  1606  000812  EC5D  F00E         	call	_delay_tenth_s
  1607                           
  1608                           ;main.c: 239: MoveType[Move] = 0;
  1609  000816  0101               	movlb	1	; () banked
  1610  000818  5184               	movf	main@Move& (0+255),w,b
  1611  00081A  0D01               	mullw	1
  1612  00081C  0E32               	movlw	low main@MoveType
  1613  00081E  24F3               	addwf	prodl,w,c
  1614  000820  6ED9               	movwf	fsr2l,c
  1615  000822  0E01               	movlw	high main@MoveType
  1616  000824  20F4               	addwfc	prodh,w,c
  1617  000826  6EDA               	movwf	fsr2h,c
  1618  000828  0E00               	movlw	0
  1619  00082A  6EDF               	movwf	indf2,c
  1620                           
  1621                           ; BSR set to: 1
  1622                           ;main.c: 240: MoveTime[Move] = 5;
  1623  00082C  0101               	movlb	1	; () banked
  1624  00082E  5184               	movf	main@Move& (0+255),w,b
  1625  000830  0D02               	mullw	2
  1626  000832  0E4B               	movlw	low main@MoveTime
  1627  000834  24F3               	addwf	prodl,w,c
  1628  000836  6ED9               	movwf	fsr2l,c
  1629  000838  0E01               	movlw	high main@MoveTime
  1630  00083A  20F4               	addwfc	prodh,w,c
  1631  00083C  6EDA               	movwf	fsr2h,c
  1632  00083E  0E05               	movlw	5
  1633  000840  6EDE               	movwf	postinc2,c
  1634  000842  0E00               	movlw	0
  1635  000844  6EDD               	movwf	postdec2,c
  1636                           
  1637                           ; BSR set to: 1
  1638                           ;main.c: 241: Move++;
  1639  000846  0101               	movlb	1	; () banked
  1640  000848  2B84               	incf	main@Move& (0+255),f,b
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;main.c: 242: }
  1644                           ;main.c: 244: break;
  1645  00084A  D159               	goto	l3618
  1646  00084C                     l3562:
  1647                           
  1648                           ;main.c: 249: SetLine(1);
  1649  00084C  0E01               	movlw	1
  1650  00084E  EC89  F000         	call	_SetLine
  1651                           
  1652                           ;main.c: 250: LCD_String(Message);
  1653  000852  0E28               	movlw	low main@Message
  1654  000854  6E2A               	movwf	LCD_String@string,c
  1655  000856  0E01               	movlw	high main@Message
  1656  000858  6E2B               	movwf	LCD_String@string+1,c
  1657  00085A  EC3E  F00D         	call	_LCD_String	;wreg free
  1658                           
  1659                           ;main.c: 251: SetLine(2);
  1660  00085E  0E02               	movlw	2
  1661  000860  EC89  F000         	call	_SetLine
  1662                           
  1663                           ;main.c: 252: LCD_String("Going Home");
  1664  000864  0E39               	movlw	low STR_8
  1665  000866  6E2A               	movwf	LCD_String@string,c
  1666  000868  0E03               	movlw	high STR_8
  1667  00086A  6E2B               	movwf	LCD_String@string+1,c
  1668  00086C  EC3E  F00D         	call	_LCD_String	;wreg free
  1669  000870                     l3568:
  1670  000870  0101               	movlb	1	; () banked
  1671  000872  BF84               	btfsc	main@Move& (0+255),7,b
  1672  000874  D135               	goto	l3612
  1673                           
  1674                           ; BSR set to: 1
  1675                           ;main.c: 255: stop(&mL,&mR);
  1676                           
  1677                           ; BSR set to: 1
  1678                           
  1679                           ; BSR set to: 1
  1680  000876  0E85               	movlw	low main@mL
  1681  000878  0100               	movlb	0	; () banked
  1682  00087A  6F62               	movwf	stop@mL& (0+255),b
  1683  00087C  0E01               	movlw	high main@mL
  1684  00087E  0100               	movlb	0	; () banked
  1685  000880  6F63               	movwf	(stop@mL+1)& (0+255),b
  1686  000882  0E8E               	movlw	low main@mR
  1687  000884  0100               	movlb	0	; () banked
  1688  000886  6F64               	movwf	stop@mR& (0+255),b
  1689  000888  0E01               	movlw	high main@mR
  1690  00088A  0100               	movlb	0	; () banked
  1691  00088C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1692  00088E  ECBB  F00B         	call	_stop	;wreg free
  1693                           
  1694                           ;main.c: 256: if (MoveType[Move]==0) {
  1695  000892  0101               	movlb	1	; () banked
  1696  000894  5184               	movf	main@Move& (0+255),w,b
  1697  000896  0D01               	mullw	1
  1698  000898  0E32               	movlw	low main@MoveType
  1699  00089A  24F3               	addwf	prodl,w,c
  1700  00089C  6ED9               	movwf	fsr2l,c
  1701  00089E  0E01               	movlw	high main@MoveType
  1702  0008A0  20F4               	addwfc	prodh,w,c
  1703  0008A2  6EDA               	movwf	fsr2h,c
  1704  0008A4  50DF               	movf	indf2,w,c
  1705  0008A6  A4D8               	btfss	status,2,c
  1706  0008A8  D01E               	goto	l3578
  1707                           
  1708                           ; BSR set to: 1
  1709                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1710  0008AA  0E85               	movlw	low main@mL
  1711  0008AC  0100               	movlb	0	; () banked
  1712  0008AE  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1713  0008B0  0E01               	movlw	high main@mL
  1714  0008B2  0100               	movlb	0	; () banked
  1715  0008B4  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1716  0008B6  0E8E               	movlw	low main@mR
  1717  0008B8  0100               	movlb	0	; () banked
  1718  0008BA  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1719  0008BC  0E01               	movlw	high main@mR
  1720  0008BE  0100               	movlb	0	; () banked
  1721  0008C0  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1722  0008C2  0E64               	movlw	100
  1723  0008C4  0100               	movlb	0	; () banked
  1724  0008C6  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1725  0008C8  ECE3  F00D         	call	_fullSpeedBack	;wreg free
  1726                           
  1727                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1728  0008CC  0101               	movlb	1	; () banked
  1729  0008CE  5184               	movf	main@Move& (0+255),w,b
  1730  0008D0  0D02               	mullw	2
  1731  0008D2  0E4B               	movlw	low main@MoveTime
  1732  0008D4  24F3               	addwf	prodl,w,c
  1733  0008D6  6ED9               	movwf	fsr2l,c
  1734  0008D8  0E01               	movlw	high main@MoveTime
  1735  0008DA  20F4               	addwfc	prodh,w,c
  1736  0008DC  6EDA               	movwf	fsr2h,c
  1737  0008DE  50DF               	movf	indf2,w,c
  1738  0008E0  EC5D  F00E         	call	_delay_tenth_s
  1739                           
  1740                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1741  0008E4  D0F7               	goto	l3604
  1742  0008E6                     l3578:
  1743  0008E6  0101               	movlb	1	; () banked
  1744  0008E8  5184               	movf	main@Move& (0+255),w,b
  1745  0008EA  0D01               	mullw	1
  1746  0008EC  0E32               	movlw	low main@MoveType
  1747  0008EE  24F3               	addwf	prodl,w,c
  1748  0008F0  6ED9               	movwf	fsr2l,c
  1749  0008F2  0E01               	movlw	high main@MoveType
  1750  0008F4  20F4               	addwfc	prodh,w,c
  1751  0008F6  6EDA               	movwf	fsr2h,c
  1752  0008F8  04DE               	decf	postinc2,w,c
  1753  0008FA  A4D8               	btfss	status,2,c
  1754  0008FC  D091               	goto	l3596
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1758  0008FE  9ED5               	bcf	4053,7,c	;volatile
  1759                           
  1760                           ; BSR set to: 1
  1761                           ;main.c: 261: TMR0L = 0;
  1762  000900  0E00               	movlw	0
  1763  000902  6ED6               	movwf	4054,c	;volatile
  1764                           
  1765                           ;main.c: 262: TMR0H = 0;
  1766  000904  0E00               	movlw	0
  1767  000906  6ED7               	movwf	4055,c	;volatile
  1768                           
  1769                           ; BSR set to: 1
  1770                           ;main.c: 263: if (MoveTime[Move]>0) {
  1771  000908  0101               	movlb	1	; () banked
  1772  00090A  5184               	movf	main@Move& (0+255),w,b
  1773  00090C  0D02               	mullw	2
  1774  00090E  0E4B               	movlw	low main@MoveTime
  1775  000910  24F3               	addwf	prodl,w,c
  1776  000912  6ED9               	movwf	fsr2l,c
  1777  000914  0E01               	movlw	high main@MoveTime
  1778  000916  20F4               	addwfc	prodh,w,c
  1779  000918  6EDA               	movwf	fsr2h,c
  1780  00091A  0E01               	movlw	1
  1781  00091C  BEDB               	btfsc	plusw2,7,c
  1782  00091E  D03D               	goto	l429
  1783  000920  0E01               	movlw	1
  1784  000922  50DB               	movf	plusw2,w,c
  1785  000924  E103               	bnz	u2990
  1786  000926  04DE               	decf	postinc2,w,c
  1787  000928  A0D8               	btfss	status,0,c
  1788  00092A  D037               	goto	l429
  1789  00092C                     u2990:
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1793  00092C  8ED5               	bsf	4053,7,c	;volatile
  1794                           
  1795                           ; BSR set to: 1
  1796                           ;main.c: 265: turnRight(&mL,&mR,40);
  1797  00092E  0E85               	movlw	low main@mL
  1798  000930  0100               	movlb	0	; () banked
  1799  000932  6F67               	movwf	turnRight@mL& (0+255),b
  1800  000934  0E01               	movlw	high main@mL
  1801  000936  0100               	movlb	0	; () banked
  1802  000938  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1803  00093A  0E8E               	movlw	low main@mR
  1804  00093C  0100               	movlb	0	; () banked
  1805  00093E  6F69               	movwf	turnRight@mR& (0+255),b
  1806  000940  0E01               	movlw	high main@mR
  1807  000942  0100               	movlb	0	; () banked
  1808  000944  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1809  000946  0E28               	movlw	40
  1810  000948  0100               	movlb	0	; () banked
  1811  00094A  6F6B               	movwf	turnRight@power& (0+255),b
  1812  00094C  EC02  F00E         	call	_turnRight	;wreg free
  1813  000950                     l3590:
  1814  000950  0101               	movlb	1	; () banked
  1815  000952  5184               	movf	main@Move& (0+255),w,b
  1816  000954  0D02               	mullw	2
  1817  000956  0E4B               	movlw	low main@MoveTime
  1818  000958  24F3               	addwf	prodl,w,c
  1819  00095A  6ED9               	movwf	fsr2l,c
  1820  00095C  0E01               	movlw	high main@MoveTime
  1821  00095E  20F4               	addwfc	prodh,w,c
  1822  000960  6EDA               	movwf	fsr2h,c
  1823  000962  50D6               	movf	4054,w,c	;volatile
  1824  000964  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1825  000968  0100               	movlb	0	; () banked
  1826  00096A  6BBD               	clrf	(??_main+3)& (0+255),b
  1827  00096C  C0BC  F0BD         	movff	??_main+2,??_main+3
  1828  000970  0100               	movlb	0	; () banked
  1829  000972  6BBC               	clrf	(??_main+2)& (0+255),b
  1830  000974  0100               	movlb	0	; () banked
  1831  000976  27BC               	addwf	(??_main+2)& (0+255),f,b
  1832  000978  0E00               	movlw	0
  1833  00097A  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1834  00097C  50DE               	movf	postinc2,w,c
  1835  00097E  0100               	movlb	0	; () banked
  1836  000980  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1837  000982  0100               	movlb	0	; () banked
  1838  000984  51BD               	movf	(??_main+3)& (0+255),w,b
  1839  000986  0A80               	xorlw	128
  1840  000988  0100               	movlb	0	; () banked
  1841  00098A  6FBE               	movwf	(??_main+4)& (0+255),b
  1842  00098C  50DE               	movf	postinc2,w,c
  1843  00098E  0A80               	xorlw	128
  1844  000990  0100               	movlb	0	; () banked
  1845  000992  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1846  000994  A0D8               	btfss	status,0,c
  1847  000996  D7DC               	goto	l3590
  1848  000998  D041               	goto	l436
  1849  00099A                     l429:
  1850                           
  1851                           ; BSR set to: 1
  1852                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1853  00099A  8ED5               	bsf	4053,7,c	;volatile
  1854                           
  1855                           ; BSR set to: 1
  1856                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1857  00099C  0E85               	movlw	low main@mL
  1858  00099E  0100               	movlb	0	; () banked
  1859  0009A0  6F67               	movwf	turnLeft@mL& (0+255),b
  1860  0009A2  0E01               	movlw	high main@mL
  1861  0009A4  0100               	movlb	0	; () banked
  1862  0009A6  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1863  0009A8  0E8E               	movlw	low main@mR
  1864  0009AA  0100               	movlb	0	; () banked
  1865  0009AC  6F69               	movwf	turnLeft@mR& (0+255),b
  1866  0009AE  0E01               	movlw	high main@mR
  1867  0009B0  0100               	movlb	0	; () banked
  1868  0009B2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1869  0009B4  0E28               	movlw	40
  1870  0009B6  0100               	movlb	0	; () banked
  1871  0009B8  6F6B               	movwf	turnLeft@power& (0+255),b
  1872  0009BA  EC21  F00E         	call	_turnLeft	;wreg free
  1873  0009BE                     l3594:
  1874  0009BE  0101               	movlb	1	; () banked
  1875  0009C0  5184               	movf	main@Move& (0+255),w,b
  1876  0009C2  0D02               	mullw	2
  1877  0009C4  0E4B               	movlw	low main@MoveTime
  1878  0009C6  24F3               	addwf	prodl,w,c
  1879  0009C8  6ED9               	movwf	fsr2l,c
  1880  0009CA  0E01               	movlw	high main@MoveTime
  1881  0009CC  20F4               	addwfc	prodh,w,c
  1882  0009CE  6EDA               	movwf	fsr2h,c
  1883  0009D0  CFDE F0BA          	movff	postinc2,??_main
  1884  0009D4  CFDD F0BB          	movff	postdec2,??_main+1
  1885  0009D8  0100               	movlb	0	; () banked
  1886  0009DA  1FBA               	comf	??_main& (0+255),f,b
  1887  0009DC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1888  0009DE  4BBA               	infsnz	??_main& (0+255),f,b
  1889  0009E0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1890  0009E2  50D6               	movf	4054,w,c	;volatile
  1891  0009E4  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1892  0009E8  0100               	movlb	0	; () banked
  1893  0009EA  6BBD               	clrf	(??_main+3)& (0+255),b
  1894  0009EC  C0BC  F0BD         	movff	??_main+2,??_main+3
  1895  0009F0  0100               	movlb	0	; () banked
  1896  0009F2  6BBC               	clrf	(??_main+2)& (0+255),b
  1897  0009F4  0100               	movlb	0	; () banked
  1898  0009F6  27BC               	addwf	(??_main+2)& (0+255),f,b
  1899  0009F8  0E00               	movlw	0
  1900  0009FA  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1901  0009FC  0100               	movlb	0	; () banked
  1902  0009FE  51BA               	movf	??_main& (0+255),w,b
  1903  000A00  0100               	movlb	0	; () banked
  1904  000A02  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1905  000A04  0100               	movlb	0	; () banked
  1906  000A06  51BD               	movf	(??_main+3)& (0+255),w,b
  1907  000A08  0A80               	xorlw	128
  1908  000A0A  0100               	movlb	0	; () banked
  1909  000A0C  6FBE               	movwf	(??_main+4)& (0+255),b
  1910  000A0E  0100               	movlb	0	; () banked
  1911  000A10  51BB               	movf	(??_main+1)& (0+255),w,b
  1912  000A12  0A80               	xorlw	128
  1913  000A14  0100               	movlb	0	; () banked
  1914  000A16  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1915  000A18  A0D8               	btfss	status,0,c
  1916  000A1A  D7D1               	goto	l3594
  1917  000A1C                     l436:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1921  000A1C  9ED5               	bcf	4053,7,c	;volatile
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 275: }
  1925                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1926  000A1E  D05A               	goto	l3604
  1927  000A20                     l3596:
  1928  000A20  0101               	movlb	1	; () banked
  1929  000A22  5184               	movf	main@Move& (0+255),w,b
  1930  000A24  0D01               	mullw	1
  1931  000A26  0E32               	movlw	low main@MoveType
  1932  000A28  24F3               	addwf	prodl,w,c
  1933  000A2A  6ED9               	movwf	fsr2l,c
  1934  000A2C  0E01               	movlw	high main@MoveType
  1935  000A2E  20F4               	addwfc	prodh,w,c
  1936  000A30  6EDA               	movwf	fsr2h,c
  1937  000A32  0E02               	movlw	2
  1938  000A34  18DE               	xorwf	postinc2,w,c
  1939  000A36  A4D8               	btfss	status,2,c
  1940  000A38  D04D               	goto	l3604
  1941                           
  1942                           ; BSR set to: 1
  1943                           ;main.c: 277: if (MoveTime[Move]>0) {
  1944  000A3A  0101               	movlb	1	; () banked
  1945  000A3C  5184               	movf	main@Move& (0+255),w,b
  1946  000A3E  0D02               	mullw	2
  1947  000A40  0E4B               	movlw	low main@MoveTime
  1948  000A42  24F3               	addwf	prodl,w,c
  1949  000A44  6ED9               	movwf	fsr2l,c
  1950  000A46  0E01               	movlw	high main@MoveTime
  1951  000A48  20F4               	addwfc	prodh,w,c
  1952  000A4A  6EDA               	movwf	fsr2h,c
  1953  000A4C  0E01               	movlw	1
  1954  000A4E  BEDB               	btfsc	plusw2,7,c
  1955  000A50  D024               	goto	l3602
  1956  000A52  0E01               	movlw	1
  1957  000A54  50DB               	movf	plusw2,w,c
  1958  000A56  E103               	bnz	u3030
  1959  000A58  04DE               	decf	postinc2,w,c
  1960  000A5A  A0D8               	btfss	status,0,c
  1961  000A5C  D01E               	goto	l3602
  1962  000A5E                     u3030:
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;main.c: 278: turnRight(&mL,&mR,100);
  1966  000A5E  0E85               	movlw	low main@mL
  1967  000A60  0100               	movlb	0	; () banked
  1968  000A62  6F67               	movwf	turnRight@mL& (0+255),b
  1969  000A64  0E01               	movlw	high main@mL
  1970  000A66  0100               	movlb	0	; () banked
  1971  000A68  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1972  000A6A  0E8E               	movlw	low main@mR
  1973  000A6C  0100               	movlb	0	; () banked
  1974  000A6E  6F69               	movwf	turnRight@mR& (0+255),b
  1975  000A70  0E01               	movlw	high main@mR
  1976  000A72  0100               	movlb	0	; () banked
  1977  000A74  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1978  000A76  0E64               	movlw	100
  1979  000A78  0100               	movlb	0	; () banked
  1980  000A7A  6F6B               	movwf	turnRight@power& (0+255),b
  1981  000A7C  EC02  F00E         	call	_turnRight	;wreg free
  1982                           
  1983                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  1984  000A80  0101               	movlb	1	; () banked
  1985  000A82  5184               	movf	main@Move& (0+255),w,b
  1986  000A84  0D02               	mullw	2
  1987  000A86  0E4B               	movlw	low main@MoveTime
  1988  000A88  24F3               	addwf	prodl,w,c
  1989  000A8A  6ED9               	movwf	fsr2l,c
  1990  000A8C  0E01               	movlw	high main@MoveTime
  1991  000A8E  20F4               	addwfc	prodh,w,c
  1992  000A90  6EDA               	movwf	fsr2h,c
  1993  000A92  50DF               	movf	indf2,w,c
  1994  000A94  EC5D  F00E         	call	_delay_tenth_s
  1995                           
  1996                           ;main.c: 280: } else {
  1997  000A98  D01D               	goto	l3604
  1998  000A9A                     l3602:
  1999                           
  2000                           ;main.c: 281: turnLeft(&mL,&mR,100);
  2001  000A9A  0E85               	movlw	low main@mL
  2002  000A9C  0100               	movlb	0	; () banked
  2003  000A9E  6F67               	movwf	turnLeft@mL& (0+255),b
  2004  000AA0  0E01               	movlw	high main@mL
  2005  000AA2  0100               	movlb	0	; () banked
  2006  000AA4  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2007  000AA6  0E8E               	movlw	low main@mR
  2008  000AA8  0100               	movlb	0	; () banked
  2009  000AAA  6F69               	movwf	turnLeft@mR& (0+255),b
  2010  000AAC  0E01               	movlw	high main@mR
  2011  000AAE  0100               	movlb	0	; () banked
  2012  000AB0  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2013  000AB2  0E64               	movlw	100
  2014  000AB4  0100               	movlb	0	; () banked
  2015  000AB6  6F6B               	movwf	turnLeft@power& (0+255),b
  2016  000AB8  EC21  F00E         	call	_turnLeft	;wreg free
  2017                           
  2018                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2019  000ABC  0101               	movlb	1	; () banked
  2020  000ABE  5184               	movf	main@Move& (0+255),w,b
  2021  000AC0  0D02               	mullw	2
  2022  000AC2  0E4B               	movlw	low main@MoveTime
  2023  000AC4  24F3               	addwf	prodl,w,c
  2024  000AC6  6ED9               	movwf	fsr2l,c
  2025  000AC8  0E01               	movlw	high main@MoveTime
  2026  000ACA  20F4               	addwfc	prodh,w,c
  2027  000ACC  6EDA               	movwf	fsr2h,c
  2028  000ACE  50DF               	movf	indf2,w,c
  2029  000AD0  EC5D  F00E         	call	_delay_tenth_s
  2030  000AD4                     l3604:
  2031                           
  2032                           ;main.c: 283: }
  2033                           ;main.c: 284: }
  2034                           ;main.c: 285: if (mode==-1) {
  2035  000AD4  283B               	incf	_mode,w,c	;volatile
  2036  000AD6  B4D8               	btfsc	status,2,c
  2037  000AD8  D003               	goto	l3612
  2038                           
  2039                           ;main.c: 286: break;
  2040  000ADA  0101               	movlb	1	; () banked
  2041  000ADC  0784               	decf	main@Move& (0+255),f,b
  2042  000ADE  D6C8               	goto	l3568
  2043  000AE0                     l3612:
  2044                           
  2045                           ;main.c: 287: }
  2046                           ;main.c: 288: }
  2047                           ;main.c: 289: stop(&mL,&mR);
  2048  000AE0  0E85               	movlw	low main@mL
  2049  000AE2  0100               	movlb	0	; () banked
  2050  000AE4  6F62               	movwf	stop@mL& (0+255),b
  2051  000AE6  0E01               	movlw	high main@mL
  2052  000AE8  0100               	movlb	0	; () banked
  2053  000AEA  6F63               	movwf	(stop@mL+1)& (0+255),b
  2054  000AEC  0E8E               	movlw	low main@mR
  2055  000AEE  0100               	movlb	0	; () banked
  2056  000AF0  6F64               	movwf	stop@mR& (0+255),b
  2057  000AF2  0E01               	movlw	high main@mR
  2058  000AF4  0100               	movlb	0	; () banked
  2059  000AF6  6F65               	movwf	(stop@mR+1)& (0+255),b
  2060  000AF8  ECBB  F00B         	call	_stop	;wreg free
  2061  000AFC                     l3614:
  2062                           
  2063                           ;main.c: 290: mode=-1;
  2064  000AFC  683B               	setf	_mode,c	;volatile
  2065  000AFE                     l3618:
  2066  000AFE  503B               	movf	_mode,w,c	;volatile
  2067                           
  2068                           ; Switch size 1, requested type "space"
  2069                           ; Number of cases is 5, Range of values is 0 to 255
  2070                           ; switch strategies available:
  2071                           ; Name         Instructions Cycles
  2072                           ; simple_byte           16     9 (average)
  2073                           ;	Chosen strategy is simple_byte
  2074  000B00  0A00               	xorlw	0	; case 0
  2075  000B02  B4D8               	btfsc	status,2,c
  2076  000B04  D4FD               	goto	l3456
  2077  000B06  0A01               	xorlw	1	; case 1
  2078  000B08  B4D8               	btfsc	status,2,c
  2079  000B0A  D523               	goto	l3476
  2080  000B0C  0A03               	xorlw	3	; case 2
  2081  000B0E  B4D8               	btfsc	status,2,c
  2082  000B10  D5C3               	goto	l3508
  2083  000B12  0A01               	xorlw	1	; case 3
  2084  000B14  B4D8               	btfsc	status,2,c
  2085  000B16  D69A               	goto	l3562
  2086  000B18  0AFC               	xorlw	252	; case 255
  2087  000B1A  B4D8               	btfsc	status,2,c
  2088  000B1C  D482               	goto	l3416
  2089  000B1E  D7EF               	goto	l3618
  2090  000B20                     __end_of_main:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           prodh	equ	0xFF4
  2094                           prodl	equ	0xFF3
  2095                           intcon	equ	0xFF2
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           indf1	equ	0xFE7
  2099                           plusw1	equ	0xFE3
  2100                           fsr1h	equ	0xFE2
  2101                           fsr1l	equ	0xFE1
  2102                           indf2	equ	0xFDF
  2103                           postinc2	equ	0xFDE
  2104                           postdec2	equ	0xFDD
  2105                           plusw2	equ	0xFDB
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _initTimer *****************
  2111 ;; Defined at:
  2112 ;;		line 8 in file "Movement.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;		None
  2117 ;; Return value:  Size  Location     Type
  2118 ;;		None               void
  2119 ;; Registers used:
  2120 ;;		None
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2126 ;;      Params:         0       0       0       0
  2127 ;;      Locals:         0       0       0       0
  2128 ;;      Temps:          0       0       0       0
  2129 ;;      Totals:         0       0       0       0
  2130 ;;Total ram usage:        0 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    3
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_main
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text1
  2141  000244                     __ptext1:
  2142                           	opt stack 0
  2143  000244                     _initTimer:
  2144                           	opt stack 27
  2145                           
  2146                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2147                           
  2148                           ;incstack = 0
  2149  000244  9ED5               	bcf	4053,7,c	;volatile
  2150                           
  2151                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2152  000246  9CD5               	bcf	4053,6,c	;volatile
  2153                           
  2154                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2155  000248  9AD5               	bcf	4053,5,c	;volatile
  2156                           
  2157                           ;Movement.c: 13: T0CONbits.PSA=0;
  2158  00024A  96D5               	bcf	4053,3,c	;volatile
  2159                           
  2160                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2161  00024C  80D5               	bsf	4053,0,c	;volatile
  2162  00024E  82D5               	bsf	4053,1,c	;volatile
  2163  000250  84D5               	bsf	4053,2,c	;volatile
  2164                           
  2165                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2166  000252  9AF2               	bcf	intcon,5,c	;volatile
  2167  000254  0012               	return		;funcret
  2168  000256                     __end_of_initTimer:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           prodh	equ	0xFF4
  2172                           prodl	equ	0xFF3
  2173                           intcon	equ	0xFF2
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           indf1	equ	0xFE7
  2177                           plusw1	equ	0xFE3
  2178                           fsr1h	equ	0xFE2
  2179                           fsr1l	equ	0xFE1
  2180                           indf2	equ	0xFDF
  2181                           postinc2	equ	0xFDE
  2182                           postdec2	equ	0xFDD
  2183                           plusw2	equ	0xFDB
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _initRFID *****************
  2189 ;; Defined at:
  2190 ;;		line 8 in file "RFID_Reader.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;		None               void
  2197 ;; Registers used:
  2198 ;;		wreg, status,2, status,0
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2204 ;;      Params:         0       0       0       0
  2205 ;;      Locals:         0       0       0       0
  2206 ;;      Temps:          0       0       0       0
  2207 ;;      Totals:         0       0       0       0
  2208 ;;Total ram usage:        0 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    3
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text2
  2219  000228                     __ptext2:
  2220                           	opt stack 0
  2221  000228                     _initRFID:
  2222                           	opt stack 27
  2223                           
  2224                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2225                           
  2226                           ;incstack = 0
  2227  000228  5094               	movf	3988,w,c	;volatile
  2228  00022A  09C0               	iorlw	192
  2229  00022C  6E94               	movwf	3988,c	;volatile
  2230                           
  2231                           ;RFID_Reader.c: 13: SPBRG=205;
  2232  00022E  0ECD               	movlw	205
  2233  000230  6EAF               	movwf	4015,c	;volatile
  2234                           
  2235                           ;RFID_Reader.c: 14: SPBRGH=0;
  2236  000232  0E00               	movlw	0
  2237  000234  6EB0               	movwf	4016,c	;volatile
  2238                           
  2239                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2240  000236  86AA               	bsf	4010,3,c	;volatile
  2241                           
  2242                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2243  000238  84AC               	bsf	4012,2,c	;volatile
  2244                           
  2245                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2246  00023A  88AB               	bsf	4011,4,c	;volatile
  2247                           
  2248                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2249  00023C  8EAB               	bsf	4011,7,c	;volatile
  2250                           
  2251                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2252  00023E  98AC               	bcf	4012,4,c	;volatile
  2253                           
  2254                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2255  000240  9CAB               	bcf	4011,6,c	;volatile
  2256  000242  0012               	return		;funcret
  2257  000244                     __end_of_initRFID:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           prodh	equ	0xFF4
  2261                           prodl	equ	0xFF3
  2262                           intcon	equ	0xFF2
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           indf1	equ	0xFE7
  2266                           plusw1	equ	0xFE3
  2267                           fsr1h	equ	0xFE2
  2268                           fsr1l	equ	0xFE1
  2269                           indf2	equ	0xFDF
  2270                           postinc2	equ	0xFDE
  2271                           postdec2	equ	0xFDD
  2272                           plusw2	equ	0xFDB
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function _initMotorPWM *****************
  2278 ;; Defined at:
  2279 ;;		line 4 in file "dc_motor.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;		None               void
  2286 ;; Registers used:
  2287 ;;		wreg, status,2
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2293 ;;      Params:         0       0       0       0
  2294 ;;      Locals:         0       0       0       0
  2295 ;;      Temps:          0       0       0       0
  2296 ;;      Totals:         0       0       0       0
  2297 ;;Total ram usage:        0 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    3
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text3
  2308  001C80                     __ptext3:
  2309                           	opt stack 0
  2310  001C80                     _initMotorPWM:
  2311                           	opt stack 27
  2312                           
  2313                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2314                           
  2315                           ;incstack = 0
  2316  001C80  0E00               	movlw	0
  2317  001C82  6E7F               	movwf	3967,c	;volatile
  2318                           
  2319                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2320  001C84  0E80               	movlw	128
  2321  001C86  6E7E               	movwf	3966,c	;volatile
  2322                           
  2323                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2324  001C88  0E6F               	movlw	111
  2325  001C8A  6E6F               	movwf	3951,c	;volatile
  2326                           
  2327                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2328  001C8C  0E00               	movlw	0
  2329  001C8E  6E6E               	movwf	3950,c	;volatile
  2330                           
  2331                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2332  001C90  0EC7               	movlw	199
  2333  001C92  6E7B               	movwf	3963,c	;volatile
  2334                           
  2335                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2336  001C94  0E00               	movlw	0
  2337  001C96  6E7A               	movwf	3962,c	;volatile
  2338                           
  2339                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2340  001C98  0E00               	movlw	0
  2341  001C9A  6E79               	movwf	3961,c	;volatile
  2342                           
  2343                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2344  001C9C  0E00               	movlw	0
  2345  001C9E  6E78               	movwf	3960,c	;volatile
  2346                           
  2347                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2348  001CA0  0E00               	movlw	0
  2349  001CA2  6E77               	movwf	3959,c	;volatile
  2350                           
  2351                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2352  001CA4  0E00               	movlw	0
  2353  001CA6  6E76               	movwf	3958,c	;volatile
  2354                           
  2355                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2356  001CA8  9093               	bcf	3987,0,c	;volatile
  2357                           
  2358                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2359  001CAA  9293               	bcf	3987,1,c	;volatile
  2360                           
  2361                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2362  001CAC  9493               	bcf	3987,2,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2365  001CAE  9693               	bcf	3987,3,c	;volatile
  2366                           
  2367                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2368  001CB0  908A               	bcf	3978,0,c	;volatile
  2369                           
  2370                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2371  001CB2  928A               	bcf	3978,1,c	;volatile
  2372                           
  2373                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2374  001CB4  948A               	bcf	3978,2,c	;volatile
  2375                           
  2376                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2377  001CB6  968A               	bcf	3978,3,c	;volatile
  2378  001CB8  0012               	return		;funcret
  2379  001CBA                     __end_of_initMotorPWM:
  2380                           	opt stack 0
  2381                           tblptru	equ	0xFF8
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           intcon	equ	0xFF2
  2385                           postinc0	equ	0xFEE
  2386                           wreg	equ	0xFE8
  2387                           indf1	equ	0xFE7
  2388                           plusw1	equ	0xFE3
  2389                           fsr1h	equ	0xFE2
  2390                           fsr1l	equ	0xFE1
  2391                           indf2	equ	0xFDF
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           plusw2	equ	0xFDB
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _initLCD *****************
  2400 ;; Defined at:
  2401 ;;		line 38 in file "LCD.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;		None               void
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2415 ;;      Params:         0       0       0       0
  2416 ;;      Locals:         0       0       0       0
  2417 ;;      Temps:          1       0       0       0
  2418 ;;      Totals:         1       0       0       0
  2419 ;;Total ram usage:        1 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    6
  2422 ;; This function calls:
  2423 ;;		_LCDout
  2424 ;;		_SendLCD
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text4
  2431  0016BA                     __ptext4:
  2432                           	opt stack 0
  2433  0016BA                     _initLCD:
  2434                           	opt stack 24
  2435                           
  2436                           ;LCD.c: 44: TRISAbits.RA6=0;
  2437                           
  2438                           ;incstack = 0
  2439  0016BA  9C92               	bcf	3986,6,c	;volatile
  2440                           
  2441                           ;LCD.c: 45: TRISCbits.RC0=0;
  2442  0016BC  9094               	bcf	3988,0,c	;volatile
  2443                           
  2444                           ;LCD.c: 46: TRISCbits.RC1=0;
  2445  0016BE  9294               	bcf	3988,1,c	;volatile
  2446                           
  2447                           ;LCD.c: 47: TRISCbits.RC2=0;
  2448  0016C0  9494               	bcf	3988,2,c	;volatile
  2449                           
  2450                           ;LCD.c: 48: TRISDbits.RD0=0;
  2451  0016C2  9095               	bcf	3989,0,c	;volatile
  2452                           
  2453                           ;LCD.c: 49: TRISDbits.RD1=0;
  2454  0016C4  9295               	bcf	3989,1,c	;volatile
  2455                           
  2456                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2457  0016C6  0E27               	movlw	39
  2458  0016C8  6E2A               	movwf	??_initLCD& (0+255),c
  2459  0016CA  0EF5               	movlw	245
  2460  0016CC                     u3087:
  2461  0016CC  2EE8               	decfsz	wreg,f,c
  2462  0016CE  D7FE               	goto	u3087
  2463  0016D0  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2464  0016D2  D7FC               	goto	u3087
  2465  0016D4  F000               	nop	
  2466                           
  2467                           ;LCD.c: 52: LCDout(0b0011);
  2468  0016D6  0E03               	movlw	3
  2469  0016D8  ECFA  F00A         	call	_LCDout
  2470                           
  2471                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2472  0016DC  0E0D               	movlw	13
  2473  0016DE  6E2A               	movwf	??_initLCD& (0+255),c
  2474  0016E0  0EFC               	movlw	252
  2475  0016E2                     u3097:
  2476  0016E2  2EE8               	decfsz	wreg,f,c
  2477  0016E4  D7FE               	goto	u3097
  2478  0016E6  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2479  0016E8  D7FC               	goto	u3097
  2480                           
  2481                           ;LCD.c: 54: LCDout(0b0011);
  2482  0016EA  0E03               	movlw	3
  2483  0016EC  ECFA  F00A         	call	_LCDout
  2484                           
  2485                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2486  0016F0  0E85               	movlw	133
  2487  0016F2                     u3107:
  2488  0016F2  2EE8               	decfsz	wreg,f,c
  2489  0016F4  D7FE               	goto	u3107
  2490  0016F6  F000               	nop	
  2491                           
  2492                           ;LCD.c: 56: LCDout(0b0011);
  2493  0016F8  0E03               	movlw	3
  2494  0016FA  ECFA  F00A         	call	_LCDout
  2495                           
  2496                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2497  0016FE  0E21               	movlw	33
  2498  001700                     u3117:
  2499  001700  2EE8               	decfsz	wreg,f,c
  2500  001702  D7FE               	goto	u3117
  2501  001704  F000               	nop	
  2502                           
  2503                           ;LCD.c: 58: LCDout(0b0010);
  2504  001706  0E02               	movlw	2
  2505  001708  ECFA  F00A         	call	_LCDout
  2506                           
  2507                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2508  00170C  0E21               	movlw	33
  2509  00170E                     u3127:
  2510  00170E  2EE8               	decfsz	wreg,f,c
  2511  001710  D7FE               	goto	u3127
  2512  001712  F000               	nop	
  2513                           
  2514                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2515  001714  0E00               	movlw	0
  2516  001716  6E28               	movwf	SendLCD@type,c
  2517  001718  0E28               	movlw	40
  2518  00171A  ECA1  F000         	call	_SendLCD
  2519                           
  2520                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2521  00171E  0E21               	movlw	33
  2522  001720                     u3137:
  2523  001720  2EE8               	decfsz	wreg,f,c
  2524  001722  D7FE               	goto	u3137
  2525  001724  F000               	nop	
  2526                           
  2527                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2528  001726  0E00               	movlw	0
  2529  001728  6E28               	movwf	SendLCD@type,c
  2530  00172A  0E08               	movlw	8
  2531  00172C  ECA1  F000         	call	_SendLCD
  2532                           
  2533                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2534  001730  0E21               	movlw	33
  2535  001732                     u3147:
  2536  001732  2EE8               	decfsz	wreg,f,c
  2537  001734  D7FE               	goto	u3147
  2538  001736  F000               	nop	
  2539                           
  2540                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2541  001738  0E00               	movlw	0
  2542  00173A  6E28               	movwf	SendLCD@type,c
  2543  00173C  0E01               	movlw	1
  2544  00173E  ECA1  F000         	call	_SendLCD
  2545                           
  2546                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2547  001742  0E0D               	movlw	13
  2548  001744  6E2A               	movwf	??_initLCD& (0+255),c
  2549  001746  0EFC               	movlw	252
  2550  001748                     u3157:
  2551  001748  2EE8               	decfsz	wreg,f,c
  2552  00174A  D7FE               	goto	u3157
  2553  00174C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2554  00174E  D7FC               	goto	u3157
  2555                           
  2556                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2557  001750  0E00               	movlw	0
  2558  001752  6E28               	movwf	SendLCD@type,c
  2559  001754  0E06               	movlw	6
  2560  001756  ECA1  F000         	call	_SendLCD
  2561                           
  2562                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2563  00175A  0E21               	movlw	33
  2564  00175C                     u3167:
  2565  00175C  2EE8               	decfsz	wreg,f,c
  2566  00175E  D7FE               	goto	u3167
  2567  001760  F000               	nop	
  2568                           
  2569                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2570  001762  0E00               	movlw	0
  2571  001764  6E28               	movwf	SendLCD@type,c
  2572  001766  0E0C               	movlw	12
  2573  001768  ECA1  F000         	call	_SendLCD
  2574                           
  2575                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2576  00176C  0E21               	movlw	33
  2577  00176E                     u3177:
  2578  00176E  2EE8               	decfsz	wreg,f,c
  2579  001770  D7FE               	goto	u3177
  2580  001772  F000               	nop	
  2581  001774  0012               	return		;funcret
  2582  001776                     __end_of_initLCD:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           intcon	equ	0xFF2
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           indf1	equ	0xFE7
  2591                           plusw1	equ	0xFE3
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           plusw2	equ	0xFDB
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _initIR *****************
  2603 ;; Defined at:
  2604 ;;		line 30 in file "IR_Reading.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;		None               void
  2611 ;; Registers used:
  2612 ;;		wreg, status,2
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2618 ;;      Params:         0       0       0       0
  2619 ;;      Locals:         0       0       0       0
  2620 ;;      Temps:          0       0       0       0
  2621 ;;      Totals:         0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    3
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text5
  2633  0001E8                     __ptext5:
  2634                           	opt stack 0
  2635  0001E8                     _initIR:
  2636                           	opt stack 27
  2637                           
  2638                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2639                           
  2640                           ;incstack = 0
  2641  0001E8  9489               	bcf	3977,2,c	;volatile
  2642                           
  2643                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2644  0001EA  9689               	bcf	3977,3,c	;volatile
  2645                           
  2646                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2647  0001EC  8492               	bsf	3986,2,c	;volatile
  2648                           
  2649                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2650  0001EE  8692               	bsf	3986,3,c	;volatile
  2651                           
  2652                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2653  0001F0  94B8               	bcf	4024,2,c	;volatile
  2654                           
  2655                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2656  0001F2  96B8               	bcf	4024,3,c	;volatile
  2657                           
  2658                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2659  0001F4  9CB8               	bcf	4024,6,c	;volatile
  2660                           
  2661                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2662  0001F6  9EB8               	bcf	4024,7,c	;volatile
  2663                           
  2664                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2665  0001F8  0E06               	movlw	6
  2666  0001FA  6E63               	movwf	3939,c	;volatile
  2667                           
  2668                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2669  0001FC  0E06               	movlw	6
  2670  0001FE  6E62               	movwf	3938,c	;volatile
  2671                           
  2672                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2673  000200  9096               	bcf	3990,0,c	;volatile
  2674                           
  2675                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2676  000202  9296               	bcf	3990,1,c	;volatile
  2677                           
  2678                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2679  000204  0E59               	movlw	89
  2680  000206  6EB7               	movwf	4023,c	;volatile
  2681  000208  0012               	return		;funcret
  2682  00020A                     __end_of_initIR:
  2683                           	opt stack 0
  2684                           tblptru	equ	0xFF8
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           indf1	equ	0xFE7
  2691                           plusw1	equ	0xFE3
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           plusw2	equ	0xFDB
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function _fullSpeedBack *****************
  2703 ;; Defined at:
  2704 ;;		line 138 in file "dc_motor.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2707 ;;		 -> main@mL(9), 
  2708 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2709 ;;		 -> main@mR(9), 
  2710 ;;  power           1   11[BANK0 ] unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2722 ;;      Params:         0       5       0       0
  2723 ;;      Locals:         0       0       0       0
  2724 ;;      Temps:          0       0       0       0
  2725 ;;      Totals:         0       5       0       0
  2726 ;;Total ram usage:        5 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    6
  2729 ;; This function calls:
  2730 ;;		_fullSpeed
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text6
  2737  001BC6                     __ptext6:
  2738                           	opt stack 0
  2739  001BC6                     _fullSpeedBack:
  2740                           	opt stack 24
  2741                           
  2742                           ;dc_motor.c: 141: mL->direction=0;
  2743                           
  2744                           ;incstack = 0
  2745  001BC6  0100               	movlb	0	; () banked
  2746  001BC8  EE20 F001          	lfsr	2,1
  2747  001BCC  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2748  001BCE  26D9               	addwf	fsr2l,f,c
  2749  001BD0  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2750  001BD2  22DA               	addwfc	fsr2h,f,c
  2751  001BD4  0E00               	movlw	0
  2752  001BD6  6EDF               	movwf	indf2,c
  2753                           
  2754                           ;dc_motor.c: 142: mR->direction=0;
  2755  001BD8  0100               	movlb	0	; () banked
  2756  001BDA  EE20 F001          	lfsr	2,1
  2757  001BDE  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2758  001BE0  26D9               	addwf	fsr2l,f,c
  2759  001BE2  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2760  001BE4  22DA               	addwfc	fsr2h,f,c
  2761  001BE6  0E00               	movlw	0
  2762  001BE8  6EDF               	movwf	indf2,c
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2766  001BEA  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2767  001BEE  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2768  001BF2  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2769  001BF6  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2770  001BFA  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2771  001BFE  EC8C  F00C         	call	_fullSpeed	;wreg free
  2772  001C02  0012               	return		;funcret
  2773  001C04                     __end_of_fullSpeedBack:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf1	equ	0xFE7
  2782                           plusw1	equ	0xFE3
  2783                           fsr1h	equ	0xFE2
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           plusw2	equ	0xFDB
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _enableSensor *****************
  2794 ;; Defined at:
  2795 ;;		line 106 in file "IR_Reading.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  sensor          1    wreg     unsigned char 
  2798 ;;  status          1   35[COMRAM] unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  sensor          1   36[COMRAM] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;		None               void
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2810 ;;      Params:         1       0       0       0
  2811 ;;      Locals:         1       0       0       0
  2812 ;;      Temps:          0       0       0       0
  2813 ;;      Totals:         2       0       0       0
  2814 ;;Total ram usage:        2 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    3
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text7
  2825  00019C                     __ptext7:
  2826                           	opt stack 0
  2827  00019C                     _enableSensor:
  2828                           	opt stack 27
  2829                           
  2830                           ;incstack = 0
  2831                           ;enableSensor@sensor stored from wreg
  2832  00019C  6E25               	movwf	enableSensor@sensor,c
  2833                           
  2834                           ;IR_Reading.c: 108: if (sensor==0){
  2835  00019E  5025               	movf	enableSensor@sensor,w,c
  2836  0001A0  A4D8               	btfss	status,2,c
  2837  0001A2  D006               	goto	l2438
  2838                           
  2839                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2840  0001A4  B024               	btfsc	enableSensor@status,0,c
  2841  0001A6  D002               	bra	u1845
  2842  0001A8  908D               	bcf	3981,0,c	;volatile
  2843  0001AA  D001               	bra	u1846
  2844  0001AC                     u1845:
  2845  0001AC  808D               	bsf	3981,0,c	;volatile
  2846  0001AE                     u1846:
  2847                           
  2848                           ;IR_Reading.c: 110: } else if (sensor==1){
  2849  0001AE  0012               	return	
  2850  0001B0                     l2438:
  2851  0001B0  0425               	decf	enableSensor@sensor,w,c
  2852  0001B2  A4D8               	btfss	status,2,c
  2853  0001B4  0012               	return	
  2854                           
  2855                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2856  0001B6  B024               	btfsc	enableSensor@status,0,c
  2857  0001B8  D002               	bra	u1865
  2858  0001BA  928D               	bcf	3981,1,c	;volatile
  2859  0001BC  D001               	bra	u1866
  2860  0001BE                     u1865:
  2861  0001BE  828D               	bsf	3981,1,c	;volatile
  2862  0001C0                     u1866:
  2863  0001C0  0012               	return	
  2864  0001C2                     __end_of_enableSensor:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon	equ	0xFF2
  2870                           postinc0	equ	0xFEE
  2871                           wreg	equ	0xFE8
  2872                           indf1	equ	0xFE7
  2873                           plusw1	equ	0xFE3
  2874                           fsr1h	equ	0xFE2
  2875                           fsr1l	equ	0xFE1
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           plusw2	equ	0xFDB
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _VerifySignal *****************
  2885 ;; Defined at:
  2886 ;;		line 58 in file "RFID_Reader.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2889 ;;		 -> ReceivedString(16), 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  ptr             3    0        PTR unsigned char 
  2892 ;;  hexByte         2   43[COMRAM] unsigned int 
  2893 ;;  checksum        1   42[COMRAM] unsigned char 
  2894 ;;  i               1   41[COMRAM] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      unsigned char 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2904 ;;      Params:         2       0       0       0
  2905 ;;      Locals:         4       0       0       0
  2906 ;;      Temps:          4       0       0       0
  2907 ;;      Totals:        10       0       0       0
  2908 ;;Total ram usage:       10 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text8
  2919  001ADA                     __ptext8:
  2920                           	opt stack 0
  2921  001ADA                     _VerifySignal:
  2922                           	opt stack 27
  2923                           
  2924                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2925                           
  2926                           ;incstack = 0
  2927  001ADA  0E00               	movlw	0
  2928  001ADC  6E2B               	movwf	VerifySignal@checksum,c
  2929                           
  2930                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2931  001ADE  0E00               	movlw	0
  2932  001AE0  6E2D               	movwf	VerifySignal@hexByte+1,c
  2933  001AE2  0E00               	movlw	0
  2934  001AE4  6E2C               	movwf	VerifySignal@hexByte,c
  2935                           
  2936                           ;RFID_Reader.c: 61: unsigned char i=0;
  2937  001AE6  0E00               	movlw	0
  2938  001AE8  6E2A               	movwf	VerifySignal@i,c
  2939                           
  2940                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2941                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2942  001AEA  EE20 F004          	lfsr	2,4
  2943  001AEE  5024               	movf	VerifySignal@Signal,w,c
  2944  001AF0  26D9               	addwf	fsr2l,f,c
  2945  001AF2  5025               	movf	VerifySignal@Signal+1,w,c
  2946  001AF4  22DA               	addwfc	fsr2h,f,c
  2947  001AF6  50DF               	movf	indf2,w,c
  2948  001AF8  6E26               	movwf	??_VerifySignal& (0+255),c
  2949  001AFA  EE20 F003          	lfsr	2,3
  2950  001AFE  5024               	movf	VerifySignal@Signal,w,c
  2951  001B00  26D9               	addwf	fsr2l,f,c
  2952  001B02  5025               	movf	VerifySignal@Signal+1,w,c
  2953  001B04  22DA               	addwfc	fsr2h,f,c
  2954  001B06  50DF               	movf	indf2,w,c
  2955  001B08  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2956  001B0A  5027               	movf	??_VerifySignal+1,w,c
  2957  001B0C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2958  001B0E  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2959  001B10  5026               	movf	??_VerifySignal,w,c
  2960  001B12  2428               	addwf	??_VerifySignal+2,w,c
  2961  001B14  6E2C               	movwf	VerifySignal@hexByte,c
  2962  001B16  0E00               	movlw	0
  2963  001B18  2029               	addwfc	??_VerifySignal+3,w,c
  2964  001B1A  6E2D               	movwf	VerifySignal@hexByte+1,c
  2965                           
  2966                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2967  001B1C  EE20 F002          	lfsr	2,2
  2968  001B20  5024               	movf	VerifySignal@Signal,w,c
  2969  001B22  26D9               	addwf	fsr2l,f,c
  2970  001B24  5025               	movf	VerifySignal@Signal+1,w,c
  2971  001B26  22DA               	addwfc	fsr2h,f,c
  2972  001B28  50DF               	movf	indf2,w,c
  2973  001B2A  182C               	xorwf	VerifySignal@hexByte,w,c
  2974  001B2C  6E2B               	movwf	VerifySignal@checksum,c
  2975                           
  2976                           ;RFID_Reader.c: 75: return 1;
  2977  001B2E  0E01               	movlw	1
  2978  001B30  0012               	return	
  2979  001B32                     __end_of_VerifySignal:
  2980                           	opt stack 0
  2981                           tblptru	equ	0xFF8
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           intcon	equ	0xFF2
  2985                           postinc0	equ	0xFEE
  2986                           wreg	equ	0xFE8
  2987                           indf1	equ	0xFE7
  2988                           plusw1	equ	0xFE3
  2989                           fsr1h	equ	0xFE2
  2990                           fsr1l	equ	0xFE1
  2991                           indf2	equ	0xFDF
  2992                           postinc2	equ	0xFDE
  2993                           postdec2	equ	0xFDD
  2994                           plusw2	equ	0xFDB
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8
  2998                           
  2999 ;; *************** function _ScanWithRange *****************
  3000 ;; Defined at:
  3001 ;;		line 98 in file "Movement.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3004 ;;		 -> main@mL(9), 
  3005 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3006 ;;		 -> main@mR(9), 
  3007 ;;  loops           2   17[BANK0 ] int 
  3008 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3009 ;;		 -> main@MoveTime(50), 
  3010 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3011 ;;		 -> main@Move(1), 
  3012 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3013 ;;		 -> main@MoveType(25), 
  3014 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3015 ;;		 -> RFID_Read(1), 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  buf            40   33[BANK0 ] unsigned char [40]
  3018 ;;  SensorResult    4   83[BANK0 ] unsigned int [2]
  3019 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3020 ;;  TimeAboveThr    2   81[BANK0 ] unsigned int 
  3021 ;;  LeftFlag        2   79[BANK0 ] unsigned int 
  3022 ;;  DirectionFou    2   75[BANK0 ] const unsigned int 
  3023 ;;  i               2   73[BANK0 ] unsigned int 
  3024 ;;  LeftFlick       1   87[BANK0 ] const char 
  3025 ;;  MiniLeftFlic    1   78[BANK0 ] const unsigned char 
  3026 ;;  MotorPower      1   77[BANK0 ] const unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      unsigned char 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3036 ;;      Params:         0      14       0       0
  3037 ;;      Locals:         0      57       0       0
  3038 ;;      Temps:          0       6       0       0
  3039 ;;      Totals:         0      77       0       0
  3040 ;;Total ram usage:       77 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    7
  3043 ;; This function calls:
  3044 ;;		_LCD_String
  3045 ;;		_SendLCD
  3046 ;;		_SetLine
  3047 ;;		_delay_tenth_s
  3048 ;;		_grabLeftIR
  3049 ;;		_grabRightIR
  3050 ;;		_sprintf
  3051 ;;		_stop
  3052 ;;		_turnLeft
  3053 ;;		_turnRight
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text9
  3060  000B20                     __ptext9:
  3061                           	opt stack 0
  3062  000B20                     _ScanWithRange:
  3063                           	opt stack 23
  3064                           
  3065                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3066                           
  3067                           ;incstack = 0
  3068  000B20  C0C3  F0B3         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3069  000B24  C0C4  F0B4         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3070  000B28  C0C5  F0B5         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3071  000B2C  C0C6  F0B6         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3072                           
  3073                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3074  000B30  0E00               	movlw	0
  3075  000B32  0100               	movlb	0	; () banked
  3076  000B34  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3077  000B36  0E00               	movlw	0
  3078  000B38  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3079                           
  3080                           ;Movement.c: 104: unsigned int RightFlag=0;
  3081  000B3A  0E00               	movlw	0
  3082  000B3C  0100               	movlb	0	; () banked
  3083  000B3E  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3084  000B40  0E00               	movlw	0
  3085  000B42  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3086                           
  3087                           ;Movement.c: 105: char buf[40];
  3088                           ;Movement.c: 106: unsigned int i=0;
  3089  000B44  0E00               	movlw	0
  3090  000B46  0100               	movlb	0	; () banked
  3091  000B48  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3092  000B4A  0E00               	movlw	0
  3093  000B4C  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3094                           
  3095                           ;Movement.c: 107: unsigned int TimeAboveThreshold=0;
  3096  000B4E  0E00               	movlw	0
  3097  000B50  0100               	movlb	0	; () banked
  3098  000B52  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3099  000B54  0E00               	movlw	0
  3100  000B56  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3101                           
  3102                           ;Movement.c: 109: const unsigned int DirectionFoundThreshold=1000;
  3103  000B58  0E03               	movlw	3
  3104  000B5A  0100               	movlb	0	; () banked
  3105  000B5C  6FAC               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3106  000B5E  0EE8               	movlw	232
  3107  000B60  6FAB               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3108                           
  3109                           ;Movement.c: 111: const unsigned char MotorPower=40;
  3110  000B62  0E28               	movlw	40
  3111  000B64  0100               	movlb	0	; () banked
  3112  000B66  6FAD               	movwf	ScanWithRange@MotorPower& (0+255),b
  3113                           
  3114                           ;Movement.c: 113: const signed char LeftFlick=2;
  3115  000B68  0E02               	movlw	2
  3116  000B6A  0100               	movlb	0	; () banked
  3117  000B6C  6FB7               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3118                           
  3119                           ;Movement.c: 117: const unsigned char MiniLeftFlick=1;
  3120  000B6E  0E01               	movlw	1
  3121  000B70  0100               	movlb	0	; () banked
  3122  000B72  6FAE               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;Movement.c: 123: (MoveType[*Move]) = 2;
  3126  000B74  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3127  000B78  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3128  000B7C  50DF               	movf	indf2,w,c
  3129  000B7E  0100               	movlb	0	; () banked
  3130  000B80  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3131  000B82  0100               	movlb	0	; () banked
  3132  000B84  517B               	movf	??_ScanWithRange& (0+255),w,b
  3133  000B86  0D01               	mullw	1
  3134  000B88  50F3               	movf	prodl,w,c
  3135  000B8A  0100               	movlb	0	; () banked
  3136  000B8C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3137  000B8E  6ED9               	movwf	fsr2l,c
  3138  000B90  50F4               	movf	prodh,w,c
  3139  000B92  0100               	movlb	0	; () banked
  3140  000B94  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3141  000B96  6EDA               	movwf	fsr2h,c
  3142  000B98  0E02               	movlw	2
  3143  000B9A  6EDF               	movwf	indf2,c
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Movement.c: 124: (MoveTime[*Move]) = LeftFlick;
  3147  000B9C  C0B7  F07B         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3148  000BA0  0100               	movlb	0	; () banked
  3149  000BA2  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3150  000BA4  BF7B               	btfsc	??_ScanWithRange& (0+255),7,b
  3151  000BA6  077C               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3152  000BA8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3153  000BAC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3154  000BB0  50DF               	movf	indf2,w,c
  3155  000BB2  0100               	movlb	0	; () banked
  3156  000BB4  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3157  000BB6  0100               	movlb	0	; () banked
  3158  000BB8  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3159  000BBA  0D02               	mullw	2
  3160  000BBC  50F3               	movf	prodl,w,c
  3161  000BBE  0100               	movlb	0	; () banked
  3162  000BC0  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3163  000BC2  6ED9               	movwf	fsr2l,c
  3164  000BC4  50F4               	movf	prodh,w,c
  3165  000BC6  0100               	movlb	0	; () banked
  3166  000BC8  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3167  000BCA  6EDA               	movwf	fsr2h,c
  3168  000BCC  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3169  000BD0  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;Movement.c: 125: *Move = *Move+1;
  3173  000BD4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3174  000BD8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3175  000BDC  50DF               	movf	indf2,w,c
  3176  000BDE  0100               	movlb	0	; () banked
  3177  000BE0  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3178  000BE2  0100               	movlb	0	; () banked
  3179  000BE4  297B               	incf	??_ScanWithRange& (0+255),w,b
  3180  000BE6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3181  000BEA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3182  000BEE  6EDF               	movwf	indf2,c
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;Movement.c: 126: turnLeft(mL,mR, 100);
  3186  000BF0  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3187  000BF4  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3188  000BF8  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3189  000BFC  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3190  000C00  0E64               	movlw	100
  3191  000C02  0100               	movlb	0	; () banked
  3192  000C04  6F6B               	movwf	turnLeft@power& (0+255),b
  3193  000C06  EC21  F00E         	call	_turnLeft	;wreg free
  3194                           
  3195                           ;Movement.c: 127: delay_tenth_s(LeftFlick);
  3196  000C0A  0100               	movlb	0	; () banked
  3197  000C0C  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3198  000C0E  EC5D  F00E         	call	_delay_tenth_s
  3199                           
  3200                           ;Movement.c: 128: stop(mL,mR);
  3201  000C12  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3202  000C16  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3203  000C1A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3204  000C1E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3205  000C22  ECBB  F00B         	call	_stop	;wreg free
  3206                           
  3207                           ;Movement.c: 131: turnRight(mL,mR, MotorPower);
  3208  000C26  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3209  000C2A  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3210  000C2E  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3211  000C32  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3212  000C36  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3213  000C3A  EC02  F00E         	call	_turnRight	;wreg free
  3214                           
  3215                           ;Movement.c: 134: TMR0L = 0;
  3216  000C3E  0E00               	movlw	0
  3217  000C40  6ED6               	movwf	4054,c	;volatile
  3218                           
  3219                           ;Movement.c: 135: TMR0H = 0;
  3220  000C42  0E00               	movlw	0
  3221  000C44  6ED7               	movwf	4055,c	;volatile
  3222                           
  3223                           ;Movement.c: 136: T0CONbits.TMR0ON=1;
  3224  000C46  8ED5               	bsf	4053,7,c	;volatile
  3225                           
  3226                           ;Movement.c: 138: for (i=1; i<=loops; i++) {
  3227  000C48  0E00               	movlw	0
  3228  000C4A  0100               	movlb	0	; () banked
  3229  000C4C  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3230  000C4E  0E01               	movlw	1
  3231  000C50  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3232  000C52  D1D4               	goto	l3346
  3233  000C54                     l3258:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;Movement.c: 141: SensorResult[0]=grabLeftIR();
  3237  000C54  EC05  F00D         	call	_grabLeftIR	;wreg free
  3238  000C58  C024  F0B3         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3239  000C5C  C025  F0B4         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3240                           
  3241                           ;Movement.c: 142: SensorResult[1]=grabRightIR();
  3242  000C60  ECCC  F00C         	call	_grabRightIR	;wreg free
  3243  000C64  C024  F0B5         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3244  000C68  C025  F0B6         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3245                           
  3246                           ;Movement.c: 146: CAP1BUFH=0;
  3247  000C6C  0E00               	movlw	0
  3248  000C6E  6E69               	movwf	3945,c	;volatile
  3249                           
  3250                           ;Movement.c: 147: CAP1BUFL=0;
  3251  000C70  0E00               	movlw	0
  3252  000C72  6E68               	movwf	3944,c	;volatile
  3253                           
  3254                           ;Movement.c: 148: CAP2BUFH=0;
  3255  000C74  0E00               	movlw	0
  3256  000C76  6E67               	movwf	3943,c	;volatile
  3257                           
  3258                           ;Movement.c: 149: CAP2BUFL=0;
  3259  000C78  0E00               	movlw	0
  3260  000C7A  6E66               	movwf	3942,c	;volatile
  3261                           
  3262                           ;Movement.c: 153: SendLCD(0b00000001,0);
  3263  000C7C  0E00               	movlw	0
  3264  000C7E  6E28               	movwf	SendLCD@type,c
  3265  000C80  0E01               	movlw	1
  3266  000C82  ECA1  F000         	call	_SendLCD
  3267                           
  3268                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3269  000C86  0E21               	movlw	33
  3270  000C88                     u3187:
  3271  000C88  2EE8               	decfsz	wreg,f,c
  3272  000C8A  D7FE               	goto	u3187
  3273  000C8C  F000               	nop	
  3274                           
  3275                           ;Movement.c: 155: SendLCD(0b00000010,0);
  3276  000C8E  0E00               	movlw	0
  3277  000C90  6E28               	movwf	SendLCD@type,c
  3278  000C92  0E02               	movlw	2
  3279  000C94  ECA1  F000         	call	_SendLCD
  3280                           
  3281                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  3282  000C98  0E06               	movlw	6
  3283  000C9A  0100               	movlb	0	; () banked
  3284  000C9C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3285  000C9E  0E30               	movlw	48
  3286  000CA0                     u3197:
  3287  000CA0  2EE8               	decfsz	wreg,f,c
  3288  000CA2  D7FE               	goto	u3197
  3289  000CA4  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3290  000CA6  D7FC               	goto	u3197
  3291  000CA8  D000               	nop2	
  3292                           
  3293                           ;Movement.c: 157: SetLine(1);
  3294  000CAA  0E01               	movlw	1
  3295  000CAC  EC89  F000         	call	_SetLine
  3296                           
  3297                           ;Movement.c: 158: LCD_String("     ScanIR");
  3298  000CB0  0E2D               	movlw	low STR_1
  3299  000CB2  6E2A               	movwf	LCD_String@string,c
  3300  000CB4  0E03               	movlw	high STR_1
  3301  000CB6  6E2B               	movwf	LCD_String@string+1,c
  3302  000CB8  EC3E  F00D         	call	_LCD_String	;wreg free
  3303                           
  3304                           ;Movement.c: 159: SetLine(2);
  3305  000CBC  0E02               	movlw	2
  3306  000CBE  EC89  F000         	call	_SetLine
  3307                           
  3308                           ;Movement.c: 160: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3309  000CC2  0E81               	movlw	low ScanWithRange@buf
  3310  000CC4  6E30               	movwf	sprintf@sp,c
  3311  000CC6  0E00               	movlw	high ScanWithRange@buf
  3312  000CC8  6E31               	movwf	sprintf@sp+1,c
  3313  000CCA  0E0C               	movlw	low (STR_6+1)
  3314  000CCC  6E32               	movwf	sprintf@f,c
  3315  000CCE  0E03               	movlw	high (STR_6+1)
  3316  000CD0  6E33               	movwf	sprintf@f+1,c
  3317  000CD2  C0B3  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3318  000CD6  C0B4  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3319  000CDA  C0B5  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3320  000CDE  C0B6  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3321  000CE2  EC5D  F008         	call	_sprintf	;wreg free
  3322                           
  3323                           ;Movement.c: 161: LCD_String(buf);
  3324  000CE6  0E81               	movlw	low ScanWithRange@buf
  3325  000CE8  6E2A               	movwf	LCD_String@string,c
  3326  000CEA  0E00               	movlw	high ScanWithRange@buf
  3327  000CEC  6E2B               	movwf	LCD_String@string+1,c
  3328  000CEE  EC3E  F00D         	call	_LCD_String	;wreg free
  3329                           
  3330                           ;Movement.c: 165: if (SensorResult[1]>DirectionFoundThreshold) {
  3331  000CF2  0100               	movlb	0	; () banked
  3332  000CF4  51B5               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3333  000CF6  0100               	movlb	0	; () banked
  3334  000CF8  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3335  000CFA  0100               	movlb	0	; () banked
  3336  000CFC  51B6               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3337  000CFE  0100               	movlb	0	; () banked
  3338  000D00  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3339  000D02  B0D8               	btfsc	status,0,c
  3340  000D04  D00E               	goto	l226
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;Movement.c: 166: RightFlag=TMR0L+(TMR0H<<8);
  3344  000D06  50D7               	movf	4055,w,c	;volatile
  3345  000D08  0100               	movlb	0	; () banked
  3346  000D0A  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3347  000D0C  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3348  000D0E  50D6               	movf	4054,w,c	;volatile
  3349  000D10  0100               	movlb	0	; () banked
  3350  000D12  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3351  000D14  0100               	movlb	0	; () banked
  3352  000D16  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3353  000D18  0E00               	movlw	0
  3354  000D1A  0100               	movlb	0	; () banked
  3355  000D1C  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3356  000D1E  0100               	movlb	0	; () banked
  3357  000D20  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3358  000D22                     l226:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Movement.c: 167: }
  3362                           ;Movement.c: 169: if (SensorResult[0]>DirectionFoundThreshold) {
  3363  000D22  0100               	movlb	0	; () banked
  3364  000D24  51B3               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3365  000D26  0100               	movlb	0	; () banked
  3366  000D28  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3367  000D2A  0100               	movlb	0	; () banked
  3368  000D2C  51B4               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3369  000D2E  0100               	movlb	0	; () banked
  3370  000D30  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3371  000D32  B0D8               	btfsc	status,0,c
  3372  000D34  D00E               	goto	l227
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;Movement.c: 170: LeftFlag=TMR0L+(TMR0H<<8);
  3376  000D36  50D7               	movf	4055,w,c	;volatile
  3377  000D38  0100               	movlb	0	; () banked
  3378  000D3A  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3379  000D3C  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3380  000D3E  50D6               	movf	4054,w,c	;volatile
  3381  000D40  0100               	movlb	0	; () banked
  3382  000D42  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3383  000D44  0100               	movlb	0	; () banked
  3384  000D46  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3385  000D48  0E00               	movlw	0
  3386  000D4A  0100               	movlb	0	; () banked
  3387  000D4C  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3388  000D4E  0100               	movlb	0	; () banked
  3389  000D50  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3390  000D52                     l227:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;Movement.c: 171: }
  3394                           ;Movement.c: 178: if (LeftFlag>0) {
  3395  000D52  0100               	movlb	0	; () banked
  3396  000D54  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3397  000D56  0100               	movlb	0	; () banked
  3398  000D58  11B0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3399  000D5A  B4D8               	btfsc	status,2,c
  3400  000D5C  D143               	goto	l3338
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;Movement.c: 181: if (RightFlag>0) {
  3404  000D5E  0100               	movlb	0	; () banked
  3405  000D60  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3406  000D62  0100               	movlb	0	; () banked
  3407  000D64  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3408  000D66  B4D8               	btfsc	status,2,c
  3409  000D68  D0A1               	goto	l229
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;Movement.c: 182: TimeAboveThreshold=LeftFlag-RightFlag;
  3413  000D6A  C0B8  F07B         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3414  000D6E  C0B9  F07C         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3415  000D72  0100               	movlb	0	; () banked
  3416  000D74  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3417  000D76  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3418  000D78  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3419  000D7A  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3420  000D7C  0100               	movlb	0	; () banked
  3421  000D7E  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3422  000D80  0100               	movlb	0	; () banked
  3423  000D82  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3424  000D84  0100               	movlb	0	; () banked
  3425  000D86  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3426  000D88  0100               	movlb	0	; () banked
  3427  000D8A  51B0               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3428  000D8C  0100               	movlb	0	; () banked
  3429  000D8E  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3430  000D90  0100               	movlb	0	; () banked
  3431  000D92  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;Movement.c: 183: TMR0L = 0;
  3435  000D94  0E00               	movlw	0
  3436  000D96  6ED6               	movwf	4054,c	;volatile
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Movement.c: 184: TMR0H = 0;
  3440  000D98  0E00               	movlw	0
  3441  000D9A  6ED7               	movwf	4055,c	;volatile
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;Movement.c: 185: stop(mL,mR);
  3445  000D9C  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3446  000DA0  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3447  000DA4  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3448  000DA8  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3449  000DAC  ECBB  F00B         	call	_stop	;wreg free
  3450                           
  3451                           ;Movement.c: 186: while ((TMR0L+(TMR0H<<8))<(TimeAboveThreshold>>1)) {
  3452  000DB0  D00C               	goto	l3300
  3453  000DB2                     l3298:
  3454                           
  3455                           ;Movement.c: 187: turnLeft(mL,mR, MotorPower);
  3456  000DB2  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3457  000DB6  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3458  000DBA  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3459  000DBE  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3460  000DC2  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3461  000DC6  EC21  F00E         	call	_turnLeft	;wreg free
  3462  000DCA                     l3300:
  3463  000DCA  90D8               	bcf	status,0,c
  3464  000DCC  0100               	movlb	0	; () banked
  3465  000DCE  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3466  000DD0  0100               	movlb	0	; () banked
  3467  000DD2  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3468  000DD4  0100               	movlb	0	; () banked
  3469  000DD6  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3470  000DD8  0100               	movlb	0	; () banked
  3471  000DDA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3472  000DDC  50D7               	movf	4055,w,c	;volatile
  3473  000DDE  0100               	movlb	0	; () banked
  3474  000DE0  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3475  000DE2  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3476  000DE4  50D6               	movf	4054,w,c	;volatile
  3477  000DE6  0100               	movlb	0	; () banked
  3478  000DE8  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3479  000DEA  6B80               	clrf	(??_ScanWithRange+5)& (0+255),b
  3480  000DEC  0100               	movlb	0	; () banked
  3481  000DEE  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3482  000DF0  0100               	movlb	0	; () banked
  3483  000DF2  277F               	addwf	(??_ScanWithRange+4)& (0+255),f,b
  3484  000DF4  0100               	movlb	0	; () banked
  3485  000DF6  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3486  000DF8  0100               	movlb	0	; () banked
  3487  000DFA  2380               	addwfc	(??_ScanWithRange+5)& (0+255),f,b
  3488  000DFC  0100               	movlb	0	; () banked
  3489  000DFE  517B               	movf	??_ScanWithRange& (0+255),w,b
  3490  000E00  0100               	movlb	0	; () banked
  3491  000E02  5D7F               	subwf	(??_ScanWithRange+4)& (0+255),w,b
  3492  000E04  0100               	movlb	0	; () banked
  3493  000E06  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3494  000E08  0100               	movlb	0	; () banked
  3495  000E0A  5980               	subwfb	(??_ScanWithRange+5)& (0+255),w,b
  3496  000E0C  A0D8               	btfss	status,0,c
  3497  000E0E  D7D1               	goto	l3298
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;Movement.c: 188: }
  3501                           ;Movement.c: 189: T0CONbits.TMR0ON=0;
  3502  000E10  9ED5               	bcf	4053,7,c	;volatile
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;Movement.c: 190: stop(mL,mR);
  3506  000E12  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3507  000E16  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3508  000E1A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3509  000E1E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3510  000E22  ECBB  F00B         	call	_stop	;wreg free
  3511                           
  3512                           ;Movement.c: 192: (MoveType[*Move]) = 1;
  3513  000E26  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3514  000E2A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3515  000E2E  50DF               	movf	indf2,w,c
  3516  000E30  0100               	movlb	0	; () banked
  3517  000E32  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3518  000E34  0100               	movlb	0	; () banked
  3519  000E36  517B               	movf	??_ScanWithRange& (0+255),w,b
  3520  000E38  0D01               	mullw	1
  3521  000E3A  50F3               	movf	prodl,w,c
  3522  000E3C  0100               	movlb	0	; () banked
  3523  000E3E  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3524  000E40  6ED9               	movwf	fsr2l,c
  3525  000E42  50F4               	movf	prodh,w,c
  3526  000E44  0100               	movlb	0	; () banked
  3527  000E46  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3528  000E48  6EDA               	movwf	fsr2h,c
  3529  000E4A  0E01               	movlw	1
  3530  000E4C  6EDF               	movwf	indf2,c
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;Movement.c: 193: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3534  000E4E  90D8               	bcf	status,0,c
  3535  000E50  0100               	movlb	0	; () banked
  3536  000E52  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3537  000E54  0100               	movlb	0	; () banked
  3538  000E56  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3539  000E58  0100               	movlb	0	; () banked
  3540  000E5A  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3541  000E5C  0100               	movlb	0	; () banked
  3542  000E5E  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3543  000E60  0100               	movlb	0	; () banked
  3544  000E62  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3545  000E64  0100               	movlb	0	; () banked
  3546  000E66  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3547  000E68  0100               	movlb	0	; () banked
  3548  000E6A  51B9               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3549  000E6C  0100               	movlb	0	; () banked
  3550  000E6E  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3551  000E70  0100               	movlb	0	; () banked
  3552  000E72  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3553  000E74  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3554  000E76  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3555  000E78  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3556  000E7A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3557  000E7E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3558  000E82  50DF               	movf	indf2,w,c
  3559  000E84  0100               	movlb	0	; () banked
  3560  000E86  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3561  000E88  0100               	movlb	0	; () banked
  3562  000E8A  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3563  000E8C  0D02               	mullw	2
  3564  000E8E  50F3               	movf	prodl,w,c
  3565  000E90  0100               	movlb	0	; () banked
  3566  000E92  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3567  000E94  6ED9               	movwf	fsr2l,c
  3568  000E96  50F4               	movf	prodh,w,c
  3569  000E98  0100               	movlb	0	; () banked
  3570  000E9A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3571  000E9C  6EDA               	movwf	fsr2h,c
  3572  000E9E  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3573  000EA2  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3574  000EA6  D08F               	goto	l3332
  3575  000EA8                     l3310:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;Movement.c: 196: return 2;
  3579  000EA8  0E02               	movlw	2
  3580                           
  3581                           ; BSR set to: 0
  3582  000EAA  0012               	return	
  3583  000EAC                     l229:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;Movement.c: 198: T0CONbits.TMR0ON=0;
  3587  000EAC  9ED5               	bcf	4053,7,c	;volatile
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;Movement.c: 202: (MoveType[*Move]) = 1;
  3591  000EAE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3592  000EB2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3593  000EB6  50DF               	movf	indf2,w,c
  3594  000EB8  0100               	movlb	0	; () banked
  3595  000EBA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3596  000EBC  0100               	movlb	0	; () banked
  3597  000EBE  517B               	movf	??_ScanWithRange& (0+255),w,b
  3598  000EC0  0D01               	mullw	1
  3599  000EC2  50F3               	movf	prodl,w,c
  3600  000EC4  0100               	movlb	0	; () banked
  3601  000EC6  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3602  000EC8  6ED9               	movwf	fsr2l,c
  3603  000ECA  50F4               	movf	prodh,w,c
  3604  000ECC  0100               	movlb	0	; () banked
  3605  000ECE  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3606  000ED0  6EDA               	movwf	fsr2h,c
  3607  000ED2  0E01               	movlw	1
  3608  000ED4  6EDF               	movwf	indf2,c
  3609                           
  3610                           ;Movement.c: 203: (MoveTime[*Move]) = -(TMR0L+(TMR0H<<8));
  3611  000ED6  50D7               	movf	4055,w,c	;volatile
  3612  000ED8  0100               	movlb	0	; () banked
  3613  000EDA  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3614  000EDC  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3615  000EDE  50D6               	movf	4054,w,c	;volatile
  3616  000EE0  0100               	movlb	0	; () banked
  3617  000EE2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3618  000EE4  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3619  000EE6  0100               	movlb	0	; () banked
  3620  000EE8  517B               	movf	??_ScanWithRange& (0+255),w,b
  3621  000EEA  0100               	movlb	0	; () banked
  3622  000EEC  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3623  000EEE  0100               	movlb	0	; () banked
  3624  000EF0  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3625  000EF2  0100               	movlb	0	; () banked
  3626  000EF4  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3627  000EF6  0100               	movlb	0	; () banked
  3628  000EF8  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3629  000EFA  1F7E               	comf	(??_ScanWithRange+3)& (0+255),f,b
  3630  000EFC  4B7D               	infsnz	(??_ScanWithRange+2)& (0+255),f,b
  3631  000EFE  2B7E               	incf	(??_ScanWithRange+3)& (0+255),f,b
  3632  000F00  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3633  000F04  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3634  000F08  50DF               	movf	indf2,w,c
  3635  000F0A  0100               	movlb	0	; () banked
  3636  000F0C  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3637  000F0E  0100               	movlb	0	; () banked
  3638  000F10  517F               	movf	(??_ScanWithRange+4)& (0+255),w,b
  3639  000F12  0D02               	mullw	2
  3640  000F14  50F3               	movf	prodl,w,c
  3641  000F16  0100               	movlb	0	; () banked
  3642  000F18  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3643  000F1A  6ED9               	movwf	fsr2l,c
  3644  000F1C  50F4               	movf	prodh,w,c
  3645  000F1E  0100               	movlb	0	; () banked
  3646  000F20  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3647  000F22  6EDA               	movwf	fsr2h,c
  3648  000F24  C07D  FFDE         	movff	??_ScanWithRange+2,postinc2
  3649  000F28  C07E  FFDD         	movff	??_ScanWithRange+3,postdec2
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;Movement.c: 204: *Move = *Move+1;
  3653  000F2C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3654  000F30  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3655  000F34  50DF               	movf	indf2,w,c
  3656  000F36  0100               	movlb	0	; () banked
  3657  000F38  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3658  000F3A  0100               	movlb	0	; () banked
  3659  000F3C  297B               	incf	??_ScanWithRange& (0+255),w,b
  3660  000F3E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3661  000F42  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3662  000F46  6EDF               	movwf	indf2,c
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;Movement.c: 205: stop(mL,mR);
  3666  000F48  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3667  000F4C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3668  000F50  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3669  000F54  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3670  000F58  ECBB  F00B         	call	_stop	;wreg free
  3671                           
  3672                           ;Movement.c: 208: turnLeft(mL,mR,100);
  3673  000F5C  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3674  000F60  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3675  000F64  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3676  000F68  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3677  000F6C  0E64               	movlw	100
  3678  000F6E  0100               	movlb	0	; () banked
  3679  000F70  6F6B               	movwf	turnLeft@power& (0+255),b
  3680  000F72  EC21  F00E         	call	_turnLeft	;wreg free
  3681                           
  3682                           ;Movement.c: 209: delay_tenth_s(MiniLeftFlick);
  3683  000F76  0100               	movlb	0	; () banked
  3684  000F78  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3685  000F7A  EC5D  F00E         	call	_delay_tenth_s
  3686                           
  3687                           ;Movement.c: 210: stop(mL,mR);
  3688  000F7E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3689  000F82  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3690  000F86  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3691  000F8A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3692  000F8E  ECBB  F00B         	call	_stop	;wreg free
  3693                           
  3694                           ;Movement.c: 211: (MoveType[*Move]) = 2;
  3695  000F92  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3696  000F96  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3697  000F9A  50DF               	movf	indf2,w,c
  3698  000F9C  0100               	movlb	0	; () banked
  3699  000F9E  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3700  000FA0  0100               	movlb	0	; () banked
  3701  000FA2  517B               	movf	??_ScanWithRange& (0+255),w,b
  3702  000FA4  0D01               	mullw	1
  3703  000FA6  50F3               	movf	prodl,w,c
  3704  000FA8  0100               	movlb	0	; () banked
  3705  000FAA  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3706  000FAC  6ED9               	movwf	fsr2l,c
  3707  000FAE  50F4               	movf	prodh,w,c
  3708  000FB0  0100               	movlb	0	; () banked
  3709  000FB2  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3710  000FB4  6EDA               	movwf	fsr2h,c
  3711  000FB6  0E02               	movlw	2
  3712  000FB8  6EDF               	movwf	indf2,c
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;Movement.c: 212: (MoveTime[*Move]) = MiniLeftFlick;
  3716  000FBA  0100               	movlb	0	; () banked
  3717  000FBC  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3718  000FBE  0100               	movlb	0	; () banked
  3719  000FC0  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3720  000FC2  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3721  000FC4  D75A               	goto	L3
  3722  000FC6                     l3332:
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;Movement.c: 213: *Move = *Move+1;
  3726  000FC6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3727  000FCA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3728  000FCE  50DF               	movf	indf2,w,c
  3729  000FD0  0100               	movlb	0	; () banked
  3730  000FD2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3731  000FD4  0100               	movlb	0	; () banked
  3732  000FD6  297B               	incf	??_ScanWithRange& (0+255),w,b
  3733  000FD8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3734  000FDC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3735  000FE0  6EDF               	movwf	indf2,c
  3736  000FE2  D762               	goto	l3310
  3737  000FE4                     l3338:
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;Movement.c: 217: }
  3741                           ;Movement.c: 218: }
  3742                           ;Movement.c: 220: if (*RFID_Read==1) {
  3743  000FE4  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3744  000FE8  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3745  000FEC  04DE               	decf	postinc2,w,c
  3746  000FEE  A4D8               	btfss	status,2,c
  3747  000FF0  D002               	goto	l3344
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;Movement.c: 221: return 2;
  3751  000FF2  0E02               	movlw	2
  3752                           
  3753                           ; BSR set to: 0
  3754  000FF4  0012               	return	
  3755  000FF6                     l3344:
  3756                           
  3757                           ; BSR set to: 0
  3758  000FF6  0100               	movlb	0	; () banked
  3759  000FF8  4BA9               	infsnz	ScanWithRange@i& (0+255),f,b
  3760  000FFA  2BAA               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3761  000FFC                     l3346:
  3762                           
  3763                           ; BSR set to: 0
  3764  000FFC  0100               	movlb	0	; () banked
  3765  000FFE  51A9               	movf	ScanWithRange@i& (0+255),w,b
  3766  001000  0100               	movlb	0	; () banked
  3767  001002  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3768  001004  0100               	movlb	0	; () banked
  3769  001006  51AA               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3770  001008  0100               	movlb	0	; () banked
  3771  00100A  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3772  00100C  B0D8               	btfsc	status,0,c
  3773  00100E  D622               	goto	l3258
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;Movement.c: 222: }
  3777                           ;Movement.c: 223: }
  3778                           ;Movement.c: 228: (MoveType[*Move]) = 2;
  3779                           
  3780                           ; BSR set to: 0
  3781  001010  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3782  001014  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3783  001018  50DF               	movf	indf2,w,c
  3784  00101A  0100               	movlb	0	; () banked
  3785  00101C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3786  00101E  0100               	movlb	0	; () banked
  3787  001020  517B               	movf	??_ScanWithRange& (0+255),w,b
  3788  001022  0D01               	mullw	1
  3789  001024  50F3               	movf	prodl,w,c
  3790  001026  0100               	movlb	0	; () banked
  3791  001028  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3792  00102A  6ED9               	movwf	fsr2l,c
  3793  00102C  50F4               	movf	prodh,w,c
  3794  00102E  0100               	movlb	0	; () banked
  3795  001030  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3796  001032  6EDA               	movwf	fsr2h,c
  3797  001034  0E02               	movlw	2
  3798  001036  6EDF               	movwf	indf2,c
  3799                           
  3800                           ;Movement.c: 229: (MoveTime[*Move]) = -2;
  3801  001038  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3802  00103C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3803  001040  50DF               	movf	indf2,w,c
  3804  001042  0100               	movlb	0	; () banked
  3805  001044  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3806  001046  0100               	movlb	0	; () banked
  3807  001048  517B               	movf	??_ScanWithRange& (0+255),w,b
  3808  00104A  0D02               	mullw	2
  3809  00104C  50F3               	movf	prodl,w,c
  3810  00104E  0100               	movlb	0	; () banked
  3811  001050  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3812  001052  6ED9               	movwf	fsr2l,c
  3813  001054  50F4               	movf	prodh,w,c
  3814  001056  0100               	movlb	0	; () banked
  3815  001058  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3816  00105A  6EDA               	movwf	fsr2h,c
  3817  00105C  0EFE               	movlw	254
  3818  00105E  6EDE               	movwf	postinc2,c
  3819  001060  0EFF               	movlw	255
  3820  001062  6EDD               	movwf	postdec2,c
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;Movement.c: 230: *Move = *Move+1;
  3824  001064  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3825  001068  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3826  00106C  50DF               	movf	indf2,w,c
  3827  00106E  0100               	movlb	0	; () banked
  3828  001070  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3829  001072  0100               	movlb	0	; () banked
  3830  001074  297B               	incf	??_ScanWithRange& (0+255),w,b
  3831  001076  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3832  00107A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3833  00107E  6EDF               	movwf	indf2,c
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;Movement.c: 231: turnRight(mL,mR, 100);
  3837  001080  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3838  001084  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3839  001088  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3840  00108C  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3841  001090  0E64               	movlw	100
  3842  001092  0100               	movlb	0	; () banked
  3843  001094  6F6B               	movwf	turnRight@power& (0+255),b
  3844  001096  EC02  F00E         	call	_turnRight	;wreg free
  3845                           
  3846                           ;Movement.c: 232: delay_tenth_s(LeftFlick);
  3847  00109A  0100               	movlb	0	; () banked
  3848  00109C  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3849  00109E  EC5D  F00E         	call	_delay_tenth_s
  3850                           
  3851                           ;Movement.c: 233: stop(mL,mR);
  3852  0010A2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3853  0010A6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3854  0010AA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3855  0010AE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3856  0010B2  ECBB  F00B         	call	_stop	;wreg free
  3857                           
  3858                           ;Movement.c: 234: return -1;
  3859  0010B6  0EFF               	movlw	255
  3860  0010B8  0012               	return	
  3861  0010BA                     __end_of_ScanWithRange:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           indf1	equ	0xFE7
  3870                           plusw1	equ	0xFE3
  3871                           fsr1h	equ	0xFE2
  3872                           fsr1l	equ	0xFE1
  3873                           indf2	equ	0xFDF
  3874                           postinc2	equ	0xFDE
  3875                           postdec2	equ	0xFDD
  3876                           plusw2	equ	0xFDB
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _turnRight *****************
  3882 ;; Defined at:
  3883 ;;		line 103 in file "dc_motor.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3886 ;;		 -> main@mL(9), 
  3887 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3888 ;;		 -> main@mR(9), 
  3889 ;;  power           1   11[BANK0 ] unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3901 ;;      Params:         0       5       0       0
  3902 ;;      Locals:         0       0       0       0
  3903 ;;      Temps:          0       0       0       0
  3904 ;;      Totals:         0       5       0       0
  3905 ;;Total ram usage:        5 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    6
  3908 ;; This function calls:
  3909 ;;		_fullSpeed
  3910 ;; This function is called by:
  3911 ;;		_ScanWithRange
  3912 ;;		_main
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text10
  3917  001C04                     __ptext10:
  3918                           	opt stack 0
  3919  001C04                     _turnRight:
  3920                           	opt stack 24
  3921                           
  3922                           ;dc_motor.c: 107: mL->direction=0;
  3923                           
  3924                           ;incstack = 0
  3925  001C04  0100               	movlb	0	; () banked
  3926  001C06  EE20 F001          	lfsr	2,1
  3927  001C0A  5167               	movf	turnRight@mL& (0+255),w,b
  3928  001C0C  26D9               	addwf	fsr2l,f,c
  3929  001C0E  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3930  001C10  22DA               	addwfc	fsr2h,f,c
  3931  001C12  0E00               	movlw	0
  3932  001C14  6EDF               	movwf	indf2,c
  3933                           
  3934                           ;dc_motor.c: 108: mR->direction=1;
  3935  001C16  0100               	movlb	0	; () banked
  3936  001C18  EE20 F001          	lfsr	2,1
  3937  001C1C  5169               	movf	turnRight@mR& (0+255),w,b
  3938  001C1E  26D9               	addwf	fsr2l,f,c
  3939  001C20  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3940  001C22  22DA               	addwfc	fsr2h,f,c
  3941  001C24  0E01               	movlw	1
  3942  001C26  6EDF               	movwf	indf2,c
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3946  001C28  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3947  001C2C  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3948  001C30  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3949  001C34  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3950  001C38  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3951  001C3C  EC8C  F00C         	call	_fullSpeed	;wreg free
  3952  001C40  0012               	return		;funcret
  3953  001C42                     __end_of_turnRight:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           postinc0	equ	0xFEE
  3960                           wreg	equ	0xFE8
  3961                           indf1	equ	0xFE7
  3962                           plusw1	equ	0xFE3
  3963                           fsr1h	equ	0xFE2
  3964                           fsr1l	equ	0xFE1
  3965                           indf2	equ	0xFDF
  3966                           postinc2	equ	0xFDE
  3967                           postdec2	equ	0xFDD
  3968                           plusw2	equ	0xFDB
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _turnLeft *****************
  3974 ;; Defined at:
  3975 ;;		line 92 in file "dc_motor.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3978 ;;		 -> main@mL(9), 
  3979 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3980 ;;		 -> main@mR(9), 
  3981 ;;  power           1   11[BANK0 ] unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;		None               void
  3986 ;; Registers used:
  3987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3993 ;;      Params:         0       5       0       0
  3994 ;;      Locals:         0       0       0       0
  3995 ;;      Temps:          0       0       0       0
  3996 ;;      Totals:         0       5       0       0
  3997 ;;Total ram usage:        5 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    6
  4000 ;; This function calls:
  4001 ;;		_fullSpeed
  4002 ;; This function is called by:
  4003 ;;		_ScanWithRange
  4004 ;;		_main
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text11
  4009  001C42                     __ptext11:
  4010                           	opt stack 0
  4011  001C42                     _turnLeft:
  4012                           	opt stack 24
  4013                           
  4014                           ;dc_motor.c: 96: mL->direction=1;
  4015                           
  4016                           ;incstack = 0
  4017  001C42  0100               	movlb	0	; () banked
  4018  001C44  EE20 F001          	lfsr	2,1
  4019  001C48  5167               	movf	turnLeft@mL& (0+255),w,b
  4020  001C4A  26D9               	addwf	fsr2l,f,c
  4021  001C4C  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  4022  001C4E  22DA               	addwfc	fsr2h,f,c
  4023  001C50  0E01               	movlw	1
  4024  001C52  6EDF               	movwf	indf2,c
  4025                           
  4026                           ;dc_motor.c: 97: mR->direction=0;
  4027  001C54  0100               	movlb	0	; () banked
  4028  001C56  EE20 F001          	lfsr	2,1
  4029  001C5A  5169               	movf	turnLeft@mR& (0+255),w,b
  4030  001C5C  26D9               	addwf	fsr2l,f,c
  4031  001C5E  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4032  001C60  22DA               	addwfc	fsr2h,f,c
  4033  001C62  0E00               	movlw	0
  4034  001C64  6EDF               	movwf	indf2,c
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  4038  001C66  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  4039  001C6A  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4040  001C6E  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  4041  001C72  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4042  001C76  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  4043  001C7A  EC8C  F00C         	call	_fullSpeed	;wreg free
  4044  001C7E  0012               	return		;funcret
  4045  001C80                     __end_of_turnLeft:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           intcon	equ	0xFF2
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           plusw1	equ	0xFE3
  4055                           fsr1h	equ	0xFE2
  4056                           fsr1l	equ	0xFE1
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           plusw2	equ	0xFDB
  4061                           fsr2h	equ	0xFDA
  4062                           fsr2l	equ	0xFD9
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function _fullSpeed *****************
  4066 ;; Defined at:
  4067 ;;		line 113 in file "dc_motor.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4070 ;;		 -> main@mL(9), 
  4071 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4072 ;;		 -> main@mR(9), 
  4073 ;;  power           1    6[BANK0 ] unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;		None               void
  4078 ;; Registers used:
  4079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4085 ;;      Params:         0       5       0       0
  4086 ;;      Locals:         0       0       0       0
  4087 ;;      Temps:          1       0       0       0
  4088 ;;      Totals:         1       5       0       0
  4089 ;;Total ram usage:        6 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    5
  4092 ;; This function calls:
  4093 ;;		_setMotorPWM
  4094 ;; This function is called by:
  4095 ;;		_turnLeft
  4096 ;;		_turnRight
  4097 ;;		_fullSpeedBack
  4098 ;;		_main
  4099 ;;		_fullSpeedForward
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text12
  4104  001918                     __ptext12:
  4105                           	opt stack 0
  4106  001918                     _fullSpeed:
  4107                           	opt stack 24
  4108                           
  4109                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4110                           
  4111                           ;incstack = 0
  4112  001918  D02C               	goto	l67
  4113  00191A                     l3026:
  4114                           
  4115                           ;dc_motor.c: 117: if(mL->power<power){
  4116  00191A  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4117  00191E  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4118  001922  0100               	movlb	0	; () banked
  4119  001924  5166               	movf	fullSpeed@power& (0+255),w,b
  4120  001926  5CDE               	subwf	postinc2,w,c
  4121  001928  B0D8               	btfsc	status,0,c
  4122  00192A  D005               	goto	l3030
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;dc_motor.c: 118: mL->power++;
  4126  00192C  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4127  001930  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4128  001934  2ADF               	incf	indf2,f,c
  4129  001936                     l3030:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;dc_motor.c: 119: }
  4133                           ;dc_motor.c: 120: if(mR->power<power){
  4134  001936  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4135  00193A  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4136  00193E  0100               	movlb	0	; () banked
  4137  001940  5166               	movf	fullSpeed@power& (0+255),w,b
  4138  001942  5CDE               	subwf	postinc2,w,c
  4139  001944  B0D8               	btfsc	status,0,c
  4140  001946  D005               	goto	l3034
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;dc_motor.c: 121: mR->power++;
  4144  001948  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4145  00194C  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4146  001950  2ADF               	incf	indf2,f,c
  4147  001952                     l3034:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;dc_motor.c: 122: }
  4151                           ;dc_motor.c: 123: setMotorPWM(mL);
  4152  001952  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4153  001956  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4154  00195A  ECE0  F009         	call	_setMotorPWM	;wreg free
  4155                           
  4156                           ;dc_motor.c: 124: setMotorPWM(mR);
  4157  00195E  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4158  001962  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4159  001966  ECE0  F009         	call	_setMotorPWM	;wreg free
  4160                           
  4161                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4162  00196A  0E21               	movlw	33
  4163  00196C                     u3207:
  4164  00196C  2EE8               	decfsz	wreg,f,c
  4165  00196E  D7FE               	goto	u3207
  4166  001970  F000               	nop	
  4167  001972                     l67:
  4168  001972  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4169  001976  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4170  00197A  0100               	movlb	0	; () banked
  4171  00197C  5166               	movf	fullSpeed@power& (0+255),w,b
  4172  00197E  5CDE               	subwf	postinc2,w,c
  4173  001980  A0D8               	btfss	status,0,c
  4174  001982  D7CB               	goto	l3026
  4175                           
  4176                           ; BSR set to: 0
  4177  001984  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4178  001988  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4179  00198C  0100               	movlb	0	; () banked
  4180  00198E  5166               	movf	fullSpeed@power& (0+255),w,b
  4181  001990  5CDE               	subwf	postinc2,w,c
  4182  001992  B0D8               	btfsc	status,0,c
  4183  001994  0012               	return	
  4184  001996  D7C1               	goto	l3026
  4185  001998                     __end_of_fullSpeed:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           intcon	equ	0xFF2
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           indf1	equ	0xFE7
  4194                           plusw1	equ	0xFE3
  4195                           fsr1h	equ	0xFE2
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           plusw2	equ	0xFDB
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _delay_tenth_s *****************
  4206 ;; Defined at:
  4207 ;;		line 32 in file "Movement.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  tenth_second    1    wreg     unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4212 ;;  i               2   37[COMRAM] unsigned int 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;		None               void
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4222 ;;      Params:         0       0       0       0
  4223 ;;      Locals:         3       0       0       0
  4224 ;;      Temps:          1       0       0       0
  4225 ;;      Totals:         4       0       0       0
  4226 ;;Total ram usage:        4 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    3
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_ScanWithRange
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text13
  4238  001CBA                     __ptext13:
  4239                           	opt stack 0
  4240  001CBA                     _delay_tenth_s:
  4241                           	opt stack 27
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;incstack = 0
  4245                           ;delay_tenth_s@tenth_seconds stored from wreg
  4246  001CBA  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4247                           
  4248                           ;Movement.c: 33: unsigned int i=0;
  4249  001CBC  0E00               	movlw	0
  4250  001CBE  6E27               	movwf	delay_tenth_s@i+1,c
  4251  001CC0  0E00               	movlw	0
  4252  001CC2  6E26               	movwf	delay_tenth_s@i,c
  4253                           
  4254                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4255  001CC4  0E00               	movlw	0
  4256  001CC6  6E27               	movwf	delay_tenth_s@i+1,c
  4257  001CC8  0E01               	movlw	1
  4258  001CCA  6E26               	movwf	delay_tenth_s@i,c
  4259  001CCC  D009               	goto	l2288
  4260  001CCE                     l2284:
  4261                           
  4262                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4263  001CCE  0E82               	movlw	130
  4264  001CD0  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4265  001CD2  0EDE               	movlw	222
  4266  001CD4                     u3217:
  4267  001CD4  2EE8               	decfsz	wreg,f,c
  4268  001CD6  D7FE               	goto	u3217
  4269  001CD8  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4270  001CDA  D7FC               	goto	u3217
  4271  001CDC  4A26               	infsnz	delay_tenth_s@i,f,c
  4272  001CDE  2A27               	incf	delay_tenth_s@i+1,f,c
  4273  001CE0                     l2288:
  4274  001CE0  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4275  001CE2  0D02               	mullw	2
  4276  001CE4  5026               	movf	delay_tenth_s@i,w,c
  4277  001CE6  5CF3               	subwf	prodl,w,c
  4278  001CE8  5027               	movf	delay_tenth_s@i+1,w,c
  4279  001CEA  58F4               	subwfb	prodh,w,c
  4280  001CEC  A0D8               	btfss	status,0,c
  4281  001CEE  0012               	return	
  4282  001CF0  D7EE               	goto	l2284
  4283  001CF2                     __end_of_delay_tenth_s:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           indf1	equ	0xFE7
  4292                           plusw1	equ	0xFE3
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           plusw2	equ	0xFDB
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function _ScanIR *****************
  4304 ;; Defined at:
  4305 ;;		line 44 in file "Movement.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4308 ;;		 -> main@mL(9), 
  4309 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4310 ;;		 -> main@mR(9), 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4313 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4314 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      unsigned char 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4324 ;;      Params:         0       4       0       0
  4325 ;;      Locals:         0      46       0       0
  4326 ;;      Temps:          1       0       0       0
  4327 ;;      Totals:         1      50       0       0
  4328 ;;Total ram usage:       51 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    7
  4331 ;; This function calls:
  4332 ;;		_LCD_String
  4333 ;;		_SendLCD
  4334 ;;		_SetLine
  4335 ;;		_grabLeftIR
  4336 ;;		_grabRightIR
  4337 ;;		_sprintf
  4338 ;;		_stop
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text14
  4345  0014FA                     __ptext14:
  4346                           	opt stack 0
  4347  0014FA                     _ScanIR:
  4348                           	opt stack 23
  4349                           
  4350                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4351                           
  4352                           ;incstack = 0
  4353  0014FA  C0BF  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4354  0014FE  C0C0  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4355  001502  C0C1  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4356  001506  C0C2  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4357                           
  4358                           ;Movement.c: 48: char buf[40];
  4359                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4360  00150A  0E03               	movlw	3
  4361  00150C  0100               	movlb	0	; () banked
  4362  00150E  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4363  001510  0EE8               	movlw	232
  4364  001512  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4368  001514  EC05  F00D         	call	_grabLeftIR	;wreg free
  4369  001518  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4370  00151C  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4371                           
  4372                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4373  001520  ECCC  F00C         	call	_grabRightIR	;wreg free
  4374  001524  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4375  001528  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4376                           
  4377                           ;Movement.c: 60: CAP1BUFH=0;
  4378  00152C  0E00               	movlw	0
  4379  00152E  6E69               	movwf	3945,c	;volatile
  4380                           
  4381                           ;Movement.c: 61: CAP1BUFL=0;
  4382  001530  0E00               	movlw	0
  4383  001532  6E68               	movwf	3944,c	;volatile
  4384                           
  4385                           ;Movement.c: 62: CAP2BUFH=0;
  4386  001534  0E00               	movlw	0
  4387  001536  6E67               	movwf	3943,c	;volatile
  4388                           
  4389                           ;Movement.c: 63: CAP2BUFL=0;
  4390  001538  0E00               	movlw	0
  4391  00153A  6E66               	movwf	3942,c	;volatile
  4392                           
  4393                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4394  00153C  0E00               	movlw	0
  4395  00153E  6E28               	movwf	SendLCD@type,c
  4396  001540  0E01               	movlw	1
  4397  001542  ECA1  F000         	call	_SendLCD
  4398                           
  4399                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4400  001546  0E21               	movlw	33
  4401  001548                     u3227:
  4402  001548  2EE8               	decfsz	wreg,f,c
  4403  00154A  D7FE               	goto	u3227
  4404  00154C  F000               	nop	
  4405                           
  4406                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4407  00154E  0E00               	movlw	0
  4408  001550  6E28               	movwf	SendLCD@type,c
  4409  001552  0E02               	movlw	2
  4410  001554  ECA1  F000         	call	_SendLCD
  4411                           
  4412                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4413  001558  0E06               	movlw	6
  4414  00155A  6E39               	movwf	??_ScanIR& (0+255),c
  4415  00155C  0E30               	movlw	48
  4416  00155E                     u3237:
  4417  00155E  2EE8               	decfsz	wreg,f,c
  4418  001560  D7FE               	goto	u3237
  4419  001562  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4420  001564  D7FC               	goto	u3237
  4421  001566  D000               	nop2	
  4422                           
  4423                           ;Movement.c: 70: SetLine(1);
  4424  001568  0E01               	movlw	1
  4425  00156A  EC89  F000         	call	_SetLine
  4426                           
  4427                           ;Movement.c: 71: LCD_String("     ScanIR");
  4428  00156E  0E2D               	movlw	low STR_1
  4429  001570  6E2A               	movwf	LCD_String@string,c
  4430  001572  0E03               	movlw	high STR_1
  4431  001574  6E2B               	movwf	LCD_String@string+1,c
  4432  001576  EC3E  F00D         	call	_LCD_String	;wreg free
  4433                           
  4434                           ;Movement.c: 72: SetLine(2);
  4435  00157A  0E02               	movlw	2
  4436  00157C  EC89  F000         	call	_SetLine
  4437                           
  4438                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4439  001580  0E71               	movlw	low ScanIR@buf
  4440  001582  6E30               	movwf	sprintf@sp,c
  4441  001584  0E00               	movlw	high ScanIR@buf
  4442  001586  6E31               	movwf	sprintf@sp+1,c
  4443  001588  0E0C               	movlw	low (STR_6+1)
  4444  00158A  6E32               	movwf	sprintf@f,c
  4445  00158C  0E03               	movlw	high (STR_6+1)
  4446  00158E  6E33               	movwf	sprintf@f+1,c
  4447  001590  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4448  001594  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4449  001598  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4450  00159C  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4451  0015A0  EC5D  F008         	call	_sprintf	;wreg free
  4452                           
  4453                           ;Movement.c: 74: LCD_String(buf);
  4454  0015A4  0E71               	movlw	low ScanIR@buf
  4455  0015A6  6E2A               	movwf	LCD_String@string,c
  4456  0015A8  0E00               	movlw	high ScanIR@buf
  4457  0015AA  6E2B               	movwf	LCD_String@string+1,c
  4458  0015AC  EC3E  F00D         	call	_LCD_String	;wreg free
  4459                           
  4460                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4461                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4462  0015B0  0100               	movlb	0	; () banked
  4463  0015B2  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4464  0015B4  0100               	movlb	0	; () banked
  4465  0015B6  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4466  0015B8  0100               	movlb	0	; () banked
  4467  0015BA  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4468  0015BC  0100               	movlb	0	; () banked
  4469  0015BE  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4470  0015C0  B0D8               	btfsc	status,0,c
  4471  0015C2  D00C               	goto	l3226
  4472                           
  4473                           ; BSR set to: 0
  4474  0015C4  0100               	movlb	0	; () banked
  4475  0015C6  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4476  0015C8  0100               	movlb	0	; () banked
  4477  0015CA  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4478  0015CC  0100               	movlb	0	; () banked
  4479  0015CE  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4480  0015D0  0100               	movlb	0	; () banked
  4481  0015D2  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4482  0015D4  B0D8               	btfsc	status,0,c
  4483  0015D6  D002               	goto	l3226
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;Movement.c: 80: return 2;
  4487  0015D8  0E02               	movlw	2
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;Movement.c: 81: } else {
  4491                           
  4492                           ; BSR set to: 0
  4493  0015DA  0012               	return	
  4494  0015DC                     l3226:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;Movement.c: 82: stop(mL,mR);
  4498  0015DC  C06D  F062         	movff	ScanIR@mL,stop@mL
  4499  0015E0  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4500  0015E4  C06F  F064         	movff	ScanIR@mR,stop@mR
  4501  0015E8  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4502  0015EC  ECBB  F00B         	call	_stop	;wreg free
  4503                           
  4504                           ;Movement.c: 83: return 0;
  4505  0015F0  0E00               	movlw	0
  4506  0015F2  0012               	return	
  4507  0015F4                     __end_of_ScanIR:
  4508                           	opt stack 0
  4509                           tblptru	equ	0xFF8
  4510                           prodh	equ	0xFF4
  4511                           prodl	equ	0xFF3
  4512                           intcon	equ	0xFF2
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           indf1	equ	0xFE7
  4516                           plusw1	equ	0xFE3
  4517                           fsr1h	equ	0xFE2
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           postdec2	equ	0xFDD
  4522                           plusw2	equ	0xFDB
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _stop *****************
  4528 ;; Defined at:
  4529 ;;		line 72 in file "dc_motor.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4532 ;;		 -> main@mL(9), 
  4533 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4534 ;;		 -> main@mR(9), 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;		None               void
  4539 ;; Registers used:
  4540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4546 ;;      Params:         0       4       0       0
  4547 ;;      Locals:         0       0       0       0
  4548 ;;      Temps:          0       0       0       0
  4549 ;;      Totals:         0       4       0       0
  4550 ;;Total ram usage:        4 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    5
  4553 ;; This function calls:
  4554 ;;		_setMotorPWM
  4555 ;; This function is called by:
  4556 ;;		_ScanIR
  4557 ;;		_ScanWithRange
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text15
  4563  001776                     __ptext15:
  4564                           	opt stack 0
  4565  001776                     _stop:
  4566                           	opt stack 25
  4567                           
  4568                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4569                           
  4570                           ;incstack = 0
  4571  001776  D028               	goto	l3058
  4572  001778                     l3044:
  4573                           
  4574                           ;dc_motor.c: 76: if(mL->power>0){
  4575  001778  C062  FFD9         	movff	stop@mL,fsr2l
  4576  00177C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4577  001780  50DF               	movf	indf2,w,c
  4578  001782  B4D8               	btfsc	status,2,c
  4579  001784  D005               	goto	l3048
  4580                           
  4581                           ;dc_motor.c: 77: mL->power--;
  4582  001786  C062  FFD9         	movff	stop@mL,fsr2l
  4583  00178A  C063  FFDA         	movff	stop@mL+1,fsr2h
  4584  00178E  06DF               	decf	indf2,f,c
  4585  001790                     l3048:
  4586                           
  4587                           ;dc_motor.c: 78: }
  4588                           ;dc_motor.c: 79: if(mR->power>0){
  4589  001790  C064  FFD9         	movff	stop@mR,fsr2l
  4590  001794  C065  FFDA         	movff	stop@mR+1,fsr2h
  4591  001798  50DF               	movf	indf2,w,c
  4592  00179A  B4D8               	btfsc	status,2,c
  4593  00179C  D005               	goto	l3052
  4594                           
  4595                           ;dc_motor.c: 80: mR->power--;
  4596  00179E  C064  FFD9         	movff	stop@mR,fsr2l
  4597  0017A2  C065  FFDA         	movff	stop@mR+1,fsr2h
  4598  0017A6  06DF               	decf	indf2,f,c
  4599  0017A8                     l3052:
  4600                           
  4601                           ;dc_motor.c: 81: }
  4602                           ;dc_motor.c: 82: setMotorPWM(mL);
  4603  0017A8  C062  F032         	movff	stop@mL,setMotorPWM@m
  4604  0017AC  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4605  0017B0  ECE0  F009         	call	_setMotorPWM	;wreg free
  4606                           
  4607                           ;dc_motor.c: 83: setMotorPWM(mR);
  4608  0017B4  C064  F032         	movff	stop@mR,setMotorPWM@m
  4609  0017B8  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4610  0017BC  ECE0  F009         	call	_setMotorPWM	;wreg free
  4611                           
  4612                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4613  0017C0  0E21               	movlw	33
  4614  0017C2                     u3247:
  4615  0017C2  2EE8               	decfsz	wreg,f,c
  4616  0017C4  D7FE               	goto	u3247
  4617  0017C6  F000               	nop	
  4618  0017C8                     l3058:
  4619  0017C8  C062  FFD9         	movff	stop@mL,fsr2l
  4620  0017CC  C063  FFDA         	movff	stop@mL+1,fsr2h
  4621  0017D0  50DF               	movf	indf2,w,c
  4622  0017D2  A4D8               	btfss	status,2,c
  4623  0017D4  D7D1               	goto	l3044
  4624  0017D6  C064  FFD9         	movff	stop@mR,fsr2l
  4625  0017DA  C065  FFDA         	movff	stop@mR+1,fsr2h
  4626  0017DE  50DF               	movf	indf2,w,c
  4627  0017E0  A4D8               	btfss	status,2,c
  4628  0017E2  D7CA               	goto	l3044
  4629                           
  4630                           ;dc_motor.c: 85: }
  4631                           ;dc_motor.c: 86: mL->direction=1;
  4632  0017E4  0100               	movlb	0	; () banked
  4633  0017E6  EE20 F001          	lfsr	2,1
  4634  0017EA  5162               	movf	stop@mL& (0+255),w,b
  4635  0017EC  26D9               	addwf	fsr2l,f,c
  4636  0017EE  5163               	movf	(stop@mL+1)& (0+255),w,b
  4637  0017F0  22DA               	addwfc	fsr2h,f,c
  4638  0017F2  0E01               	movlw	1
  4639  0017F4  6EDF               	movwf	indf2,c
  4640                           
  4641                           ;dc_motor.c: 87: mR->direction=1;
  4642  0017F6  0100               	movlb	0	; () banked
  4643  0017F8  EE20 F001          	lfsr	2,1
  4644  0017FC  5164               	movf	stop@mR& (0+255),w,b
  4645  0017FE  26D9               	addwf	fsr2l,f,c
  4646  001800  5165               	movf	(stop@mR+1)& (0+255),w,b
  4647  001802  22DA               	addwfc	fsr2h,f,c
  4648  001804  0E01               	movlw	1
  4649  001806  6EDF               	movwf	indf2,c
  4650                           
  4651                           ; BSR set to: 0
  4652  001808  0012               	return		;funcret
  4653  00180A                     __end_of_stop:
  4654                           	opt stack 0
  4655                           tblptru	equ	0xFF8
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon	equ	0xFF2
  4659                           postinc0	equ	0xFEE
  4660                           wreg	equ	0xFE8
  4661                           indf1	equ	0xFE7
  4662                           plusw1	equ	0xFE3
  4663                           fsr1h	equ	0xFE2
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           plusw2	equ	0xFDB
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _setMotorPWM *****************
  4674 ;; Defined at:
  4675 ;;		line 31 in file "dc_motor.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4678 ;;		 -> main@mR(9), main@mL(9), 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  PWMduty         2    0[BANK0 ] int 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;		None               void
  4683 ;; Registers used:
  4684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4690 ;;      Params:         2       0       0       0
  4691 ;;      Locals:         0       2       0       0
  4692 ;;      Temps:          5       0       0       0
  4693 ;;      Totals:         7       2       0       0
  4694 ;;Total ram usage:        9 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    4
  4697 ;; This function calls:
  4698 ;;		___awdiv
  4699 ;;		___wmul
  4700 ;; This function is called by:
  4701 ;;		_stop
  4702 ;;		_fullSpeed
  4703 ;;		_setMotorFullSpeed
  4704 ;;		_stopMotor
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text16
  4709  0013C0                     __ptext16:
  4710                           	opt stack 0
  4711  0013C0                     _setMotorPWM:
  4712                           	opt stack 24
  4713                           
  4714                           ;dc_motor.c: 33: int PWMduty;
  4715                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;incstack = 0
  4719  0013C0  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4720  0013C4  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4721  0013C8  50DF               	movf	indf2,w,c
  4722  0013CA  6E34               	movwf	??_setMotorPWM& (0+255),c
  4723  0013CC  5034               	movf	??_setMotorPWM,w,c
  4724  0013CE  6E24               	movwf	___wmul@multiplier,c
  4725  0013D0  6A25               	clrf	___wmul@multiplier+1,c
  4726  0013D2  EE20 F007          	lfsr	2,7
  4727  0013D6  5032               	movf	setMotorPWM@m,w,c
  4728  0013D8  26D9               	addwf	fsr2l,f,c
  4729  0013DA  5033               	movf	setMotorPWM@m+1,w,c
  4730  0013DC  22DA               	addwfc	fsr2h,f,c
  4731  0013DE  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4732  0013E2  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4733  0013E6  ECE1  F000         	call	___wmul	;wreg free
  4734  0013EA  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4735  0013EE  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4736  0013F2  0E00               	movlw	0
  4737  0013F4  6E2D               	movwf	___awdiv@divisor+1,c
  4738  0013F6  0E64               	movlw	100
  4739  0013F8  6E2C               	movwf	___awdiv@divisor,c
  4740  0013FA  EC4A  F00C         	call	___awdiv	;wreg free
  4741  0013FE  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4742  001402  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4743                           
  4744                           ;dc_motor.c: 37: if (m->direction)
  4745  001406  EE20 F001          	lfsr	2,1
  4746  00140A  5032               	movf	setMotorPWM@m,w,c
  4747  00140C  26D9               	addwf	fsr2l,f,c
  4748  00140E  5033               	movf	setMotorPWM@m+1,w,c
  4749  001410  22DA               	addwfc	fsr2h,f,c
  4750  001412  50DF               	movf	indf2,w,c
  4751  001414  B4D8               	btfsc	status,2,c
  4752  001416  D02E               	goto	l3022
  4753                           
  4754                           ;dc_motor.c: 38: {
  4755                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4756  001418  EE20 F006          	lfsr	2,6
  4757  00141C  5032               	movf	setMotorPWM@m,w,c
  4758  00141E  26D9               	addwf	fsr2l,f,c
  4759  001420  5033               	movf	setMotorPWM@m+1,w,c
  4760  001422  22DA               	addwfc	fsr2h,f,c
  4761  001424  50DF               	movf	indf2,w,c
  4762  001426  6E34               	movwf	??_setMotorPWM& (0+255),c
  4763  001428  0E01               	movlw	1
  4764  00142A  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4765  00142C  2A34               	incf	??_setMotorPWM,f,c
  4766  00142E  D002               	goto	u2384
  4767  001430                     u2385:
  4768  001430  90D8               	bcf	status,0,c
  4769  001432  3635               	rlcf	??_setMotorPWM+1,f,c
  4770  001434                     u2384:
  4771  001434  2E34               	decfsz	??_setMotorPWM,f,c
  4772  001436  D7FC               	goto	u2385
  4773  001438  5035               	movf	??_setMotorPWM+1,w,c
  4774  00143A  108A               	iorwf	3978,w,c	;volatile
  4775  00143C  6E8A               	movwf	3978,c	;volatile
  4776                           
  4777                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4778  00143E  EE20 F007          	lfsr	2,7
  4779  001442  5032               	movf	setMotorPWM@m,w,c
  4780  001444  26D9               	addwf	fsr2l,f,c
  4781  001446  5033               	movf	setMotorPWM@m+1,w,c
  4782  001448  22DA               	addwfc	fsr2h,f,c
  4783  00144A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4784  00144E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4785  001452  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4786  001456  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4787  00145A  1E36               	comf	??_setMotorPWM+2,f,c
  4788  00145C  1E37               	comf	??_setMotorPWM+3,f,c
  4789  00145E  4A36               	infsnz	??_setMotorPWM+2,f,c
  4790  001460  2A37               	incf	??_setMotorPWM+3,f,c
  4791  001462  5034               	movf	??_setMotorPWM,w,c
  4792  001464  2436               	addwf	??_setMotorPWM+2,w,c
  4793  001466  0100               	movlb	0	; () banked
  4794  001468  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4795  00146A  5035               	movf	??_setMotorPWM+1,w,c
  4796  00146C  2037               	addwfc	??_setMotorPWM+3,w,c
  4797  00146E  0100               	movlb	0	; () banked
  4798  001470  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4799                           
  4800                           ;dc_motor.c: 41: }
  4801  001472  D014               	goto	l37
  4802  001474                     l3022:
  4803                           
  4804                           ;dc_motor.c: 42: else
  4805                           ;dc_motor.c: 43: {
  4806                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4807  001474  EE20 F006          	lfsr	2,6
  4808  001478  5032               	movf	setMotorPWM@m,w,c
  4809  00147A  26D9               	addwf	fsr2l,f,c
  4810  00147C  5033               	movf	setMotorPWM@m+1,w,c
  4811  00147E  22DA               	addwfc	fsr2h,f,c
  4812  001480  50DF               	movf	indf2,w,c
  4813  001482  6E34               	movwf	??_setMotorPWM& (0+255),c
  4814  001484  0E01               	movlw	1
  4815  001486  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4816  001488  2A34               	incf	??_setMotorPWM,f,c
  4817  00148A  D002               	goto	u2394
  4818  00148C                     u2395:
  4819  00148C  90D8               	bcf	status,0,c
  4820  00148E  3635               	rlcf	??_setMotorPWM+1,f,c
  4821  001490                     u2394:
  4822  001490  2E34               	decfsz	??_setMotorPWM,f,c
  4823  001492  D7FC               	goto	u2395
  4824  001494  5035               	movf	??_setMotorPWM+1,w,c
  4825  001496  0AFF               	xorlw	255
  4826  001498  148A               	andwf	3978,w,c	;volatile
  4827  00149A  6E8A               	movwf	3978,c	;volatile
  4828  00149C                     l37:
  4829                           
  4830                           ;dc_motor.c: 45: }
  4831                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4832  00149C  EE20 F002          	lfsr	2,2
  4833  0014A0  5032               	movf	setMotorPWM@m,w,c
  4834  0014A2  26D9               	addwf	fsr2l,f,c
  4835  0014A4  5033               	movf	setMotorPWM@m+1,w,c
  4836  0014A6  22DA               	addwfc	fsr2h,f,c
  4837  0014A8  CFDE F034          	movff	postinc2,??_setMotorPWM
  4838  0014AC  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4839  0014B0  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4840  0014B4  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4841  0014B8  0100               	movlb	0	; () banked
  4842  0014BA  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4843  0014BC  46E8               	rlncf	wreg,f,c
  4844  0014BE  0BFC               	andlw	252
  4845  0014C0  6EDF               	movwf	indf2,c
  4846                           
  4847                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4848  0014C2  EE20 F004          	lfsr	2,4
  4849  0014C6  5032               	movf	setMotorPWM@m,w,c
  4850  0014C8  26D9               	addwf	fsr2l,f,c
  4851  0014CA  5033               	movf	setMotorPWM@m+1,w,c
  4852  0014CC  22DA               	addwfc	fsr2h,f,c
  4853  0014CE  CFDE F034          	movff	postinc2,??_setMotorPWM
  4854  0014D2  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4855  0014D6  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4856  0014DA  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4857  0014DE  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4858  0014E2  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4859  0014E6  0E06               	movlw	6
  4860  0014E8  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4861  0014EA                     u2405:
  4862  0014EA  3437               	rlcf	??_setMotorPWM+3,w,c
  4863  0014EC  3237               	rrcf	??_setMotorPWM+3,f,c
  4864  0014EE  3236               	rrcf	??_setMotorPWM+2,f,c
  4865  0014F0  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4866  0014F2  D7FB               	goto	u2405
  4867  0014F4  5036               	movf	??_setMotorPWM+2,w,c
  4868  0014F6  6EDF               	movwf	indf2,c
  4869                           
  4870                           ; BSR set to: 0
  4871  0014F8  0012               	return		;funcret
  4872  0014FA                     __end_of_setMotorPWM:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           intcon	equ	0xFF2
  4878                           postinc0	equ	0xFEE
  4879                           wreg	equ	0xFE8
  4880                           indf1	equ	0xFE7
  4881                           plusw1	equ	0xFE3
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           plusw2	equ	0xFDB
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function ___awdiv *****************
  4893 ;; Defined at:
  4894 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  dividend        2   41[COMRAM] int 
  4897 ;;  divisor         2   43[COMRAM] int 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  quotient        2   47[COMRAM] int 
  4900 ;;  sign            1   46[COMRAM] unsigned char 
  4901 ;;  counter         1   45[COMRAM] unsigned char 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  2   41[COMRAM] int 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4911 ;;      Params:         4       0       0       0
  4912 ;;      Locals:         4       0       0       0
  4913 ;;      Temps:          0       0       0       0
  4914 ;;      Totals:         8       0       0       0
  4915 ;;Total ram usage:        8 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    3
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_setMotorPWM
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text17
  4926  001894                     __ptext17:
  4927                           	opt stack 0
  4928  001894                     ___awdiv:
  4929                           	opt stack 24
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;incstack = 0
  4933  001894  0E00               	movlw	0
  4934  001896  6E2F               	movwf	___awdiv@sign,c
  4935  001898  AE2D               	btfss	___awdiv@divisor+1,7,c
  4936  00189A  D006               	goto	l2980
  4937  00189C  6C2C               	negf	___awdiv@divisor,c
  4938  00189E  1E2D               	comf	___awdiv@divisor+1,f,c
  4939  0018A0  B0D8               	btfsc	status,0,c
  4940  0018A2  2A2D               	incf	___awdiv@divisor+1,f,c
  4941  0018A4  0E01               	movlw	1
  4942  0018A6  6E2F               	movwf	___awdiv@sign,c
  4943  0018A8                     l2980:
  4944  0018A8  AE2B               	btfss	___awdiv@dividend+1,7,c
  4945  0018AA  D006               	goto	l2986
  4946  0018AC  6C2A               	negf	___awdiv@dividend,c
  4947  0018AE  1E2B               	comf	___awdiv@dividend+1,f,c
  4948  0018B0  B0D8               	btfsc	status,0,c
  4949  0018B2  2A2B               	incf	___awdiv@dividend+1,f,c
  4950  0018B4  0E01               	movlw	1
  4951  0018B6  1A2F               	xorwf	___awdiv@sign,f,c
  4952  0018B8                     l2986:
  4953  0018B8  0E00               	movlw	0
  4954  0018BA  6E31               	movwf	___awdiv@quotient+1,c
  4955  0018BC  0E00               	movlw	0
  4956  0018BE  6E30               	movwf	___awdiv@quotient,c
  4957  0018C0  502C               	movf	___awdiv@divisor,w,c
  4958  0018C2  102D               	iorwf	___awdiv@divisor+1,w,c
  4959  0018C4  B4D8               	btfsc	status,2,c
  4960  0018C6  D01C               	goto	l3008
  4961  0018C8  0E01               	movlw	1
  4962  0018CA  6E2E               	movwf	___awdiv@counter,c
  4963  0018CC  D004               	goto	l2994
  4964  0018CE                     l2992:
  4965  0018CE  90D8               	bcf	status,0,c
  4966  0018D0  362C               	rlcf	___awdiv@divisor,f,c
  4967  0018D2  362D               	rlcf	___awdiv@divisor+1,f,c
  4968  0018D4  2A2E               	incf	___awdiv@counter,f,c
  4969  0018D6                     l2994:
  4970  0018D6  AE2D               	btfss	___awdiv@divisor+1,7,c
  4971  0018D8  D7FA               	goto	l2992
  4972  0018DA                     l2996:
  4973  0018DA  90D8               	bcf	status,0,c
  4974  0018DC  3630               	rlcf	___awdiv@quotient,f,c
  4975  0018DE  3631               	rlcf	___awdiv@quotient+1,f,c
  4976  0018E0  502C               	movf	___awdiv@divisor,w,c
  4977  0018E2  5C2A               	subwf	___awdiv@dividend,w,c
  4978  0018E4  502D               	movf	___awdiv@divisor+1,w,c
  4979  0018E6  582B               	subwfb	___awdiv@dividend+1,w,c
  4980  0018E8  A0D8               	btfss	status,0,c
  4981  0018EA  D005               	goto	l3004
  4982  0018EC  502C               	movf	___awdiv@divisor,w,c
  4983  0018EE  5E2A               	subwf	___awdiv@dividend,f,c
  4984  0018F0  502D               	movf	___awdiv@divisor+1,w,c
  4985  0018F2  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4986  0018F4  8030               	bsf	___awdiv@quotient,0,c
  4987  0018F6                     l3004:
  4988  0018F6  90D8               	bcf	status,0,c
  4989  0018F8  322D               	rrcf	___awdiv@divisor+1,f,c
  4990  0018FA  322C               	rrcf	___awdiv@divisor,f,c
  4991  0018FC  2E2E               	decfsz	___awdiv@counter,f,c
  4992  0018FE  D7ED               	goto	l2996
  4993  001900                     l3008:
  4994  001900  502F               	movf	___awdiv@sign,w,c
  4995  001902  B4D8               	btfsc	status,2,c
  4996  001904  D004               	goto	l3012
  4997  001906  6C30               	negf	___awdiv@quotient,c
  4998  001908  1E31               	comf	___awdiv@quotient+1,f,c
  4999  00190A  B0D8               	btfsc	status,0,c
  5000  00190C  2A31               	incf	___awdiv@quotient+1,f,c
  5001  00190E                     l3012:
  5002  00190E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5003  001912  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5004  001916  0012               	return	
  5005  001918                     __end_of___awdiv:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           indf1	equ	0xFE7
  5014                           plusw1	equ	0xFE3
  5015                           fsr1h	equ	0xFE2
  5016                           fsr1l	equ	0xFE1
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           plusw2	equ	0xFDB
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _sprintf *****************
  5026 ;; Defined at:
  5027 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5030 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5031 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5032 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  tmpval          4    0        struct .
  5035 ;;  cp              3    0        PTR const unsigned char 
  5036 ;;  width           2   10[BANK0 ] int 
  5037 ;;  val             2    7[BANK0 ] unsigned int 
  5038 ;;  ap              2    4[BANK0 ] PTR void [1]
  5039 ;;		 -> ?_sprintf(2), 
  5040 ;;  len             2    0        unsigned int 
  5041 ;;  c               1   12[BANK0 ] char 
  5042 ;;  flag            1    9[BANK0 ] unsigned char 
  5043 ;;  prec            1    6[BANK0 ] char 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  2   47[COMRAM] int 
  5046 ;; Registers used:
  5047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5053 ;;      Params:         8       0       0       0
  5054 ;;      Locals:         0       9       0       0
  5055 ;;      Temps:          0       4       0       0
  5056 ;;      Totals:         8      13       0       0
  5057 ;;Total ram usage:       21 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    4
  5060 ;; This function calls:
  5061 ;;		___lwdiv
  5062 ;;		___lwmod
  5063 ;;		___wmul
  5064 ;;		_isdigit
  5065 ;; This function is called by:
  5066 ;;		_ScanIR
  5067 ;;		_ScanWithRange
  5068 ;;		_main
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           	psect	text18
  5073  0010BA                     __ptext18:
  5074                           	opt stack 0
  5075  0010BA                     _sprintf:
  5076                           	opt stack 26
  5077                           
  5078                           ;doprnt.c: 494: va_list ap;
  5079                           ;doprnt.c: 499: signed char c;
  5080                           ;doprnt.c: 501: int width;
  5081                           ;doprnt.c: 506: signed char prec;
  5082                           ;doprnt.c: 508: unsigned char flag;
  5083                           ;doprnt.c: 523: union {
  5084                           ;doprnt.c: 524: unsigned long vd;
  5085                           ;doprnt.c: 525: double integ;
  5086                           ;doprnt.c: 526: } tmpval;
  5087                           ;doprnt.c: 528: unsigned int val;
  5088                           ;doprnt.c: 529: unsigned len;
  5089                           ;doprnt.c: 530: const char * cp;
  5090                           ;doprnt.c: 533: *ap = __va_start();
  5091                           
  5092                           ;incstack = 0
  5093  0010BA  0E34               	movlw	low (?_sprintf+4)
  5094  0010BC  0100               	movlb	0	; () banked
  5095  0010BE  6F64               	movwf	sprintf@ap& (0+255),b
  5096  0010C0  0E00               	movlw	high (?_sprintf+4)
  5097  0010C2  0100               	movlb	0	; () banked
  5098  0010C4  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5099                           
  5100                           ;doprnt.c: 536: while(c = *f++) {
  5101  0010C6  D168               	goto	l3180
  5102  0010C8                     l3074:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;doprnt.c: 538: if(c != '%')
  5106  0010C8  0E25               	movlw	37
  5107  0010CA  0100               	movlb	0	; () banked
  5108  0010CC  196C               	xorwf	sprintf@c& (0+255),w,b
  5109  0010CE  B4D8               	btfsc	status,2,c
  5110  0010D0  D009               	goto	l3080
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 540: {
  5114                           ;doprnt.c: 541: ((*sp++ = (c)));
  5115  0010D2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5116  0010D6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5117  0010DA  C06C  FFDF         	movff	sprintf@c,indf2
  5118                           
  5119                           ; BSR set to: 0
  5120  0010DE  4A30               	infsnz	sprintf@sp,f,c
  5121  0010E0  2A31               	incf	sprintf@sp+1,f,c
  5122                           
  5123                           ;doprnt.c: 542: continue;
  5124  0010E2  D15A               	goto	l3180
  5125  0010E4                     l3080:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 543: }
  5129                           ;doprnt.c: 546: width = 0;
  5130  0010E4  0E00               	movlw	0
  5131  0010E6  0100               	movlb	0	; () banked
  5132  0010E8  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5133  0010EA  0E00               	movlw	0
  5134  0010EC  6F6A               	movwf	sprintf@width& (0+255),b
  5135                           
  5136                           ;doprnt.c: 548: flag = 0;
  5137  0010EE  0E00               	movlw	0
  5138  0010F0  0100               	movlb	0	; () banked
  5139  0010F2  6F69               	movwf	sprintf@flag& (0+255),b
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 551: switch(*f) {
  5143                           
  5144                           ;doprnt.c: 550: for(;;) {
  5145  0010F4  D004               	goto	l3086
  5146  0010F6                     l3082:
  5147                           
  5148                           ;doprnt.c: 580: flag |= 0x04;
  5149  0010F6  0100               	movlb	0	; () banked
  5150  0010F8  8569               	bsf	sprintf@flag& (0+255),2,b
  5151                           
  5152                           ;doprnt.c: 581: f++;
  5153  0010FA  4A32               	infsnz	sprintf@f,f,c
  5154  0010FC  2A33               	incf	sprintf@f+1,f,c
  5155  0010FE                     l3086:
  5156  0010FE  C032  FFF6         	movff	sprintf@f,tblptrl
  5157  001102  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5158  001106                     	if	0	;tblptru may be non-zero
  5159  001106                     	endif
  5160  001106                     	if	0	;tblptru may be non-zero
  5161  001106                     	endif
  5162  001106  0008               	tblrd		*
  5163  001108  50F5               	movf	tablat,w,c
  5164                           
  5165                           ; Switch size 1, requested type "space"
  5166                           ; Number of cases is 1, Range of values is 48 to 48
  5167                           ; switch strategies available:
  5168                           ; Name         Instructions Cycles
  5169                           ; simple_byte            4     3 (average)
  5170                           ;	Chosen strategy is simple_byte
  5171  00110A  0A30               	xorlw	48	; case 48
  5172  00110C  B4D8               	btfsc	status,2,c
  5173  00110E  D7F3               	goto	l3082
  5174                           
  5175                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5176                           
  5177                           ;doprnt.c: 586: }
  5178                           
  5179                           ;doprnt.c: 585: break;
  5180  001110  C032  FFF6         	movff	sprintf@f,tblptrl
  5181  001114  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5182  001118                     	if	0	;tblptru may be non-zero
  5183  001118                     	endif
  5184  001118                     	if	0	;tblptru may be non-zero
  5185  001118                     	endif
  5186  001118  0008               	tblrd		*
  5187  00111A  50F5               	movf	tablat,w,c
  5188  00111C  EC05  F001         	call	_isdigit
  5189  001120  A0D8               	btfss	status,0,c
  5190  001122  D03E               	goto	l3102
  5191                           
  5192                           ;doprnt.c: 598: width = 0;
  5193  001124  0E00               	movlw	0
  5194  001126  0100               	movlb	0	; () banked
  5195  001128  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5196  00112A  0E00               	movlw	0
  5197  00112C  6F6A               	movwf	sprintf@width& (0+255),b
  5198  00112E                     l3092:
  5199                           
  5200                           ;doprnt.c: 600: width *= 10;
  5201  00112E  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5202  001132  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5203  001136  0E00               	movlw	0
  5204  001138  6E27               	movwf	___wmul@multiplicand+1,c
  5205  00113A  0E0A               	movlw	10
  5206  00113C  6E26               	movwf	___wmul@multiplicand,c
  5207  00113E  ECE1  F000         	call	___wmul	;wreg free
  5208  001142  C024  F06A         	movff	?___wmul,sprintf@width
  5209  001146  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5210                           
  5211                           ;doprnt.c: 601: width += *f++ - '0';
  5212  00114A  0ED0               	movlw	208
  5213  00114C  0100               	movlb	0	; () banked
  5214  00114E  6F60               	movwf	??_sprintf& (0+255),b
  5215  001150  0EFF               	movlw	255
  5216  001152  0100               	movlb	0	; () banked
  5217  001154  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5218  001156  C032  FFF6         	movff	sprintf@f,tblptrl
  5219  00115A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5220  00115E                     	if	0	;tblptru may be non-zero
  5221  00115E                     	endif
  5222  00115E                     	if	0	;tblptru may be non-zero
  5223  00115E                     	endif
  5224  00115E  0008               	tblrd		*
  5225  001160  50F5               	movf	tablat,w,c
  5226  001162  0100               	movlb	0	; () banked
  5227  001164  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5228  001166  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5229  001168  0100               	movlb	0	; () banked
  5230  00116A  5160               	movf	??_sprintf& (0+255),w,b
  5231  00116C  0100               	movlb	0	; () banked
  5232  00116E  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5233  001170  0100               	movlb	0	; () banked
  5234  001172  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5235  001174  0100               	movlb	0	; () banked
  5236  001176  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5237  001178  0100               	movlb	0	; () banked
  5238  00117A  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5239  00117C  0100               	movlb	0	; () banked
  5240  00117E  276A               	addwf	sprintf@width& (0+255),f,b
  5241  001180  0100               	movlb	0	; () banked
  5242  001182  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5243  001184  0100               	movlb	0	; () banked
  5244  001186  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5245                           
  5246                           ; BSR set to: 0
  5247  001188  4A32               	infsnz	sprintf@f,f,c
  5248  00118A  2A33               	incf	sprintf@f+1,f,c
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5252  00118C  C032  FFF6         	movff	sprintf@f,tblptrl
  5253  001190  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5254  001194                     	if	0	;tblptru may be non-zero
  5255  001194                     	endif
  5256  001194                     	if	0	;tblptru may be non-zero
  5257  001194                     	endif
  5258  001194  0008               	tblrd		*
  5259  001196  50F5               	movf	tablat,w,c
  5260  001198  EC05  F001         	call	_isdigit
  5261  00119C  B0D8               	btfsc	status,0,c
  5262  00119E  D7C7               	goto	l3092
  5263  0011A0                     l3102:
  5264  0011A0  C032  FFF6         	movff	sprintf@f,tblptrl
  5265  0011A4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5266  0011A8  4A32               	infsnz	sprintf@f,f,c
  5267  0011AA  2A33               	incf	sprintf@f+1,f,c
  5268  0011AC                     	if	0	;tblptru may be non-zero
  5269  0011AC                     	endif
  5270  0011AC                     	if	0	;tblptru may be non-zero
  5271  0011AC                     	endif
  5272  0011AC  0008               	tblrd		*
  5273  0011AE  CFF5 F06C          	movff	tablat,sprintf@c
  5274  0011B2  0100               	movlb	0	; () banked
  5275  0011B4  516C               	movf	sprintf@c& (0+255),w,b
  5276                           
  5277                           ; Switch size 1, requested type "space"
  5278                           ; Number of cases is 3, Range of values is 0 to 105
  5279                           ; switch strategies available:
  5280                           ; Name         Instructions Cycles
  5281                           ; simple_byte           10     6 (average)
  5282                           ;	Chosen strategy is simple_byte
  5283  0011B6  0A00               	xorlw	0	; case 0
  5284  0011B8  B4D8               	btfsc	status,2,c
  5285  0011BA  D0FB               	goto	l3182
  5286  0011BC  0A64               	xorlw	100	; case 100
  5287  0011BE  B4D8               	btfsc	status,2,c
  5288  0011C0  D003               	goto	l3104
  5289  0011C2  0A0D               	xorlw	13	; case 105
  5290  0011C4  A4D8               	btfss	status,2,c
  5291  0011C6  D0E8               	goto	l3180
  5292  0011C8                     l3104:
  5293                           
  5294                           ;doprnt.c: 1253: {
  5295                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5296  0011C8  C064  FFD9         	movff	sprintf@ap,fsr2l
  5297  0011CC  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5298  0011D0  CFDE F067          	movff	postinc2,sprintf@val
  5299  0011D4  CFDD F068          	movff	postdec2,sprintf@val+1
  5300  0011D8  0E02               	movlw	2
  5301  0011DA  0100               	movlb	0	; () banked
  5302  0011DC  2764               	addwf	sprintf@ap& (0+255),f,b
  5303  0011DE  0E00               	movlw	0
  5304  0011E0  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1261: if((int)val < 0) {
  5308  0011E2  0100               	movlb	0	; () banked
  5309  0011E4  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5310  0011E6  D008               	goto	l3114
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1262: flag |= 0x03;
  5314  0011E8  0E03               	movlw	3
  5315  0011EA  0100               	movlb	0	; () banked
  5316  0011EC  1369               	iorwf	sprintf@flag& (0+255),f,b
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;doprnt.c: 1263: val = -val;
  5320  0011EE  0100               	movlb	0	; () banked
  5321  0011F0  6D67               	negf	sprintf@val& (0+255),b
  5322  0011F2  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5323  0011F4  B0D8               	btfsc	status,0,c
  5324  0011F6  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5325  0011F8                     l3114:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1264: }
  5329                           ;doprnt.c: 1266: }
  5330                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5331  0011F8  0E01               	movlw	1
  5332  0011FA  0100               	movlb	0	; () banked
  5333  0011FC  6F6C               	movwf	sprintf@c& (0+255),b
  5334  0011FE                     l3116:
  5335                           
  5336                           ; BSR set to: 0
  5337  0011FE  0E05               	movlw	5
  5338  001200  0100               	movlb	0	; () banked
  5339  001202  196C               	xorwf	sprintf@c& (0+255),w,b
  5340  001204  B4D8               	btfsc	status,2,c
  5341  001206  D016               	goto	l3128
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 1306: if(val < dpowers[c])
  5345                           
  5346                           ; BSR set to: 0
  5347                           
  5348                           ; BSR set to: 0
  5349  001208  0100               	movlb	0	; () banked
  5350  00120A  516C               	movf	sprintf@c& (0+255),w,b
  5351  00120C  0D02               	mullw	2
  5352  00120E  0E01               	movlw	low _dpowers
  5353  001210  24F3               	addwf	prodl,w,c
  5354  001212  6EF6               	movwf	tblptrl,c
  5355  001214  0E03               	movlw	high _dpowers
  5356  001216  20F4               	addwfc	prodh,w,c
  5357  001218  6EF7               	movwf	tblptrh,c
  5358  00121A                     	if	0	;There are less than 3 active tblptr bytes
  5359  00121A                     	endif
  5360  00121A  0009               	tblrd		*+
  5361  00121C  50F5               	movf	tablat,w,c
  5362  00121E  0100               	movlb	0	; () banked
  5363  001220  5D67               	subwf	sprintf@val& (0+255),w,b
  5364  001222  0009               	tblrd		*+
  5365  001224  50F5               	movf	tablat,w,c
  5366  001226  0100               	movlb	0	; () banked
  5367  001228  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5368  00122A  A0D8               	btfss	status,0,c
  5369  00122C  D003               	goto	l3128
  5370                           
  5371                           ; BSR set to: 0
  5372                           
  5373                           ; BSR set to: 0
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;doprnt.c: 1307: break;
  5377  00122E  0100               	movlb	0	; () banked
  5378  001230  2B6C               	incf	sprintf@c& (0+255),f,b
  5379  001232  D7E5               	goto	l3116
  5380  001234                     l3128:
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5384  001234  0100               	movlb	0	; () banked
  5385  001236  516A               	movf	sprintf@width& (0+255),w,b
  5386  001238  0100               	movlb	0	; () banked
  5387  00123A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5388  00123C  B4D8               	btfsc	status,2,c
  5389  00123E  D00B               	goto	l3134
  5390                           
  5391                           ; BSR set to: 0
  5392  001240  C069  F060         	movff	sprintf@flag,??_sprintf
  5393  001244  0E03               	movlw	3
  5394  001246  0100               	movlb	0	; () banked
  5395  001248  1760               	andwf	??_sprintf& (0+255),f,b
  5396  00124A  B4D8               	btfsc	status,2,c
  5397  00124C  D004               	goto	l3134
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 1346: width--;
  5401  00124E  0100               	movlb	0	; () banked
  5402  001250  076A               	decf	sprintf@width& (0+255),f,b
  5403  001252  A0D8               	btfss	status,0,c
  5404  001254  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5405  001256                     l3134:
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 1381: if(width > c)
  5409  001256  0E80               	movlw	128
  5410  001258  0100               	movlb	0	; () banked
  5411  00125A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5412  00125C  0E7F               	movlw	127
  5413  00125E  0100               	movlb	0	; () banked
  5414  001260  6F60               	movwf	??_sprintf& (0+255),b
  5415  001262  0100               	movlb	0	; () banked
  5416  001264  516A               	movf	sprintf@width& (0+255),w,b
  5417  001266  0100               	movlb	0	; () banked
  5418  001268  5D6C               	subwf	sprintf@c& (0+255),w,b
  5419  00126A  0100               	movlb	0	; () banked
  5420  00126C  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5421  00126E  0A80               	xorlw	128
  5422  001270  0100               	movlb	0	; () banked
  5423  001272  5960               	subwfb	??_sprintf& (0+255),w,b
  5424  001274  B0D8               	btfsc	status,0,c
  5425  001276  D00B               	goto	l3138
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1382: width -= c;
  5429  001278  0100               	movlb	0	; () banked
  5430  00127A  516C               	movf	sprintf@c& (0+255),w,b
  5431  00127C  0100               	movlb	0	; () banked
  5432  00127E  5F6A               	subwf	sprintf@width& (0+255),f,b
  5433  001280  0E00               	movlw	0
  5434  001282  0100               	movlb	0	; () banked
  5435  001284  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5436  001286  0EFF               	movlw	255
  5437  001288  0100               	movlb	0	; () banked
  5438  00128A  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5439  00128C  D005               	goto	l3140
  5440  00128E                     l3138:
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;doprnt.c: 1383: else
  5444                           ;doprnt.c: 1384: width = 0;
  5445  00128E  0E00               	movlw	0
  5446  001290  0100               	movlb	0	; () banked
  5447  001292  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5448  001294  0E00               	movlw	0
  5449  001296  6F6A               	movwf	sprintf@width& (0+255),b
  5450  001298                     l3140:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;doprnt.c: 1387: if(flag & 0x04) {
  5454  001298  0100               	movlb	0	; () banked
  5455  00129A  A569               	btfss	sprintf@flag& (0+255),2,b
  5456  00129C  D022               	goto	l3156
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;doprnt.c: 1392: if(flag & 0x03)
  5460  00129E  C069  F060         	movff	sprintf@flag,??_sprintf
  5461  0012A2  0E03               	movlw	3
  5462  0012A4  0100               	movlb	0	; () banked
  5463  0012A6  1760               	andwf	??_sprintf& (0+255),f,b
  5464  0012A8  B4D8               	btfsc	status,2,c
  5465  0012AA  D008               	goto	l3148
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5469  0012AC  C030  FFD9         	movff	sprintf@sp,fsr2l
  5470  0012B0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5471  0012B4  0E2D               	movlw	45
  5472  0012B6  6EDF               	movwf	indf2,c
  5473                           
  5474                           ; BSR set to: 0
  5475  0012B8  4A30               	infsnz	sprintf@sp,f,c
  5476  0012BA  2A31               	incf	sprintf@sp+1,f,c
  5477  0012BC                     l3148:
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;doprnt.c: 1415: if(width)
  5481  0012BC  0100               	movlb	0	; () banked
  5482  0012BE  516A               	movf	sprintf@width& (0+255),w,b
  5483  0012C0  0100               	movlb	0	; () banked
  5484  0012C2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5485  0012C4  B4D8               	btfsc	status,2,c
  5486  0012C6  D034               	goto	l3170
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5490                           
  5491                           ; BSR set to: 0
  5492                           
  5493                           ;doprnt.c: 1416: do
  5494  0012C8  C030  FFD9         	movff	sprintf@sp,fsr2l
  5495  0012CC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5496  0012D0  0E30               	movlw	48
  5497  0012D2  6EDF               	movwf	indf2,c
  5498                           
  5499                           ; BSR set to: 0
  5500  0012D4  4A30               	infsnz	sprintf@sp,f,c
  5501  0012D6  2A31               	incf	sprintf@sp+1,f,c
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 1418: while(--width);
  5505  0012D8  0100               	movlb	0	; () banked
  5506  0012DA  076A               	decf	sprintf@width& (0+255),f,b
  5507  0012DC  A0D8               	btfss	status,0,c
  5508  0012DE  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5509  0012E0  D7ED               	goto	l3148
  5510  0012E2                     l3156:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;doprnt.c: 1422: {
  5514                           ;doprnt.c: 1424: if(width
  5515                           ;doprnt.c: 1428: )
  5516  0012E2  0100               	movlb	0	; () banked
  5517  0012E4  516A               	movf	sprintf@width& (0+255),w,b
  5518  0012E6  0100               	movlb	0	; () banked
  5519  0012E8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5520  0012EA  B4D8               	btfsc	status,2,c
  5521  0012EC  D012               	goto	l3164
  5522  0012EE                     l3158:
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5526  0012EE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5527  0012F2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5528  0012F6  0E20               	movlw	32
  5529  0012F8  6EDF               	movwf	indf2,c
  5530                           
  5531                           ; BSR set to: 0
  5532  0012FA  4A30               	infsnz	sprintf@sp,f,c
  5533  0012FC  2A31               	incf	sprintf@sp+1,f,c
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 1431: while(--width);
  5537  0012FE  0100               	movlb	0	; () banked
  5538  001300  076A               	decf	sprintf@width& (0+255),f,b
  5539  001302  A0D8               	btfss	status,0,c
  5540  001304  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5541  001306  0100               	movlb	0	; () banked
  5542  001308  516A               	movf	sprintf@width& (0+255),w,b
  5543  00130A  0100               	movlb	0	; () banked
  5544  00130C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5545  00130E  A4D8               	btfss	status,2,c
  5546  001310  D7EE               	goto	l3158
  5547  001312                     l3164:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 1438: if(flag & 0x03)
  5551  001312  C069  F060         	movff	sprintf@flag,??_sprintf
  5552  001316  0E03               	movlw	3
  5553  001318  0100               	movlb	0	; () banked
  5554  00131A  1760               	andwf	??_sprintf& (0+255),f,b
  5555  00131C  B4D8               	btfsc	status,2,c
  5556  00131E  D008               	goto	l3170
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5560  001320  C030  FFD9         	movff	sprintf@sp,fsr2l
  5561  001324  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5562  001328  0E2D               	movlw	45
  5563  00132A  6EDF               	movwf	indf2,c
  5564                           
  5565                           ; BSR set to: 0
  5566  00132C  4A30               	infsnz	sprintf@sp,f,c
  5567  00132E  2A31               	incf	sprintf@sp+1,f,c
  5568  001330                     l3170:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 1469: }
  5572                           ;doprnt.c: 1472: prec = c;
  5573  001330  C06C  F066         	movff	sprintf@c,sprintf@prec
  5574                           
  5575                           ;doprnt.c: 1474: while(prec--) {
  5576  001334  D02B               	goto	l3178
  5577  001336                     l3172:
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;doprnt.c: 1478: {
  5581                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5582  001336  0100               	movlb	0	; () banked
  5583  001338  5166               	movf	sprintf@prec& (0+255),w,b
  5584  00133A  0D02               	mullw	2
  5585  00133C  0E01               	movlw	low _dpowers
  5586  00133E  24F3               	addwf	prodl,w,c
  5587  001340  6EF6               	movwf	tblptrl,c
  5588  001342  0E03               	movlw	high _dpowers
  5589  001344  20F4               	addwfc	prodh,w,c
  5590  001346  6EF7               	movwf	tblptrh,c
  5591  001348                     	if	0	;There are less than 3 active tblptr bytes
  5592  001348                     	endif
  5593  001348  0009               	tblrd		*+
  5594  00134A  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5595  00134E  000A               	tblrd		*-
  5596  001350  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5597  001354  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5598  001358  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5599  00135C  EC99  F00D         	call	___lwdiv	;wreg free
  5600  001360  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5601  001364  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5602  001368  0E00               	movlw	0
  5603  00136A  6E2E               	movwf	___lwmod@divisor+1,c
  5604  00136C  0E0A               	movlw	10
  5605  00136E  6E2D               	movwf	___lwmod@divisor,c
  5606  001370  ECC2  F00D         	call	___lwmod	;wreg free
  5607  001374  502B               	movf	?___lwmod,w,c
  5608  001376  0F30               	addlw	48
  5609  001378  0100               	movlb	0	; () banked
  5610  00137A  6F6C               	movwf	sprintf@c& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 1523: }
  5614                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5615  00137C  C030  FFD9         	movff	sprintf@sp,fsr2l
  5616  001380  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5617  001384  C06C  FFDF         	movff	sprintf@c,indf2
  5618                           
  5619                           ; BSR set to: 0
  5620  001388  4A30               	infsnz	sprintf@sp,f,c
  5621  00138A  2A31               	incf	sprintf@sp+1,f,c
  5622  00138C                     l3178:
  5623                           
  5624                           ; BSR set to: 0
  5625  00138C  0100               	movlb	0	; () banked
  5626  00138E  0766               	decf	sprintf@prec& (0+255),f,b
  5627  001390  0100               	movlb	0	; () banked
  5628  001392  2966               	incf	sprintf@prec& (0+255),w,b
  5629  001394  A4D8               	btfss	status,2,c
  5630  001396  D7CF               	goto	l3172
  5631  001398                     l3180:
  5632  001398  C032  FFF6         	movff	sprintf@f,tblptrl
  5633  00139C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5634  0013A0  4A32               	infsnz	sprintf@f,f,c
  5635  0013A2  2A33               	incf	sprintf@f+1,f,c
  5636  0013A4                     	if	0	;tblptru may be non-zero
  5637  0013A4                     	endif
  5638  0013A4                     	if	0	;tblptru may be non-zero
  5639  0013A4                     	endif
  5640  0013A4  0008               	tblrd		*
  5641  0013A6  CFF5 F06C          	movff	tablat,sprintf@c
  5642  0013AA  0100               	movlb	0	; () banked
  5643  0013AC  516C               	movf	sprintf@c& (0+255),w,b
  5644  0013AE  A4D8               	btfss	status,2,c
  5645  0013B0  D68B               	goto	l3074
  5646  0013B2                     l3182:
  5647                           
  5648                           ;doprnt.c: 1538: *sp = 0;
  5649  0013B2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5650  0013B6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5651  0013BA  0E00               	movlw	0
  5652  0013BC  6EDF               	movwf	indf2,c
  5653  0013BE  0012               	return	
  5654  0013C0                     __end_of_sprintf:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           plusw1	equ	0xFE3
  5667                           fsr1h	equ	0xFE2
  5668                           fsr1l	equ	0xFE1
  5669                           indf2	equ	0xFDF
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           plusw2	equ	0xFDB
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function _isdigit *****************
  5678 ;; Defined at:
  5679 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  c               1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  c               1   37[COMRAM] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;		None               void
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5693 ;;      Params:         0       0       0       0
  5694 ;;      Locals:         2       0       0       0
  5695 ;;      Temps:          1       0       0       0
  5696 ;;      Totals:         3       0       0       0
  5697 ;;Total ram usage:        3 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    3
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_sprintf
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text19
  5708  00020A                     __ptext19:
  5709                           	opt stack 0
  5710  00020A                     _isdigit:
  5711                           	opt stack 26
  5712                           
  5713                           ;incstack = 0
  5714                           ;isdigit@c stored from wreg
  5715  00020A  6E26               	movwf	isdigit@c,c
  5716  00020C  0E00               	movlw	0
  5717  00020E  6E25               	movwf	_isdigit$2084,c
  5718  000210  0E3A               	movlw	58
  5719  000212  6026               	cpfslt	isdigit@c,c
  5720  000214  D005               	goto	l2158
  5721  000216  0E2F               	movlw	47
  5722  000218  6426               	cpfsgt	isdigit@c,c
  5723  00021A  D002               	goto	l2158
  5724  00021C  0E01               	movlw	1
  5725  00021E  6E25               	movwf	_isdigit$2084,c
  5726  000220                     l2158:
  5727  000220  C025  F024         	movff	_isdigit$2084,??_isdigit
  5728  000224  3024               	rrcf	??_isdigit,w,c
  5729  000226  0012               	return	
  5730  000228                     __end_of_isdigit:
  5731                           	opt stack 0
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           indf1	equ	0xFE7
  5742                           plusw1	equ	0xFE3
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function ___wmul *****************
  5754 ;; Defined at:
  5755 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  multiplier      2   35[COMRAM] unsigned int 
  5758 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;  product         2   39[COMRAM] unsigned int 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  2   35[COMRAM] unsigned int 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0, prodl, prodh
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5770 ;;      Params:         4       0       0       0
  5771 ;;      Locals:         2       0       0       0
  5772 ;;      Temps:          0       0       0       0
  5773 ;;      Totals:         6       0       0       0
  5774 ;;Total ram usage:        6 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    3
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_setMotorPWM
  5781 ;;		_sprintf
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text20
  5786  0001C2                     __ptext20:
  5787                           	opt stack 0
  5788  0001C2                     ___wmul:
  5789                           	opt stack 24
  5790                           
  5791                           ;incstack = 0
  5792  0001C2  5024               	movf	___wmul@multiplier,w,c
  5793  0001C4  0226               	mulwf	___wmul@multiplicand,c
  5794  0001C6  CFF3 F028          	movff	prodl,___wmul@product
  5795  0001CA  CFF4 F029          	movff	prodh,___wmul@product+1
  5796  0001CE  5024               	movf	___wmul@multiplier,w,c
  5797  0001D0  0227               	mulwf	___wmul@multiplicand+1,c
  5798  0001D2  50F3               	movf	prodl,w,c
  5799  0001D4  2629               	addwf	___wmul@product+1,f,c
  5800  0001D6  5025               	movf	___wmul@multiplier+1,w,c
  5801  0001D8  0226               	mulwf	___wmul@multiplicand,c
  5802  0001DA  50F3               	movf	prodl,w,c
  5803  0001DC  2629               	addwf	___wmul@product+1,f,c
  5804  0001DE  C028  F024         	movff	___wmul@product,?___wmul
  5805  0001E2  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5806  0001E6  0012               	return	
  5807  0001E8                     __end_of___wmul:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           indf1	equ	0xFE7
  5819                           plusw1	equ	0xFE3
  5820                           fsr1h	equ	0xFE2
  5821                           fsr1l	equ	0xFE1
  5822                           indf2	equ	0xFDF
  5823                           postinc2	equ	0xFDE
  5824                           postdec2	equ	0xFDD
  5825                           plusw2	equ	0xFDB
  5826                           fsr2h	equ	0xFDA
  5827                           fsr2l	equ	0xFD9
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function ___lwmod *****************
  5831 ;; Defined at:
  5832 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  dividend        2   42[COMRAM] unsigned int 
  5835 ;;  divisor         2   44[COMRAM] unsigned int 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  counter         1   46[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  2   42[COMRAM] unsigned int 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5847 ;;      Params:         4       0       0       0
  5848 ;;      Locals:         1       0       0       0
  5849 ;;      Temps:          0       0       0       0
  5850 ;;      Totals:         5       0       0       0
  5851 ;;Total ram usage:        5 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    3
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_sprintf
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text21
  5862  001B84                     __ptext21:
  5863                           	opt stack 0
  5864  001B84                     ___lwmod:
  5865                           	opt stack 26
  5866                           
  5867                           ;incstack = 0
  5868  001B84  502D               	movf	___lwmod@divisor,w,c
  5869  001B86  102E               	iorwf	___lwmod@divisor+1,w,c
  5870  001B88  B4D8               	btfsc	status,2,c
  5871  001B8A  D018               	goto	l913
  5872  001B8C  0E01               	movlw	1
  5873  001B8E  6E2F               	movwf	___lwmod@counter,c
  5874  001B90  D004               	goto	l2190
  5875  001B92                     l2188:
  5876  001B92  90D8               	bcf	status,0,c
  5877  001B94  362D               	rlcf	___lwmod@divisor,f,c
  5878  001B96  362E               	rlcf	___lwmod@divisor+1,f,c
  5879  001B98  2A2F               	incf	___lwmod@counter,f,c
  5880  001B9A                     l2190:
  5881  001B9A  AE2E               	btfss	___lwmod@divisor+1,7,c
  5882  001B9C  D7FA               	goto	l2188
  5883  001B9E                     l2192:
  5884  001B9E  502D               	movf	___lwmod@divisor,w,c
  5885  001BA0  5C2B               	subwf	___lwmod@dividend,w,c
  5886  001BA2  502E               	movf	___lwmod@divisor+1,w,c
  5887  001BA4  582C               	subwfb	___lwmod@dividend+1,w,c
  5888  001BA6  A0D8               	btfss	status,0,c
  5889  001BA8  D004               	goto	l2196
  5890  001BAA  502D               	movf	___lwmod@divisor,w,c
  5891  001BAC  5E2B               	subwf	___lwmod@dividend,f,c
  5892  001BAE  502E               	movf	___lwmod@divisor+1,w,c
  5893  001BB0  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5894  001BB2                     l2196:
  5895  001BB2  90D8               	bcf	status,0,c
  5896  001BB4  322E               	rrcf	___lwmod@divisor+1,f,c
  5897  001BB6  322D               	rrcf	___lwmod@divisor,f,c
  5898  001BB8  2E2F               	decfsz	___lwmod@counter,f,c
  5899  001BBA  D7F1               	goto	l2192
  5900  001BBC                     l913:
  5901  001BBC  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5902  001BC0  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5903  001BC4  0012               	return		;funcret
  5904  001BC6                     __end_of___lwmod:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           indf1	equ	0xFE7
  5916                           plusw1	equ	0xFE3
  5917                           fsr1h	equ	0xFE2
  5918                           fsr1l	equ	0xFE1
  5919                           indf2	equ	0xFDF
  5920                           postinc2	equ	0xFDE
  5921                           postdec2	equ	0xFDD
  5922                           plusw2	equ	0xFDB
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function ___lwdiv *****************
  5928 ;; Defined at:
  5929 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  dividend        2   35[COMRAM] unsigned int 
  5932 ;;  divisor         2   37[COMRAM] unsigned int 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;  quotient        2   39[COMRAM] unsigned int 
  5935 ;;  counter         1   41[COMRAM] unsigned char 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  2   35[COMRAM] unsigned int 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5945 ;;      Params:         4       0       0       0
  5946 ;;      Locals:         3       0       0       0
  5947 ;;      Temps:          0       0       0       0
  5948 ;;      Totals:         7       0       0       0
  5949 ;;Total ram usage:        7 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    3
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_sprintf
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text22
  5960  001B32                     __ptext22:
  5961                           	opt stack 0
  5962  001B32                     ___lwdiv:
  5963                           	opt stack 26
  5964                           
  5965                           ;incstack = 0
  5966  001B32  0E00               	movlw	0
  5967  001B34  6E29               	movwf	___lwdiv@quotient+1,c
  5968  001B36  0E00               	movlw	0
  5969  001B38  6E28               	movwf	___lwdiv@quotient,c
  5970  001B3A  5026               	movf	___lwdiv@divisor,w,c
  5971  001B3C  1027               	iorwf	___lwdiv@divisor+1,w,c
  5972  001B3E  B4D8               	btfsc	status,2,c
  5973  001B40  D01C               	goto	l903
  5974  001B42  0E01               	movlw	1
  5975  001B44  6E2A               	movwf	___lwdiv@counter,c
  5976  001B46  D004               	goto	l2170
  5977  001B48                     l2168:
  5978  001B48  90D8               	bcf	status,0,c
  5979  001B4A  3626               	rlcf	___lwdiv@divisor,f,c
  5980  001B4C  3627               	rlcf	___lwdiv@divisor+1,f,c
  5981  001B4E  2A2A               	incf	___lwdiv@counter,f,c
  5982  001B50                     l2170:
  5983  001B50  AE27               	btfss	___lwdiv@divisor+1,7,c
  5984  001B52  D7FA               	goto	l2168
  5985  001B54                     l2172:
  5986  001B54  90D8               	bcf	status,0,c
  5987  001B56  3628               	rlcf	___lwdiv@quotient,f,c
  5988  001B58  3629               	rlcf	___lwdiv@quotient+1,f,c
  5989  001B5A  5026               	movf	___lwdiv@divisor,w,c
  5990  001B5C  5C24               	subwf	___lwdiv@dividend,w,c
  5991  001B5E  5027               	movf	___lwdiv@divisor+1,w,c
  5992  001B60  5825               	subwfb	___lwdiv@dividend+1,w,c
  5993  001B62  A0D8               	btfss	status,0,c
  5994  001B64  D005               	goto	l2180
  5995  001B66  5026               	movf	___lwdiv@divisor,w,c
  5996  001B68  5E24               	subwf	___lwdiv@dividend,f,c
  5997  001B6A  5027               	movf	___lwdiv@divisor+1,w,c
  5998  001B6C  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5999  001B6E  8028               	bsf	___lwdiv@quotient,0,c
  6000  001B70                     l2180:
  6001  001B70  90D8               	bcf	status,0,c
  6002  001B72  3227               	rrcf	___lwdiv@divisor+1,f,c
  6003  001B74  3226               	rrcf	___lwdiv@divisor,f,c
  6004  001B76  2E2A               	decfsz	___lwdiv@counter,f,c
  6005  001B78  D7ED               	goto	l2172
  6006  001B7A                     l903:
  6007  001B7A  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  6008  001B7E  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6009  001B82  0012               	return		;funcret
  6010  001B84                     __end_of___lwdiv:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           indf1	equ	0xFE7
  6022                           plusw1	equ	0xFE3
  6023                           fsr1h	equ	0xFE2
  6024                           fsr1l	equ	0xFE1
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           plusw2	equ	0xFDB
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _grabRightIR *****************
  6034 ;; Defined at:
  6035 ;;		line 74 in file "IR_Reading.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6040 ;;  i               1   42[COMRAM] unsigned char 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  2   35[COMRAM] unsigned int 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6050 ;;      Params:         2       0       0       0
  6051 ;;      Locals:         3       0       0       0
  6052 ;;      Temps:          3       0       0       0
  6053 ;;      Totals:         8       0       0       0
  6054 ;;Total ram usage:        8 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    3
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_ScanIR
  6061 ;;		_ScanWithRange
  6062 ;;		_main
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text23
  6067  001998                     __ptext23:
  6068                           	opt stack 0
  6069  001998                     _grabRightIR:
  6070                           	opt stack 27
  6071                           
  6072                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6073                           
  6074                           ;incstack = 0
  6075  001998  0E00               	movlw	0
  6076  00199A  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6077  00199C  0E00               	movlw	0
  6078  00199E  6E29               	movwf	grabRightIR@IR_signal,c
  6079                           
  6080                           ;IR_Reading.c: 77: unsigned char i=0;
  6081  0019A0  0E00               	movlw	0
  6082  0019A2  6E2B               	movwf	grabRightIR@i,c
  6083                           
  6084                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6085  0019A4  0E00               	movlw	0
  6086  0019A6  6E2B               	movwf	grabRightIR@i,c
  6087  0019A8                     l2232:
  6088  0019A8  0E03               	movlw	3
  6089  0019AA  642B               	cpfsgt	grabRightIR@i,c
  6090  0019AC  D001               	goto	l2236
  6091  0019AE  D01E               	goto	l2242
  6092  0019B0                     l2236:
  6093                           
  6094                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6095  0019B0  5069               	movf	3945,w,c	;volatile
  6096  0019B2  6E26               	movwf	??_grabRightIR& (0+255),c
  6097  0019B4  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6098  0019B6  0E07               	movlw	7
  6099  0019B8                     u1535:
  6100  0019B8  90D8               	bcf	status,0,c
  6101  0019BA  3626               	rlcf	??_grabRightIR,f,c
  6102  0019BC  3627               	rlcf	??_grabRightIR+1,f,c
  6103  0019BE  2EE8               	decfsz	wreg,f,c
  6104  0019C0  D7FB               	goto	u1535
  6105  0019C2  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6106  0019C6  90D8               	bcf	status,0,c
  6107  0019C8  3228               	rrcf	??_grabRightIR+2,f,c
  6108  0019CA  5028               	movf	??_grabRightIR+2,w,c
  6109  0019CC  1226               	iorwf	??_grabRightIR,f,c
  6110  0019CE  0E00               	movlw	0
  6111  0019D0  1227               	iorwf	??_grabRightIR+1,f,c
  6112  0019D2  5026               	movf	??_grabRightIR,w,c
  6113  0019D4  2629               	addwf	grabRightIR@IR_signal,f,c
  6114  0019D6  5027               	movf	??_grabRightIR+1,w,c
  6115  0019D8  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6116                           
  6117                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6118  0019DA  0E82               	movlw	130
  6119  0019DC  6E26               	movwf	??_grabRightIR& (0+255),c
  6120  0019DE  0EDE               	movlw	222
  6121  0019E0                     u3257:
  6122  0019E0  2EE8               	decfsz	wreg,f,c
  6123  0019E2  D7FE               	goto	u3257
  6124  0019E4  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6125  0019E6  D7FC               	goto	u3257
  6126  0019E8  2A2B               	incf	grabRightIR@i,f,c
  6127  0019EA  D7DE               	goto	l2232
  6128  0019EC                     l2242:
  6129                           
  6130                           ;IR_Reading.c: 83: }
  6131                           ;IR_Reading.c: 85: return IR_signal>>2;
  6132  0019EC  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6133  0019F0  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6134  0019F4  90D8               	bcf	status,0,c
  6135  0019F6  3227               	rrcf	??_grabRightIR+1,f,c
  6136  0019F8  3226               	rrcf	??_grabRightIR,f,c
  6137  0019FA  90D8               	bcf	status,0,c
  6138  0019FC  3227               	rrcf	??_grabRightIR+1,f,c
  6139  0019FE  3226               	rrcf	??_grabRightIR,f,c
  6140  001A00  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6141  001A04  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6142  001A08  0012               	return	
  6143  001A0A                     __end_of_grabRightIR:
  6144                           	opt stack 0
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodh	equ	0xFF4
  6150                           prodl	equ	0xFF3
  6151                           intcon	equ	0xFF2
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           indf1	equ	0xFE7
  6155                           plusw1	equ	0xFE3
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           plusw2	equ	0xFDB
  6162                           fsr2h	equ	0xFDA
  6163                           fsr2l	equ	0xFD9
  6164                           status	equ	0xFD8
  6165                           
  6166 ;; *************** function _grabLeftIR *****************
  6167 ;; Defined at:
  6168 ;;		line 90 in file "IR_Reading.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6173 ;;  i               1   42[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  2   35[COMRAM] unsigned int 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6183 ;;      Params:         2       0       0       0
  6184 ;;      Locals:         3       0       0       0
  6185 ;;      Temps:          3       0       0       0
  6186 ;;      Totals:         8       0       0       0
  6187 ;;Total ram usage:        8 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    3
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_ScanIR
  6194 ;;		_ScanWithRange
  6195 ;;		_main
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           	psect	text24
  6200  001A0A                     __ptext24:
  6201                           	opt stack 0
  6202  001A0A                     _grabLeftIR:
  6203                           	opt stack 27
  6204                           
  6205                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6206                           
  6207                           ;incstack = 0
  6208  001A0A  0E00               	movlw	0
  6209  001A0C  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6210  001A0E  0E00               	movlw	0
  6211  001A10  6E29               	movwf	grabLeftIR@IR_signal,c
  6212                           
  6213                           ;IR_Reading.c: 93: unsigned char i=0;
  6214  001A12  0E00               	movlw	0
  6215  001A14  6E2B               	movwf	grabLeftIR@i,c
  6216                           
  6217                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6218  001A16  0E00               	movlw	0
  6219  001A18  6E2B               	movwf	grabLeftIR@i,c
  6220  001A1A                     l2248:
  6221  001A1A  0E03               	movlw	3
  6222  001A1C  642B               	cpfsgt	grabLeftIR@i,c
  6223  001A1E  D001               	goto	l2252
  6224  001A20  D01E               	goto	l2258
  6225  001A22                     l2252:
  6226                           
  6227                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6228  001A22  5067               	movf	3943,w,c	;volatile
  6229  001A24  6E26               	movwf	??_grabLeftIR& (0+255),c
  6230  001A26  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6231  001A28  0E07               	movlw	7
  6232  001A2A                     u1565:
  6233  001A2A  90D8               	bcf	status,0,c
  6234  001A2C  3626               	rlcf	??_grabLeftIR,f,c
  6235  001A2E  3627               	rlcf	??_grabLeftIR+1,f,c
  6236  001A30  2EE8               	decfsz	wreg,f,c
  6237  001A32  D7FB               	goto	u1565
  6238  001A34  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6239  001A38  90D8               	bcf	status,0,c
  6240  001A3A  3228               	rrcf	??_grabLeftIR+2,f,c
  6241  001A3C  5028               	movf	??_grabLeftIR+2,w,c
  6242  001A3E  1226               	iorwf	??_grabLeftIR,f,c
  6243  001A40  0E00               	movlw	0
  6244  001A42  1227               	iorwf	??_grabLeftIR+1,f,c
  6245  001A44  5026               	movf	??_grabLeftIR,w,c
  6246  001A46  2629               	addwf	grabLeftIR@IR_signal,f,c
  6247  001A48  5027               	movf	??_grabLeftIR+1,w,c
  6248  001A4A  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6249                           
  6250                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6251  001A4C  0E82               	movlw	130
  6252  001A4E  6E26               	movwf	??_grabLeftIR& (0+255),c
  6253  001A50  0EDE               	movlw	222
  6254  001A52                     u3267:
  6255  001A52  2EE8               	decfsz	wreg,f,c
  6256  001A54  D7FE               	goto	u3267
  6257  001A56  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6258  001A58  D7FC               	goto	u3267
  6259  001A5A  2A2B               	incf	grabLeftIR@i,f,c
  6260  001A5C  D7DE               	goto	l2248
  6261  001A5E                     l2258:
  6262                           
  6263                           ;IR_Reading.c: 99: }
  6264                           ;IR_Reading.c: 101: return IR_signal>>2;
  6265  001A5E  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6266  001A62  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6267  001A66  90D8               	bcf	status,0,c
  6268  001A68  3227               	rrcf	??_grabLeftIR+1,f,c
  6269  001A6A  3226               	rrcf	??_grabLeftIR,f,c
  6270  001A6C  90D8               	bcf	status,0,c
  6271  001A6E  3227               	rrcf	??_grabLeftIR+1,f,c
  6272  001A70  3226               	rrcf	??_grabLeftIR,f,c
  6273  001A72  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6274  001A76  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6275  001A7A  0012               	return	
  6276  001A7C                     __end_of_grabLeftIR:
  6277                           	opt stack 0
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           postinc0	equ	0xFEE
  6286                           wreg	equ	0xFE8
  6287                           indf1	equ	0xFE7
  6288                           plusw1	equ	0xFE3
  6289                           fsr1h	equ	0xFE2
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           plusw2	equ	0xFDB
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _SetLine *****************
  6300 ;; Defined at:
  6301 ;;		line 74 in file "LCD.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  line            1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  line            1   41[COMRAM] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6315 ;;      Params:         0       0       0       0
  6316 ;;      Locals:         1       0       0       0
  6317 ;;      Temps:          0       0       0       0
  6318 ;;      Totals:         1       0       0       0
  6319 ;;Total ram usage:        1 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    6
  6322 ;; This function calls:
  6323 ;;		_SendLCD
  6324 ;; This function is called by:
  6325 ;;		_ScanIR
  6326 ;;		_ScanWithRange
  6327 ;;		_main
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text25
  6332  000112                     __ptext25:
  6333                           	opt stack 0
  6334  000112                     _SetLine:
  6335                           	opt stack 24
  6336                           
  6337                           ;incstack = 0
  6338                           ;SetLine@line stored from wreg
  6339  000112  6E2A               	movwf	SetLine@line,c
  6340                           
  6341                           ;LCD.c: 75: if (line==1) {
  6342  000114  042A               	decf	SetLine@line,w,c
  6343  000116  A4D8               	btfss	status,2,c
  6344  000118  D006               	goto	l2266
  6345                           
  6346                           ;LCD.c: 76: SendLCD(0x80,0);
  6347  00011A  0E00               	movlw	0
  6348  00011C  6E28               	movwf	SendLCD@type,c
  6349  00011E  0E80               	movlw	128
  6350  000120  ECA1  F000         	call	_SendLCD
  6351                           
  6352                           ;LCD.c: 77: } else if (line==2) {
  6353  000124  D009               	goto	l2270
  6354  000126                     l2266:
  6355  000126  0E02               	movlw	2
  6356  000128  182A               	xorwf	SetLine@line,w,c
  6357  00012A  A4D8               	btfss	status,2,c
  6358  00012C  D005               	goto	l2270
  6359                           
  6360                           ;LCD.c: 78: SendLCD(0xC0,0);
  6361  00012E  0E00               	movlw	0
  6362  000130  6E28               	movwf	SendLCD@type,c
  6363  000132  0EC0               	movlw	192
  6364  000134  ECA1  F000         	call	_SendLCD
  6365  000138                     l2270:
  6366                           
  6367                           ;LCD.c: 79: }
  6368                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6369  000138  0E21               	movlw	33
  6370  00013A                     u3277:
  6371  00013A  2EE8               	decfsz	wreg,f,c
  6372  00013C  D7FE               	goto	u3277
  6373  00013E  F000               	nop	
  6374  000140  0012               	return		;funcret
  6375  000142                     __end_of_SetLine:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           postinc0	equ	0xFEE
  6385                           wreg	equ	0xFE8
  6386                           indf1	equ	0xFE7
  6387                           plusw1	equ	0xFE3
  6388                           fsr1h	equ	0xFE2
  6389                           fsr1l	equ	0xFE1
  6390                           indf2	equ	0xFDF
  6391                           postinc2	equ	0xFDE
  6392                           postdec2	equ	0xFDD
  6393                           plusw2	equ	0xFDB
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function _LCD_String *****************
  6399 ;; Defined at:
  6400 ;;		line 83 in file "LCD.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;  string          2   41[COMRAM] PTR unsigned char 
  6403 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6404 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6405 ;;		 -> STR_1(12), 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;		None               void
  6410 ;; Registers used:
  6411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6417 ;;      Params:         2       0       0       0
  6418 ;;      Locals:         0       0       0       0
  6419 ;;      Temps:          0       0       0       0
  6420 ;;      Totals:         2       0       0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    6
  6424 ;; This function calls:
  6425 ;;		_SendLCD
  6426 ;; This function is called by:
  6427 ;;		_ScanIR
  6428 ;;		_ScanWithRange
  6429 ;;		_main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text26
  6434  001A7C                     __ptext26:
  6435                           	opt stack 0
  6436  001A7C                     _LCD_String:
  6437                           	opt stack 23
  6438                           
  6439                           ;LCD.c: 85: while(*string != 0){
  6440                           
  6441                           ;incstack = 0
  6442  001A7C  D01A               	goto	l2280
  6443  001A7E                     l2274:
  6444                           
  6445                           ;LCD.c: 88: SendLCD(*string++,1);
  6446  001A7E  0E01               	movlw	1
  6447  001A80  6E28               	movwf	SendLCD@type,c
  6448  001A82  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6449  001A86  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6450  001A8A  6AF8               	clrf	tblptru,c
  6451  001A8C  0E02               	movlw	(high __ramtop+-1)
  6452  001A8E  64F7               	cpfsgt	tblptrh,c
  6453  001A90  D003               	bra	u1607
  6454  001A92  0008               	tblrd		*
  6455  001A94  50F5               	movf	tablat,w,c
  6456  001A96  D005               	bra	u1600
  6457  001A98                     u1607:
  6458  001A98  CFF6 FFE1          	movff	tblptrl,fsr1l
  6459  001A9C  CFF7 FFE2          	movff	tblptrh,fsr1h
  6460  001AA0  50E7               	movf	indf1,w,c
  6461  001AA2                     u1600:
  6462  001AA2  ECA1  F000         	call	_SendLCD
  6463  001AA6  4A2A               	infsnz	LCD_String@string,f,c
  6464  001AA8  2A2B               	incf	LCD_String@string+1,f,c
  6465                           
  6466                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6467  001AAA  0E21               	movlw	33
  6468  001AAC                     u3287:
  6469  001AAC  2EE8               	decfsz	wreg,f,c
  6470  001AAE  D7FE               	goto	u3287
  6471  001AB0  F000               	nop	
  6472  001AB2                     l2280:
  6473  001AB2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6474  001AB6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6475  001ABA  6AF8               	clrf	tblptru,c
  6476  001ABC  0E02               	movlw	(high __ramtop+-1)
  6477  001ABE  64F7               	cpfsgt	tblptrh,c
  6478  001AC0  D003               	bra	u1617
  6479  001AC2  0008               	tblrd		*
  6480  001AC4  50F5               	movf	tablat,w,c
  6481  001AC6  D005               	bra	u1610
  6482  001AC8                     u1617:
  6483  001AC8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6484  001ACC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6485  001AD0  50E7               	movf	indf1,w,c
  6486  001AD2                     u1610:
  6487  001AD2  0900               	iorlw	0
  6488  001AD4  B4D8               	btfsc	status,2,c
  6489  001AD6  0012               	return	
  6490  001AD8  D7D2               	goto	l2274
  6491  001ADA                     __end_of_LCD_String:
  6492                           	opt stack 0
  6493                           tblptru	equ	0xFF8
  6494                           tblptrh	equ	0xFF7
  6495                           tblptrl	equ	0xFF6
  6496                           tablat	equ	0xFF5
  6497                           prodh	equ	0xFF4
  6498                           prodl	equ	0xFF3
  6499                           intcon	equ	0xFF2
  6500                           postinc0	equ	0xFEE
  6501                           wreg	equ	0xFE8
  6502                           indf1	equ	0xFE7
  6503                           plusw1	equ	0xFE3
  6504                           fsr1h	equ	0xFE2
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           plusw2	equ	0xFDB
  6510                           fsr2h	equ	0xFDA
  6511                           fsr2l	equ	0xFD9
  6512                           status	equ	0xFD8
  6513                           
  6514 ;; *************** function _SendLCD *****************
  6515 ;; Defined at:
  6516 ;;		line 27 in file "LCD.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  Byte            1    wreg     unsigned char 
  6519 ;;  type            1   39[COMRAM] unsigned char 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  Byte            1   40[COMRAM] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;		None               void
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6531 ;;      Params:         1       0       0       0
  6532 ;;      Locals:         1       0       0       0
  6533 ;;      Temps:          0       0       0       0
  6534 ;;      Totals:         2       0       0       0
  6535 ;;Total ram usage:        2 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    5
  6538 ;; This function calls:
  6539 ;;		_LCDout
  6540 ;; This function is called by:
  6541 ;;		_initLCD
  6542 ;;		_SetLine
  6543 ;;		_LCD_String
  6544 ;;		_ScanIR
  6545 ;;		_ScanWithRange
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text27
  6551  000142                     __ptext27:
  6552                           	opt stack 0
  6553  000142                     _SendLCD:
  6554                           	opt stack 24
  6555                           
  6556                           ;incstack = 0
  6557                           ;SendLCD@Byte stored from wreg
  6558  000142  6E29               	movwf	SendLCD@Byte,c
  6559                           
  6560                           ;LCD.c: 30: LATAbits.LATA6=type;
  6561  000144  B028               	btfsc	SendLCD@type,0,c
  6562  000146  D002               	bra	u1395
  6563  000148  9C89               	bcf	3977,6,c	;volatile
  6564  00014A  D001               	bra	u1396
  6565  00014C                     u1395:
  6566  00014C  8C89               	bsf	3977,6,c	;volatile
  6567  00014E                     u1396:
  6568                           
  6569                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6570  00014E  3829               	swapf	SendLCD@Byte,w,c
  6571  000150  0B0F               	andlw	15
  6572  000152  0B0F               	andlw	15
  6573  000154  ECFA  F00A         	call	_LCDout
  6574                           
  6575                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6576  000158  0E06               	movlw	6
  6577  00015A                     u3297:
  6578  00015A  2EE8               	decfsz	wreg,f,c
  6579  00015C  D7FE               	goto	u3297
  6580  00015E  D000               	nop2		;nop
  6581                           
  6582                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6583  000160  5029               	movf	SendLCD@Byte,w,c
  6584  000162  0B0F               	andlw	15
  6585  000164  ECFA  F00A         	call	_LCDout
  6586                           
  6587                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6588  000168  0E21               	movlw	33
  6589  00016A                     u3307:
  6590  00016A  2EE8               	decfsz	wreg,f,c
  6591  00016C  D7FE               	goto	u3307
  6592  00016E  F000               	nop	
  6593  000170  0012               	return		;funcret
  6594  000172                     __end_of_SendLCD:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           postinc0	equ	0xFEE
  6604                           wreg	equ	0xFE8
  6605                           indf1	equ	0xFE7
  6606                           plusw1	equ	0xFE3
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           plusw2	equ	0xFDB
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617 ;; *************** function _LCDout *****************
  6618 ;; Defined at:
  6619 ;;		line 14 in file "LCD.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  number          1    wreg     unsigned char 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  number          1   38[COMRAM] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;		None               void
  6626 ;; Registers used:
  6627 ;;		wreg, status,2, status,0, cstack
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6633 ;;      Params:         0       0       0       0
  6634 ;;      Locals:         1       0       0       0
  6635 ;;      Temps:          3       0       0       0
  6636 ;;      Totals:         4       0       0       0
  6637 ;;Total ram usage:        4 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    4
  6640 ;; This function calls:
  6641 ;;		_E_TOG
  6642 ;; This function is called by:
  6643 ;;		_SendLCD
  6644 ;;		_initLCD
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text28
  6649  0015F4                     __ptext28:
  6650                           	opt stack 0
  6651  0015F4                     _LCDout:
  6652                           	opt stack 24
  6653                           
  6654                           ;incstack = 0
  6655                           ;LCDout@number stored from wreg
  6656  0015F4  6E27               	movwf	LCDout@number,c
  6657                           
  6658                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6659  0015F6  5027               	movf	LCDout@number,w,c
  6660  0015F8  6E24               	movwf	??_LCDout& (0+255),c
  6661  0015FA  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6662  0015FC  0E07               	movlw	7
  6663  0015FE                     u1285:
  6664  0015FE  90D8               	bcf	status,0,c
  6665  001600  3624               	rlcf	??_LCDout,f,c
  6666  001602  3625               	rlcf	??_LCDout+1,f,c
  6667  001604  2EE8               	decfsz	wreg,f,c
  6668  001606  D7FB               	goto	u1285
  6669  001608  0E07               	movlw	7
  6670  00160A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6671  00160C                     u1295:
  6672  00160C  3425               	rlcf	??_LCDout+1,w,c
  6673  00160E  3225               	rrcf	??_LCDout+1,f,c
  6674  001610  3224               	rrcf	??_LCDout,f,c
  6675  001612  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6676  001614  D7FB               	goto	u1295
  6677  001616  4624               	rlncf	??_LCDout,f,c
  6678  001618  508B               	movf	3979,w,c	;volatile
  6679  00161A  1824               	xorwf	??_LCDout,w,c
  6680  00161C  0BFD               	andlw	-3
  6681  00161E  1824               	xorwf	??_LCDout,w,c
  6682  001620  6E8B               	movwf	3979,c	;volatile
  6683                           
  6684                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6685  001622  5027               	movf	LCDout@number,w,c
  6686  001624  6E24               	movwf	??_LCDout& (0+255),c
  6687  001626  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6688  001628  0E06               	movlw	6
  6689  00162A                     u1305:
  6690  00162A  90D8               	bcf	status,0,c
  6691  00162C  3624               	rlcf	??_LCDout,f,c
  6692  00162E  3625               	rlcf	??_LCDout+1,f,c
  6693  001630  2EE8               	decfsz	wreg,f,c
  6694  001632  D7FB               	goto	u1305
  6695  001634  0E07               	movlw	7
  6696  001636  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6697  001638                     u1315:
  6698  001638  3425               	rlcf	??_LCDout+1,w,c
  6699  00163A  3225               	rrcf	??_LCDout+1,f,c
  6700  00163C  3224               	rrcf	??_LCDout,f,c
  6701  00163E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6702  001640  D7FB               	goto	u1315
  6703  001642  4624               	rlncf	??_LCDout,f,c
  6704  001644  4624               	rlncf	??_LCDout,f,c
  6705  001646  508B               	movf	3979,w,c	;volatile
  6706  001648  1824               	xorwf	??_LCDout,w,c
  6707  00164A  0BFB               	andlw	-5
  6708  00164C  1824               	xorwf	??_LCDout,w,c
  6709  00164E  6E8B               	movwf	3979,c	;volatile
  6710                           
  6711                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6712  001650  5027               	movf	LCDout@number,w,c
  6713  001652  6E24               	movwf	??_LCDout& (0+255),c
  6714  001654  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6715  001656  0E05               	movlw	5
  6716  001658                     u1325:
  6717  001658  90D8               	bcf	status,0,c
  6718  00165A  3624               	rlcf	??_LCDout,f,c
  6719  00165C  3625               	rlcf	??_LCDout+1,f,c
  6720  00165E  2EE8               	decfsz	wreg,f,c
  6721  001660  D7FB               	goto	u1325
  6722  001662  0E07               	movlw	7
  6723  001664  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6724  001666                     u1335:
  6725  001666  3425               	rlcf	??_LCDout+1,w,c
  6726  001668  3225               	rrcf	??_LCDout+1,f,c
  6727  00166A  3224               	rrcf	??_LCDout,f,c
  6728  00166C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6729  00166E  D7FB               	goto	u1335
  6730  001670  508C               	movf	3980,w,c	;volatile
  6731  001672  1824               	xorwf	??_LCDout,w,c
  6732  001674  0BFE               	andlw	-2
  6733  001676  1824               	xorwf	??_LCDout,w,c
  6734  001678  6E8C               	movwf	3980,c	;volatile
  6735                           
  6736                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6737  00167A  5027               	movf	LCDout@number,w,c
  6738  00167C  6E24               	movwf	??_LCDout& (0+255),c
  6739  00167E  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6740  001680  3A24               	swapf	??_LCDout,f,c
  6741  001682  3A25               	swapf	??_LCDout+1,f,c
  6742  001684  0EF0               	movlw	240
  6743  001686  1625               	andwf	??_LCDout+1,f,c
  6744  001688  5024               	movf	??_LCDout,w,c
  6745  00168A  0B0F               	andlw	15
  6746  00168C  1225               	iorwf	??_LCDout+1,f,c
  6747  00168E  0EF0               	movlw	240
  6748  001690  1624               	andwf	??_LCDout,f,c
  6749  001692  0E07               	movlw	7
  6750  001694  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6751  001696                     u1345:
  6752  001696  3425               	rlcf	??_LCDout+1,w,c
  6753  001698  3225               	rrcf	??_LCDout+1,f,c
  6754  00169A  3224               	rrcf	??_LCDout,f,c
  6755  00169C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6756  00169E  D7FB               	goto	u1345
  6757  0016A0  4624               	rlncf	??_LCDout,f,c
  6758  0016A2  508C               	movf	3980,w,c	;volatile
  6759  0016A4  1824               	xorwf	??_LCDout,w,c
  6760  0016A6  0BFD               	andlw	-3
  6761  0016A8  1824               	xorwf	??_LCDout,w,c
  6762  0016AA  6E8C               	movwf	3980,c	;volatile
  6763                           
  6764                           ;LCD.c: 21: E_TOG();
  6765  0016AC  EC79  F00E         	call	_E_TOG	;wreg free
  6766                           
  6767                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6768  0016B0  0E03               	movlw	3
  6769  0016B2                     u3317:
  6770  0016B2  2EE8               	decfsz	wreg,f,c
  6771  0016B4  D7FE               	goto	u3317
  6772  0016B6  F000               	nop	
  6773  0016B8  0012               	return		;funcret
  6774  0016BA                     __end_of_LCDout:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           indf1	equ	0xFE7
  6786                           plusw1	equ	0xFE3
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           plusw2	equ	0xFDB
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function _E_TOG *****************
  6798 ;; Defined at:
  6799 ;;		line 5 in file "LCD.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;		None               void
  6806 ;; Registers used:
  6807 ;;		wreg
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6813 ;;      Params:         0       0       0       0
  6814 ;;      Locals:         0       0       0       0
  6815 ;;      Temps:          0       0       0       0
  6816 ;;      Totals:         0       0       0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    3
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_LCDout
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text29
  6828  001CF2                     __ptext29:
  6829                           	opt stack 0
  6830  001CF2                     _E_TOG:
  6831                           	opt stack 24
  6832                           
  6833                           ;LCD.c: 8: LATCbits.LATC0=1;
  6834                           
  6835                           ;incstack = 0
  6836  001CF2  808B               	bsf	3979,0,c	;volatile
  6837                           
  6838                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6839  001CF4  0E03               	movlw	3
  6840  001CF6                     u3327:
  6841  001CF6  2EE8               	decfsz	wreg,f,c
  6842  001CF8  D7FE               	goto	u3327
  6843  001CFA  F000               	nop	
  6844                           
  6845                           ;LCD.c: 10: LATCbits.LATC0=0;
  6846  001CFC  908B               	bcf	3979,0,c	;volatile
  6847  001CFE  0012               	return		;funcret
  6848  001D00                     __end_of_E_TOG:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon	equ	0xFF2
  6857                           postinc0	equ	0xFEE
  6858                           wreg	equ	0xFE8
  6859                           indf1	equ	0xFE7
  6860                           plusw1	equ	0xFE3
  6861                           fsr1h	equ	0xFE2
  6862                           fsr1l	equ	0xFE1
  6863                           indf2	equ	0xFDF
  6864                           postinc2	equ	0xFDE
  6865                           postdec2	equ	0xFDD
  6866                           plusw2	equ	0xFDB
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function _InterruptHandlerLow *****************
  6872 ;; Defined at:
  6873 ;;		line 18 in file "main.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;		None
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;		None
  6878 ;; Return value:  Size  Location     Type
  6879 ;;		None               void
  6880 ;; Registers used:
  6881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6887 ;;      Params:         0       0       0       0
  6888 ;;      Locals:         0       0       0       0
  6889 ;;      Temps:         17       0       0       0
  6890 ;;      Totals:        17       0       0       0
  6891 ;;Total ram usage:       17 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    2
  6894 ;; This function calls:
  6895 ;;		Nothing
  6896 ;; This function is called by:
  6897 ;;		Interrupt level 1
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	intcodelo
  6902  000018                     __pintcodelo:
  6903                           	opt stack 0
  6904  000018                     _InterruptHandlerLow:
  6905                           	opt stack 23
  6906                           
  6907                           ;incstack = 0
  6908  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6909  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6910  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6911  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6912  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6913  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6914  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6915  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6916  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6917  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6918  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6919  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6920  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6921  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6922  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6923  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6924  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6925  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6926                           
  6927                           ;main.c: 20: if (PIR1bits.RCIF) {
  6928  00005E  AA9E               	btfss	3998,5,c	;volatile
  6929  000060  D016               	goto	i1l378
  6930                           
  6931                           ;main.c: 21: ReceivedString[i]=RCREG;
  6932  000062  503A               	movf	_i,w,c	;volatile
  6933  000064  0D01               	mullw	1
  6934  000066  0EE6               	movlw	low _ReceivedString
  6935  000068  24F3               	addwf	prodl,w,c
  6936  00006A  6ED9               	movwf	fsr2l,c
  6937  00006C  0E01               	movlw	high _ReceivedString
  6938  00006E  20F4               	addwfc	prodh,w,c
  6939  000070  6EDA               	movwf	fsr2h,c
  6940  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6941                           
  6942                           ;main.c: 22: RFID_Read=1;
  6943  000076  0E01               	movlw	1
  6944  000078  0101               	movlb	1	; () banked
  6945  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6946                           
  6947                           ; BSR set to: 1
  6948                           ;main.c: 23: if (i==15){
  6949  00007C  0E0F               	movlw	15
  6950  00007E  183A               	xorwf	_i,w,c	;volatile
  6951  000080  A4D8               	btfss	status,2,c
  6952  000082  D003               	goto	i1l2708
  6953                           
  6954                           ; BSR set to: 1
  6955                           ;main.c: 24: i=0;
  6956  000084  0E00               	movlw	0
  6957  000086  6E3A               	movwf	_i,c	;volatile
  6958                           
  6959                           ;main.c: 25: }else{
  6960  000088  D001               	goto	i1l2710
  6961  00008A                     i1l2708:
  6962                           
  6963                           ; BSR set to: 1
  6964                           ;main.c: 26: i++;
  6965  00008A  2A3A               	incf	_i,f,c	;volatile
  6966  00008C                     i1l2710:
  6967                           
  6968                           ; BSR set to: 1
  6969                           ;main.c: 27: }
  6970                           ;main.c: 28: PIR1bits.RCIF=0;
  6971  00008C  9A9E               	bcf	3998,5,c	;volatile
  6972  00008E                     i1l378:
  6973  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6974  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6975  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6976  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6977  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6978  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6979  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6980  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6981  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6982  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6983  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6984  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6985  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6986  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6987  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6988  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6989  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6990  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6991  0000D4  0010               	retfie	
  6992  0000D6                     __end_of_InterruptHandlerLow:
  6993                           	opt stack 0
  6994                           pclatu	equ	0xFFB
  6995                           pclath	equ	0xFFA
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           postinc0	equ	0xFEE
  7004                           fsr0h	equ	0xFEA
  7005                           fsr0l	equ	0xFE9
  7006                           wreg	equ	0xFE8
  7007                           indf1	equ	0xFE7
  7008                           plusw1	equ	0xFE3
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           bsr	equ	0xFE0
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           plusw2	equ	0xFDB
  7016                           fsr2h	equ	0xFDA
  7017                           fsr2l	equ	0xFD9
  7018                           status	equ	0xFD8
  7019                           
  7020 ;; *************** function _InterruptHandlerHigh *****************
  7021 ;; Defined at:
  7022 ;;		line 34 in file "main.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;		None
  7027 ;; Return value:  Size  Location     Type
  7028 ;;		None               void
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7036 ;;      Params:         0       0       0       0
  7037 ;;      Locals:         0       0       0       0
  7038 ;;      Temps:         14       0       0       0
  7039 ;;      Totals:        14       0       0       0
  7040 ;;Total ram usage:       14 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    1
  7043 ;; This function calls:
  7044 ;;		i2_delay_tenth_s
  7045 ;; This function is called by:
  7046 ;;		Interrupt level 2
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	intcode
  7051  000008                     __pintcode:
  7052                           	opt stack 0
  7053  000008                     _InterruptHandlerHigh:
  7054                           	opt stack 23
  7055                           
  7056                           ;incstack = 0
  7057  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7058  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7059  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7060  000012  EF05  F00C         	goto	int_func
  7061                           pclatu	equ	0xFFB
  7062                           pclath	equ	0xFFA
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           prodh	equ	0xFF4
  7068                           prodl	equ	0xFF3
  7069                           intcon	equ	0xFF2
  7070                           postinc0	equ	0xFEE
  7071                           fsr0h	equ	0xFEA
  7072                           fsr0l	equ	0xFE9
  7073                           wreg	equ	0xFE8
  7074                           indf1	equ	0xFE7
  7075                           plusw1	equ	0xFE3
  7076                           fsr1h	equ	0xFE2
  7077                           fsr1l	equ	0xFE1
  7078                           bsr	equ	0xFE0
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           plusw2	equ	0xFDB
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087                           	psect	intcode_body
  7088  00180A                     __pintcode_body:
  7089                           	opt stack 23
  7090  00180A                     int_func:
  7091                           	opt stack 23
  7092  00180A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7093  00180E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7094  001812  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7095  001816  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7096  00181A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7097  00181E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7098  001822  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7099  001826  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7100  00182A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7101  00182E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7102  001832  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7103  001836  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7104                           
  7105                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7106  00183A  A2F2               	btfss	intcon,1,c	;volatile
  7107  00183C  D00D               	goto	i2l386
  7108                           
  7109                           ;main.c: 36: if (mode==-1) {
  7110  00183E  283B               	incf	_mode,w,c	;volatile
  7111  001840  A4D8               	btfss	status,2,c
  7112  001842  D003               	goto	i2l2718
  7113                           
  7114                           ;main.c: 38: mode=1;
  7115  001844  0E01               	movlw	1
  7116  001846  6E3B               	movwf	_mode,c	;volatile
  7117                           
  7118                           ;main.c: 39: } else if (mode==0) {
  7119  001848  D003               	goto	i2l2722
  7120  00184A                     i2l2718:
  7121  00184A  503B               	movf	_mode,w,c	;volatile
  7122  00184C  A4D8               	btfss	status,2,c
  7123                           
  7124                           ;main.c: 43: mode=-1;
  7125                           
  7126                           ;main.c: 41: } else {
  7127  00184E  683B               	setf	_mode,c	;volatile
  7128  001850                     i2l2722:
  7129                           
  7130                           ;main.c: 44: }
  7131                           ;main.c: 46: delay_tenth_s(2);
  7132  001850  0E02               	movlw	2
  7133  001852  EC6D  F000         	call	i2_delay_tenth_s
  7134                           
  7135                           ;main.c: 47: INTCONbits.INT0IF=0;
  7136  001856  92F2               	bcf	intcon,1,c	;volatile
  7137  001858                     i2l386:
  7138  001858  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7139  00185C  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7140  001860  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7141  001864  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7142  001868  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7143  00186C  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7144  001870  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7145  001874  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7146  001878  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7147  00187C  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7148  001880  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7149  001884  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7150  001888  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7151  00188C  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7152  001890  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7153  001892  0011               	retfie		f
  7154  001894                     __end_of_InterruptHandlerHigh:
  7155                           	opt stack 0
  7156                           pclatu	equ	0xFFB
  7157                           pclath	equ	0xFFA
  7158                           tblptru	equ	0xFF8
  7159                           tblptrh	equ	0xFF7
  7160                           tblptrl	equ	0xFF6
  7161                           tablat	equ	0xFF5
  7162                           prodh	equ	0xFF4
  7163                           prodl	equ	0xFF3
  7164                           intcon	equ	0xFF2
  7165                           postinc0	equ	0xFEE
  7166                           fsr0h	equ	0xFEA
  7167                           fsr0l	equ	0xFE9
  7168                           wreg	equ	0xFE8
  7169                           indf1	equ	0xFE7
  7170                           plusw1	equ	0xFE3
  7171                           fsr1h	equ	0xFE2
  7172                           fsr1l	equ	0xFE1
  7173                           bsr	equ	0xFE0
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           plusw2	equ	0xFDB
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function i2_delay_tenth_s *****************
  7183 ;; Defined at:
  7184 ;;		line 32 in file "Movement.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  tenth_second    1    wreg     unsigned char 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7189 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;		None               void
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7199 ;;      Params:         0       0       0       0
  7200 ;;      Locals:         3       0       0       0
  7201 ;;      Temps:          1       0       0       0
  7202 ;;      Totals:         4       0       0       0
  7203 ;;Total ram usage:        4 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; This function calls:
  7206 ;;		Nothing
  7207 ;; This function is called by:
  7208 ;;		_InterruptHandlerHigh
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text32
  7213  0000DA                     __ptext32:
  7214                           	opt stack 0
  7215  0000DA                     i2_delay_tenth_s:
  7216                           	opt stack 23
  7217                           
  7218                           ;incstack = 0
  7219                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7220  0000DA  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7221                           
  7222                           ;Movement.c: 33: unsigned int i=0;
  7223  0000DC  0E00               	movlw	0
  7224  0000DE  6E04               	movwf	i2delay_tenth_s@i+1,c
  7225  0000E0  0E00               	movlw	0
  7226  0000E2  6E03               	movwf	i2delay_tenth_s@i,c
  7227                           
  7228                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7229  0000E4  0E00               	movlw	0
  7230  0000E6  6E04               	movwf	i2delay_tenth_s@i+1,c
  7231  0000E8  0E01               	movlw	1
  7232  0000EA  6E03               	movwf	i2delay_tenth_s@i,c
  7233  0000EC  D009               	goto	i2l2678
  7234  0000EE                     i2l2674:
  7235                           
  7236                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7237  0000EE  0E82               	movlw	130
  7238  0000F0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7239  0000F2  0EDE               	movlw	222
  7240  0000F4                     i2u333_47:
  7241  0000F4  2EE8               	decfsz	wreg,f,c
  7242  0000F6  D7FE               	goto	i2u333_47
  7243  0000F8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7244  0000FA  D7FC               	goto	i2u333_47
  7245  0000FC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7246  0000FE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7247  000100                     i2l2678:
  7248  000100  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7249  000102  0D02               	mullw	2
  7250  000104  5003               	movf	i2delay_tenth_s@i,w,c
  7251  000106  5CF3               	subwf	prodl,w,c
  7252  000108  5004               	movf	i2delay_tenth_s@i+1,w,c
  7253  00010A  58F4               	subwfb	prodh,w,c
  7254  00010C  A0D8               	btfss	status,0,c
  7255  00010E  0012               	return	
  7256  000110  D7EE               	goto	i2l2674
  7257  000112                     __end_ofi2_delay_tenth_s:
  7258                           	opt stack 0
  7259                           pclatu	equ	0xFFB
  7260                           pclath	equ	0xFFA
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           postinc0	equ	0xFEE
  7269                           fsr0h	equ	0xFEA
  7270                           fsr0l	equ	0xFE9
  7271                           wreg	equ	0xFE8
  7272                           indf1	equ	0xFE7
  7273                           plusw1	equ	0xFE3
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           bsr	equ	0xFE0
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           pclatu	equ	0xFFB
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           postinc0	equ	0xFEE
  7294                           fsr0h	equ	0xFEA
  7295                           fsr0l	equ	0xFE9
  7296                           wreg	equ	0xFE8
  7297                           indf1	equ	0xFE7
  7298                           plusw1	equ	0xFE3
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           bsr	equ	0xFE0
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           postdec2	equ	0xFDD
  7305                           plusw2	equ	0xFDB
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310                           	psect	rparam
  7311  0000                     pclatu	equ	0xFFB
  7312                           pclath	equ	0xFFA
  7313                           tblptru	equ	0xFF8
  7314                           tblptrh	equ	0xFF7
  7315                           tblptrl	equ	0xFF6
  7316                           tablat	equ	0xFF5
  7317                           prodh	equ	0xFF4
  7318                           prodl	equ	0xFF3
  7319                           intcon	equ	0xFF2
  7320                           postinc0	equ	0xFEE
  7321                           fsr0h	equ	0xFEA
  7322                           fsr0l	equ	0xFE9
  7323                           wreg	equ	0xFE8
  7324                           indf1	equ	0xFE7
  7325                           plusw1	equ	0xFE3
  7326                           fsr1h	equ	0xFE2
  7327                           fsr1l	equ	0xFE1
  7328                           bsr	equ	0xFE0
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           plusw2	equ	0xFDB
  7333                           fsr2h	equ	0xFDA
  7334                           fsr2l	equ	0xFD9
  7335                           status	equ	0xFD8
  7336                           
  7337                           	psect	temp
  7338  00003C                     btemp:
  7339                           	opt stack 0
  7340  00003C                     	ds	1
  7341  0000                     int$flags	set	btemp
  7342                           pclatu	equ	0xFFB
  7343                           pclath	equ	0xFFA
  7344                           tblptru	equ	0xFF8
  7345                           tblptrh	equ	0xFF7
  7346                           tblptrl	equ	0xFF6
  7347                           tablat	equ	0xFF5
  7348                           prodh	equ	0xFF4
  7349                           prodl	equ	0xFF3
  7350                           intcon	equ	0xFF2
  7351                           postinc0	equ	0xFEE
  7352                           fsr0h	equ	0xFEA
  7353                           fsr0l	equ	0xFE9
  7354                           wreg	equ	0xFE8
  7355                           indf1	equ	0xFE7
  7356                           plusw1	equ	0xFE3
  7357                           fsr1h	equ	0xFE2
  7358                           fsr1l	equ	0xFE1
  7359                           bsr	equ	0xFE0
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           plusw2	equ	0xFDB
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     103
    BANK1           256    151     247
    BANK2           239      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 50
		 -> main@MoveTime(BANK1[50]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 25
		 -> main@MoveType(BANK1[25]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               156   156      0   72257
                                             90 BANK0      5     5      0
                                              0 BANK1    151   151      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24820
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5402
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     97      F7       7       96.5%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5F      67       4       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     199       5        0.0%
DATA                 0      0     199      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 21:12:51 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 149C  
                                  l67 1972                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 0128                           ?_LCD_String 002A  
                                 l226 0D22                                   l227 0D52  
                                 l229 0EAC                                   l436 0A1C  
                                 l429 099A                                   l395 041C  
                                 l903 1B7A                                   l913 1BBC  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 014B  
                        __CFG_LVP$OFF 000000                          main@MoveType 0132  
                                l3012 190E                                  l3004 18F6  
                                l3102 11A0                                  l3022 1474  
                                l3030 1936                                  l2232 19A8  
                                l3104 11C8                                  l3008 1900  
                                l2242 19EC                                  l2170 1B50  
                                l3114 11F8                                  l3034 1952  
                                l3026 191A                                  l2252 1A22  
                                l2236 19B0                                  l2180 1B70  
                                l2172 1B54                                  l3140 1298  
                                l3116 11FE                                  l3052 17A8  
                                l3044 1778                                  l3300 0DCA  
                                l2270 0138                                  l2190 1B9A  
                                l2158 0220                                  l3134 1256  
                                l3310 0EA8                                  l2280 1AB2  
                                l2248 1A1A                                  l2168 1B48  
                                l2192 1B9E                                  l3128 1234  
                                l3080 10E4                                  l3048 1790  
                                l2274 1A7E                                  l2266 0126  
                                l2258 1A5E                                  l3170 1330  
                                l3138 128E                                  l3082 10F6  
                                l3074 10C8                                  l3058 17C8  
                                l3226 15DC                                  l2196 1BB2  
                                l2188 1B92                                  l3172 1336  
                                l3164 1312                                  l3148 12BC  
                                l3156 12E2                                  l3092 112E  
                                l3180 1398                                  l2284 1CCE  
                                l3332 0FC6                                  l3158 12EE  
                                l3182 13B2                                  l3086 10FE  
                                l2438 01B0                                  l3502 0672  
                                l2288 1CE0                                  l3344 0FF6  
                                l3416 0422                                  l3178 138C  
                                l3338 0FE4                                  l3258 0C54  
                                l3346 0FFC                                  l3602 0A9A  
                                l3530 0750                                  l3522 070A  
                                l3604 0AD4                                  l3612 0AE0  
                                l3540 0776                                  l3508 0698  
                                l3452 04CE                                  l3614 0AFC  
                                l3534 075A                                  l3518 0700  
                                l3542 077C                                  l3550 07E4  
                                l3528 074A                                  l3456 0500  
                                l3298 0DB2                                  l3562 084C  
                                l3618 0AFE                                  l3476 0552  
                                l3590 0950                                  l3494 05E8  
                                l3568 0870                                  l3594 09BE  
                                l3578 08E6                                  l3498 0648  
                                l2980 18A8                                  l3596 0A20  
                                l2992 18CE                                  l2994 18D6  
                                l2986 18B8                                  l2996 18DA  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 162A                                  u1315 1638  
                                u1325 1658                                  u3030 0A5E  
                                _LATB 000F8A                                  u1335 1666  
                                u1600 1AA2                                  u1345 1696  
                                u1610 1AD2                                  u3107 16F2  
                                u1285 15FE                                  u2405 14EA  
                                u3117 1700                                  u1295 160C  
                                u1607 1A98                                  u1535 19B8  
                                u3207 196C                                  u3127 170E  
                                u1617 1AC8                                  u3217 1CD4  
                                u3137 1720                                  u3307 016A  
                                u1395 014C                                  u3227 1548  
                                u3147 1732                                  u3067 047E  
                                u1396 014E                                  u3317 16B2  
                                u1565 1A2A                                  u3237 155E  
                                u3157 1748                                  u3077 0496  
                                u3327 1CF6                                  u3247 17C2  
                                u3167 175C                                  u3087 16CC  
                                u2384 1434                                  u3257 19E0  
                                u2385 1430                                  u3177 176E  
                                u3097 16E2                                  u2801 0378  
                                u2394 1490                                  u3267 1A52  
                                u2395 148C                                  u3187 0C88  
                                u3277 013A                                  u3197 0CA0  
                                u1845 01AC                                  u1846 01AE  
                                u3287 1AAC                                  u3297 015A  
                                u1865 01BE                                  u1866 01C0  
                                u2791 0366                                  u2880 06CA  
                                u2890 06DE                                  u2882 06CC  
                                u2892 06E0                                  u2990 092C  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 017D                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1776                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6               ScanWithRange@MotorPower 00AD  
                        ___param_bank 000010                       i2_delay_tenth_s 00DA  
                     __end_of_SendLCD 0172                       __end_of_SetLine 0142  
                  ScanWithRange@F3892 00C3                           ScanIR@F3879 00BF  
                               ?_main 0001                       __end_of___awdiv 1918  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1B84                       __end_of___lwmod 1BC6  
                               i1l378 008E                                 i2l386 1858  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1CF2                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1776                    ScanWithRange@loops 0071  
                     __end_of_dpowers 030B                       __end_of_isdigit 0228  
                               main@i 0183                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 13C0                __size_of_ScanWithRange 059A  
                      __CFG_MCLRE$OFF 000000                       __initialization 0172  
                        __end_of_main 0B20                          __end_of_stop 180A  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 0099  
                __end_of_enableSensor 01C2                   VerifySignal@hexByte 002C  
                              ??_main 00BA                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2710 008C                                i1l2708 008A  
                      __CFG_WDTEN$OFF 000000                                i2l2722 1850  
                              i2l2718 184A                                i2l2674 00EE  
                              i2l2678 0100                 __end_of_delay_tenth_s 1CF2  
                              _LCDout 15F4                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
          ScanWithRange@MiniLeftFlick 00AE                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 0112  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 14FA                             ??_SetLine 002A  
                         fullSpeed@mL 0062                           fullSpeed@mR 0064  
                              ___wmul 01C2                             ??___awdiv 002E  
                    __end_of_initRFID 0244                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 01E8  
                __size_of_grabRightIR 0072                                clear_0 0178  
                              clear_1 0184                      ___awdiv@quotient 0030  
                              main@mL 0185                                main@mR 018E  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B20                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B1                      __end_of_turnLeft 1C80  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 018E  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1D00                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1BC6                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 188C  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 0197                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __size_of_fullSpeed 0080                    __end_of_LCD_String 1ADA  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
                          _grabLeftIR 1A0A                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 019C                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 1CBA                ScanWithRange@RFID_Read 0079  
                             _SendLCD 0142                               __Hparam 0000  
                             _SetLine 0112                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1894  
                     __size_of___wmul 0026                               ___lwdiv 1B32  
                             ___lwmod 1B84                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 0172  
                     ??_ScanWithRange 007B                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 0244                               __ptext2 0228  
                             __ptext3 1C80                               __ptext4 16BA  
                             __ptext5 01E8                               __ptext6 1BC6  
                             __ptext7 019C                               __ptext8 1ADA  
                             __ptext9 0B20                             _T0CONbits 000FD5  
                             _initLCD 16BA                     __end_of_initTimer 0256  
                             _dpowers 0301                     __end_of_fullSpeed 1998  
                             _isdigit 020A                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 0100  
                             _sprintf 10BA                        __pintcode_body 180A  
                end_of_initialization 018E                        ScanWithRange@i 00A9  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 180A  
                  ScanIR@SensorResult 009B                       ??_fullSpeedBack 003A  
                           _RFID_Read 01F6                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
              ScanWithRange@LeftFlick 00B7                     __end_of_turnRight 1C42  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                ScanWithRange@RightFlag 00B8  
                      __end_of_LCDout 16BA                             _TXSTAbits 000FAC  
                           ScanIR@buf 0071                         ??_grabRightIR 0026  
                      __end_of_ScanIR 15F4                        _ReceivedString 01E6  
                      __end_of___wmul 01E8                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 020A  
              __size_of_delay_tenth_s 0038                   start_initialization 0172  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 003A  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1894  
                            ??_ScanIR 0039                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 1A0A                          _initMotorPWM 1C80  
                         __pbssCOMRAM 003A                        fullSpeed@power 0066  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$2084 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1CBA                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                             __pintcode 0008  
                __end_of_VerifySignal 1B32                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 017E  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 0244  
                           _fullSpeed 1918                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u333_47 00F4                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 0197  
                           main@F3895 01C9                             main@F3898 01E2  
                         _grabRightIR 1998                 ScanWithRange@LeftFlag 00AF  
                grabRightIR@IR_signal 0029                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 10BA                          setMotorPWM@m 0032  
               ScanWithRange@MoveTime 0073                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0077                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1C04  
                          ?_fullSpeed 0062                      ScanWithRange@buf 0081  
                 __end_of_setMotorPWM 14FA                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1C04                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1A7C                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1C04  
                            __ptext11 1C42                              __ptext20 01C2  
                            __ptext12 1918                              __ptext21 1B84  
                            __ptext13 1CBA                              __ptext22 1B32  
                            __ptext14 14FA                              __ptext23 1998  
                            __ptext15 1776                              __ptext32 00DA  
                            __ptext24 1A0A                              __ptext16 13C0  
                            __ptext25 0112                              __ptext17 1894  
                            __ptext26 1A7C                              __ptext18 10BA  
                            __ptext27 0142                              __ptext19 020A  
                            __ptext28 15F4                              __ptext29 1CF2  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 0228             ScanWithRange@SensorResult 00B3  
                      turnRight@power 006B                         __size_of_main 07D0  
                  main@DirectionFound 0182                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 0184  
                 _InterruptHandlerLow 0018                            _LCD_String 1A7C  
                            _turnLeft 1C42                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           ??_fullSpeed 0039  
                         _setMotorPWM 13C0                          _VerifySignal 1ADA  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AB                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
