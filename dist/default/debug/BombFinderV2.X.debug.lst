

<<<<<<< HEAD
Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 21:36:47 2018
=======
Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 22:13:49 2018
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
<<<<<<< HEAD
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _TRISC	set	3988
   101  0000                     _TRISDbits	set	3989
   102  0000                     _TRISCbits	set	3988
   103  0000                     _LATDbits	set	3980
   104  0000                     _LATCbits	set	3979
   105  0000                     _LATEbits	set	3981
   106  0000                     _CAP2BUFL	set	3942
   107  0000                     _CAP2BUFH	set	3943
   108  0000                     _CAP1BUFL	set	3944
   109  0000                     _CAP1BUFH	set	3945
   110  0000                     _TRISEbits	set	3990
   111  0000                     _CAP2CON	set	3938
   112  0000                     _CAP1CON	set	3939
   113  0000                     _TRISAbits	set	3986
   114  0000                     _LATAbits	set	3977
   115  0000                     _LATB	set	3978
   116  0000                     _TRISBbits	set	3987
   117  0000                     _PTPERH	set	3962
   118  0000                     _PTPERL	set	3963
   119  0000                     _PWMCON1	set	3950
   120  0000                     _PWMCON0	set	3951
   121  0000                     _PTCON1	set	3966
   122  0000                     _PTCON0	set	3967
   123  0000                     _PDC1H	set	3958
   124  0000                     _PDC1L	set	3959
   125  0000                     _PDC0H	set	3960
   126  0000                     _PDC0L	set	3961
   127  0000                     _OSCCONbits	set	4051
   128  0000                     _OSCCON	set	4051
   129  0000                     _PIE1bits	set	3997
   130  0000                     _IPR1bits	set	3999
   131  0000                     _RCONbits	set	4048
   132  0000                     _RCREG	set	4014
   133  0000                     _TXREG	set	4013
   134  0000                     _PIR1bits	set	3998
   135  0000                     _RCSTAbits	set	4011
   136  0000                     _TXSTAbits	set	4012
   137  0000                     _BAUDCONbits	set	4010
   138  0000                     _SPBRGH	set	4016
   139  0000                     _SPBRG	set	4015
   140  0000                     _T5CON	set	4023
   141  0000                     _ANSEL0bits	set	4024
   142  0000                     _TMR0H	set	4055
   143  0000                     _TMR0L	set	4054
   144  0000                     _T0CONbits	set	4053
   145  0000                     _INTCONbits	set	4082
   146  00030B                     STR_6:
   147  00030B  20                 	db	32
   148  00030C  20                 	db	32
   149  00030D  20                 	db	32
   150  00030E  20                 	db	32
   151  00030F  20                 	db	32
   152  000310  20                 	db	32
   153  000311  25                 	db	37
   154  000312  30                 	db	48	;'0'
   155  000313  34                 	db	52	;'4'
   156  000314  64                 	db	100	;'d'
   157  000315  2C                 	db	44
   158  000316  20                 	db	32
   159  000317  25                 	db	37
   160  000318  30                 	db	48	;'0'
   161  000319  34                 	db	52	;'4'
   162  00031A  64                 	db	100	;'d'
   163  00031B  00                 	db	0
   164  00031C                     STR_5:
   165  00031C  20                 	db	32
   166  00031D  20                 	db	32
   167  00031E  20                 	db	32
   168  00031F  20                 	db	32
   169  000320  20                 	db	32
   170  000321  20                 	db	32
   171  000322  49                 	db	73	;'I'
   172  000323  6E                 	db	110	;'n'
   173  000324  65                 	db	101	;'e'
   174  000325  72                 	db	114	;'r'
   175  000326  74                 	db	116	;'t'
   176  000327  20                 	db	32
   177  000328  4D                 	db	77	;'M'
   178  000329  6F                 	db	111	;'o'
   179  00032A  64                 	db	100	;'d'
   180  00032B  65                 	db	101	;'e'
   181  00032C  00                 	db	0
   182  00032D                     STR_1:
   183  00032D  20                 	db	32
   184  00032E  20                 	db	32
   185  00032F  20                 	db	32
   186  000330  20                 	db	32
   187  000331  20                 	db	32
   188  000332  53                 	db	83	;'S'
   189  000333  63                 	db	99	;'c'
   190  000334  61                 	db	97	;'a'
   191  000335  6E                 	db	110	;'n'
   192  000336  49                 	db	73	;'I'
   193  000337  52                 	db	82	;'R'
   194  000338  00                 	db	0
   195  000339                     STR_8:
   196  000339  47                 	db	71	;'G'
   197  00033A  6F                 	db	111	;'o'
   198  00033B  69                 	db	105	;'i'
   199  00033C  6E                 	db	110	;'n'
   200  00033D  67                 	db	103	;'g'
   201  00033E  20                 	db	32
   202  00033F  48                 	db	72	;'H'
   203  000340  6F                 	db	111	;'o'
   204  000341  6D                 	db	109	;'m'
   205  000342  65                 	db	101	;'e'
   206  000343  00                 	db	0
   207  000344                     STR_7:
   208  000344  53                 	db	83	;'S'
   209  000345  65                 	db	101	;'e'
   210  000346  61                 	db	97	;'a'
   211  000347  72                 	db	114	;'r'
   212  000348  63                 	db	99	;'c'
   213  000349  68                 	db	104	;'h'
   214  00034A  69                 	db	105	;'i'
   215  00034B  6E                 	db	110	;'n'
   216  00034C  67                 	db	103	;'g'
   217  00034D  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00034E  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  0017D8                     __pcinit:
   224                           	opt stack 0
   225  0017D8                     start_initialization:
   226                           	opt stack 0
   227  0017D8                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK1 (5 bytes)
   231  0017D8  0101               	movlb	1
   232  0017DA  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   233  0017DC  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   234  0017DE  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   235  0017E0  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   236  0017E2  6BFA               	clrf	__pbssBANK1& (0+255),b
   237                           
   238                           ; Clear objects allocated to BANK0 (24 bytes)
   239  0017E4  EE00  F0CD         	lfsr	0,__pbssBANK0
   240  0017E8  0E18               	movlw	24
   241  0017EA                     clear_0:
   242  0017EA  6AEE               	clrf	postinc0,c
   243  0017EC  06E8               	decf	wreg,f,c
   244  0017EE  E1FD               	bnz	clear_0
   245                           
   246                           ; Clear objects allocated to COMRAM (2 bytes)
   247  0017F0  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   248  0017F2  6A32               	clrf	__pbssCOMRAM& (0+255),c
   249  0017F4                     end_of_initialization:
   250                           	opt stack 0
   251  0017F4                     __end_of__initialization:
   252                           	opt stack 0
   253  0017F4  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   254  0017F6  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   255  0017F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   256  0017FA  6EF8               	movwf	tblptru,c
   257  0017FC  0100               	movlb	0
   258  0017FE  EFA8  F001         	goto	_main	;jump to C main() function
   259                           tblptru	equ	0xFF8
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssCOMRAM
   264  000032                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000032                     _mode:
   267                           	opt stack 0
   268  000032                     	ds	1
   269  000033                     _i:
   270                           	opt stack 0
   271  000033                     	ds	1
   272                           tblptru	equ	0xFF8
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
=======
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001906                     __pcinit:
   189                           	opt stack 0
   190  001906                     start_initialization:
   191                           	opt stack 0
   192  001906                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  001906  0101               	movlb	1
   197  001908  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  00190A  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  00190C  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  00190E  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  001910  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  001912  EE00  F0BE         	lfsr	0,__pbssBANK0
   205  001916  0E18               	movlw	24
   206  001918                     clear_0:
   207  001918  6AEE               	clrf	postinc0,c
   208  00191A  06E8               	decf	wreg,f,c
   209  00191C  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  00191E  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  001920  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  001922                     end_of_initialization:
   215                           	opt stack 0
   216  001922                     __end_of__initialization:
   217                           	opt stack 0
   218  001922  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  001924  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  001926  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001928  6EF8               	movwf	tblptru,c
   222  00192A  0100               	movlb	0
   223  00192C  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BE                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BE                     ScanIR@F3883:
   245                           	opt stack 0
   246  0000BE                     	ds	4
   247  0000C2                     ScanWithRange@F3894:
   248                           	opt stack 0
   249  0000C2                     	ds	4
   250  0000C6                     _ReceivedString:
   251                           	opt stack 0
   252  0000C6                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3897:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
   275                           
   276                           	psect	bssBANK0
   277  0000CD                     __pbssBANK0:
   278                           	opt stack 0
   279  0000CD                     ScanWithRange@F3555:
   280                           	opt stack 0
   281  0000CD                     	ds	4
   282  0000D1                     ScanIR@F3544:
   283                           	opt stack 0
   284  0000D1                     	ds	4
   285  0000D5                     _ReceivedString:
   286                           	opt stack 0
   287  0000D5                     	ds	16
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	bssBANK1
   293  0001FA                     __pbssBANK1:
   294                           	opt stack 0
   295  0001FA                     main@F3558:
   296                           	opt stack 0
   297  0001FA                     	ds	4
   298  0001FE                     _RFID_Read:
   299                           	opt stack 0
   300  0001FE                     	ds	1
   301                           tblptru	equ	0xFF8
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           
   305                           	psect	cstackBANK2
   306  000200                     __pcstackBANK2:
   307                           	opt stack 0
   308  000200                     main@MoveType:
   309                           	opt stack 0
   310                           
   311                           ; 100 bytes @ 0x0
   312  000200                     	ds	100
   313  000264                     main@mL:
   314                           	opt stack 0
   315                           
   316                           ; 9 bytes @ 0x64
   317  000264                     	ds	9
   318  00026D                     main@mR:
   319                           	opt stack 0
   320                           
   321                           ; 9 bytes @ 0x6D
   322  00026D                     	ds	9
   323                           tblptru	equ	0xFF8
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	cstackBANK1
   328  000100                     __pcstackBANK1:
   329                           	opt stack 0
   330  000100                     main@MoveTime:
   331                           	opt stack 0
   332                           
   333                           ; 200 bytes @ 0x0
   334  000100                     	ds	200
   335  0001C8                     main@buf:
   336                           	opt stack 0
   337                           
   338                           ; 40 bytes @ 0xC8
   339  0001C8                     	ds	40
   340  0001F0                     main@Message:
   341                           	opt stack 0
   342                           
   343                           ; 10 bytes @ 0xF0
   344  0001F0                     	ds	10
   345                           tblptru	equ	0xFF8
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	cstackBANK0
   350  000060                     __pcstackBANK0:
   351                           	opt stack 0
   352  000060                     ??_initLCD:
   353  000060                     ??_VerifySignal:
   354  000060                     ?___awdiv:
   355                           	opt stack 0
   356  000060                     SetLine@line:
   357                           	opt stack 0
   358  000060                     ___lwdiv@counter:
   359                           	opt stack 0
   360  000060                     grabRightIR@IR_signal:
   361                           	opt stack 0
   362  000060                     grabLeftIR@IR_signal:
   363                           	opt stack 0
   364  000060                     LCD_String@string:
   365                           	opt stack 0
   366  000060                     ___awdiv@dividend:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x0
   370  000060                     	ds	1
   371  000061                     ___lwdiv@quotient:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x1
   375  000061                     	ds	1
   376  000062                     grabRightIR@i:
   377                           	opt stack 0
   378  000062                     grabLeftIR@i:
   379                           	opt stack 0
   380  000062                     ___awdiv@divisor:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x2
   384  000062                     	ds	1
   385  000063                     ?___lwmod:
   386                           	opt stack 0
   387  000063                     ___lwmod@dividend:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x3
   391  000063                     	ds	1
   392  000064                     ___awdiv@counter:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x4
   396  000064                     	ds	1
   397  000065                     ___awdiv@sign:
   398                           	opt stack 0
   399  000065                     ___lwmod@divisor:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x5
   403  000065                     	ds	1
   404  000066                     ___awdiv@quotient:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x6
   408  000066                     	ds	1
   409  000067                     ?_sprintf:
   410                           	opt stack 0
   411  000067                     sprintf@sp:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x7
   415  000067                     	ds	1
   416  000068                     setMotorPWM@m:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x8
   420  000068                     	ds	1
   421  000069                     sprintf@f:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x9
   425  000069                     	ds	1
   426  00006A                     ??_setMotorPWM:
   427                           
   428                           ; 1 bytes @ 0xA
   429  00006A                     	ds	5
   430  00006F                     ??_sprintf:
   431  00006F                     setMotorPWM@PWMduty:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xF
   435  00006F                     	ds	2
   436  000071                     stop@mL:
   437                           	opt stack 0
   438  000071                     fullSpeedAhead@mL:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x11
   442  000071                     	ds	2
   443  000073                     stop@mR:
   444                           	opt stack 0
<<<<<<< HEAD
   445  000073                     fullSpeedAhead@mR:
   446                           	opt stack 0
   447  000073                     sprintf@ap:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000073                     	ds	2
   452  000075                     fullSpeedAhead@power:
   453                           	opt stack 0
   454  000075                     sprintf@prec:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x15
   458  000075                     	ds	1
   459  000076                     sprintf@val:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x16
   463  000076                     	ds	1
   464  000077                     turnLeft@mL:
   465                           	opt stack 0
   466  000077                     turnRight@mL:
   467                           	opt stack 0
   468  000077                     fullSpeedBack@mL:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x17
   472  000077                     	ds	1
   473  000078                     sprintf@flag:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x18
   477  000078                     	ds	1
   478  000079                     turnLeft@mR:
=======
   445                           
   446                           ; 2 bytes @ 0x44
   447  0000A4                     	ds	2
   448  0000A6                     ScanWithRange@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x46
   452  0000A6                     	ds	2
   453  0000A8                     ScanWithRange@DirectionFoundThreshold:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x48
   457  0000A8                     	ds	2
   458  0000AA                     ScanWithRange@power:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x4A
   462  0000AA                     	ds	1
   463  0000AB                     ScanWithRange@LeftFlag:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4B
   467  0000AB                     	ds	2
   468  0000AD                     ScanWithRange@TimeAboveThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4D
   472  0000AD                     	ds	1
   473  0000AE                     ScanWithRange@SensorResult:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x4E
   477  0000AE                     	ds	4
   478  0000B2                     ScanWithRange@RightFlag:
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
   479                           	opt stack 0
   480  000079                     turnRight@mR:
   481                           	opt stack 0
   482  000079                     fullSpeedBack@mR:
   483                           	opt stack 0
   484  000079                     sprintf@width:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x19
   488  000079                     	ds	2
   489  00007B                     turnLeft@power:
   490                           	opt stack 0
   491  00007B                     turnRight@power:
   492                           	opt stack 0
   493  00007B                     fullSpeedBack@power:
   494                           	opt stack 0
   495  00007B                     sprintf@c:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x1B
   499  00007B                     	ds	1
   500  00007C                     ScanIR@mL:
   501                           	opt stack 0
   502  00007C                     ScanWithRange@mL:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x1C
   506  00007C                     	ds	2
   507  00007E                     ScanIR@mR:
   508                           	opt stack 0
   509  00007E                     ScanWithRange@mR:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x1E
   513  00007E                     	ds	2
   514  000080                     ScanIR@Move:
   515                           	opt stack 0
   516  000080                     ScanWithRange@milliseconds:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x20
   520  000080                     	ds	2
   521  000082                     ScanIR@MoveTime:
   522                           	opt stack 0
   523  000082                     ScanWithRange@MoveTimeEntry:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x22
   527  000082                     	ds	2
   528  000084                     ScanIR@MoveType:
   529                           	opt stack 0
   530  000084                     ScanWithRange@RFID_Read:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x24
   534  000084                     	ds	2
   535  000086                     ??_ScanIR:
   536  000086                     ??_ScanWithRange:
   537                           
   538                           ; 1 bytes @ 0x26
   539  000086                     	ds	1
   540  000087                     ScanIR@buf:
   541                           	opt stack 0
   542                           
   543                           ; 40 bytes @ 0x27
   544  000087                     	ds	4
   545  00008B                     ScanWithRange@buf:
   546                           	opt stack 0
   547                           
   548                           ; 40 bytes @ 0x2B
   549  00008B                     	ds	36
   550  0000AF                     ScanIR@DirectionMoveThreshold:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x4F
   554  0000AF                     	ds	2
   555  0000B1                     ScanIR@SensorResult:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0x51
   559  0000B1                     	ds	2
   560  0000B3                     ScanWithRange@n:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x53
   564  0000B3                     	ds	2
   565  0000B5                     ScanWithRange@i:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x55
   569  0000B5                     	ds	2
   570  0000B7                     ScanWithRange@DirectionFoundThreshold:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x57
   574  0000B7                     	ds	2
   575  0000B9                     ScanWithRange@power:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x59
   579  0000B9                     	ds	1
   580  0000BA                     ScanWithRange@TimeAboveThreshold:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x5A
   584  0000BA                     	ds	1
   585  0000BB                     ScanWithRange@SensorResult:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x5B
   589  0000BB                     	ds	4
   590  0000BF                     ScanWithRange@LeftFlag:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x5F
   594  0000BF                     	ds	2
   595  0000C1                     ScanWithRange@RightFlag:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x61
   599  0000C1                     	ds	2
   600  0000C3                     ??_main:
   601                           
   602                           ; 1 bytes @ 0x63
   603  0000C3                     	ds	2
   604  0000C5                     main@ScanAngle:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x65
   608  0000C5                     	ds	1
   609  0000C6                     main@SensorResult:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x66
   613  0000C6                     	ds	4
   614  0000CA                     main@DirectionFound:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x6A
   618  0000CA                     	ds	1
   619  0000CB                     main@Move:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x6B
   623  0000CB                     	ds	1
   624  0000CC                     main@i:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x6C
   628  0000CC                     	ds	1
   629                           tblptru	equ	0xFF8
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           
   633                           	psect	cstackCOMRAM
   634  000001                     __pcstackCOMRAM:
   635                           	opt stack 0
   636  000001                     ??i2_delay_tenth_s:
   637                           
   638                           ; 1 bytes @ 0x0
   639  000001                     	ds	1
   640  000002                     i2delay_tenth_s@tenth_seconds:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1
   644  000002                     	ds	1
   645  000003                     i2delay_tenth_s@i:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x2
   649  000003                     	ds	2
   650  000005                     ??_InterruptHandlerHigh:
   651                           
   652                           ; 1 bytes @ 0x4
   653  000005                     	ds	18
   654  000017                     ??_InterruptHandlerLow:
   655                           
   656                           ; 1 bytes @ 0x16
   657  000017                     	ds	21
   658  00002C                     ??_isdigit:
   659  00002C                     ??_LCDout:
   660  00002C                     ??_delay_tenth_s:
   661  00002C                     ?_grabRightIR:
   662                           	opt stack 0
   663  00002C                     ?_grabLeftIR:
   664                           	opt stack 0
   665  00002C                     ?___wmul:
   666                           	opt stack 0
   667  00002C                     ?___lwdiv:
   668                           	opt stack 0
   669  00002C                     enableSensor@status:
   670                           	opt stack 0
   671  00002C                     VerifySignal@Signal:
   672                           	opt stack 0
   673  00002C                     ___wmul@multiplier:
   674                           	opt stack 0
   675  00002C                     ___lwdiv@dividend:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x2B
   679  00002C                     	ds	1
   680  00002D                     enableSensor@sensor:
   681                           	opt stack 0
   682  00002D                     delay_tenth_s@tenth_seconds:
   683                           	opt stack 0
   684  00002D                     _isdigit$1692:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x2C
   688  00002D                     	ds	1
   689  00002E                     ??_grabRightIR:
   690  00002E                     ??_grabLeftIR:
   691  00002E                     isdigit@c:
   692                           	opt stack 0
   693  00002E                     delay_tenth_s@i:
   694                           	opt stack 0
   695  00002E                     VerifySignal@hexByte:
   696                           	opt stack 0
   697  00002E                     ___wmul@multiplicand:
   698                           	opt stack 0
   699  00002E                     ___lwdiv@divisor:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x2D
   703  00002E                     	ds	1
   704  00002F                     LCDout@number:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x2E
   708  00002F                     	ds	1
   709  000030                     SendLCD@type:
   710                           	opt stack 0
   711  000030                     VerifySignal@checksum:
   712                           	opt stack 0
   713  000030                     ___lwmod@counter:
   714                           	opt stack 0
   715  000030                     ___wmul@product:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2F
   719  000030                     	ds	1
   720  000031                     SendLCD@Byte:
   721                           	opt stack 0
   722  000031                     VerifySignal@i:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x30
   726  000031                     	ds	1
   727  000032                     tblptru	equ	0xFF8
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           
   731                           ; 1 bytes @ 0x31
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 51 in file "main.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  MoveTime      200    0[BANK1 ] int [100]
   742 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   743 ;;  buf            40  200[BANK1 ] unsigned char [40]
   744 ;;  Message        10  240[BANK1 ] unsigned char [10]
   745 ;;  mR              9  109[BANK2 ] struct DC_motor
   746 ;;  mL              9  100[BANK2 ] struct DC_motor
   747 ;;  SensorResult    4  102[BANK0 ] unsigned int [2]
   748 ;;  i               1  108[BANK0 ] unsigned char 
   749 ;;  Move            1  107[BANK0 ] unsigned char 
   750 ;;  DirectionFou    1  106[BANK0 ] char 
   751 ;;  ScanAngle       1  101[BANK0 ] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   761 ;;      Params:         0       0       0       0
   762 ;;      Locals:         0       8     250     118
   763 ;;      Temps:          0       2       0       0
   764 ;;      Totals:         0      10     250     118
   765 ;;Total ram usage:      378 bytes
   766 ;; Hardware stack levels required when called:    8
   767 ;; This function calls:
   768 ;;		_LCD_String
   769 ;;		_ScanIR
   770 ;;		_ScanWithRange
   771 ;;		_SendLCD
   772 ;;		_SetLine
   773 ;;		_VerifySignal
   774 ;;		_delay_tenth_s
   775 ;;		_enableSensor
   776 ;;		_fullSpeedAhead
   777 ;;		_fullSpeedBack
   778 ;;		_grabLeftIR
   779 ;;		_grabRightIR
   780 ;;		_initIR
   781 ;;		_initLCD
   782 ;;		_initMotorPWM
   783 ;;		_initRFID
   784 ;;		_initTimer
   785 ;;		_sprintf
   786 ;;		_stop
   787 ;; This function is called by:
   788 ;;		Startup code after reset
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text0
   793  000350                     __ptext0:
   794                           	opt stack 0
   795  000350                     _main:
   796                           	opt stack 23
   797                           
   798                           ;main.c: 54: unsigned char Message[10];
   799                           ;main.c: 55: unsigned char i=0;
   800                           
   801                           ;incstack = 0
   802  000350  0E00               	movlw	0
   803  000352  0100               	movlb	0	; () banked
   804  000354  6FCC               	movwf	main@i& (0+255),b
   805                           
   806                           ;main.c: 56: signed char DirectionFound=0;
   807  000356  0E00               	movlw	0
   808  000358  6FCA               	movwf	main@DirectionFound& (0+255),b
   809                           
   810                           ;main.c: 57: int MoveTime[100];
   811                           ;main.c: 58: char MoveType[100];
   812                           ;main.c: 59: char Move=0;
   813  00035A  0E00               	movlw	0
   814  00035C  6FCB               	movwf	main@Move& (0+255),b
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   818  00035E  C1FA  F0C6         	movff	main@F3558,main@SensorResult
   819  000362  C1FB  F0C7         	movff	main@F3558+1,main@SensorResult+1
   820  000366  C1FC  F0C8         	movff	main@F3558+2,main@SensorResult+2
   821  00036A  C1FD  F0C9         	movff	main@F3558+3,main@SensorResult+3
   822                           
   823                           ;main.c: 61: char buf[40];
   824                           ;main.c: 63: unsigned char ScanAngle=60;
   825  00036E  0E3C               	movlw	60
   826  000370  6FC5               	movwf	main@ScanAngle& (0+255),b
   827                           
   828                           ; BSR set to: 0
   829                           ;main.c: 66: INTCONbits.GIEH=1;
   830  000372  8EF2               	bsf	intcon,7,c	;volatile
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 67: INTCONbits.GIEL=1;
   834  000374  8CF2               	bsf	intcon,6,c	;volatile
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 68: INTCONbits.PEIE=1;
   838  000376  8CF2               	bsf	intcon,6,c	;volatile
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 69: RCONbits.IPEN=1;
   842  000378  8ED0               	bsf	4048,7,c	;volatile
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 72: IPR1bits.RCIP=0;
   846  00037A  9A9F               	bcf	3999,5,c	;volatile
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 73: PIE1bits.RCIE=1;
   850  00037C  8A9D               	bsf	3997,5,c	;volatile
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 76: TRISCbits.RC3=1;
   854  00037E  8694               	bsf	3988,3,c	;volatile
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 77: INTCONbits.INT0IE=1;
   858  000380  88F2               	bsf	intcon,4,c	;volatile
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 80: PIR1bits.RC1IF=0;
   862  000382  9A9E               	bcf	3998,5,c	;volatile
   863                           
<<<<<<< HEAD
   864                           ; BSR set to: 0
   865                           ;main.c: 81: INTCONbits.INT0IF=0;
   866  000384  92F2               	bcf	intcon,1,c	;volatile
   867                           
   868                           ;main.c: 84: struct DC_motor mL, mR;
   869                           ;main.c: 85: mL.power=0;
   870  000386  0E00               	movlw	0
   871  000388  0102               	movlb	2	; () banked
   872  00038A  6F64               	movwf	main@mL& (0+255),b
   873                           
   874                           ;main.c: 86: mL.direction=1;
   875  00038C  0E01               	movlw	1
   876  00038E  6F65               	movwf	(main@mL+1)& (0+255),b
   877                           
   878                           ; BSR set to: 2
   879                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   880  000390  0E79               	movlw	121
   881  000392  6F66               	movwf	(main@mL+2)& (0+255),b
   882  000394  0E0F               	movlw	15
   883  000396  6F67               	movwf	(main@mL+3)& (0+255),b
   884                           
   885                           ; BSR set to: 2
   886                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   887  000398  0E78               	movlw	120
   888  00039A  6F68               	movwf	(main@mL+4)& (0+255),b
   889  00039C  0E0F               	movlw	15
   890  00039E  6F69               	movwf	(main@mL+5)& (0+255),b
   891                           
   892                           ;main.c: 89: mL.dir_pin=0;
   893  0003A0  0E00               	movlw	0
   894  0003A2  6F6A               	movwf	(main@mL+6)& (0+255),b
   895                           
   896                           ;main.c: 90: mL.PWMperiod=199;
   897  0003A4  0E00               	movlw	0
   898  0003A6  6F6C               	movwf	(main@mL+8)& (0+255),b
   899  0003A8  0EC7               	movlw	199
   900  0003AA  6F6B               	movwf	(main@mL+7)& (0+255),b
   901                           
   902                           ;main.c: 92: mR.power=0;
   903  0003AC  0E00               	movlw	0
   904  0003AE  6F6D               	movwf	main@mR& (0+255),b
   905                           
   906                           ;main.c: 93: mR.direction=1;
   907  0003B0  0E01               	movlw	1
   908  0003B2  6F6E               	movwf	(main@mR+1)& (0+255),b
   909                           
   910                           ; BSR set to: 2
   911                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   912  0003B4  0E77               	movlw	119
   913  0003B6  6F6F               	movwf	(main@mR+2)& (0+255),b
   914  0003B8  0E0F               	movlw	15
   915  0003BA  6F70               	movwf	(main@mR+3)& (0+255),b
   916                           
   917                           ; BSR set to: 2
   918                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   919  0003BC  0E76               	movlw	118
   920  0003BE  6F71               	movwf	(main@mR+4)& (0+255),b
   921  0003C0  0E0F               	movlw	15
   922  0003C2  6F72               	movwf	(main@mR+5)& (0+255),b
   923                           
   924                           ;main.c: 96: mR.dir_pin=2;
   925  0003C4  0E02               	movlw	2
   926  0003C6  6F73               	movwf	(main@mR+6)& (0+255),b
   927                           
   928                           ;main.c: 97: mR.PWMperiod=199;
   929  0003C8  0E00               	movlw	0
   930  0003CA  6F75               	movwf	(main@mR+8)& (0+255),b
   931  0003CC  0EC7               	movlw	199
   932  0003CE  6F74               	movwf	(main@mR+7)& (0+255),b
   933                           
   934                           ;main.c: 99: OSCCON = 0x72;
   935  0003D0  0E72               	movlw	114
   936  0003D2  6ED3               	movwf	4051,c	;volatile
   937  0003D4                     
   938                           ; BSR set to: 2
   939  0003D4  B4D3               	btfsc	4051,2,c	;volatile
   940  0003D6  D1EC               	goto	l3497
   941  0003D8  D7FD               	goto	l389
   942  0003DA                     
   943                           ;main.c: 112: stop(&mL, &mR);
   944  0003DA  0E64               	movlw	low main@mL
   945  0003DC  0100               	movlb	0	; () banked
   946  0003DE  6F71               	movwf	stop@mL& (0+255),b
   947  0003E0  0E02               	movlw	high main@mL
   948  0003E2  6F72               	movwf	(stop@mL+1)& (0+255),b
   949  0003E4  0E6D               	movlw	low main@mR
   950  0003E6  6F73               	movwf	stop@mR& (0+255),b
   951  0003E8  0E02               	movlw	high main@mR
   952  0003EA  6F74               	movwf	(stop@mR+1)& (0+255),b
   953  0003EC  EC52  F009         	call	_stop	;wreg free
   954                           
   955                           ;main.c: 113: RFID_Read=0;
   956  0003F0  0E00               	movlw	0
   957  0003F2  0101               	movlb	1	; () banked
   958  0003F4  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   959                           
   960                           ; BSR set to: 1
   961                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   962  0003F6  EC57  F00A         	call	_grabLeftIR	;wreg free
   963  0003FA  C02C  F0C6         	movff	?_grabLeftIR,main@SensorResult
   964  0003FE  C02D  F0C7         	movff	?_grabLeftIR+1,main@SensorResult+1
   965                           
   966                           ;main.c: 117: SensorResult[1]=grabRightIR();
   967  000402  EC1C  F00A         	call	_grabRightIR	;wreg free
   968  000406  C02C  F0C8         	movff	?_grabRightIR,main@SensorResult+2
   969  00040A  C02D  F0C9         	movff	?_grabRightIR+1,main@SensorResult+3
   970                           
   971                           ;main.c: 121: CAP1BUFH=0;
   972  00040E  0E00               	movlw	0
   973  000410  6E69               	movwf	3945,c	;volatile
   974                           
   975                           ;main.c: 122: CAP1BUFL=0;
   976  000412  0E00               	movlw	0
   977  000414  6E68               	movwf	3944,c	;volatile
   978                           
   979                           ;main.c: 123: CAP2BUFH=0;
   980  000416  0E00               	movlw	0
   981  000418  6E67               	movwf	3943,c	;volatile
   982                           
   983                           ;main.c: 124: CAP2BUFL=0;
   984  00041A  0E00               	movlw	0
   985  00041C  6E66               	movwf	3942,c	;volatile
   986                           
   987                           ;main.c: 127: SendLCD(0b00000001,0);
   988  00041E  0E00               	movlw	0
   989  000420  6E30               	movwf	SendLCD@type,c
   990  000422  0E01               	movlw	1
   991  000424  ECD4  F00B         	call	_SendLCD
   992                           
   993                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   994  000428  0E21               	movlw	33
   995  00042A                     u3017:
   996  00042A  2EE8               	decfsz	wreg,f,c
   997  00042C  D7FE               	bra	u3017
   998  00042E  F000               	nop	
   999                           
  1000                           ;main.c: 129: SendLCD(0b00000010,0);
  1001  000430  0E00               	movlw	0
  1002  000432  6E30               	movwf	SendLCD@type,c
  1003  000434  0E02               	movlw	2
  1004  000436  ECD4  F00B         	call	_SendLCD
  1005                           
  1006                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
  1007  00043A  0E06               	movlw	6
  1008  00043C  0100               	movlb	0	; () banked
  1009  00043E  6FC3               	movwf	??_main& (0+255),b
  1010  000440  0E30               	movlw	48
  1011  000442                     u3027:
  1012  000442  2EE8               	decfsz	wreg,f,c
  1013  000444  D7FE               	bra	u3027
  1014  000446  2FC3               	decfsz	??_main& (0+255),f,b
  1015  000448  D7FC               	bra	u3027
  1016  00044A  F000               	nop	
  1017                           
  1018                           ;main.c: 131: SetLine(1);
  1019  00044C  0E01               	movlw	1
  1020  00044E  ECA0  F00B         	call	_SetLine
  1021                           
  1022                           ;main.c: 132: LCD_String("      Inert Mode");
  1023  000452  0E1C               	movlw	low STR_5
  1024  000454  0100               	movlb	0	; () banked
  1025  000456  6F60               	movwf	LCD_String@string& (0+255),b
  1026  000458  0E03               	movlw	high STR_5
  1027  00045A  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1028  00045C  EC92  F00A         	call	_LCD_String	;wreg free
  1029                           
  1030                           ;main.c: 133: SetLine(2);
  1031  000460  0E02               	movlw	2
  1032  000462  ECA0  F00B         	call	_SetLine
  1033                           
  1034                           ;main.c: 134: if (RFID_Read) {
  1035  000466  0101               	movlb	1	; () banked
  1036  000468  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1037  00046A  B4D8               	btfsc	status,2,c
  1038  00046C  D008               	goto	l394
  1039                           
  1040                           ; BSR set to: 1
  1041                           ;main.c: 135: LCD_String(Message);
  1042  00046E  0EF0               	movlw	low main@Message
  1043  000470  0100               	movlb	0	; () banked
  1044  000472  6F60               	movwf	LCD_String@string& (0+255),b
  1045  000474  0E01               	movlw	high main@Message
  1046  000476  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1047  000478  EC92  F00A         	call	_LCD_String	;wreg free
  1048                           
  1049                           ;main.c: 136: } else {
  1050  00047C  D199               	goto	l3497
  1051  00047E                     l394:
  1052                           
  1053                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1054  00047E  0EC8               	movlw	low main@buf
  1055  000480  0100               	movlb	0	; () banked
  1056  000482  6F67               	movwf	sprintf@sp& (0+255),b
  1057  000484  0E01               	movlw	high main@buf
  1058  000486  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1059  000488  0E0B               	movlw	low STR_6
  1060  00048A  6F69               	movwf	sprintf@f& (0+255),b
  1061  00048C  0E03               	movlw	high STR_6
  1062  00048E  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1063  000490  C0C6  F06B         	movff	main@SensorResult,?_sprintf+4
  1064  000494  C0C7  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1065  000498  C0C8  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1066  00049C  C0C9  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1067  0004A0  EC4D  F005         	call	_sprintf	;wreg free
  1068                           
  1069                           ;main.c: 138: LCD_String(buf);
  1070  0004A4  0EC8               	movlw	low main@buf
  1071  0004A6  0100               	movlb	0	; () banked
  1072  0004A8  6F60               	movwf	LCD_String@string& (0+255),b
  1073  0004AA  0E01               	movlw	high main@buf
  1074  0004AC  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1075  0004AE  EC92  F00A         	call	_LCD_String	;wreg free
  1076                           
  1077                           ;main.c: 139: }
  1078                           ;main.c: 142: break;
  1079  0004B2  D17E               	goto	l3497
  1080  0004B4                     
  1081                           ;main.c: 147: initMotorPWM();
  1082  0004B4  ECBB  F00B         	call	_initMotorPWM	;wreg free
  1083                           
  1084                           ;main.c: 148: initTimer();
  1085  0004B8  EC55  F00C         	call	_initTimer	;wreg free
  1086                           
  1087                           ;main.c: 149: initRFID();
  1088  0004BC  EC47  F00C         	call	_initRFID	;wreg free
  1089                           
  1090                           ;main.c: 150: initLCD();
  1091  0004C0  EC97  F008         	call	_initLCD	;wreg free
  1092                           
  1093                           ;main.c: 151: initIR();
  1094  0004C4  EC27  F00C         	call	_initIR	;wreg free
  1095                           
  1096                           ;main.c: 153: enableSensor(0, 1);
  1097  0004C8  0E01               	movlw	1
  1098  0004CA  6E2C               	movwf	enableSensor@status,c
  1099  0004CC  0E00               	movlw	0
  1100  0004CE  EC01  F00C         	call	_enableSensor
  1101                           
  1102                           ;main.c: 154: enableSensor(1, 1);
  1103  0004D2  0E01               	movlw	1
  1104  0004D4  6E2C               	movwf	enableSensor@status,c
  1105  0004D6  0E01               	movlw	1
  1106  0004D8  EC01  F00C         	call	_enableSensor
  1107                           
  1108                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1109  0004DC  0E64               	movlw	low main@mL
  1110  0004DE  0100               	movlb	0	; () banked
  1111  0004E0  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1112  0004E2  0E02               	movlw	high main@mL
  1113  0004E4  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1114  0004E6  0E6D               	movlw	low main@mR
  1115  0004E8  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1116  0004EA  0E02               	movlw	high main@mR
  1117  0004EC  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1118  0004EE  0E64               	movlw	100
  1119  0004F0  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1120  0004F2  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  1121                           
  1122                           ;main.c: 158: delay_tenth_s(1);
  1123  0004F6  0E01               	movlw	1
  1124  0004F8  EC68  F00B         	call	_delay_tenth_s
  1125  0004FC  D158               	goto	l3495
  1126  0004FE                     
  1127                           ;main.c: 170: SetLine(1);
  1128  0004FE  0E01               	movlw	1
  1129  000500  ECA0  F00B         	call	_SetLine
  1130                           
  1131                           ;main.c: 171: LCD_String("Searching");
  1132  000504  0E44               	movlw	low STR_7
  1133  000506  0100               	movlb	0	; () banked
  1134  000508  6F60               	movwf	LCD_String@string& (0+255),b
  1135  00050A  0E03               	movlw	high STR_7
  1136  00050C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1137  00050E  EC92  F00A         	call	_LCD_String	;wreg free
  1138                           
  1139                           ;main.c: 173: if (DirectionFound==-1) {
  1140  000512  0100               	movlb	0	; () banked
  1141  000514  29CA               	incf	main@DirectionFound& (0+255),w,b
  1142  000516  A4D8               	btfss	status,2,c
  1143  000518  D027               	goto	l399
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1147  00051A  0E64               	movlw	low main@mL
  1148  00051C  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1149  00051E  0E02               	movlw	high main@mL
  1150  000520  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1151  000522  0E6D               	movlw	low main@mR
  1152  000524  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1153  000526  0E02               	movlw	high main@mR
  1154  000528  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1155  00052A  0E64               	movlw	100
  1156  00052C  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1157  00052E  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  1158                           
  1159                           ;main.c: 179: delay_tenth_s(6);
  1160  000532  0E06               	movlw	6
  1161  000534  EC68  F00B         	call	_delay_tenth_s
  1162                           
  1163                           ;main.c: 180: stop(&mL,&mR);
  1164  000538  0E64               	movlw	low main@mL
  1165  00053A  0100               	movlb	0	; () banked
  1166  00053C  6F71               	movwf	stop@mL& (0+255),b
  1167  00053E  0E02               	movlw	high main@mL
  1168  000540  6F72               	movwf	(stop@mL+1)& (0+255),b
  1169  000542  0E6D               	movlw	low main@mR
  1170  000544  6F73               	movwf	stop@mR& (0+255),b
  1171  000546  0E02               	movlw	high main@mR
  1172  000548  6F74               	movwf	(stop@mR+1)& (0+255),b
  1173  00054A  EC52  F009         	call	_stop	;wreg free
  1174                           
  1175                           ;main.c: 181: DirectionFound=0;
  1176  00054E  0E00               	movlw	0
  1177  000550  0100               	movlb	0	; () banked
  1178  000552  6FCA               	movwf	main@DirectionFound& (0+255),b
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;main.c: 182: MoveType[Move]=0;
  1182  000554  51CB               	movf	main@Move& (0+255),w,b
  1183  000556  0D01               	mullw	1
  1184  000558  0E00               	movlw	low main@MoveType
  1185  00055A  24F3               	addwf	prodl,w,c
  1186  00055C  6ED9               	movwf	fsr2l,c
  1187  00055E  0E02               	movlw	high main@MoveType
  1188  000560  20F4               	addwfc	prodh,w,c
  1189  000562  6EDA               	movwf	fsr2h,c
  1190  000564  0E00               	movlw	0
  1191  000566  D01F               	goto	L1
  1192  000568                     l399:
  1193                           
  1194                           ; BSR set to: 0
  1195                           
  1196                           ; BSR set to: 0
  1197  000568  51CA               	movf	main@DirectionFound& (0+255),w,b
  1198  00056A  A4D8               	btfss	status,2,c
  1199  00056C  D01E               	goto	l401
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1203                           ;main.c: 186: &MoveTime[Move], &RFID_Read);
  1204  00056E  0E64               	movlw	low main@mL
  1205  000570  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1206  000572  0E02               	movlw	high main@mL
  1207  000574  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1208  000576  0E6D               	movlw	low main@mR
  1209  000578  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1210  00057A  0E02               	movlw	high main@mR
  1211  00057C  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1212  00057E  C0C5  F080         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1213  000582  6B81               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1214  000584  51CB               	movf	main@Move& (0+255),w,b
  1215  000586  0D02               	mullw	2
  1216  000588  0E00               	movlw	low main@MoveTime
  1217  00058A  24F3               	addwf	prodl,w,c
  1218  00058C  6F82               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1219  00058E  0E01               	movlw	high main@MoveTime
  1220  000590  20F4               	addwfc	prodh,w,c
  1221  000592  6F83               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1222  000594  0EFE               	movlw	low _RFID_Read
  1223  000596  6F84               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1224  000598  0E01               	movlw	high _RFID_Read
  1225  00059A  6F85               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1226  00059C  ECE9  F003         	call	_ScanWithRange	;wreg free
  1227  0005A0  0100               	movlb	0	; () banked
  1228  0005A2  6FCA               	movwf	main@DirectionFound& (0+255),b
  1229  0005A4  D024               	goto	l3429
  1230  0005A6                     L1:
  1231  0005A6  6EDF               	movwf	indf2,c
  1232                           
  1233                           ;main.c: 188: } else if (DirectionFound==1) {
  1234  0005A8  D0E1               	goto	l3485
  1235  0005AA                     l401:
  1236                           
  1237                           ; BSR set to: 0
  1238                           
  1239                           ; BSR set to: 0
  1240  0005AA  05CA               	decf	main@DirectionFound& (0+255),w,b
  1241  0005AC  A4D8               	btfss	status,2,c
  1242  0005AE  D019               	goto	l403
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1246  0005B0  0E64               	movlw	low main@mL
  1247  0005B2  6F7C               	movwf	ScanIR@mL& (0+255),b
  1248  0005B4  0E02               	movlw	high main@mL
  1249  0005B6  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1250  0005B8  0E6D               	movlw	low main@mR
  1251  0005BA  6F7E               	movwf	ScanIR@mR& (0+255),b
  1252  0005BC  0E02               	movlw	high main@mR
  1253  0005BE  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1254  0005C0  0ECB               	movlw	low main@Move
  1255  0005C2  6F80               	movwf	ScanIR@Move& (0+255),b
  1256  0005C4  0E00               	movlw	high main@Move
  1257  0005C6  6F81               	movwf	(ScanIR@Move+1)& (0+255),b
  1258  0005C8  0E00               	movlw	low main@MoveTime
  1259  0005CA  6F82               	movwf	ScanIR@MoveTime& (0+255),b
  1260  0005CC  0E01               	movlw	high main@MoveTime
  1261  0005CE  6F83               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1262  0005D0  0E00               	movlw	low main@MoveType
  1263  0005D2  6F84               	movwf	ScanIR@MoveType& (0+255),b
  1264  0005D4  0E02               	movlw	high main@MoveType
  1265  0005D6  6F85               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1266  0005D8  ECBA  F007         	call	_ScanIR	;wreg free
  1267  0005DC  0100               	movlb	0	; () banked
  1268  0005DE  6FCA               	movwf	main@DirectionFound& (0+255),b
  1269                           
  1270                           ;main.c: 191: } else if (DirectionFound==2) {
  1271  0005E0  D0C5               	goto	l3485
  1272  0005E2                     l403:
  1273                           
  1274                           ; BSR set to: 0
  1275                           
  1276                           ; BSR set to: 0
  1277  0005E2  0E02               	movlw	2
  1278  0005E4  19CA               	xorwf	main@DirectionFound& (0+255),w,b
  1279  0005E6  A4D8               	btfss	status,2,c
  1280  0005E8  D0C1               	goto	l3485
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 193: mode=2;
  1284  0005EA  0E02               	movlw	2
  1285  0005EC  6E32               	movwf	_mode,c	;volatile
  1286  0005EE                     l3429:
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 194: MoveType[Move]=1;
  1290  0005EE  51CB               	movf	main@Move& (0+255),w,b
  1291  0005F0  0D01               	mullw	1
  1292  0005F2  0E00               	movlw	low main@MoveType
  1293  0005F4  24F3               	addwf	prodl,w,c
  1294  0005F6  6ED9               	movwf	fsr2l,c
  1295  0005F8  0E02               	movlw	high main@MoveType
  1296  0005FA  20F4               	addwfc	prodh,w,c
  1297  0005FC  6EDA               	movwf	fsr2h,c
  1298  0005FE  0E01               	movlw	1
  1299  000600  6EDF               	movwf	indf2,c
  1300                           
  1301                           ; BSR set to: 0
  1302                           
  1303                           ; BSR set to: 0
  1304                           
  1305                           ; BSR set to: 0
  1306                           
  1307                           ; BSR set to: 0
  1308  000602  D0B4               	goto	l3485
  1309  000604                     
  1310                           ;main.c: 206: if (RFID_Read) {
  1311                           
  1312                           ; BSR set to: 0
  1313  000604  0101               	movlb	1	; () banked
  1314  000606  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1315  000608  B4D8               	btfsc	status,2,c
  1316  00060A  D085               	goto	l407
  1317                           
  1318                           ; BSR set to: 1
  1319                           ;main.c: 207: stop(&mL, &mR);
  1320  00060C  0E64               	movlw	low main@mL
  1321  00060E  0100               	movlb	0	; () banked
  1322  000610  6F71               	movwf	stop@mL& (0+255),b
  1323  000612  0E02               	movlw	high main@mL
  1324  000614  6F72               	movwf	(stop@mL+1)& (0+255),b
  1325  000616  0E6D               	movlw	low main@mR
  1326  000618  6F73               	movwf	stop@mR& (0+255),b
  1327  00061A  0E02               	movlw	high main@mR
  1328  00061C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1329  00061E  EC52  F009         	call	_stop	;wreg free
  1330                           
  1331                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1332  000622  0E03               	movlw	3
  1333  000624  0100               	movlb	0	; () banked
  1334  000626  19E4               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1335  000628  A4D8               	btfss	status,2,c
  1336  00062A  D002               	goto	u2930
  1337  00062C  0E01               	movlw	1
  1338  00062E  D001               	goto	u2932
  1339  000630                     u2930:
  1340  000630  0E00               	movlw	0
  1341  000632                     u2932:
  1342  000632  6FC3               	movwf	??_main& (0+255),b
  1343  000634  0E02               	movlw	2
  1344  000636  19D5               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1345  000638  A4D8               	btfss	status,2,c
  1346  00063A  D002               	goto	u2940
  1347  00063C  0E01               	movlw	1
  1348  00063E  D001               	goto	u2942
  1349  000640                     u2940:
  1350  000640  0E00               	movlw	0
  1351  000642                     u2942:
  1352  000642  15C3               	andwf	??_main& (0+255),w,b
  1353  000644  A0E8               	btfss	wreg,0,c
  1354  000646  D0B4               	goto	l3497
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1358  000648  0ED5               	movlw	low _ReceivedString
  1359  00064A  6E2C               	movwf	VerifySignal@Signal,c
  1360  00064C  0E00               	movlw	high _ReceivedString
  1361  00064E  6E2D               	movwf	VerifySignal@Signal+1,c
  1362  000650  EC3C  F007         	call	_VerifySignal	;wreg free
  1363  000654  0900               	iorlw	0
  1364  000656  B4D8               	btfsc	status,2,c
  1365  000658  D035               	goto	l409
  1366                           
  1367                           ;main.c: 211: for (i=0; i<10; i++){
  1368  00065A  0E00               	movlw	0
  1369  00065C  0100               	movlb	0	; () banked
  1370  00065E  6FCC               	movwf	main@i& (0+255),b
  1371  000660                     l3443:
  1372                           
  1373                           ; BSR set to: 0
  1374  000660  0E09               	movlw	9
  1375  000662  65CC               	cpfsgt	main@i& (0+255),b
  1376  000664  D001               	goto	l410
  1377  000666  D019               	goto	u2980
  1378  000668                     l410:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1382                           
  1383                           ; BSR set to: 0
  1384  000668  51CC               	movf	main@i& (0+255),w,b
  1385  00066A  6FC3               	movwf	??_main& (0+255),b
  1386  00066C  6BC4               	clrf	(??_main+1)& (0+255),b
  1387  00066E  0E01               	movlw	1
  1388  000670  27C3               	addwf	??_main& (0+255),f,b
  1389  000672  0E00               	movlw	0
  1390  000674  23C4               	addwfc	(??_main+1)& (0+255),f,b
  1391  000676  0ED5               	movlw	low _ReceivedString
  1392  000678  25C3               	addwf	??_main& (0+255),w,b
  1393  00067A  6ED9               	movwf	fsr2l,c
  1394  00067C  0E00               	movlw	high _ReceivedString
  1395  00067E  21C4               	addwfc	(??_main+1)& (0+255),w,b
  1396  000680  6EDA               	movwf	fsr2h,c
  1397  000682  51CC               	movf	main@i& (0+255),w,b
  1398  000684  0D01               	mullw	1
  1399  000686  0EF0               	movlw	low main@Message
  1400  000688  24F3               	addwf	prodl,w,c
  1401  00068A  6EE1               	movwf	fsr1l,c
  1402  00068C  0E01               	movlw	high main@Message
  1403  00068E  20F4               	addwfc	prodh,w,c
  1404  000690  6EE2               	movwf	fsr1h,c
  1405  000692  CFDF FFE7          	movff	indf2,indf1
  1406                           
  1407                           ; BSR set to: 0
  1408  000696  2BCC               	incf	main@i& (0+255),f,b
  1409  000698  D7E3               	goto	l3443
  1410  00069A                     u2980:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 213: }
  1414                           ;main.c: 216: for (i=0; i<16; i++) {
  1415                           
  1416                           ; BSR set to: 0
  1417  00069A  0E00               	movlw	0
  1418  00069C  6FCC               	movwf	main@i& (0+255),b
  1419  00069E                     l3455:
  1420                           
  1421                           ; BSR set to: 0
  1422  00069E  0E0F               	movlw	15
  1423  0006A0  65CC               	cpfsgt	main@i& (0+255),b
  1424  0006A2  D001               	goto	l412
  1425  0006A4  D00C               	goto	u3000
  1426  0006A6                     l412:
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;main.c: 217: ReceivedString[i]=0;
  1430                           
  1431                           ; BSR set to: 0
  1432  0006A6  51CC               	movf	main@i& (0+255),w,b
  1433  0006A8  0D01               	mullw	1
  1434  0006AA  0ED5               	movlw	low _ReceivedString
  1435  0006AC  24F3               	addwf	prodl,w,c
  1436  0006AE  6ED9               	movwf	fsr2l,c
  1437  0006B0  0E00               	movlw	high _ReceivedString
  1438  0006B2  20F4               	addwfc	prodh,w,c
  1439  0006B4  6EDA               	movwf	fsr2h,c
  1440  0006B6  0E00               	movlw	0
  1441  0006B8  6EDF               	movwf	indf2,c
  1442                           
  1443                           ; BSR set to: 0
  1444  0006BA  2BCC               	incf	main@i& (0+255),f,b
  1445  0006BC  D7F0               	goto	l3455
  1446  0006BE                     u3000:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;main.c: 218: }
  1450                           ;main.c: 219: mode=3;
  1451                           
  1452                           ; BSR set to: 0
  1453  0006BE  0E03               	movlw	3
  1454  0006C0  6E32               	movwf	_mode,c	;volatile
  1455                           
  1456                           ;main.c: 221: } else {
  1457  0006C2  D076               	goto	l3497
  1458  0006C4                     l409:
  1459                           
  1460                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1461                           
  1462                           ; BSR set to: 0
  1463  0006C4  0E64               	movlw	low main@mL
  1464  0006C6  0100               	movlb	0	; () banked
  1465  0006C8  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1466  0006CA  0E02               	movlw	high main@mL
  1467  0006CC  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1468  0006CE  0E6D               	movlw	low main@mR
  1469  0006D0  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1470  0006D2  0E02               	movlw	high main@mR
  1471  0006D4  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1472  0006D6  0E64               	movlw	100
  1473  0006D8  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1474  0006DA  EC0E  F00B         	call	_fullSpeedBack	;wreg free
  1475                           
  1476                           ;main.c: 223: delay_tenth_s(5);
  1477  0006DE  0E05               	movlw	5
  1478  0006E0  EC68  F00B         	call	_delay_tenth_s
  1479                           
  1480                           ;main.c: 224: stop(&mL,&mR);
  1481  0006E4  0E64               	movlw	low main@mL
  1482  0006E6  0100               	movlb	0	; () banked
  1483  0006E8  6F71               	movwf	stop@mL& (0+255),b
  1484  0006EA  0E02               	movlw	high main@mL
  1485  0006EC  6F72               	movwf	(stop@mL+1)& (0+255),b
  1486  0006EE  0E6D               	movlw	low main@mR
  1487  0006F0  6F73               	movwf	stop@mR& (0+255),b
  1488  0006F2  0E02               	movlw	high main@mR
  1489  0006F4  6F74               	movwf	(stop@mR+1)& (0+255),b
  1490  0006F6  EC52  F009         	call	_stop	;wreg free
  1491                           
  1492                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1493  0006FA  0E64               	movlw	low main@mL
  1494  0006FC  0100               	movlb	0	; () banked
  1495  0006FE  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1496  000700  0E02               	movlw	high main@mL
  1497  000702  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1498  000704  0E6D               	movlw	low main@mR
  1499  000706  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1500  000708  0E02               	movlw	high main@mR
  1501  00070A  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1502  00070C  0E64               	movlw	100
  1503  00070E  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1504  000710  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  1505                           
  1506                           ;main.c: 226: }
  1507                           ;main.c: 227: }
  1508                           ;main.c: 228: } else {
  1509  000714  D04D               	goto	l3497
  1510  000716                     l407:
  1511                           
  1512                           ;main.c: 229: DirectionFound=1;
  1513  000716  0E01               	movlw	1
  1514  000718  0100               	movlb	0	; () banked
  1515  00071A  6FCA               	movwf	main@DirectionFound& (0+255),b
  1516                           
  1517                           ;main.c: 230: mode=1;
  1518  00071C  0E01               	movlw	1
  1519  00071E  6E32               	movwf	_mode,c	;volatile
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1523  000720  0E64               	movlw	low main@mL
  1524  000722  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1525  000724  0E02               	movlw	high main@mL
  1526  000726  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1527  000728  0E6D               	movlw	low main@mR
  1528  00072A  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1529  00072C  0E02               	movlw	high main@mR
  1530  00072E  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1531  000730  0E64               	movlw	100
  1532  000732  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1533  000734  ECDE  F009         	call	_fullSpeedAhead	;wreg free
=======
   864                           ;main.c: 90: mL.PWMperiod=199;
   865  0003B6  0E00               	movlw	0
   866  0003B8  0102               	movlb	2	; () banked
   867  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   868  0003BC  0EC7               	movlw	199
   869  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   870                           
   871                           ;main.c: 92: mR.power=0;
   872  0003C0  0E00               	movlw	0
   873  0003C2  0102               	movlb	2	; () banked
   874  0003C4  6F6D               	movwf	main@mR& (0+255),b
   875                           
   876                           ;main.c: 93: mR.direction=1;
   877  0003C6  0E01               	movlw	1
   878  0003C8  0102               	movlb	2	; () banked
   879  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   880                           
   881                           ; BSR set to: 2
   882                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   883  0003CC  0E77               	movlw	119
   884  0003CE  0102               	movlb	2	; () banked
   885  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   886  0003D2  0E0F               	movlw	15
   887  0003D4  0102               	movlb	2	; () banked
   888  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   889                           
   890                           ; BSR set to: 2
   891                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   892  0003D8  0E76               	movlw	118
   893  0003DA  0102               	movlb	2	; () banked
   894  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   895  0003DE  0E0F               	movlw	15
   896  0003E0  0102               	movlb	2	; () banked
   897  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   898                           
   899                           ;main.c: 96: mR.dir_pin=2;
   900  0003E4  0E02               	movlw	2
   901  0003E6  0102               	movlb	2	; () banked
   902  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   903                           
   904                           ;main.c: 97: mR.PWMperiod=199;
   905  0003EA  0E00               	movlw	0
   906  0003EC  0102               	movlb	2	; () banked
   907  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   908  0003F0  0EC7               	movlw	199
   909  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   910                           
   911                           ;main.c: 99: OSCCON = 0x72;
   912  0003F4  0E72               	movlw	114
   913  0003F6  6ED3               	movwf	4051,c	;volatile
   914  0003F8                     l380:
   915  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   916  0003FA  D234               	goto	l3369
   917  0003FC  D7FD               	goto	l380
   918  0003FE                     l3211:
   919                           
   920                           ;main.c: 112: stop(&mL, &mR);
   921  0003FE  0E64               	movlw	low main@mL
   922  000400  0100               	movlb	0	; () banked
   923  000402  6F62               	movwf	stop@mL& (0+255),b
   924  000404  0E02               	movlw	high main@mL
   925  000406  0100               	movlb	0	; () banked
   926  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   927  00040A  0E6D               	movlw	low main@mR
   928  00040C  0100               	movlb	0	; () banked
   929  00040E  6F64               	movwf	stop@mR& (0+255),b
   930  000410  0E02               	movlw	high main@mR
   931  000412  0100               	movlb	0	; () banked
   932  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   933  000416  ECA9  F009         	call	_stop	;wreg free
   934                           
   935                           ;main.c: 113: RFID_Read=0;
   936  00041A  0E00               	movlw	0
   937  00041C  0101               	movlb	1	; () banked
   938  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   939                           
   940                           ; BSR set to: 1
   941                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   942  000420  ECF3  F00A         	call	_grabLeftIR	;wreg free
   943  000424  C024  F0B7         	movff	?_grabLeftIR,main@SensorResult
   944  000428  C025  F0B8         	movff	?_grabLeftIR+1,main@SensorResult+1
   945                           
   946                           ;main.c: 117: SensorResult[1]=grabRightIR();
   947  00042C  ECBA  F00A         	call	_grabRightIR	;wreg free
   948  000430  C024  F0B9         	movff	?_grabRightIR,main@SensorResult+2
   949  000434  C025  F0BA         	movff	?_grabRightIR+1,main@SensorResult+3
   950                           
   951                           ;main.c: 121: CAP1BUFH=0;
   952  000438  0E00               	movlw	0
   953  00043A  6E69               	movwf	3945,c	;volatile
   954                           
   955                           ;main.c: 122: CAP1BUFL=0;
   956  00043C  0E00               	movlw	0
   957  00043E  6E68               	movwf	3944,c	;volatile
   958                           
   959                           ;main.c: 123: CAP2BUFH=0;
   960  000440  0E00               	movlw	0
   961  000442  6E67               	movwf	3943,c	;volatile
   962                           
   963                           ;main.c: 124: CAP2BUFL=0;
   964  000444  0E00               	movlw	0
   965  000446  6E66               	movwf	3942,c	;volatile
   966                           
   967                           ;main.c: 127: SendLCD(0b00000001,0);
   968  000448  0E00               	movlw	0
   969  00044A  6E28               	movwf	SendLCD@type,c
   970  00044C  0E01               	movlw	1
   971  00044E  EC6B  F00C         	call	_SendLCD
   972                           
   973                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   974  000452  0E21               	movlw	33
   975  000454                     u2767:
   976  000454  2EE8               	decfsz	wreg,f,c
   977  000456  D7FE               	goto	u2767
   978  000458  F000               	nop	
   979                           
   980                           ;main.c: 129: SendLCD(0b00000010,0);
   981  00045A  0E00               	movlw	0
   982  00045C  6E28               	movwf	SendLCD@type,c
   983  00045E  0E02               	movlw	2
   984  000460  EC6B  F00C         	call	_SendLCD
   985                           
   986                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   987  000464  0E06               	movlw	6
   988  000466  0100               	movlb	0	; () banked
   989  000468  6FB4               	movwf	??_main& (0+255),b
   990  00046A  0E30               	movlw	48
   991  00046C                     u2777:
   992  00046C  2EE8               	decfsz	wreg,f,c
   993  00046E  D7FE               	goto	u2777
   994  000470  2FB4               	decfsz	??_main& (0+255),f,b
   995  000472  D7FC               	goto	u2777
   996  000474  D000               	nop2	
   997                           
   998                           ;main.c: 131: SetLine(1);
   999  000476  0E01               	movlw	1
  1000  000478  EC53  F00C         	call	_SetLine
  1001                           
  1002                           ;main.c: 132: LCD_String("      Inert Mode");
  1003  00047C  0E1C               	movlw	low STR_5
  1004  00047E  6E2A               	movwf	LCD_String@string,c
  1005  000480  0E03               	movlw	high STR_5
  1006  000482  6E2B               	movwf	LCD_String@string+1,c
  1007  000484  EC2C  F00B         	call	_LCD_String	;wreg free
  1008                           
  1009                           ;main.c: 133: SetLine(2);
  1010  000488  0E02               	movlw	2
  1011  00048A  EC53  F00C         	call	_SetLine
  1012                           
  1013                           ;main.c: 134: if (RFID_Read) {
  1014  00048E  0101               	movlb	1	; () banked
  1015  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1016  000492  B4D8               	btfsc	status,2,c
  1017  000494  D007               	goto	l3245
  1018                           
  1019                           ; BSR set to: 1
  1020                           ;main.c: 135: LCD_String(Message);
  1021  000496  0EF0               	movlw	low main@Message
  1022  000498  6E2A               	movwf	LCD_String@string,c
  1023  00049A  0E01               	movlw	high main@Message
  1024  00049C  6E2B               	movwf	LCD_String@string+1,c
  1025  00049E  EC2C  F00B         	call	_LCD_String	;wreg free
  1026                           
  1027                           ;main.c: 136: } else {
  1028  0004A2  D1E0               	goto	l3369
  1029  0004A4                     l3245:
  1030                           
  1031                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1032  0004A4  0EC8               	movlw	low main@buf
  1033  0004A6  6E30               	movwf	sprintf@sp,c
  1034  0004A8  0E01               	movlw	high main@buf
  1035  0004AA  6E31               	movwf	sprintf@sp+1,c
  1036  0004AC  0E0B               	movlw	low STR_6
  1037  0004AE  6E32               	movwf	sprintf@f,c
  1038  0004B0  0E03               	movlw	high STR_6
  1039  0004B2  6E33               	movwf	sprintf@f+1,c
  1040  0004B4  C0B7  F034         	movff	main@SensorResult,?_sprintf+4
  1041  0004B8  C0B8  F035         	movff	main@SensorResult+1,?_sprintf+5
  1042  0004BC  C0B9  F036         	movff	main@SensorResult+2,?_sprintf+6
  1043  0004C0  C0BA  F037         	movff	main@SensorResult+3,?_sprintf+7
  1044  0004C4  ECCE  F005         	call	_sprintf	;wreg free
  1045                           
  1046                           ;main.c: 138: LCD_String(buf);
  1047  0004C8  0EC8               	movlw	low main@buf
  1048  0004CA  6E2A               	movwf	LCD_String@string,c
  1049  0004CC  0E01               	movlw	high main@buf
  1050  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1051  0004D0  EC2C  F00B         	call	_LCD_String	;wreg free
  1052                           
  1053                           ;main.c: 139: }
  1054                           ;main.c: 142: break;
  1055  0004D4  D1C7               	goto	l3369
  1056  0004D6                     l3249:
  1057                           
  1058                           ;main.c: 147: initMotorPWM();
  1059  0004D6  EC3A  F00C         	call	_initMotorPWM	;wreg free
  1060                           
  1061                           ;main.c: 148: initTimer();
  1062  0004DA  ECEC  F00C         	call	_initTimer	;wreg free
  1063                           
  1064                           ;main.c: 149: initRFID();
  1065  0004DE  ECDE  F00C         	call	_initRFID	;wreg free
  1066                           
  1067                           ;main.c: 150: initLCD();
  1068  0004E2  EC4B  F009         	call	_initLCD	;wreg free
  1069                           
  1070                           ;main.c: 151: initIR();
  1071  0004E6  ECBE  F00C         	call	_initIR	;wreg free
  1072                           
  1073                           ;main.c: 153: enableSensor(0, 1);
  1074  0004EA  0E01               	movlw	1
  1075  0004EC  6E24               	movwf	enableSensor@status,c
  1076  0004EE  0E00               	movlw	0
  1077  0004F0  EC98  F00C         	call	_enableSensor
  1078                           
  1079                           ;main.c: 154: enableSensor(1, 1);
  1080  0004F4  0E01               	movlw	1
  1081  0004F6  6E24               	movwf	enableSensor@status,c
  1082  0004F8  0E01               	movlw	1
  1083  0004FA  EC98  F00C         	call	_enableSensor
  1084                           
  1085                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1086  0004FE  0E64               	movlw	low main@mL
  1087  000500  0100               	movlb	0	; () banked
  1088  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1089  000504  0E02               	movlw	high main@mL
  1090  000506  0100               	movlb	0	; () banked
  1091  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1092  00050A  0E6D               	movlw	low main@mR
  1093  00050C  0100               	movlb	0	; () banked
  1094  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1095  000510  0E02               	movlw	high main@mR
  1096  000512  0100               	movlb	0	; () banked
  1097  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1098  000516  0E64               	movlw	100
  1099  000518  0100               	movlb	0	; () banked
  1100  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1101  00051C  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1102                           
  1103                           ;main.c: 158: delay_tenth_s(1);
  1104  000520  0E01               	movlw	1
  1105  000522  EC02  F00C         	call	_delay_tenth_s
  1106  000526  D19D               	goto	l3365
  1107  000528                     l3269:
  1108                           
  1109                           ;main.c: 170: SetLine(1);
  1110  000528  0E01               	movlw	1
  1111  00052A  EC53  F00C         	call	_SetLine
  1112                           
  1113                           ;main.c: 171: LCD_String("Searching");
  1114  00052E  0E44               	movlw	low STR_7
  1115  000530  6E2A               	movwf	LCD_String@string,c
  1116  000532  0E03               	movlw	high STR_7
  1117  000534  6E2B               	movwf	LCD_String@string+1,c
  1118  000536  EC2C  F00B         	call	_LCD_String	;wreg free
  1119                           
  1120                           ;main.c: 173: if (DirectionFound==-1) {
  1121  00053A  0100               	movlb	0	; () banked
  1122  00053C  29BB               	incf	main@DirectionFound& (0+255),w,b
  1123  00053E  A4D8               	btfss	status,2,c
  1124  000540  D030               	goto	l3285
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1128  000542  0E64               	movlw	low main@mL
  1129  000544  0100               	movlb	0	; () banked
  1130  000546  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1131  000548  0E02               	movlw	high main@mL
  1132  00054A  0100               	movlb	0	; () banked
  1133  00054C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1134  00054E  0E6D               	movlw	low main@mR
  1135  000550  0100               	movlb	0	; () banked
  1136  000552  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1137  000554  0E02               	movlw	high main@mR
  1138  000556  0100               	movlb	0	; () banked
  1139  000558  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1140  00055A  0E64               	movlw	100
  1141  00055C  0100               	movlb	0	; () banked
  1142  00055E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1143  000560  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1144                           
  1145                           ;main.c: 179: delay_tenth_s(6);
  1146  000564  0E06               	movlw	6
  1147  000566  EC02  F00C         	call	_delay_tenth_s
  1148                           
  1149                           ;main.c: 180: stop(&mL,&mR);
  1150  00056A  0E64               	movlw	low main@mL
  1151  00056C  0100               	movlb	0	; () banked
  1152  00056E  6F62               	movwf	stop@mL& (0+255),b
  1153  000570  0E02               	movlw	high main@mL
  1154  000572  0100               	movlb	0	; () banked
  1155  000574  6F63               	movwf	(stop@mL+1)& (0+255),b
  1156  000576  0E6D               	movlw	low main@mR
  1157  000578  0100               	movlb	0	; () banked
  1158  00057A  6F64               	movwf	stop@mR& (0+255),b
  1159  00057C  0E02               	movlw	high main@mR
  1160  00057E  0100               	movlb	0	; () banked
  1161  000580  6F65               	movwf	(stop@mR+1)& (0+255),b
  1162  000582  ECA9  F009         	call	_stop	;wreg free
  1163                           
  1164                           ;main.c: 181: DirectionFound=0;
  1165  000586  0E00               	movlw	0
  1166  000588  0100               	movlb	0	; () banked
  1167  00058A  6FBB               	movwf	main@DirectionFound& (0+255),b
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 182: MoveType[Move]=0;
  1171  00058C  0100               	movlb	0	; () banked
  1172  00058E  51BC               	movf	main@Move& (0+255),w,b
  1173  000590  0D01               	mullw	1
  1174  000592  0E00               	movlw	low main@MoveType
  1175  000594  24F3               	addwf	prodl,w,c
  1176  000596  6ED9               	movwf	fsr2l,c
  1177  000598  0E02               	movlw	high main@MoveType
  1178  00059A  20F4               	addwfc	prodh,w,c
  1179  00059C  6EDA               	movwf	fsr2h,c
  1180  00059E  0E00               	movlw	0
  1181  0005A0  D02B               	goto	L1
  1182  0005A2                     l3285:
  1183                           
  1184                           ; BSR set to: 0
  1185  0005A2  0100               	movlb	0	; () banked
  1186  0005A4  51BB               	movf	main@DirectionFound& (0+255),w,b
  1187  0005A6  0100               	movlb	0	; () banked
  1188  0005A8  A4D8               	btfss	status,2,c
  1189  0005AA  D028               	goto	l3291
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1193                           ;main.c: 186: &MoveTime[Move], &RFID_Read);
  1194  0005AC  0E64               	movlw	low main@mL
  1195  0005AE  0100               	movlb	0	; () banked
  1196  0005B0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1197  0005B2  0E02               	movlw	high main@mL
  1198  0005B4  0100               	movlb	0	; () banked
  1199  0005B6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1200  0005B8  0E6D               	movlw	low main@mR
  1201  0005BA  0100               	movlb	0	; () banked
  1202  0005BC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1203  0005BE  0E02               	movlw	high main@mR
  1204  0005C0  0100               	movlb	0	; () banked
  1205  0005C2  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1206  0005C4  C0B6  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1207  0005C8  0100               	movlb	0	; () banked
  1208  0005CA  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1209  0005CC  0100               	movlb	0	; () banked
  1210  0005CE  51BC               	movf	main@Move& (0+255),w,b
  1211  0005D0  0D02               	mullw	2
  1212  0005D2  0E00               	movlw	low main@MoveTime
  1213  0005D4  24F3               	addwf	prodl,w,c
  1214  0005D6  0100               	movlb	0	; () banked
  1215  0005D8  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1216  0005DA  0E01               	movlw	high main@MoveTime
  1217  0005DC  20F4               	addwfc	prodh,w,c
  1218  0005DE  0100               	movlb	0	; () banked
  1219  0005E0  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1220  0005E2  0EFE               	movlw	low _RFID_Read
  1221  0005E4  0100               	movlb	0	; () banked
  1222  0005E6  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1223  0005E8  0E01               	movlw	high _RFID_Read
  1224  0005EA  0100               	movlb	0	; () banked
  1225  0005EC  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1226  0005EE  EC43  F004         	call	_ScanWithRange	;wreg free
  1227  0005F2  0100               	movlb	0	; () banked
  1228  0005F4  6FBB               	movwf	main@DirectionFound& (0+255),b
  1229  0005F6  D030               	goto	l3299
  1230  0005F8                     L1:
  1231  0005F8  6EDF               	movwf	indf2,c
  1232                           
  1233                           ;main.c: 188: } else if (DirectionFound==1) {
  1234  0005FA  D110               	goto	l3355
  1235  0005FC                     l3291:
  1236                           
  1237                           ; BSR set to: 0
  1238  0005FC  0100               	movlb	0	; () banked
  1239  0005FE  05BB               	decf	main@DirectionFound& (0+255),w,b
  1240  000600  A4D8               	btfss	status,2,c
  1241  000602  D023               	goto	l3295
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1245  000604  0E64               	movlw	low main@mL
  1246  000606  0100               	movlb	0	; () banked
  1247  000608  6F6D               	movwf	ScanIR@mL& (0+255),b
  1248  00060A  0E02               	movlw	high main@mL
  1249  00060C  0100               	movlb	0	; () banked
  1250  00060E  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1251  000610  0E6D               	movlw	low main@mR
  1252  000612  0100               	movlb	0	; () banked
  1253  000614  6F6F               	movwf	ScanIR@mR& (0+255),b
  1254  000616  0E02               	movlw	high main@mR
  1255  000618  0100               	movlb	0	; () banked
  1256  00061A  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1257  00061C  0EBC               	movlw	low main@Move
  1258  00061E  0100               	movlb	0	; () banked
  1259  000620  6F71               	movwf	ScanIR@Move& (0+255),b
  1260  000622  0E00               	movlw	high main@Move
  1261  000624  0100               	movlb	0	; () banked
  1262  000626  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1263  000628  0E00               	movlw	low main@MoveTime
  1264  00062A  0100               	movlb	0	; () banked
  1265  00062C  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1266  00062E  0E01               	movlw	high main@MoveTime
  1267  000630  0100               	movlb	0	; () banked
  1268  000632  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1269  000634  0E00               	movlw	low main@MoveType
  1270  000636  0100               	movlb	0	; () banked
  1271  000638  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1272  00063A  0E02               	movlw	high main@MoveType
  1273  00063C  0100               	movlb	0	; () banked
  1274  00063E  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1275  000640  EC6B  F008         	call	_ScanIR	;wreg free
  1276  000644  0100               	movlb	0	; () banked
  1277  000646  6FBB               	movwf	main@DirectionFound& (0+255),b
  1278                           
  1279                           ;main.c: 191: } else if (DirectionFound==2) {
  1280  000648  D0E9               	goto	l3355
  1281  00064A                     l3295:
  1282                           
  1283                           ; BSR set to: 0
  1284  00064A  0E02               	movlw	2
  1285  00064C  0100               	movlb	0	; () banked
  1286  00064E  19BB               	xorwf	main@DirectionFound& (0+255),w,b
  1287  000650  A4D8               	btfss	status,2,c
  1288  000652  D0E4               	goto	l3355
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 193: mode=2;
  1292  000654  0E02               	movlw	2
  1293  000656  6E3B               	movwf	_mode,c	;volatile
  1294  000658                     l3299:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 194: MoveType[Move]=1;
  1298  000658  0100               	movlb	0	; () banked
  1299  00065A  51BC               	movf	main@Move& (0+255),w,b
  1300  00065C  0D01               	mullw	1
  1301  00065E  0E00               	movlw	low main@MoveType
  1302  000660  24F3               	addwf	prodl,w,c
  1303  000662  6ED9               	movwf	fsr2l,c
  1304  000664  0E02               	movlw	high main@MoveType
  1305  000666  20F4               	addwfc	prodh,w,c
  1306  000668  6EDA               	movwf	fsr2h,c
  1307  00066A  0E01               	movlw	1
  1308  00066C  D7C5               	goto	L1
  1309  00066E                     l3303:
  1310                           
  1311                           ;main.c: 206: if (RFID_Read) {
  1312  00066E  0101               	movlb	1	; () banked
  1313  000670  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1314  000672  B4D8               	btfsc	status,2,c
  1315  000674  D0A2               	goto	l3345
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 207: stop(&mL, &mR);
  1319  000676  0E64               	movlw	low main@mL
  1320  000678  0100               	movlb	0	; () banked
  1321  00067A  6F62               	movwf	stop@mL& (0+255),b
  1322  00067C  0E02               	movlw	high main@mL
  1323  00067E  0100               	movlb	0	; () banked
  1324  000680  6F63               	movwf	(stop@mL+1)& (0+255),b
  1325  000682  0E6D               	movlw	low main@mR
  1326  000684  0100               	movlb	0	; () banked
  1327  000686  6F64               	movwf	stop@mR& (0+255),b
  1328  000688  0E02               	movlw	high main@mR
  1329  00068A  0100               	movlb	0	; () banked
  1330  00068C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1331  00068E  ECA9  F009         	call	_stop	;wreg free
  1332                           
  1333                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1334  000692  0E03               	movlw	3
  1335  000694  0100               	movlb	0	; () banked
  1336  000696  19D5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1337  000698  A4D8               	btfss	status,2,c
  1338  00069A  D002               	goto	u2680
  1339  00069C  0E01               	movlw	1
  1340  00069E  D001               	goto	u2682
  1341  0006A0                     u2680:
  1342  0006A0  0E00               	movlw	0
  1343  0006A2                     u2682:
  1344  0006A2  0100               	movlb	0	; () banked
  1345  0006A4  6FB4               	movwf	??_main& (0+255),b
  1346  0006A6  0E02               	movlw	2
  1347  0006A8  0100               	movlb	0	; () banked
  1348  0006AA  19C6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1349  0006AC  A4D8               	btfss	status,2,c
  1350  0006AE  D002               	goto	u2690
  1351  0006B0  0E01               	movlw	1
  1352  0006B2  D001               	goto	u2692
  1353  0006B4                     u2690:
  1354  0006B4  0E00               	movlw	0
  1355  0006B6                     u2692:
  1356  0006B6  0100               	movlb	0	; () banked
  1357  0006B8  15B4               	andwf	??_main& (0+255),w,b
  1358  0006BA  A0E8               	btfss	wreg,0,c
  1359  0006BC  D0D3               	goto	l3369
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1363  0006BE  0EC6               	movlw	low _ReceivedString
  1364  0006C0  6E24               	movwf	VerifySignal@Signal,c
  1365  0006C2  0E00               	movlw	high _ReceivedString
  1366  0006C4  6E25               	movwf	VerifySignal@Signal+1,c
  1367  0006C6  ECEE  F007         	call	_VerifySignal	;wreg free
  1368  0006CA  0900               	iorlw	0
  1369  0006CC  B4D8               	btfsc	status,2,c
  1370  0006CE  D041               	goto	l3337
  1371                           
  1372                           ;main.c: 211: for (i=0; i<10; i++){
  1373  0006D0  0E00               	movlw	0
  1374  0006D2  0100               	movlb	0	; () banked
  1375  0006D4  6FBD               	movwf	main@i& (0+255),b
  1376  0006D6                     l3313:
  1377                           
  1378                           ; BSR set to: 0
  1379  0006D6  0E09               	movlw	9
  1380  0006D8  0100               	movlb	0	; () banked
  1381  0006DA  65BD               	cpfsgt	main@i& (0+255),b
  1382  0006DC  D001               	goto	l3317
  1383  0006DE  D020               	goto	l3323
  1384  0006E0                     l3317:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1388  0006E0  0100               	movlb	0	; () banked
  1389  0006E2  51BD               	movf	main@i& (0+255),w,b
  1390  0006E4  0100               	movlb	0	; () banked
  1391  0006E6  6FB4               	movwf	??_main& (0+255),b
  1392  0006E8  6BB5               	clrf	(??_main+1)& (0+255),b
  1393  0006EA  0E01               	movlw	1
  1394  0006EC  0100               	movlb	0	; () banked
  1395  0006EE  27B4               	addwf	??_main& (0+255),f,b
  1396  0006F0  0E00               	movlw	0
  1397  0006F2  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1398  0006F4  0EC6               	movlw	low _ReceivedString
  1399  0006F6  0100               	movlb	0	; () banked
  1400  0006F8  25B4               	addwf	??_main& (0+255),w,b
  1401  0006FA  6ED9               	movwf	fsr2l,c
  1402  0006FC  0E00               	movlw	high _ReceivedString
  1403  0006FE  0100               	movlb	0	; () banked
  1404  000700  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1405  000702  6EDA               	movwf	fsr2h,c
  1406  000704  0100               	movlb	0	; () banked
  1407  000706  51BD               	movf	main@i& (0+255),w,b
  1408  000708  0D01               	mullw	1
  1409  00070A  0EF0               	movlw	low main@Message
  1410  00070C  24F3               	addwf	prodl,w,c
  1411  00070E  6EE1               	movwf	fsr1l,c
  1412  000710  0E01               	movlw	high main@Message
  1413  000712  20F4               	addwfc	prodh,w,c
  1414  000714  6EE2               	movwf	fsr1h,c
  1415  000716  CFDF FFE7          	movff	indf2,indf1
  1416                           
  1417                           ; BSR set to: 0
  1418  00071A  0100               	movlb	0	; () banked
  1419  00071C  2BBD               	incf	main@i& (0+255),f,b
  1420  00071E  D7DB               	goto	l3313
  1421  000720                     l3323:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 213: }
  1425                           ;main.c: 216: for (i=0; i<16; i++) {
  1426  000720  0E00               	movlw	0
  1427  000722  0100               	movlb	0	; () banked
  1428  000724  6FBD               	movwf	main@i& (0+255),b
  1429  000726                     l3325:
  1430                           
  1431                           ; BSR set to: 0
  1432  000726  0E0F               	movlw	15
  1433  000728  0100               	movlb	0	; () banked
  1434  00072A  65BD               	cpfsgt	main@i& (0+255),b
  1435  00072C  D001               	goto	l3329
  1436  00072E  D00E               	goto	l3335
  1437  000730                     l3329:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 217: ReceivedString[i]=0;
  1441  000730  0100               	movlb	0	; () banked
  1442  000732  51BD               	movf	main@i& (0+255),w,b
  1443  000734  0D01               	mullw	1
  1444  000736  0EC6               	movlw	low _ReceivedString
  1445  000738  24F3               	addwf	prodl,w,c
  1446  00073A  6ED9               	movwf	fsr2l,c
  1447  00073C  0E00               	movlw	high _ReceivedString
  1448  00073E  20F4               	addwfc	prodh,w,c
  1449  000740  6EDA               	movwf	fsr2h,c
  1450  000742  0E00               	movlw	0
  1451  000744  6EDF               	movwf	indf2,c
  1452                           
  1453                           ; BSR set to: 0
  1454  000746  0100               	movlb	0	; () banked
  1455  000748  2BBD               	incf	main@i& (0+255),f,b
  1456  00074A  D7ED               	goto	l3325
  1457  00074C                     l3335:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 218: }
  1461                           ;main.c: 219: mode=3;
  1462  00074C  0E03               	movlw	3
  1463  00074E  6E3B               	movwf	_mode,c	;volatile
  1464                           
  1465                           ;main.c: 221: } else {
  1466  000750  D089               	goto	l3369
  1467  000752                     l3337:
  1468                           
  1469                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1470  000752  0E64               	movlw	low main@mL
  1471  000754  0100               	movlb	0	; () banked
  1472  000756  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1473  000758  0E02               	movlw	high main@mL
  1474  00075A  0100               	movlb	0	; () banked
  1475  00075C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1476  00075E  0E6D               	movlw	low main@mR
  1477  000760  0100               	movlb	0	; () banked
  1478  000762  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1479  000764  0E02               	movlw	high main@mR
  1480  000766  0100               	movlb	0	; () banked
  1481  000768  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1482  00076A  0E64               	movlw	100
  1483  00076C  0100               	movlb	0	; () banked
  1484  00076E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1485  000770  ECA5  F00B         	call	_fullSpeedBack	;wreg free
  1486                           
  1487                           ;main.c: 223: delay_tenth_s(5);
  1488  000774  0E05               	movlw	5
  1489  000776  EC02  F00C         	call	_delay_tenth_s
  1490                           
  1491                           ;main.c: 224: stop(&mL,&mR);
  1492  00077A  0E64               	movlw	low main@mL
  1493  00077C  0100               	movlb	0	; () banked
  1494  00077E  6F62               	movwf	stop@mL& (0+255),b
  1495  000780  0E02               	movlw	high main@mL
  1496  000782  0100               	movlb	0	; () banked
  1497  000784  6F63               	movwf	(stop@mL+1)& (0+255),b
  1498  000786  0E6D               	movlw	low main@mR
  1499  000788  0100               	movlb	0	; () banked
  1500  00078A  6F64               	movwf	stop@mR& (0+255),b
  1501  00078C  0E02               	movlw	high main@mR
  1502  00078E  0100               	movlb	0	; () banked
  1503  000790  6F65               	movwf	(stop@mR+1)& (0+255),b
  1504  000792  ECA9  F009         	call	_stop	;wreg free
  1505                           
  1506                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1507  000796  0E64               	movlw	low main@mL
  1508  000798  0100               	movlb	0	; () banked
  1509  00079A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1510  00079C  0E02               	movlw	high main@mL
  1511  00079E  0100               	movlb	0	; () banked
  1512  0007A0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1513  0007A2  0E6D               	movlw	low main@mR
  1514  0007A4  0100               	movlb	0	; () banked
  1515  0007A6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1516  0007A8  0E02               	movlw	high main@mR
  1517  0007AA  0100               	movlb	0	; () banked
  1518  0007AC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1519  0007AE  0E64               	movlw	100
  1520  0007B0  0100               	movlb	0	; () banked
  1521  0007B2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1522  0007B4  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1523                           
  1524                           ;main.c: 226: }
  1525                           ;main.c: 227: }
  1526                           ;main.c: 228: } else {
  1527  0007B8  D055               	goto	l3369
  1528  0007BA                     l3345:
  1529                           
  1530                           ;main.c: 229: DirectionFound=1;
  1531  0007BA  0E01               	movlw	1
  1532  0007BC  0100               	movlb	0	; () banked
  1533  0007BE  6FBB               	movwf	main@DirectionFound& (0+255),b
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
  1534                           
  1535                           ;main.c: 233: delay_tenth_s(5);
  1536  000738  0E05               	movlw	5
  1537  00073A  EC68  F00B         	call	_delay_tenth_s
  1538                           
<<<<<<< HEAD
  1539                           ;main.c: 234: MoveType[Move] = 0;
  1540  00073E  0100               	movlb	0	; () banked
  1541  000740  51CB               	movf	main@Move& (0+255),w,b
  1542  000742  0D01               	mullw	1
  1543  000744  0E00               	movlw	low main@MoveType
  1544  000746  24F3               	addwf	prodl,w,c
  1545  000748  6ED9               	movwf	fsr2l,c
  1546  00074A  0E02               	movlw	high main@MoveType
  1547  00074C  20F4               	addwfc	prodh,w,c
  1548  00074E  6EDA               	movwf	fsr2h,c
  1549  000750  0E00               	movlw	0
  1550  000752  6EDF               	movwf	indf2,c
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 235: MoveTime[Move] = 5;
  1554  000754  51CB               	movf	main@Move& (0+255),w,b
  1555  000756  0D02               	mullw	2
  1556  000758  0E00               	movlw	low main@MoveTime
  1557  00075A  24F3               	addwf	prodl,w,c
  1558  00075C  6ED9               	movwf	fsr2l,c
  1559  00075E  0E01               	movlw	high main@MoveTime
  1560  000760  20F4               	addwfc	prodh,w,c
  1561  000762  6EDA               	movwf	fsr2h,c
  1562  000764  0E05               	movlw	5
  1563  000766  6EDE               	movwf	postinc2,c
  1564  000768  0E00               	movlw	0
  1565  00076A  6EDD               	movwf	postdec2,c
  1566  00076C                     l3485:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 236: Move++;
  1570  00076C  2BCB               	incf	main@Move& (0+255),f,b
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;main.c: 237: }
  1574                           ;main.c: 239: break;
  1575  00076E  D020               	goto	l3497
  1576  000770                     
  1577                           ;main.c: 244: SetLine(1);
  1578                           
  1579                           ; BSR set to: 0
  1580  000770  0E01               	movlw	1
  1581  000772  ECA0  F00B         	call	_SetLine
  1582                           
  1583                           ;main.c: 245: LCD_String(Message);
  1584  000776  0EF0               	movlw	low main@Message
  1585  000778  0100               	movlb	0	; () banked
  1586  00077A  6F60               	movwf	LCD_String@string& (0+255),b
  1587  00077C  0E01               	movlw	high main@Message
  1588  00077E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1589  000780  EC92  F00A         	call	_LCD_String	;wreg free
  1590                           
  1591                           ;main.c: 246: SetLine(2);
  1592  000784  0E02               	movlw	2
  1593  000786  ECA0  F00B         	call	_SetLine
  1594                           
  1595                           ;main.c: 247: LCD_String("Going Home");
  1596  00078A  0E39               	movlw	low STR_8
  1597  00078C  0100               	movlb	0	; () banked
  1598  00078E  6F60               	movwf	LCD_String@string& (0+255),b
  1599  000790  0E03               	movlw	high STR_8
  1600  000792  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1601  000794  EC92  F00A         	call	_LCD_String	;wreg free
  1602                           
  1603                           ;main.c: 248: stop(&mL,&mR);
  1604  000798  0E64               	movlw	low main@mL
  1605  00079A  0100               	movlb	0	; () banked
  1606  00079C  6F71               	movwf	stop@mL& (0+255),b
  1607  00079E  0E02               	movlw	high main@mL
  1608  0007A0  6F72               	movwf	(stop@mL+1)& (0+255),b
  1609  0007A2  0E6D               	movlw	low main@mR
  1610  0007A4  6F73               	movwf	stop@mR& (0+255),b
  1611  0007A6  0E02               	movlw	high main@mR
  1612  0007A8  6F74               	movwf	(stop@mR+1)& (0+255),b
  1613  0007AA  EC52  F009         	call	_stop	;wreg free
  1614  0007AE                     l3495:
  1615                           
  1616                           ;main.c: 264: mode=-1;
  1617  0007AE  6832               	setf	_mode,c	;volatile
  1618  0007B0                     l3497:
  1619                           
  1620                           ;main.c: 267: }
  1621  0007B0  5032               	movf	_mode,w,c	;volatile
  1622                           
  1623                           ; Switch size 1, requested type "space"
  1624                           ; Number of cases is 5, Range of values is 0 to 255
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; simple_byte           16     9 (average)
  1628                           ;	Chosen strategy is simple_byte
  1629  0007B2  0A00               	xorlw	0	; case 0
  1630  0007B4  B4D8               	btfsc	status,2,c
  1631  0007B6  D67E               	goto	l397
  1632  0007B8  0A01               	xorlw	1	; case 1
  1633  0007BA  B4D8               	btfsc	status,2,c
  1634  0007BC  D6A0               	goto	l398
  1635  0007BE  0A03               	xorlw	3	; case 2
  1636  0007C0  B4D8               	btfsc	status,2,c
  1637  0007C2  D720               	goto	l406
  1638  0007C4  0A01               	xorlw	1	; case 3
  1639  0007C6  B4D8               	btfsc	status,2,c
  1640  0007C8  D7D3               	goto	l416
  1641  0007CA  0AFC               	xorlw	252	; case 255
  1642  0007CC  B4D8               	btfsc	status,2,c
  1643  0007CE  D605               	goto	l393
  1644  0007D0  D7EF               	goto	l3497
  1645  0007D2                     __end_of_main:
  1646                           	opt stack 0
  1647                           tblptru	equ	0xFF8
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           indf1	equ	0xFE7
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           indf2	equ	0xFDF
  1657                           postinc2	equ	0xFDE
  1658                           postdec2	equ	0xFDD
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _initTimer *****************
  1664 ;; Defined at:
  1665 ;;		line 8 in file "Movement.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		None
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1679 ;;      Params:         0       0       0       0
  1680 ;;      Locals:         0       0       0       0
  1681 ;;      Temps:          0       0       0       0
  1682 ;;      Totals:         0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    3
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text1
  1694  0018AA                     __ptext1:
  1695                           	opt stack 0
  1696  0018AA                     _initTimer:
  1697                           	opt stack 27
  1698                           
  1699                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1700                           
  1701                           ;incstack = 0
  1702  0018AA  9ED5               	bcf	4053,7,c	;volatile
  1703                           
  1704                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1705  0018AC  9CD5               	bcf	4053,6,c	;volatile
  1706                           
  1707                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1708  0018AE  9AD5               	bcf	4053,5,c	;volatile
  1709                           
  1710                           ;Movement.c: 13: T0CONbits.PSA=0;
  1711  0018B0  96D5               	bcf	4053,3,c	;volatile
  1712                           
  1713                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1714  0018B2  80D5               	bsf	4053,0,c	;volatile
  1715  0018B4  82D5               	bsf	4053,1,c	;volatile
  1716  0018B6  84D5               	bsf	4053,2,c	;volatile
  1717                           
  1718                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1719  0018B8  9AF2               	bcf	intcon,5,c	;volatile
  1720  0018BA  0012               	return		;funcret
  1721  0018BC                     __end_of_initTimer:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           indf1	equ	0xFE7
  1730                           fsr1h	equ	0xFE2
  1731                           fsr1l	equ	0xFE1
  1732                           indf2	equ	0xFDF
  1733                           postinc2	equ	0xFDE
  1734                           postdec2	equ	0xFDD
  1735                           fsr2h	equ	0xFDA
  1736                           fsr2l	equ	0xFD9
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _initRFID *****************
  1740 ;; Defined at:
  1741 ;;		line 5 in file "RFID_Reader.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1755 ;;      Params:         0       0       0       0
  1756 ;;      Locals:         0       0       0       0
  1757 ;;      Temps:          0       0       0       0
  1758 ;;      Totals:         0       0       0       0
  1759 ;;Total ram usage:        0 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    3
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text2
  1770  00188E                     __ptext2:
  1771                           	opt stack 0
  1772  00188E                     _initRFID:
  1773                           	opt stack 27
  1774                           
  1775                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1776                           
  1777                           ;incstack = 0
  1778  00188E  5094               	movf	3988,w,c	;volatile
  1779  001890  09C0               	iorlw	192
  1780  001892  6E94               	movwf	3988,c	;volatile
  1781                           
  1782                           ;RFID_Reader.c: 10: SPBRG=205;
  1783  001894  0ECD               	movlw	205
  1784  001896  6EAF               	movwf	4015,c	;volatile
  1785                           
  1786                           ;RFID_Reader.c: 11: SPBRGH=0;
  1787  001898  0E00               	movlw	0
  1788  00189A  6EB0               	movwf	4016,c	;volatile
  1789                           
  1790                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1791  00189C  86AA               	bsf	4010,3,c	;volatile
  1792                           
  1793                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1794  00189E  84AC               	bsf	4012,2,c	;volatile
  1795                           
  1796                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1797  0018A0  88AB               	bsf	4011,4,c	;volatile
  1798                           
  1799                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1800  0018A2  8EAB               	bsf	4011,7,c	;volatile
  1801                           
  1802                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1803  0018A4  98AC               	bcf	4012,4,c	;volatile
  1804                           
  1805                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1806  0018A6  9CAB               	bcf	4011,6,c	;volatile
  1807  0018A8  0012               	return		;funcret
  1808  0018AA                     __end_of_initRFID:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           prodh	equ	0xFF4
  1812                           prodl	equ	0xFF3
  1813                           intcon	equ	0xFF2
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           indf1	equ	0xFE7
  1817                           fsr1h	equ	0xFE2
  1818                           fsr1l	equ	0xFE1
  1819                           indf2	equ	0xFDF
  1820                           postinc2	equ	0xFDE
  1821                           postdec2	equ	0xFDD
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _initMotorPWM *****************
  1827 ;; Defined at:
  1828 ;;		line 4 in file "dc_motor.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1842 ;;      Params:         0       0       0       0
  1843 ;;      Locals:         0       0       0       0
  1844 ;;      Temps:          0       0       0       0
  1845 ;;      Totals:         0       0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    3
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text3
  1857  001776                     __ptext3:
  1858                           	opt stack 0
  1859  001776                     _initMotorPWM:
  1860                           	opt stack 27
  1861                           
  1862                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1863                           
  1864                           ;incstack = 0
  1865  001776  0E00               	movlw	0
  1866  001778  6E7F               	movwf	3967,c	;volatile
  1867                           
  1868                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1869  00177A  0E80               	movlw	128
  1870  00177C  6E7E               	movwf	3966,c	;volatile
  1871                           
  1872                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1873  00177E  0E6F               	movlw	111
  1874  001780  6E6F               	movwf	3951,c	;volatile
  1875                           
  1876                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1877  001782  0E00               	movlw	0
  1878  001784  6E6E               	movwf	3950,c	;volatile
  1879                           
  1880                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1881  001786  0EC7               	movlw	199
  1882  001788  6E7B               	movwf	3963,c	;volatile
  1883                           
  1884                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1885  00178A  0E00               	movlw	0
  1886  00178C  6E7A               	movwf	3962,c	;volatile
  1887                           
  1888                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1889  00178E  0E00               	movlw	0
  1890  001790  6E79               	movwf	3961,c	;volatile
  1891                           
  1892                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1893  001792  0E00               	movlw	0
  1894  001794  6E78               	movwf	3960,c	;volatile
  1895                           
  1896                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1897  001796  0E00               	movlw	0
  1898  001798  6E77               	movwf	3959,c	;volatile
  1899                           
  1900                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1901  00179A  0E00               	movlw	0
  1902  00179C  6E76               	movwf	3958,c	;volatile
  1903                           
  1904                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1905  00179E  9093               	bcf	3987,0,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1908  0017A0  9293               	bcf	3987,1,c	;volatile
  1909                           
  1910                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1911  0017A2  9493               	bcf	3987,2,c	;volatile
  1912                           
  1913                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1914  0017A4  9693               	bcf	3987,3,c	;volatile
  1915  0017A6  0012               	return		;funcret
  1916  0017A8                     __end_of_initMotorPWM:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           indf1	equ	0xFE7
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           postinc2	equ	0xFDE
  1929                           postdec2	equ	0xFDD
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _initLCD *****************
  1935 ;; Defined at:
  1936 ;;		line 38 in file "LCD.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1950 ;;      Params:         0       0       0       0
  1951 ;;      Locals:         0       0       0       0
  1952 ;;      Temps:          0       1       0       0
  1953 ;;      Totals:         0       1       0       0
  1954 ;;Total ram usage:        1 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    6
  1957 ;; This function calls:
  1958 ;;		_LCDout
  1959 ;;		_SendLCD
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text4
  1966  00112E                     __ptext4:
  1967                           	opt stack 0
  1968  00112E                     _initLCD:
  1969                           	opt stack 24
  1970                           
  1971                           ;LCD.c: 44: TRISAbits.RA6=0;
  1972                           
  1973                           ;incstack = 0
  1974  00112E  9C92               	bcf	3986,6,c	;volatile
  1975                           
  1976                           ;LCD.c: 45: TRISCbits.RC0=0;
  1977  001130  9094               	bcf	3988,0,c	;volatile
  1978                           
  1979                           ;LCD.c: 46: TRISCbits.RC1=0;
  1980  001132  9294               	bcf	3988,1,c	;volatile
  1981                           
  1982                           ;LCD.c: 47: TRISCbits.RC2=0;
  1983  001134  9494               	bcf	3988,2,c	;volatile
  1984                           
  1985                           ;LCD.c: 48: TRISDbits.RD0=0;
  1986  001136  9095               	bcf	3989,0,c	;volatile
  1987                           
  1988                           ;LCD.c: 49: TRISDbits.RD1=0;
  1989  001138  9295               	bcf	3989,1,c	;volatile
  1990                           
  1991                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1992  00113A  0E27               	movlw	39
  1993  00113C  0100               	movlb	0	; () banked
  1994  00113E  6F60               	movwf	??_initLCD& (0+255),b
  1995  001140  0EF5               	movlw	245
  1996  001142                     u3037:
  1997  001142  2EE8               	decfsz	wreg,f,c
  1998  001144  D7FE               	bra	u3037
  1999  001146  2F60               	decfsz	??_initLCD& (0+255),f,b
  2000  001148  D7FC               	bra	u3037
  2001                           
  2002                           ;LCD.c: 52: LCDout(0b0011);
  2003  00114A  0E03               	movlw	3
  2004  00114C  EC34  F008         	call	_LCDout
  2005                           
  2006                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2007  001150  0E0D               	movlw	13
  2008  001152  0100               	movlb	0	; () banked
  2009  001154  6F60               	movwf	??_initLCD& (0+255),b
  2010  001156  0EFB               	movlw	251
  2011  001158                     u3047:
  2012  001158  2EE8               	decfsz	wreg,f,c
  2013  00115A  D7FE               	bra	u3047
  2014  00115C  2F60               	decfsz	??_initLCD& (0+255),f,b
  2015  00115E  D7FC               	bra	u3047
  2016  001160  D000               	nop2	
  2017                           
  2018                           ;LCD.c: 54: LCDout(0b0011);
  2019  001162  0E03               	movlw	3
  2020  001164  EC34  F008         	call	_LCDout
  2021                           
  2022                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2023  001168  0E85               	movlw	133
  2024  00116A                     u3057:
  2025  00116A  2EE8               	decfsz	wreg,f,c
  2026  00116C  D7FE               	bra	u3057
  2027  00116E  F000               	nop	
  2028                           
  2029                           ;LCD.c: 56: LCDout(0b0011);
  2030  001170  0E03               	movlw	3
  2031  001172  EC34  F008         	call	_LCDout
  2032                           
  2033                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2034  001176  0E21               	movlw	33
  2035  001178                     u3067:
  2036  001178  2EE8               	decfsz	wreg,f,c
  2037  00117A  D7FE               	bra	u3067
  2038  00117C  F000               	nop	
  2039                           
  2040                           ;LCD.c: 58: LCDout(0b0010);
  2041  00117E  0E02               	movlw	2
  2042  001180  EC34  F008         	call	_LCDout
  2043                           
  2044                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2045  001184  0E21               	movlw	33
  2046  001186                     u3077:
  2047  001186  2EE8               	decfsz	wreg,f,c
  2048  001188  D7FE               	bra	u3077
  2049  00118A  F000               	nop	
  2050                           
  2051                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2052  00118C  0E00               	movlw	0
  2053  00118E  6E30               	movwf	SendLCD@type,c
  2054  001190  0E28               	movlw	40
  2055  001192  ECD4  F00B         	call	_SendLCD
  2056                           
  2057                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2058  001196  0E21               	movlw	33
  2059  001198                     u3087:
  2060  001198  2EE8               	decfsz	wreg,f,c
  2061  00119A  D7FE               	bra	u3087
  2062  00119C  F000               	nop	
  2063                           
  2064                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2065  00119E  0E00               	movlw	0
  2066  0011A0  6E30               	movwf	SendLCD@type,c
  2067  0011A2  0E08               	movlw	8
  2068  0011A4  ECD4  F00B         	call	_SendLCD
  2069                           
  2070                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2071  0011A8  0E21               	movlw	33
  2072  0011AA                     u3097:
  2073  0011AA  2EE8               	decfsz	wreg,f,c
  2074  0011AC  D7FE               	bra	u3097
  2075  0011AE  F000               	nop	
  2076                           
  2077                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2078  0011B0  0E00               	movlw	0
  2079  0011B2  6E30               	movwf	SendLCD@type,c
  2080  0011B4  0E01               	movlw	1
  2081  0011B6  ECD4  F00B         	call	_SendLCD
  2082                           
  2083                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2084  0011BA  0E0D               	movlw	13
  2085  0011BC  0100               	movlb	0	; () banked
  2086  0011BE  6F60               	movwf	??_initLCD& (0+255),b
  2087  0011C0  0EFB               	movlw	251
  2088  0011C2                     u3107:
  2089  0011C2  2EE8               	decfsz	wreg,f,c
  2090  0011C4  D7FE               	bra	u3107
  2091  0011C6  2F60               	decfsz	??_initLCD& (0+255),f,b
  2092  0011C8  D7FC               	bra	u3107
  2093  0011CA  D000               	nop2	
  2094                           
  2095                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2096  0011CC  0E00               	movlw	0
  2097  0011CE  6E30               	movwf	SendLCD@type,c
  2098  0011D0  0E06               	movlw	6
  2099  0011D2  ECD4  F00B         	call	_SendLCD
  2100                           
  2101                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2102  0011D6  0E21               	movlw	33
  2103  0011D8                     u3117:
  2104  0011D8  2EE8               	decfsz	wreg,f,c
  2105  0011DA  D7FE               	bra	u3117
  2106  0011DC  F000               	nop	
  2107                           
  2108                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2109  0011DE  0E00               	movlw	0
  2110  0011E0  6E30               	movwf	SendLCD@type,c
  2111  0011E2  0E0C               	movlw	12
  2112  0011E4  ECD4  F00B         	call	_SendLCD
  2113                           
  2114                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2115  0011E8  0E21               	movlw	33
  2116  0011EA                     u3127:
  2117  0011EA  2EE8               	decfsz	wreg,f,c
  2118  0011EC  D7FE               	bra	u3127
  2119  0011EE  F000               	nop	
  2120  0011F0  0012               	return		;funcret
  2121  0011F2                     __end_of_initLCD:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           prodh	equ	0xFF4
  2125                           prodl	equ	0xFF3
  2126                           intcon	equ	0xFF2
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           indf1	equ	0xFE7
  2130                           fsr1h	equ	0xFE2
  2131                           fsr1l	equ	0xFE1
  2132                           indf2	equ	0xFDF
  2133                           postinc2	equ	0xFDE
  2134                           postdec2	equ	0xFDD
  2135                           fsr2h	equ	0xFDA
  2136                           fsr2l	equ	0xFD9
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _initIR *****************
  2140 ;; Defined at:
  2141 ;;		line 30 in file "IR_Reading.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2155 ;;      Params:         0       0       0       0
  2156 ;;      Locals:         0       0       0       0
  2157 ;;      Temps:          0       0       0       0
  2158 ;;      Totals:         0       0       0       0
  2159 ;;Total ram usage:        0 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    3
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text5
  2170  00184E                     __ptext5:
  2171                           	opt stack 0
  2172  00184E                     _initIR:
  2173                           	opt stack 27
  2174                           
  2175                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2176                           
  2177                           ;incstack = 0
  2178  00184E  9489               	bcf	3977,2,c	;volatile
  2179                           
  2180                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2181  001850  9689               	bcf	3977,3,c	;volatile
  2182                           
  2183                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2184  001852  8492               	bsf	3986,2,c	;volatile
  2185                           
  2186                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2187  001854  8692               	bsf	3986,3,c	;volatile
  2188                           
  2189                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2190  001856  94B8               	bcf	4024,2,c	;volatile
  2191                           
  2192                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2193  001858  96B8               	bcf	4024,3,c	;volatile
  2194                           
  2195                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2196  00185A  9CB8               	bcf	4024,6,c	;volatile
  2197                           
  2198                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2199  00185C  9EB8               	bcf	4024,7,c	;volatile
  2200                           
  2201                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2202  00185E  0E06               	movlw	6
  2203  001860  6E63               	movwf	3939,c	;volatile
  2204                           
  2205                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2206  001862  0E06               	movlw	6
  2207  001864  6E62               	movwf	3938,c	;volatile
  2208                           
  2209                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2210  001866  9096               	bcf	3990,0,c	;volatile
  2211                           
  2212                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2213  001868  9296               	bcf	3990,1,c	;volatile
  2214                           
  2215                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2216  00186A  0E59               	movlw	89
  2217  00186C  6EB7               	movwf	4023,c	;volatile
  2218  00186E  0012               	return		;funcret
  2219  001870                     __end_of_initIR:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           prodh	equ	0xFF4
  2223                           prodl	equ	0xFF3
  2224                           intcon	equ	0xFF2
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           indf1	equ	0xFE7
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _fullSpeedBack *****************
  2238 ;; Defined at:
  2239 ;;		line 125 in file "dc_motor.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2242 ;;		 -> main@mL(9), 
  2243 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2244 ;;		 -> main@mR(9), 
  2245 ;;  power           1   27[BANK0 ] unsigned char 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;		None
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      void 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2257 ;;      Params:         0       5       0       0
  2258 ;;      Locals:         0       0       0       0
  2259 ;;      Temps:          0       0       0       0
  2260 ;;      Totals:         0       5       0       0
  2261 ;;Total ram usage:        5 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    6
  2264 ;; This function calls:
  2265 ;;		_fullSpeedAhead
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text6
  2272  00161C                     __ptext6:
  2273                           	opt stack 0
  2274  00161C                     _fullSpeedBack:
  2275                           	opt stack 24
  2276                           
  2277                           ;dc_motor.c: 128: mL->direction=0;
  2278                           
  2279                           ;incstack = 0
  2280  00161C  0100               	movlb	0	; () banked
  2281  00161E  EE20 F001          	lfsr	2,1
  2282  001622  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2283  001624  26D9               	addwf	fsr2l,f,c
  2284  001626  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2285  001628  22DA               	addwfc	fsr2h,f,c
  2286  00162A  0E00               	movlw	0
  2287  00162C  6EDF               	movwf	indf2,c
  2288                           
  2289                           ;dc_motor.c: 129: mR->direction=0;
  2290  00162E  EE20 F001          	lfsr	2,1
  2291  001632  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2292  001634  26D9               	addwf	fsr2l,f,c
  2293  001636  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2294  001638  22DA               	addwfc	fsr2h,f,c
  2295  00163A  0E00               	movlw	0
  2296  00163C  6EDF               	movwf	indf2,c
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2300  00163E  C077  F071         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2301  001642  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2302  001646  C079  F073         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2303  00164A  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2304  00164E  C07B  F075         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2305  001652  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  2306  001656  0012               	return		;funcret
  2307  001658                     __end_of_fullSpeedBack:
  2308                           	opt stack 0
  2309                           tblptru	equ	0xFF8
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           indf1	equ	0xFE7
  2316                           fsr1h	equ	0xFE2
  2317                           fsr1l	equ	0xFE1
  2318                           indf2	equ	0xFDF
  2319                           postinc2	equ	0xFDE
  2320                           postdec2	equ	0xFDD
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function _enableSensor *****************
  2326 ;; Defined at:
  2327 ;;		line 106 in file "IR_Reading.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  sensor          1    wreg     unsigned char 
  2330 ;;  status          1   43[COMRAM] unsigned char 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  sensor          1   44[COMRAM] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2342 ;;      Params:         1       0       0       0
  2343 ;;      Locals:         1       0       0       0
  2344 ;;      Temps:          0       0       0       0
  2345 ;;      Totals:         2       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text7
  2357  001802                     __ptext7:
  2358                           	opt stack 0
  2359  001802                     _enableSensor:
  2360                           	opt stack 27
  2361                           
  2362                           ;incstack = 0
  2363                           ;enableSensor@sensor stored from wreg
  2364  001802  6E2D               	movwf	enableSensor@sensor,c
  2365                           
  2366                           ;IR_Reading.c: 108: if (sensor==0){
  2367  001804  502D               	movf	enableSensor@sensor,w,c
  2368  001806  A4D8               	btfss	status,2,c
  2369  001808  D006               	goto	l115
  2370                           
  2371                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2372  00180A  B02C               	btfsc	enableSensor@status,0,c
  2373  00180C  D002               	bra	u1775
  2374  00180E  908D               	bcf	3981,0,c	;volatile
  2375  001810  D001               	bra	u1776
  2376  001812                     u1775:
  2377  001812  808D               	bsf	3981,0,c	;volatile
  2378  001814                     u1776:
  2379                           
  2380                           ;IR_Reading.c: 110: } else if (sensor==1){
  2381  001814  0012               	return	
  2382  001816                     l115:
  2383  001816  042D               	decf	enableSensor@sensor,w,c
  2384  001818  A4D8               	btfss	status,2,c
  2385  00181A  0012               	return	
  2386                           
  2387                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2388  00181C  B02C               	btfsc	enableSensor@status,0,c
  2389  00181E  D002               	bra	u1795
  2390  001820  928D               	bcf	3981,1,c	;volatile
  2391  001822  D001               	bra	u1796
  2392  001824                     u1795:
  2393  001824  828D               	bsf	3981,1,c	;volatile
  2394  001826                     u1796:
  2395  001826  0012               	return	
  2396  001828                     __end_of_enableSensor:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           intcon	equ	0xFF2
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           indf1	equ	0xFE7
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           fsr2h	equ	0xFDA
  2411                           fsr2l	equ	0xFD9
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _VerifySignal *****************
  2415 ;; Defined at:
  2416 ;;		line 55 in file "RFID_Reader.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  Signal          2   43[COMRAM] PTR unsigned char 
  2419 ;;		 -> ReceivedString(16), 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  hexByte         2   45[COMRAM] unsigned int 
  2422 ;;  i               1   48[COMRAM] unsigned char 
  2423 ;;  checksum        1   47[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      unsigned char 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2433 ;;      Params:         2       0       0       0
  2434 ;;      Locals:         4       0       0       0
  2435 ;;      Temps:          0       6       0       0
  2436 ;;      Totals:         6       6       0       0
  2437 ;;Total ram usage:       12 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    3
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text8
  2448  000E78                     __ptext8:
  2449                           	opt stack 0
  2450  000E78                     _VerifySignal:
  2451                           	opt stack 27
  2452                           
  2453                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2454                           
  2455                           ;incstack = 0
  2456  000E78  0E00               	movlw	0
  2457  000E7A  6E30               	movwf	VerifySignal@checksum,c
  2458                           
  2459                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2460  000E7C  0E00               	movlw	0
  2461  000E7E  6E2F               	movwf	VerifySignal@hexByte+1,c
  2462  000E80  0E00               	movlw	0
  2463  000E82  6E2E               	movwf	VerifySignal@hexByte,c
  2464                           
  2465                           ;RFID_Reader.c: 58: unsigned char i=0;
  2466  000E84  0E00               	movlw	0
  2467  000E86  6E31               	movwf	VerifySignal@i,c
  2468                           
  2469                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2470  000E88  EE20 F004          	lfsr	2,4
  2471  000E8C  502C               	movf	VerifySignal@Signal,w,c
  2472  000E8E  26D9               	addwf	fsr2l,f,c
  2473  000E90  502D               	movf	VerifySignal@Signal+1,w,c
  2474  000E92  22DA               	addwfc	fsr2h,f,c
  2475  000E94  50DF               	movf	indf2,w,c
  2476  000E96  0100               	movlb	0	; () banked
  2477  000E98  6F60               	movwf	??_VerifySignal& (0+255),b
  2478  000E9A  EE20 F003          	lfsr	2,3
  2479  000E9E  502C               	movf	VerifySignal@Signal,w,c
  2480  000EA0  26D9               	addwf	fsr2l,f,c
  2481  000EA2  502D               	movf	VerifySignal@Signal+1,w,c
  2482  000EA4  22DA               	addwfc	fsr2h,f,c
  2483  000EA6  50DF               	movf	indf2,w,c
  2484  000EA8  6F61               	movwf	(??_VerifySignal+1)& (0+255),b
  2485  000EAA  5161               	movf	(??_VerifySignal+1)& (0+255),w,b
  2486  000EAC  6F63               	movwf	(??_VerifySignal+3)& (0+255),b
  2487  000EAE  6B62               	clrf	(??_VerifySignal+2)& (0+255),b
  2488  000EB0  5160               	movf	??_VerifySignal& (0+255),w,b
  2489  000EB2  2562               	addwf	(??_VerifySignal+2)& (0+255),w,b
  2490  000EB4  6E2E               	movwf	VerifySignal@hexByte,c
  2491  000EB6  0E00               	movlw	0
  2492  000EB8  2163               	addwfc	(??_VerifySignal+3)& (0+255),w,b
  2493  000EBA  6E2F               	movwf	VerifySignal@hexByte+1,c
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2497  000EBC  EE20 F002          	lfsr	2,2
  2498  000EC0  502C               	movf	VerifySignal@Signal,w,c
  2499  000EC2  26D9               	addwf	fsr2l,f,c
  2500  000EC4  502D               	movf	VerifySignal@Signal+1,w,c
  2501  000EC6  22DA               	addwfc	fsr2h,f,c
  2502  000EC8  50DF               	movf	indf2,w,c
  2503  000ECA  182E               	xorwf	VerifySignal@hexByte,w,c
  2504  000ECC  6E30               	movwf	VerifySignal@checksum,c
  2505                           
  2506                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2507  000ECE  0E05               	movlw	5
  2508  000ED0  6E31               	movwf	VerifySignal@i,c
  2509  000ED2                     l3269:
  2510                           
  2511                           ; BSR set to: 0
  2512  000ED2  0E09               	movlw	9
  2513  000ED4  6431               	cpfsgt	VerifySignal@i,c
  2514  000ED6  D001               	goto	l277
  2515  000ED8  D028               	goto	u2820
  2516  000EDA                     l277:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2520                           
  2521                           ; BSR set to: 0
  2522  000EDA  5031               	movf	VerifySignal@i,w,c
  2523  000EDC  6F60               	movwf	??_VerifySignal& (0+255),b
  2524  000EDE  6B61               	clrf	(??_VerifySignal+1)& (0+255),b
  2525  000EE0  0E01               	movlw	1
  2526  000EE2  2760               	addwf	??_VerifySignal& (0+255),f,b
  2527  000EE4  0E00               	movlw	0
  2528  000EE6  2361               	addwfc	(??_VerifySignal+1)& (0+255),f,b
  2529  000EE8  5160               	movf	??_VerifySignal& (0+255),w,b
  2530  000EEA  242C               	addwf	VerifySignal@Signal,w,c
  2531  000EEC  6ED9               	movwf	fsr2l,c
  2532  000EEE  5161               	movf	(??_VerifySignal+1)& (0+255),w,b
  2533  000EF0  202D               	addwfc	VerifySignal@Signal+1,w,c
  2534  000EF2  6EDA               	movwf	fsr2h,c
  2535  000EF4  50DF               	movf	indf2,w,c
  2536  000EF6  6F62               	movwf	(??_VerifySignal+2)& (0+255),b
  2537  000EF8  5031               	movf	VerifySignal@i,w,c
  2538  000EFA  0D01               	mullw	1
  2539  000EFC  50F3               	movf	prodl,w,c
  2540  000EFE  242C               	addwf	VerifySignal@Signal,w,c
  2541  000F00  6ED9               	movwf	fsr2l,c
  2542  000F02  50F4               	movf	prodh,w,c
  2543  000F04  202D               	addwfc	VerifySignal@Signal+1,w,c
  2544  000F06  6EDA               	movwf	fsr2h,c
  2545  000F08  50DF               	movf	indf2,w,c
  2546  000F0A  6F63               	movwf	(??_VerifySignal+3)& (0+255),b
  2547  000F0C  5163               	movf	(??_VerifySignal+3)& (0+255),w,b
  2548  000F0E  6F65               	movwf	(??_VerifySignal+5)& (0+255),b
  2549  000F10  6B64               	clrf	(??_VerifySignal+4)& (0+255),b
  2550  000F12  5162               	movf	(??_VerifySignal+2)& (0+255),w,b
  2551  000F14  2564               	addwf	(??_VerifySignal+4)& (0+255),w,b
  2552  000F16  6E2E               	movwf	VerifySignal@hexByte,c
  2553  000F18  0E00               	movlw	0
  2554  000F1A  2165               	addwfc	(??_VerifySignal+5)& (0+255),w,b
  2555  000F1C  6E2F               	movwf	VerifySignal@hexByte+1,c
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2559  000F1E  5030               	movf	VerifySignal@checksum,w,c
  2560  000F20  182E               	xorwf	VerifySignal@hexByte,w,c
  2561  000F22  6E30               	movwf	VerifySignal@checksum,c
  2562                           
  2563                           ; BSR set to: 0
  2564  000F24  0E02               	movlw	2
  2565  000F26  2631               	addwf	VerifySignal@i,f,c
  2566  000F28  D7D4               	goto	l3269
  2567  000F2A                     u2820:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;RFID_Reader.c: 68: }
  2571                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2572                           
  2573                           ; BSR set to: 0
  2574  000F2A  5030               	movf	VerifySignal@checksum,w,c
  2575  000F2C  6F60               	movwf	??_VerifySignal& (0+255),b
  2576  000F2E  6B61               	clrf	(??_VerifySignal+1)& (0+255),b
  2577  000F30  EE20 F00B          	lfsr	2,11
  2578  000F34  502C               	movf	VerifySignal@Signal,w,c
  2579  000F36  26D9               	addwf	fsr2l,f,c
  2580  000F38  502D               	movf	VerifySignal@Signal+1,w,c
  2581  000F3A  22DA               	addwfc	fsr2h,f,c
  2582  000F3C  50DF               	movf	indf2,w,c
  2583  000F3E  6F62               	movwf	(??_VerifySignal+2)& (0+255),b
  2584  000F40  5162               	movf	(??_VerifySignal+2)& (0+255),w,b
  2585  000F42  6F64               	movwf	(??_VerifySignal+4)& (0+255),b
  2586  000F44  6B63               	clrf	(??_VerifySignal+3)& (0+255),b
  2587  000F46  EE20 F00C          	lfsr	2,12
  2588  000F4A  502C               	movf	VerifySignal@Signal,w,c
  2589  000F4C  26D9               	addwf	fsr2l,f,c
  2590  000F4E  502D               	movf	VerifySignal@Signal+1,w,c
  2591  000F50  22DA               	addwfc	fsr2h,f,c
  2592  000F52  50DF               	movf	indf2,w,c
  2593  000F54  6F65               	movwf	(??_VerifySignal+5)& (0+255),b
  2594  000F56  5165               	movf	(??_VerifySignal+5)& (0+255),w,b
  2595  000F58  2763               	addwf	(??_VerifySignal+3)& (0+255),f,b
  2596  000F5A  0E00               	movlw	0
  2597  000F5C  2364               	addwfc	(??_VerifySignal+4)& (0+255),f,b
  2598  000F5E  5160               	movf	??_VerifySignal& (0+255),w,b
  2599  000F60  1963               	xorwf	(??_VerifySignal+3)& (0+255),w,b
  2600  000F62  E106               	bnz	l3289
  2601  000F64  5161               	movf	(??_VerifySignal+1)& (0+255),w,b
  2602  000F66  1964               	xorwf	(??_VerifySignal+4)& (0+255),w,b
  2603  000F68  A4D8               	btfss	status,2,c
  2604  000F6A  D002               	goto	l279
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;RFID_Reader.c: 71: return 1;
  2608  000F6C  0E01               	movlw	1
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;RFID_Reader.c: 72: } else{
  2612                           
  2613                           ; BSR set to: 0
  2614  000F6E  0012               	return	
  2615  000F70                     l279:
  2616  000F70                     l3289:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;RFID_Reader.c: 73: return 0;
  2620  000F70  0E00               	movlw	0
  2621                           
  2622                           ; BSR set to: 0
  2623  000F72  0012               	return	
  2624  000F74                     __end_of_VerifySignal:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           intcon	equ	0xFF2
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           indf1	equ	0xFE7
  2633                           fsr1h	equ	0xFE2
  2634                           fsr1l	equ	0xFE1
  2635                           indf2	equ	0xFDF
  2636                           postinc2	equ	0xFDE
  2637                           postdec2	equ	0xFDD
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _ScanWithRange *****************
  2643 ;; Defined at:
  2644 ;;		line 91 in file "Movement.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  2647 ;;		 -> main@mL(9), 
  2648 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  2649 ;;		 -> main@mR(9), 
  2650 ;;  milliseconds    2   32[BANK0 ] int 
  2651 ;;  MoveTimeEntr    2   34[BANK0 ] PTR int 
  2652 ;;		 -> main@MoveTime(200), 
  2653 ;;  RFID_Read       2   36[BANK0 ] PTR unsigned char 
  2654 ;;		 -> RFID_Read(1), 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  buf            40   43[BANK0 ] unsigned char [40]
  2657 ;;  SensorResult    4   91[BANK0 ] unsigned int [2]
  2658 ;;  RightFlag       2   97[BANK0 ] unsigned int 
  2659 ;;  LeftFlag        2   95[BANK0 ] unsigned int 
  2660 ;;  DirectionFou    2   87[BANK0 ] const unsigned int 
  2661 ;;  i               2   85[BANK0 ] unsigned int 
  2662 ;;  n               2   83[BANK0 ] unsigned int 
  2663 ;;  TimeAboveThr    1   90[BANK0 ] unsigned char 
  2664 ;;  power           1   89[BANK0 ] const unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      unsigned char 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2674 ;;      Params:         0      10       0       0
  2675 ;;      Locals:         0      56       0       0
  2676 ;;      Temps:          0       5       0       0
  2677 ;;      Totals:         0      71       0       0
  2678 ;;Total ram usage:       71 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    7
  2681 ;; This function calls:
  2682 ;;		_LCD_String
  2683 ;;		_SendLCD
  2684 ;;		_SetLine
  2685 ;;		_delay_tenth_s
  2686 ;;		_grabLeftIR
  2687 ;;		_grabRightIR
  2688 ;;		_sprintf
  2689 ;;		_stop
  2690 ;;		_turnLeft
  2691 ;;		_turnRight
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text9
  2698  0007D2                     __ptext9:
  2699                           	opt stack 0
  2700  0007D2                     _ScanWithRange:
  2701                           	opt stack 23
  2702                           
  2703                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;incstack = 0
  2707  0007D2  C0CD  F0BB         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  2708  0007D6  C0CE  F0BC         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  2709  0007DA  C0CF  F0BD         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  2710  0007DE  C0D0  F0BE         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  2711                           
  2712                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2713  0007E2  0E00               	movlw	0
  2714  0007E4  0100               	movlb	0	; () banked
  2715  0007E6  6FC0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2716  0007E8  0E00               	movlw	0
  2717  0007EA  6FBF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2718                           
  2719                           ;Movement.c: 97: unsigned int RightFlag=0;
  2720  0007EC  0E00               	movlw	0
  2721  0007EE  6FC2               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2722  0007F0  0E00               	movlw	0
  2723  0007F2  6FC1               	movwf	ScanWithRange@RightFlag& (0+255),b
  2724                           
  2725                           ;Movement.c: 98: char buf[40];
  2726                           ;Movement.c: 99: unsigned int i=0;
  2727  0007F4  0E00               	movlw	0
  2728  0007F6  6FB6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2729  0007F8  0E00               	movlw	0
  2730  0007FA  6FB5               	movwf	ScanWithRange@i& (0+255),b
  2731                           
  2732                           ;Movement.c: 100: unsigned int n=0;
  2733  0007FC  0E00               	movlw	0
  2734  0007FE  6FB4               	movwf	(ScanWithRange@n+1)& (0+255),b
  2735  000800  0E00               	movlw	0
  2736  000802  6FB3               	movwf	ScanWithRange@n& (0+255),b
  2737                           
  2738                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2739  000804  0E00               	movlw	0
  2740  000806  6FBA               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2741                           
  2742                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2743  000808  0E0B               	movlw	11
  2744  00080A  6FB8               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2745  00080C  0EB8               	movlw	184
  2746  00080E  6FB7               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2747                           
  2748                           ;Movement.c: 105: const unsigned char power=40;
  2749  000810  0E28               	movlw	40
  2750  000812  6FB9               	movwf	ScanWithRange@power& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2754  000814  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  2755  000818  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2756  00081C  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  2757  000820  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2758  000824  0E64               	movlw	100
  2759  000826  6F7B               	movwf	turnLeft@power& (0+255),b
  2760  000828  EC4A  F00B         	call	_turnLeft	;wreg free
  2761                           
  2762                           ;Movement.c: 115: delay_tenth_s(3);
  2763  00082C  0E03               	movlw	3
  2764  00082E  EC68  F00B         	call	_delay_tenth_s
  2765                           
  2766                           ;Movement.c: 116: stop(mL,mR);
  2767  000832  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  2768  000836  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  2769  00083A  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  2770  00083E  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  2771  000842  EC52  F009         	call	_stop	;wreg free
  2772                           
  2773                           ;Movement.c: 119: turnRight(mL,mR, power);
  2774  000846  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  2775  00084A  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2776  00084E  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  2777  000852  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2778  000856  C0B9  F07B         	movff	ScanWithRange@power,turnRight@power
  2779  00085A  EC2C  F00B         	call	_turnRight	;wreg free
  2780                           
  2781                           ;Movement.c: 122: TMR0L = 0;
  2782  00085E  0E00               	movlw	0
  2783  000860  6ED6               	movwf	4054,c	;volatile
  2784                           
  2785                           ;Movement.c: 123: TMR0H = 0;
  2786  000862  0E00               	movlw	0
  2787  000864  6ED7               	movwf	4055,c	;volatile
  2788                           
  2789                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2790  000866  8ED5               	bsf	4053,7,c	;volatile
  2791                           
  2792                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2793  000868  0E00               	movlw	0
  2794  00086A  0100               	movlb	0	; () banked
  2795  00086C  6FB6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2796  00086E  0E01               	movlw	1
  2797  000870  6FB5               	movwf	ScanWithRange@i& (0+255),b
  2798  000872  D0F2               	goto	l219
  2799  000874                     
  2800                           ; BSR set to: 0
  2801                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2802                           
  2803                           ; BSR set to: 0
  2804  000874  EC57  F00A         	call	_grabLeftIR	;wreg free
  2805  000878  C02C  F0BB         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2806  00087C  C02D  F0BC         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2807                           
  2808                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2809  000880  EC1C  F00A         	call	_grabRightIR	;wreg free
  2810  000884  C02C  F0BD         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2811  000888  C02D  F0BE         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2812                           
  2813                           ;Movement.c: 134: CAP1BUFH=0;
  2814  00088C  0E00               	movlw	0
  2815  00088E  6E69               	movwf	3945,c	;volatile
=======
  1539                           ; BSR set to: 0
  1540                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1541  0007C4  0E64               	movlw	low main@mL
  1542  0007C6  0100               	movlb	0	; () banked
  1543  0007C8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1544  0007CA  0E02               	movlw	high main@mL
  1545  0007CC  0100               	movlb	0	; () banked
  1546  0007CE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1547  0007D0  0E6D               	movlw	low main@mR
  1548  0007D2  0100               	movlb	0	; () banked
  1549  0007D4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1550  0007D6  0E02               	movlw	high main@mR
  1551  0007D8  0100               	movlb	0	; () banked
  1552  0007DA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1553  0007DC  0E64               	movlw	100
  1554  0007DE  0100               	movlb	0	; () banked
  1555  0007E0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1556  0007E2  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1557                           
  1558                           ;main.c: 233: delay_tenth_s(5);
  1559  0007E6  0E05               	movlw	5
  1560  0007E8  EC02  F00C         	call	_delay_tenth_s
  1561                           
  1562                           ;main.c: 234: MoveType[Move] = 0;
  1563  0007EC  0100               	movlb	0	; () banked
  1564  0007EE  51BC               	movf	main@Move& (0+255),w,b
  1565  0007F0  0D01               	mullw	1
  1566  0007F2  0E00               	movlw	low main@MoveType
  1567  0007F4  24F3               	addwf	prodl,w,c
  1568  0007F6  6ED9               	movwf	fsr2l,c
  1569  0007F8  0E02               	movlw	high main@MoveType
  1570  0007FA  20F4               	addwfc	prodh,w,c
  1571  0007FC  6EDA               	movwf	fsr2h,c
  1572  0007FE  0E00               	movlw	0
  1573  000800  6EDF               	movwf	indf2,c
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 235: MoveTime[Move] = 5;
  1577  000802  0100               	movlb	0	; () banked
  1578  000804  51BC               	movf	main@Move& (0+255),w,b
  1579  000806  0D02               	mullw	2
  1580  000808  0E00               	movlw	low main@MoveTime
  1581  00080A  24F3               	addwf	prodl,w,c
  1582  00080C  6ED9               	movwf	fsr2l,c
  1583  00080E  0E01               	movlw	high main@MoveTime
  1584  000810  20F4               	addwfc	prodh,w,c
  1585  000812  6EDA               	movwf	fsr2h,c
  1586  000814  0E05               	movlw	5
  1587  000816  6EDE               	movwf	postinc2,c
  1588  000818  0E00               	movlw	0
  1589  00081A  6EDD               	movwf	postdec2,c
  1590  00081C                     l3355:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 236: Move++;
  1594  00081C  0100               	movlb	0	; () banked
  1595  00081E  2BBC               	incf	main@Move& (0+255),f,b
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 237: }
  1599                           ;main.c: 239: break;
  1600  000820  D021               	goto	l3369
  1601  000822                     l3357:
  1602                           
  1603                           ;main.c: 244: SetLine(1);
  1604  000822  0E01               	movlw	1
  1605  000824  EC53  F00C         	call	_SetLine
  1606                           
  1607                           ;main.c: 245: LCD_String(Message);
  1608  000828  0EF0               	movlw	low main@Message
  1609  00082A  6E2A               	movwf	LCD_String@string,c
  1610  00082C  0E01               	movlw	high main@Message
  1611  00082E  6E2B               	movwf	LCD_String@string+1,c
  1612  000830  EC2C  F00B         	call	_LCD_String	;wreg free
  1613                           
  1614                           ;main.c: 246: SetLine(2);
  1615  000834  0E02               	movlw	2
  1616  000836  EC53  F00C         	call	_SetLine
  1617                           
  1618                           ;main.c: 247: LCD_String("Going Home");
  1619  00083A  0E39               	movlw	low STR_8
  1620  00083C  6E2A               	movwf	LCD_String@string,c
  1621  00083E  0E03               	movlw	high STR_8
  1622  000840  6E2B               	movwf	LCD_String@string+1,c
  1623  000842  EC2C  F00B         	call	_LCD_String	;wreg free
  1624                           
  1625                           ;main.c: 248: stop(&mL,&mR);
  1626  000846  0E64               	movlw	low main@mL
  1627  000848  0100               	movlb	0	; () banked
  1628  00084A  6F62               	movwf	stop@mL& (0+255),b
  1629  00084C  0E02               	movlw	high main@mL
  1630  00084E  0100               	movlb	0	; () banked
  1631  000850  6F63               	movwf	(stop@mL+1)& (0+255),b
  1632  000852  0E6D               	movlw	low main@mR
  1633  000854  0100               	movlb	0	; () banked
  1634  000856  6F64               	movwf	stop@mR& (0+255),b
  1635  000858  0E02               	movlw	high main@mR
  1636  00085A  0100               	movlb	0	; () banked
  1637  00085C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1638  00085E  ECA9  F009         	call	_stop	;wreg free
  1639  000862                     l3365:
  1640                           
  1641                           ;main.c: 264: mode=-1;
  1642  000862  683B               	setf	_mode,c	;volatile
  1643  000864                     l3369:
  1644  000864  503B               	movf	_mode,w,c	;volatile
  1645                           
  1646                           ; Switch size 1, requested type "space"
  1647                           ; Number of cases is 5, Range of values is 0 to 255
  1648                           ; switch strategies available:
  1649                           ; Name         Instructions Cycles
  1650                           ; simple_byte           16     9 (average)
  1651                           ;	Chosen strategy is simple_byte
  1652  000866  0A00               	xorlw	0	; case 0
  1653  000868  B4D8               	btfsc	status,2,c
  1654  00086A  D635               	goto	l3249
  1655  00086C  0A01               	xorlw	1	; case 1
  1656  00086E  B4D8               	btfsc	status,2,c
  1657  000870  D65B               	goto	l3269
  1658  000872  0A03               	xorlw	3	; case 2
  1659  000874  B4D8               	btfsc	status,2,c
  1660  000876  D6FB               	goto	l3303
  1661  000878  0A01               	xorlw	1	; case 3
  1662  00087A  B4D8               	btfsc	status,2,c
  1663  00087C  D7D2               	goto	l3357
  1664  00087E  0AFC               	xorlw	252	; case 255
  1665  000880  B4D8               	btfsc	status,2,c
  1666  000882  D5BD               	goto	l3211
  1667  000884  D7EF               	goto	l3369
  1668  000886                     __end_of_main:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           intcon	equ	0xFF2
  1674                           postinc0	equ	0xFEE
  1675                           wreg	equ	0xFE8
  1676                           indf1	equ	0xFE7
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           postdec2	equ	0xFDD
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _initTimer *****************
  1687 ;; Defined at:
  1688 ;;		line 8 in file "Movement.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;		None               void
  1695 ;; Registers used:
  1696 ;;		None
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1702 ;;      Params:         0       0       0       0
  1703 ;;      Locals:         0       0       0       0
  1704 ;;      Temps:          0       0       0       0
  1705 ;;      Totals:         0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    3
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text1
  1717  0019D8                     __ptext1:
  1718                           	opt stack 0
  1719  0019D8                     _initTimer:
  1720                           	opt stack 27
  1721                           
  1722                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1723                           
  1724                           ;incstack = 0
  1725  0019D8  9ED5               	bcf	4053,7,c	;volatile
  1726                           
  1727                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1728  0019DA  9CD5               	bcf	4053,6,c	;volatile
  1729                           
  1730                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1731  0019DC  9AD5               	bcf	4053,5,c	;volatile
  1732                           
  1733                           ;Movement.c: 13: T0CONbits.PSA=0;
  1734  0019DE  96D5               	bcf	4053,3,c	;volatile
  1735                           
  1736                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1737  0019E0  80D5               	bsf	4053,0,c	;volatile
  1738  0019E2  82D5               	bsf	4053,1,c	;volatile
  1739  0019E4  84D5               	bsf	4053,2,c	;volatile
  1740                           
  1741                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1742  0019E6  9AF2               	bcf	intcon,5,c	;volatile
  1743  0019E8  0012               	return		;funcret
  1744  0019EA                     __end_of_initTimer:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           indf1	equ	0xFE7
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           indf2	equ	0xFDF
  1756                           postinc2	equ	0xFDE
  1757                           postdec2	equ	0xFDD
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _initRFID *****************
  1763 ;; Defined at:
  1764 ;;		line 5 in file "RFID_Reader.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;		None               void
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1778 ;;      Params:         0       0       0       0
  1779 ;;      Locals:         0       0       0       0
  1780 ;;      Temps:          0       0       0       0
  1781 ;;      Totals:         0       0       0       0
  1782 ;;Total ram usage:        0 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    3
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text2
  1793  0019BC                     __ptext2:
  1794                           	opt stack 0
  1795  0019BC                     _initRFID:
  1796                           	opt stack 27
  1797                           
  1798                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1799                           
  1800                           ;incstack = 0
  1801  0019BC  5094               	movf	3988,w,c	;volatile
  1802  0019BE  09C0               	iorlw	192
  1803  0019C0  6E94               	movwf	3988,c	;volatile
  1804                           
  1805                           ;RFID_Reader.c: 10: SPBRG=205;
  1806  0019C2  0ECD               	movlw	205
  1807  0019C4  6EAF               	movwf	4015,c	;volatile
  1808                           
  1809                           ;RFID_Reader.c: 11: SPBRGH=0;
  1810  0019C6  0E00               	movlw	0
  1811  0019C8  6EB0               	movwf	4016,c	;volatile
  1812                           
  1813                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1814  0019CA  86AA               	bsf	4010,3,c	;volatile
  1815                           
  1816                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1817  0019CC  84AC               	bsf	4012,2,c	;volatile
  1818                           
  1819                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1820  0019CE  88AB               	bsf	4011,4,c	;volatile
  1821                           
  1822                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1823  0019D0  8EAB               	bsf	4011,7,c	;volatile
  1824                           
  1825                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1826  0019D2  98AC               	bcf	4012,4,c	;volatile
  1827                           
  1828                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1829  0019D4  9CAB               	bcf	4011,6,c	;volatile
  1830  0019D6  0012               	return		;funcret
  1831  0019D8                     __end_of_initRFID:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           indf1	equ	0xFE7
  1840                           fsr1h	equ	0xFE2
  1841                           fsr1l	equ	0xFE1
  1842                           indf2	equ	0xFDF
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _initMotorPWM *****************
  1850 ;; Defined at:
  1851 ;;		line 4 in file "dc_motor.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, status,2
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       0       0       0
  1868 ;;      Totals:         0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    3
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text3
  1880  001874                     __ptext3:
  1881                           	opt stack 0
  1882  001874                     _initMotorPWM:
  1883                           	opt stack 27
  1884                           
  1885                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1886                           
  1887                           ;incstack = 0
  1888  001874  0E00               	movlw	0
  1889  001876  6E7F               	movwf	3967,c	;volatile
  1890                           
  1891                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1892  001878  0E80               	movlw	128
  1893  00187A  6E7E               	movwf	3966,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1896  00187C  0E6F               	movlw	111
  1897  00187E  6E6F               	movwf	3951,c	;volatile
  1898                           
  1899                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1900  001880  0E00               	movlw	0
  1901  001882  6E6E               	movwf	3950,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1904  001884  0EC7               	movlw	199
  1905  001886  6E7B               	movwf	3963,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1908  001888  0E00               	movlw	0
  1909  00188A  6E7A               	movwf	3962,c	;volatile
  1910                           
  1911                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1912  00188C  0E00               	movlw	0
  1913  00188E  6E79               	movwf	3961,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1916  001890  0E00               	movlw	0
  1917  001892  6E78               	movwf	3960,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1920  001894  0E00               	movlw	0
  1921  001896  6E77               	movwf	3959,c	;volatile
  1922                           
  1923                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1924  001898  0E00               	movlw	0
  1925  00189A  6E76               	movwf	3958,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1928  00189C  9093               	bcf	3987,0,c	;volatile
  1929                           
  1930                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1931  00189E  9293               	bcf	3987,1,c	;volatile
  1932                           
  1933                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1934  0018A0  9493               	bcf	3987,2,c	;volatile
  1935                           
  1936                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1937  0018A2  9693               	bcf	3987,3,c	;volatile
  1938  0018A4  0012               	return		;funcret
  1939  0018A6                     __end_of_initMotorPWM:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf1	equ	0xFE7
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _initLCD *****************
  1958 ;; Defined at:
  1959 ;;		line 38 in file "LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1973 ;;      Params:         0       0       0       0
  1974 ;;      Locals:         0       0       0       0
  1975 ;;      Temps:          1       0       0       0
  1976 ;;      Totals:         1       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_LCDout
  1982 ;;		_SendLCD
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  001296                     __ptext4:
  1990                           	opt stack 0
  1991  001296                     _initLCD:
  1992                           	opt stack 24
  1993                           
  1994                           ;LCD.c: 44: TRISAbits.RA6=0;
  1995                           
  1996                           ;incstack = 0
  1997  001296  9C92               	bcf	3986,6,c	;volatile
  1998                           
  1999                           ;LCD.c: 45: TRISCbits.RC0=0;
  2000  001298  9094               	bcf	3988,0,c	;volatile
  2001                           
  2002                           ;LCD.c: 46: TRISCbits.RC1=0;
  2003  00129A  9294               	bcf	3988,1,c	;volatile
  2004                           
  2005                           ;LCD.c: 47: TRISCbits.RC2=0;
  2006  00129C  9494               	bcf	3988,2,c	;volatile
  2007                           
  2008                           ;LCD.c: 48: TRISDbits.RD0=0;
  2009  00129E  9095               	bcf	3989,0,c	;volatile
  2010                           
  2011                           ;LCD.c: 49: TRISDbits.RD1=0;
  2012  0012A0  9295               	bcf	3989,1,c	;volatile
  2013                           
  2014                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2015  0012A2  0E27               	movlw	39
  2016  0012A4  6E2A               	movwf	??_initLCD& (0+255),c
  2017  0012A6  0EF5               	movlw	245
  2018  0012A8                     u2787:
  2019  0012A8  2EE8               	decfsz	wreg,f,c
  2020  0012AA  D7FE               	goto	u2787
  2021  0012AC  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2022  0012AE  D7FC               	goto	u2787
  2023  0012B0  F000               	nop	
  2024                           
  2025                           ;LCD.c: 52: LCDout(0b0011);
  2026  0012B2  0E03               	movlw	3
  2027  0012B4  ECE8  F008         	call	_LCDout
  2028                           
  2029                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2030  0012B8  0E0D               	movlw	13
  2031  0012BA  6E2A               	movwf	??_initLCD& (0+255),c
  2032  0012BC  0EFC               	movlw	252
  2033  0012BE                     u2797:
  2034  0012BE  2EE8               	decfsz	wreg,f,c
  2035  0012C0  D7FE               	goto	u2797
  2036  0012C2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2037  0012C4  D7FC               	goto	u2797
  2038                           
  2039                           ;LCD.c: 54: LCDout(0b0011);
  2040  0012C6  0E03               	movlw	3
  2041  0012C8  ECE8  F008         	call	_LCDout
  2042                           
  2043                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2044  0012CC  0E85               	movlw	133
  2045  0012CE                     u2807:
  2046  0012CE  2EE8               	decfsz	wreg,f,c
  2047  0012D0  D7FE               	goto	u2807
  2048  0012D2  F000               	nop	
  2049                           
  2050                           ;LCD.c: 56: LCDout(0b0011);
  2051  0012D4  0E03               	movlw	3
  2052  0012D6  ECE8  F008         	call	_LCDout
  2053                           
  2054                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2055  0012DA  0E21               	movlw	33
  2056  0012DC                     u2817:
  2057  0012DC  2EE8               	decfsz	wreg,f,c
  2058  0012DE  D7FE               	goto	u2817
  2059  0012E0  F000               	nop	
  2060                           
  2061                           ;LCD.c: 58: LCDout(0b0010);
  2062  0012E2  0E02               	movlw	2
  2063  0012E4  ECE8  F008         	call	_LCDout
  2064                           
  2065                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2066  0012E8  0E21               	movlw	33
  2067  0012EA                     u2827:
  2068  0012EA  2EE8               	decfsz	wreg,f,c
  2069  0012EC  D7FE               	goto	u2827
  2070  0012EE  F000               	nop	
  2071                           
  2072                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2073  0012F0  0E00               	movlw	0
  2074  0012F2  6E28               	movwf	SendLCD@type,c
  2075  0012F4  0E28               	movlw	40
  2076  0012F6  EC6B  F00C         	call	_SendLCD
  2077                           
  2078                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2079  0012FA  0E21               	movlw	33
  2080  0012FC                     u2837:
  2081  0012FC  2EE8               	decfsz	wreg,f,c
  2082  0012FE  D7FE               	goto	u2837
  2083  001300  F000               	nop	
  2084                           
  2085                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2086  001302  0E00               	movlw	0
  2087  001304  6E28               	movwf	SendLCD@type,c
  2088  001306  0E08               	movlw	8
  2089  001308  EC6B  F00C         	call	_SendLCD
  2090                           
  2091                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2092  00130C  0E21               	movlw	33
  2093  00130E                     u2847:
  2094  00130E  2EE8               	decfsz	wreg,f,c
  2095  001310  D7FE               	goto	u2847
  2096  001312  F000               	nop	
  2097                           
  2098                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2099  001314  0E00               	movlw	0
  2100  001316  6E28               	movwf	SendLCD@type,c
  2101  001318  0E01               	movlw	1
  2102  00131A  EC6B  F00C         	call	_SendLCD
  2103                           
  2104                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2105  00131E  0E0D               	movlw	13
  2106  001320  6E2A               	movwf	??_initLCD& (0+255),c
  2107  001322  0EFC               	movlw	252
  2108  001324                     u2857:
  2109  001324  2EE8               	decfsz	wreg,f,c
  2110  001326  D7FE               	goto	u2857
  2111  001328  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2112  00132A  D7FC               	goto	u2857
  2113                           
  2114                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2115  00132C  0E00               	movlw	0
  2116  00132E  6E28               	movwf	SendLCD@type,c
  2117  001330  0E06               	movlw	6
  2118  001332  EC6B  F00C         	call	_SendLCD
  2119                           
  2120                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2121  001336  0E21               	movlw	33
  2122  001338                     u2867:
  2123  001338  2EE8               	decfsz	wreg,f,c
  2124  00133A  D7FE               	goto	u2867
  2125  00133C  F000               	nop	
  2126                           
  2127                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2128  00133E  0E00               	movlw	0
  2129  001340  6E28               	movwf	SendLCD@type,c
  2130  001342  0E0C               	movlw	12
  2131  001344  EC6B  F00C         	call	_SendLCD
  2132                           
  2133                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2134  001348  0E21               	movlw	33
  2135  00134A                     u2877:
  2136  00134A  2EE8               	decfsz	wreg,f,c
  2137  00134C  D7FE               	goto	u2877
  2138  00134E  F000               	nop	
  2139  001350  0012               	return		;funcret
  2140  001352                     __end_of_initLCD:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           intcon	equ	0xFF2
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           indf1	equ	0xFE7
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function _initIR *****************
  2159 ;; Defined at:
  2160 ;;		line 30 in file "IR_Reading.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, status,2
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    3
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text5
  2189  00197C                     __ptext5:
  2190                           	opt stack 0
  2191  00197C                     _initIR:
  2192                           	opt stack 27
  2193                           
  2194                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2195                           
  2196                           ;incstack = 0
  2197  00197C  9489               	bcf	3977,2,c	;volatile
  2198                           
  2199                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2200  00197E  9689               	bcf	3977,3,c	;volatile
  2201                           
  2202                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2203  001980  8492               	bsf	3986,2,c	;volatile
  2204                           
  2205                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2206  001982  8692               	bsf	3986,3,c	;volatile
  2207                           
  2208                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2209  001984  94B8               	bcf	4024,2,c	;volatile
  2210                           
  2211                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2212  001986  96B8               	bcf	4024,3,c	;volatile
  2213                           
  2214                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2215  001988  9CB8               	bcf	4024,6,c	;volatile
  2216                           
  2217                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2218  00198A  9EB8               	bcf	4024,7,c	;volatile
  2219                           
  2220                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2221  00198C  0E06               	movlw	6
  2222  00198E  6E63               	movwf	3939,c	;volatile
  2223                           
  2224                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2225  001990  0E06               	movlw	6
  2226  001992  6E62               	movwf	3938,c	;volatile
  2227                           
  2228                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2229  001994  9096               	bcf	3990,0,c	;volatile
  2230                           
  2231                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2232  001996  9296               	bcf	3990,1,c	;volatile
  2233                           
  2234                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2235  001998  0E59               	movlw	89
  2236  00199A  6EB7               	movwf	4023,c	;volatile
  2237  00199C  0012               	return		;funcret
  2238  00199E                     __end_of_initIR:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           indf1	equ	0xFE7
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _fullSpeedBack *****************
  2257 ;; Defined at:
  2258 ;;		line 125 in file "dc_motor.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2261 ;;		 -> main@mL(9), 
  2262 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2263 ;;		 -> main@mR(9), 
  2264 ;;  power           1   11[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;		None
  2267 ;; Return value:  Size  Location     Type
  2268 ;;		None               void
  2269 ;; Registers used:
  2270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2276 ;;      Params:         0       5       0       0
  2277 ;;      Locals:         0       0       0       0
  2278 ;;      Temps:          0       0       0       0
  2279 ;;      Totals:         0       5       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    6
  2283 ;; This function calls:
  2284 ;;		_fullSpeedAhead
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text6
  2291  00174A                     __ptext6:
  2292                           	opt stack 0
  2293  00174A                     _fullSpeedBack:
  2294                           	opt stack 24
  2295                           
  2296                           ;dc_motor.c: 128: mL->direction=0;
  2297                           
  2298                           ;incstack = 0
  2299  00174A  0100               	movlb	0	; () banked
  2300  00174C  EE20 F001          	lfsr	2,1
  2301  001750  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2302  001752  26D9               	addwf	fsr2l,f,c
  2303  001754  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2304  001756  22DA               	addwfc	fsr2h,f,c
  2305  001758  0E00               	movlw	0
  2306  00175A  6EDF               	movwf	indf2,c
  2307                           
  2308                           ;dc_motor.c: 129: mR->direction=0;
  2309  00175C  0100               	movlb	0	; () banked
  2310  00175E  EE20 F001          	lfsr	2,1
  2311  001762  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2312  001764  26D9               	addwf	fsr2l,f,c
  2313  001766  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2314  001768  22DA               	addwfc	fsr2h,f,c
  2315  00176A  0E00               	movlw	0
  2316  00176C  6EDF               	movwf	indf2,c
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2320  00176E  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2321  001772  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2322  001776  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2323  00177A  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2324  00177E  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2325  001782  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  2326  001786  0012               	return		;funcret
  2327  001788                     __end_of_fullSpeedBack:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           intcon	equ	0xFF2
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           indf1	equ	0xFE7
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           indf2	equ	0xFDF
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _enableSensor *****************
  2346 ;; Defined at:
  2347 ;;		line 106 in file "IR_Reading.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  sensor          1    wreg     unsigned char 
  2350 ;;  status          1   35[COMRAM] unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  sensor          1   36[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2362 ;;      Params:         1       0       0       0
  2363 ;;      Locals:         1       0       0       0
  2364 ;;      Temps:          0       0       0       0
  2365 ;;      Totals:         2       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    3
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text7
  2377  001930                     __ptext7:
  2378                           	opt stack 0
  2379  001930                     _enableSensor:
  2380                           	opt stack 27
  2381                           
  2382                           ;incstack = 0
  2383                           ;enableSensor@sensor stored from wreg
  2384  001930  6E25               	movwf	enableSensor@sensor,c
  2385                           
  2386                           ;IR_Reading.c: 108: if (sensor==0){
  2387  001932  5025               	movf	enableSensor@sensor,w,c
  2388  001934  A4D8               	btfss	status,2,c
  2389  001936  D006               	goto	l2329
  2390                           
  2391                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2392  001938  B024               	btfsc	enableSensor@status,0,c
  2393  00193A  D002               	bra	u1755
  2394  00193C  908D               	bcf	3981,0,c	;volatile
  2395  00193E  D001               	bra	u1756
  2396  001940                     u1755:
  2397  001940  808D               	bsf	3981,0,c	;volatile
  2398  001942                     u1756:
  2399                           
  2400                           ;IR_Reading.c: 110: } else if (sensor==1){
  2401  001942  0012               	return	
  2402  001944                     l2329:
  2403  001944  0425               	decf	enableSensor@sensor,w,c
  2404  001946  A4D8               	btfss	status,2,c
  2405  001948  0012               	return	
  2406                           
  2407                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2408  00194A  B024               	btfsc	enableSensor@status,0,c
  2409  00194C  D002               	bra	u1775
  2410  00194E  928D               	bcf	3981,1,c	;volatile
  2411  001950  D001               	bra	u1776
  2412  001952                     u1775:
  2413  001952  828D               	bsf	3981,1,c	;volatile
  2414  001954                     u1776:
  2415  001954  0012               	return	
  2416  001956                     __end_of_enableSensor:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           indf1	equ	0xFE7
  2425                           fsr1h	equ	0xFE2
  2426                           fsr1l	equ	0xFE1
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _VerifySignal *****************
  2435 ;; Defined at:
  2436 ;;		line 55 in file "RFID_Reader.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2439 ;;		 -> ReceivedString(16), 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  hexByte         2   43[COMRAM] unsigned int 
  2442 ;;  i               1   46[COMRAM] unsigned char 
  2443 ;;  checksum        1   45[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      unsigned char 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2453 ;;      Params:         2       0       0       0
  2454 ;;      Locals:         4       0       0       0
  2455 ;;      Temps:          6       0       0       0
  2456 ;;      Totals:        12       0       0       0
  2457 ;;Total ram usage:       12 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    3
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text8
  2468  000FDC                     __ptext8:
  2469                           	opt stack 0
  2470  000FDC                     _VerifySignal:
  2471                           	opt stack 27
  2472                           
  2473                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2474                           
  2475                           ;incstack = 0
  2476  000FDC  0E00               	movlw	0
  2477  000FDE  6E2E               	movwf	VerifySignal@checksum,c
  2478                           
  2479                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2480  000FE0  0E00               	movlw	0
  2481  000FE2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2482  000FE4  0E00               	movlw	0
  2483  000FE6  6E2C               	movwf	VerifySignal@hexByte,c
  2484                           
  2485                           ;RFID_Reader.c: 58: unsigned char i=0;
  2486  000FE8  0E00               	movlw	0
  2487  000FEA  6E2F               	movwf	VerifySignal@i,c
  2488                           
  2489                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2490  000FEC  EE20 F004          	lfsr	2,4
  2491  000FF0  5024               	movf	VerifySignal@Signal,w,c
  2492  000FF2  26D9               	addwf	fsr2l,f,c
  2493  000FF4  5025               	movf	VerifySignal@Signal+1,w,c
  2494  000FF6  22DA               	addwfc	fsr2h,f,c
  2495  000FF8  50DF               	movf	indf2,w,c
  2496  000FFA  6E26               	movwf	??_VerifySignal& (0+255),c
  2497  000FFC  EE20 F003          	lfsr	2,3
  2498  001000  5024               	movf	VerifySignal@Signal,w,c
  2499  001002  26D9               	addwf	fsr2l,f,c
  2500  001004  5025               	movf	VerifySignal@Signal+1,w,c
  2501  001006  22DA               	addwfc	fsr2h,f,c
  2502  001008  50DF               	movf	indf2,w,c
  2503  00100A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2504  00100C  5027               	movf	??_VerifySignal+1,w,c
  2505  00100E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2506  001010  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2507  001012  5026               	movf	??_VerifySignal,w,c
  2508  001014  2428               	addwf	??_VerifySignal+2,w,c
  2509  001016  6E2C               	movwf	VerifySignal@hexByte,c
  2510  001018  0E00               	movlw	0
  2511  00101A  2029               	addwfc	??_VerifySignal+3,w,c
  2512  00101C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2513                           
  2514                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2515  00101E  EE20 F002          	lfsr	2,2
  2516  001022  5024               	movf	VerifySignal@Signal,w,c
  2517  001024  26D9               	addwf	fsr2l,f,c
  2518  001026  5025               	movf	VerifySignal@Signal+1,w,c
  2519  001028  22DA               	addwfc	fsr2h,f,c
  2520  00102A  50DF               	movf	indf2,w,c
  2521  00102C  182C               	xorwf	VerifySignal@hexByte,w,c
  2522  00102E  6E2E               	movwf	VerifySignal@checksum,c
  2523                           
  2524                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2525  001030  0E05               	movlw	5
  2526  001032  6E2F               	movwf	VerifySignal@i,c
  2527  001034                     l2529:
  2528  001034  0E09               	movlw	9
  2529  001036  642F               	cpfsgt	VerifySignal@i,c
  2530  001038  D001               	goto	l2533
  2531  00103A  D028               	goto	l2541
  2532  00103C                     l2533:
  2533                           
  2534                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2535  00103C  502F               	movf	VerifySignal@i,w,c
  2536  00103E  6E26               	movwf	??_VerifySignal& (0+255),c
  2537  001040  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2538  001042  0E01               	movlw	1
  2539  001044  2626               	addwf	??_VerifySignal,f,c
  2540  001046  0E00               	movlw	0
  2541  001048  2227               	addwfc	??_VerifySignal+1,f,c
  2542  00104A  5026               	movf	??_VerifySignal,w,c
  2543  00104C  2424               	addwf	VerifySignal@Signal,w,c
  2544  00104E  6ED9               	movwf	fsr2l,c
  2545  001050  5027               	movf	??_VerifySignal+1,w,c
  2546  001052  2025               	addwfc	VerifySignal@Signal+1,w,c
  2547  001054  6EDA               	movwf	fsr2h,c
  2548  001056  50DF               	movf	indf2,w,c
  2549  001058  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2550  00105A  502F               	movf	VerifySignal@i,w,c
  2551  00105C  0D01               	mullw	1
  2552  00105E  50F3               	movf	prodl,w,c
  2553  001060  2424               	addwf	VerifySignal@Signal,w,c
  2554  001062  6ED9               	movwf	fsr2l,c
  2555  001064  50F4               	movf	prodh,w,c
  2556  001066  2025               	addwfc	VerifySignal@Signal+1,w,c
  2557  001068  6EDA               	movwf	fsr2h,c
  2558  00106A  50DF               	movf	indf2,w,c
  2559  00106C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2560  00106E  5029               	movf	??_VerifySignal+3,w,c
  2561  001070  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2562  001072  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2563  001074  5028               	movf	??_VerifySignal+2,w,c
  2564  001076  242A               	addwf	??_VerifySignal+4,w,c
  2565  001078  6E2C               	movwf	VerifySignal@hexByte,c
  2566  00107A  0E00               	movlw	0
  2567  00107C  202B               	addwfc	??_VerifySignal+5,w,c
  2568  00107E  6E2D               	movwf	VerifySignal@hexByte+1,c
  2569                           
  2570                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2571  001080  502E               	movf	VerifySignal@checksum,w,c
  2572  001082  182C               	xorwf	VerifySignal@hexByte,w,c
  2573  001084  6E2E               	movwf	VerifySignal@checksum,c
  2574  001086  0E02               	movlw	2
  2575  001088  262F               	addwf	VerifySignal@i,f,c
  2576  00108A  D7D4               	goto	l2529
  2577  00108C                     l2541:
  2578                           
  2579                           ;RFID_Reader.c: 68: }
  2580                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2581  00108C  502E               	movf	VerifySignal@checksum,w,c
  2582  00108E  6E26               	movwf	??_VerifySignal& (0+255),c
  2583  001090  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2584  001092  EE20 F00B          	lfsr	2,11
  2585  001096  5024               	movf	VerifySignal@Signal,w,c
  2586  001098  26D9               	addwf	fsr2l,f,c
  2587  00109A  5025               	movf	VerifySignal@Signal+1,w,c
  2588  00109C  22DA               	addwfc	fsr2h,f,c
  2589  00109E  50DF               	movf	indf2,w,c
  2590  0010A0  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2591  0010A2  5028               	movf	??_VerifySignal+2,w,c
  2592  0010A4  6E2A               	movwf	(??_VerifySignal+4)& (0+255),c
  2593  0010A6  6A29               	clrf	(??_VerifySignal+3)& (0+255),c
  2594  0010A8  EE20 F00C          	lfsr	2,12
  2595  0010AC  5024               	movf	VerifySignal@Signal,w,c
  2596  0010AE  26D9               	addwf	fsr2l,f,c
  2597  0010B0  5025               	movf	VerifySignal@Signal+1,w,c
  2598  0010B2  22DA               	addwfc	fsr2h,f,c
  2599  0010B4  50DF               	movf	indf2,w,c
  2600  0010B6  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2601  0010B8  502B               	movf	??_VerifySignal+5,w,c
  2602  0010BA  2629               	addwf	??_VerifySignal+3,f,c
  2603  0010BC  0E00               	movlw	0
  2604  0010BE  222A               	addwfc	??_VerifySignal+4,f,c
  2605  0010C0  5026               	movf	??_VerifySignal,w,c
  2606  0010C2  1829               	xorwf	??_VerifySignal+3,w,c
  2607  0010C4  E106               	bnz	l2549
  2608  0010C6  5027               	movf	??_VerifySignal+1,w,c
  2609  0010C8  182A               	xorwf	??_VerifySignal+4,w,c
  2610  0010CA  A4D8               	btfss	status,2,c
  2611  0010CC  D002               	goto	l2549
  2612                           
  2613                           ;RFID_Reader.c: 71: return 1;
  2614  0010CE  0E01               	movlw	1
  2615                           
  2616                           ;RFID_Reader.c: 72: } else{
  2617  0010D0  0012               	return	
  2618  0010D2                     l2549:
  2619                           
  2620                           ;RFID_Reader.c: 73: return 0;
  2621  0010D2  0E00               	movlw	0
  2622  0010D4  0012               	return	
  2623  0010D6                     __end_of_VerifySignal:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           indf1	equ	0xFE7
  2632                           fsr1h	equ	0xFE2
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           postinc2	equ	0xFDE
  2636                           postdec2	equ	0xFDD
  2637                           fsr2h	equ	0xFDA
  2638                           fsr2l	equ	0xFD9
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _ScanWithRange *****************
  2642 ;; Defined at:
  2643 ;;		line 91 in file "Movement.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2646 ;;		 -> main@mL(9), 
  2647 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2648 ;;		 -> main@mR(9), 
  2649 ;;  milliseconds    2   17[BANK0 ] int 
  2650 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2651 ;;		 -> main@MoveTime(200), 
  2652 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2653 ;;		 -> RFID_Read(1), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  buf            40   28[BANK0 ] unsigned char [40]
  2656 ;;  SensorResult    4   78[BANK0 ] unsigned int [2]
  2657 ;;  RightFlag       2   82[BANK0 ] unsigned int 
  2658 ;;  LeftFlag        2   75[BANK0 ] unsigned int 
  2659 ;;  DirectionFou    2   72[BANK0 ] const unsigned int 
  2660 ;;  i               2   70[BANK0 ] unsigned int 
  2661 ;;  n               2   68[BANK0 ] unsigned int 
  2662 ;;  TimeAboveThr    1   77[BANK0 ] unsigned char 
  2663 ;;  power           1   74[BANK0 ] const unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      unsigned char 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2673 ;;      Params:         0      10       0       0
  2674 ;;      Locals:         0      56       0       0
  2675 ;;      Temps:          0       5       0       0
  2676 ;;      Totals:         0      71       0       0
  2677 ;;Total ram usage:       71 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    7
  2680 ;; This function calls:
  2681 ;;		_LCD_String
  2682 ;;		_SendLCD
  2683 ;;		_SetLine
  2684 ;;		_delay_tenth_s
  2685 ;;		_grabLeftIR
  2686 ;;		_grabRightIR
  2687 ;;		_sprintf
  2688 ;;		_stop
  2689 ;;		_turnLeft
  2690 ;;		_turnRight
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text9
  2697  000886                     __ptext9:
  2698                           	opt stack 0
  2699  000886                     _ScanWithRange:
  2700                           	opt stack 23
  2701                           
  2702                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2703                           
  2704                           ;incstack = 0
  2705  000886  C0C2  F0AE         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  2706  00088A  C0C3  F0AF         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  2707  00088E  C0C4  F0B0         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  2708  000892  C0C5  F0B1         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  2709                           
  2710                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2711  000896  0E00               	movlw	0
  2712  000898  0100               	movlb	0	; () banked
  2713  00089A  6FAC               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2714  00089C  0E00               	movlw	0
  2715  00089E  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2716                           
  2717                           ;Movement.c: 97: unsigned int RightFlag=0;
  2718  0008A0  0E00               	movlw	0
  2719  0008A2  0100               	movlb	0	; () banked
  2720  0008A4  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2721  0008A6  0E00               	movlw	0
  2722  0008A8  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2723                           
  2724                           ;Movement.c: 98: char buf[40];
  2725                           ;Movement.c: 99: unsigned int i=0;
  2726  0008AA  0E00               	movlw	0
  2727  0008AC  0100               	movlb	0	; () banked
  2728  0008AE  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2729  0008B0  0E00               	movlw	0
  2730  0008B2  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2731                           
  2732                           ;Movement.c: 100: unsigned int n=0;
  2733  0008B4  0E00               	movlw	0
  2734  0008B6  0100               	movlb	0	; () banked
  2735  0008B8  6FA5               	movwf	(ScanWithRange@n+1)& (0+255),b
  2736  0008BA  0E00               	movlw	0
  2737  0008BC  6FA4               	movwf	ScanWithRange@n& (0+255),b
  2738                           
  2739                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2740  0008BE  0E00               	movlw	0
  2741  0008C0  0100               	movlb	0	; () banked
  2742  0008C2  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2743                           
  2744                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2745  0008C4  0E0B               	movlw	11
  2746  0008C6  0100               	movlb	0	; () banked
  2747  0008C8  6FA9               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2748  0008CA  0EB8               	movlw	184
  2749  0008CC  6FA8               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2750                           
  2751                           ;Movement.c: 105: const unsigned char power=40;
  2752  0008CE  0E28               	movlw	40
  2753  0008D0  0100               	movlb	0	; () banked
  2754  0008D2  6FAA               	movwf	ScanWithRange@power& (0+255),b
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2758  0008D4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2759  0008D8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2760  0008DC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2761  0008E0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2762  0008E4  0E64               	movlw	100
  2763  0008E6  0100               	movlb	0	; () banked
  2764  0008E8  6F6B               	movwf	turnLeft@power& (0+255),b
  2765  0008EA  ECE3  F00B         	call	_turnLeft	;wreg free
  2766                           
  2767                           ;Movement.c: 115: delay_tenth_s(3);
  2768  0008EE  0E03               	movlw	3
  2769  0008F0  EC02  F00C         	call	_delay_tenth_s
  2770                           
  2771                           ;Movement.c: 116: stop(mL,mR);
  2772  0008F4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2773  0008F8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2774  0008FC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2775  000900  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2776  000904  ECA9  F009         	call	_stop	;wreg free
  2777                           
  2778                           ;Movement.c: 119: turnRight(mL,mR, power);
  2779  000908  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2780  00090C  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2781  000910  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2782  000914  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2783  000918  C0AA  F06B         	movff	ScanWithRange@power,turnRight@power
  2784  00091C  ECC4  F00B         	call	_turnRight	;wreg free
  2785                           
  2786                           ;Movement.c: 122: TMR0L = 0;
  2787  000920  0E00               	movlw	0
  2788  000922  6ED6               	movwf	4054,c	;volatile
  2789                           
  2790                           ;Movement.c: 123: TMR0H = 0;
  2791  000924  0E00               	movlw	0
  2792  000926  6ED7               	movwf	4055,c	;volatile
  2793                           
  2794                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2795  000928  8ED5               	bsf	4053,7,c	;volatile
  2796                           
  2797                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2798  00092A  0E00               	movlw	0
  2799  00092C  0100               	movlb	0	; () banked
  2800  00092E  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2801  000930  0E01               	movlw	1
  2802  000932  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2803  000934  D10D               	goto	l3151
  2804  000936                     l3083:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2808  000936  ECF3  F00A         	call	_grabLeftIR	;wreg free
  2809  00093A  C024  F0AE         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2810  00093E  C025  F0AF         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2811                           
  2812                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2813  000942  ECBA  F00A         	call	_grabRightIR	;wreg free
  2814  000946  C024  F0B0         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2815  00094A  C025  F0B1         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
  2816                           
  2817                           ;Movement.c: 135: CAP1BUFL=0;
  2818  000890  0E00               	movlw	0
  2819  000892  6E68               	movwf	3944,c	;volatile
  2820                           
  2821                           ;Movement.c: 136: CAP2BUFH=0;
  2822  000894  0E00               	movlw	0
  2823  000896  6E67               	movwf	3943,c	;volatile
  2824                           
  2825                           ;Movement.c: 137: CAP2BUFL=0;
  2826  000898  0E00               	movlw	0
  2827  00089A  6E66               	movwf	3942,c	;volatile
  2828                           
<<<<<<< HEAD
  2829                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2830  00089C  0E00               	movlw	0
  2831  00089E  6E30               	movwf	SendLCD@type,c
  2832  0008A0  0E01               	movlw	1
  2833  0008A2  ECD4  F00B         	call	_SendLCD
  2834                           
  2835                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2836  0008A6  0E21               	movlw	33
  2837  0008A8                     u3137:
  2838  0008A8  2EE8               	decfsz	wreg,f,c
  2839  0008AA  D7FE               	bra	u3137
  2840  0008AC  F000               	nop	
  2841                           
  2842                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2843  0008AE  0E00               	movlw	0
  2844  0008B0  6E30               	movwf	SendLCD@type,c
  2845  0008B2  0E02               	movlw	2
  2846  0008B4  ECD4  F00B         	call	_SendLCD
  2847                           
  2848                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2849  0008B8  0E06               	movlw	6
  2850  0008BA  0100               	movlb	0	; () banked
  2851  0008BC  6F86               	movwf	??_ScanWithRange& (0+255),b
  2852  0008BE  0E30               	movlw	48
  2853  0008C0                     u3147:
  2854  0008C0  2EE8               	decfsz	wreg,f,c
  2855  0008C2  D7FE               	bra	u3147
  2856  0008C4  2F86               	decfsz	??_ScanWithRange& (0+255),f,b
  2857  0008C6  D7FC               	bra	u3147
  2858  0008C8  F000               	nop	
  2859                           
  2860                           ;Movement.c: 145: SetLine(1);
  2861  0008CA  0E01               	movlw	1
  2862  0008CC  ECA0  F00B         	call	_SetLine
  2863                           
  2864                           ;Movement.c: 146: LCD_String("     ScanIR");
  2865  0008D0  0E2D               	movlw	low STR_1
  2866  0008D2  0100               	movlb	0	; () banked
  2867  0008D4  6F60               	movwf	LCD_String@string& (0+255),b
  2868  0008D6  0E03               	movlw	high STR_1
  2869  0008D8  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  2870  0008DA  EC92  F00A         	call	_LCD_String	;wreg free
  2871                           
  2872                           ;Movement.c: 147: SetLine(2);
  2873  0008DE  0E02               	movlw	2
  2874  0008E0  ECA0  F00B         	call	_SetLine
  2875                           
  2876                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2877  0008E4  0E8B               	movlw	low ScanWithRange@buf
  2878  0008E6  0100               	movlb	0	; () banked
  2879  0008E8  6F67               	movwf	sprintf@sp& (0+255),b
  2880  0008EA  0E00               	movlw	high ScanWithRange@buf
  2881  0008EC  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  2882  0008EE  0E0C               	movlw	low (STR_6+1)
  2883  0008F0  6F69               	movwf	sprintf@f& (0+255),b
  2884  0008F2  0E03               	movlw	high (STR_6+1)
  2885  0008F4  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  2886  0008F6  C0BB  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2887  0008FA  C0BC  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2888  0008FE  C0BD  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2889  000902  C0BE  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2890  000906  EC4D  F005         	call	_sprintf	;wreg free
  2891                           
  2892                           ;Movement.c: 149: LCD_String(buf);
  2893  00090A  0E8B               	movlw	low ScanWithRange@buf
  2894  00090C  0100               	movlb	0	; () banked
  2895  00090E  6F60               	movwf	LCD_String@string& (0+255),b
  2896  000910  0E00               	movlw	high ScanWithRange@buf
  2897  000912  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  2898  000914  EC92  F00A         	call	_LCD_String	;wreg free
  2899                           
  2900                           ;Movement.c: 151: if (RightFlag==0){
  2901  000918  0100               	movlb	0	; () banked
  2902  00091A  51C1               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2903  00091C  11C2               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2904  00091E  A4D8               	btfss	status,2,c
  2905  000920  D00F               	goto	l222
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2909  000922  51BD               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2910  000924  5DB7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2911  000926  51BE               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2912  000928  59B8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2913  00092A  B0D8               	btfsc	status,0,c
  2914  00092C  D009               	goto	l222
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2918  00092E  50D7               	movf	4055,w,c	;volatile
  2919  000930  6F87               	movwf	(??_ScanWithRange+1)& (0+255),b
  2920  000932  6B86               	clrf	??_ScanWithRange& (0+255),b
  2921  000934  50D6               	movf	4054,w,c	;volatile
  2922  000936  2586               	addwf	??_ScanWithRange& (0+255),w,b
  2923  000938  6FC1               	movwf	ScanWithRange@RightFlag& (0+255),b
  2924  00093A  0E00               	movlw	0
  2925  00093C  2187               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2926  00093E  6FC2               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2927  000940                     l222:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;Movement.c: 154: }
  2931                           ;Movement.c: 155: }
  2932                           ;Movement.c: 157: if (LeftFlag==0){
  2933                           
  2934                           ; BSR set to: 0
  2935  000940  51BF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2936  000942  11C0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2937  000944  A4D8               	btfss	status,2,c
  2938  000946  D00F               	goto	l224
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2942  000948  51BB               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2943  00094A  5DB7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2944  00094C  51BC               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2945  00094E  59B8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2946  000950  B0D8               	btfsc	status,0,c
  2947  000952  D009               	goto	l224
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2951  000954  50D7               	movf	4055,w,c	;volatile
  2952  000956  6F87               	movwf	(??_ScanWithRange+1)& (0+255),b
  2953  000958  6B86               	clrf	??_ScanWithRange& (0+255),b
  2954  00095A  50D6               	movf	4054,w,c	;volatile
  2955  00095C  2586               	addwf	??_ScanWithRange& (0+255),w,b
  2956  00095E  6FBF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2957  000960  0E00               	movlw	0
  2958  000962  2187               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2959  000964  6FC0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2960  000966                     l224:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;Movement.c: 160: }
  2964                           ;Movement.c: 161: }
  2965                           ;Movement.c: 168: if (LeftFlag>0) {
  2966                           
  2967                           ; BSR set to: 0
  2968  000966  51BF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2969  000968  11C0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2970  00096A  B4D8               	btfsc	status,2,c
  2971  00096C  D069               	goto	l231
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Movement.c: 171: if (RightFlag>0) {
  2975  00096E  51C1               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2976  000970  11C2               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2977  000972  B4D8               	btfsc	status,2,c
  2978  000974  D058               	goto	l226
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  2982  000976  51C1               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2983  000978  0800               	sublw	0
  2984  00097A  25BF               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2985  00097C  6FBA               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;Movement.c: 173: TMR0L = 0;
  2989  00097E  0E00               	movlw	0
  2990  000980  6ED6               	movwf	4054,c	;volatile
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;Movement.c: 174: TMR0H = 0;
  2994  000982  0E00               	movlw	0
  2995  000984  6ED7               	movwf	4055,c	;volatile
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;Movement.c: 175: stop(mL,mR);
  2999  000986  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3000  00098A  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3001  00098E  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3002  000992  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3003  000996  EC52  F009         	call	_stop	;wreg free
  3004                           
  3005                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3006  00099A  D00C               	goto	l227
  3007  00099C                     
  3008                           ;Movement.c: 177: turnLeft(mL,mR, power);
  3009  00099C  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3010  0009A0  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3011  0009A4  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3012  0009A8  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3013  0009AC  C0B9  F07B         	movff	ScanWithRange@power,turnLeft@power
  3014  0009B0  EC4A  F00B         	call	_turnLeft	;wreg free
  3015  0009B4                     l227:
  3016  0009B4  0100               	movlb	0	; () banked
  3017  0009B6  90D8               	bcf	status,0,c
  3018  0009B8  31BA               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3019  0009BA  6F86               	movwf	??_ScanWithRange& (0+255),b
  3020  0009BC  6B87               	clrf	(??_ScanWithRange+1)& (0+255),b
  3021  0009BE  50D6               	movf	4054,w,c	;volatile
  3022  0009C0  CFD7 F088          	movff	4055,??_ScanWithRange+2	;volatile
  3023  0009C4  6B89               	clrf	(??_ScanWithRange+3)& (0+255),b
  3024  0009C6  C088  F089         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3025  0009CA  6B88               	clrf	(??_ScanWithRange+2)& (0+255),b
  3026  0009CC  2788               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3027  0009CE  0E00               	movlw	0
  3028  0009D0  2389               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3029  0009D2  5186               	movf	??_ScanWithRange& (0+255),w,b
  3030  0009D4  5D88               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3031  0009D6  5189               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3032  0009D8  0A80               	xorlw	128
  3033  0009DA  6F8A               	movwf	(??_ScanWithRange+4)& (0+255),b
  3034  0009DC  5187               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3035  0009DE  0A80               	xorlw	128
  3036  0009E0  598A               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3037  0009E2  A0D8               	btfss	status,0,c
  3038  0009E4  D7DB               	goto	l228
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;Movement.c: 178: }
  3042                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3043  0009E6  9ED5               	bcf	4053,7,c	;volatile
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;Movement.c: 180: stop(mL,mR);
  3047  0009E8  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3048  0009EC  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3049  0009F0  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3050  0009F4  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3051  0009F8  EC52  F009         	call	_stop	;wreg free
  3052                           
  3053                           ;Movement.c: 182: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3054  0009FC  C0BA  F086         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3055  000A00  0100               	movlb	0	; () banked
  3056  000A02  90D8               	bcf	status,0,c
  3057  000A04  3386               	rrcf	??_ScanWithRange& (0+255),f,b
  3058  000A06  5186               	movf	??_ScanWithRange& (0+255),w,b
  3059  000A08  25C1               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3060  000A0A  6F87               	movwf	(??_ScanWithRange+1)& (0+255),b
  3061  000A0C  0E00               	movlw	0
  3062  000A0E  21C2               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3063  000A10  6F88               	movwf	(??_ScanWithRange+2)& (0+255),b
  3064  000A12  C082  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3065  000A16  C083  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3066  000A1A  C087  FFDE         	movff	??_ScanWithRange+1,postinc2
  3067  000A1E  C088  FFDD         	movff	??_ScanWithRange+2,postdec2
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;Movement.c: 183: return 2;
  3071  000A22  0E02               	movlw	2
  3072                           
  3073                           ; BSR set to: 0
  3074  000A24  0012               	return	
  3075  000A26                     l226:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Movement.c: 186: T0CONbits.TMR0ON=0;
  3079  000A26  9ED5               	bcf	4053,7,c	;volatile
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Movement.c: 187: stop(mL,mR);
  3083  000A28  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3084  000A2C  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3085  000A30  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3086  000A34  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3087  000A38  EC52  F009         	call	_stop	;wreg free
  3088                           
  3089                           ;Movement.c: 188: return 2;
  3090  000A3C  0E02               	movlw	2
  3091  000A3E  0012               	return	
  3092  000A40                     l231:
  3093                           
  3094                           ;Movement.c: 189: }
  3095                           ;Movement.c: 190: }
  3096                           ;Movement.c: 192: if (*RFID_Read==1) {
  3097  000A40  C084  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3098  000A44  C085  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3099  000A48  04DE               	decf	postinc2,w,c
  3100  000A4A  A4D8               	btfss	status,2,c
  3101  000A4C  D002               	goto	l232
  3102                           
  3103                           ;Movement.c: 193: return 2;
  3104  000A4E  0E02               	movlw	2
  3105  000A50  0012               	return	
  3106  000A52                     l232:
  3107  000A52  0100               	movlb	0	; () banked
  3108  000A54  4BB5               	infsnz	ScanWithRange@i& (0+255),f,b
  3109  000A56  2BB6               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3110  000A58                     l219:
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115  000A58  51B5               	movf	ScanWithRange@i& (0+255),w,b
  3116  000A5A  5D80               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3117  000A5C  51B6               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3118  000A5E  5981               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3119  000A60  B0D8               	btfsc	status,0,c
  3120  000A62  D708               	goto	l220
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;Movement.c: 194: }
  3124                           ;Movement.c: 195: }
  3125                           ;Movement.c: 198: turnRight(mL,mR, 100);
  3126                           
  3127                           ; BSR set to: 0
  3128  000A64  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3129  000A68  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3130  000A6C  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3131  000A70  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3132  000A74  0E64               	movlw	100
  3133  000A76  6F7B               	movwf	turnRight@power& (0+255),b
  3134  000A78  EC2C  F00B         	call	_turnRight	;wreg free
  3135                           
  3136                           ;Movement.c: 199: delay_tenth_s(2);
  3137  000A7C  0E02               	movlw	2
  3138  000A7E  EC68  F00B         	call	_delay_tenth_s
  3139                           
  3140                           ;Movement.c: 200: stop(mL,mR);
  3141  000A82  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3142  000A86  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3143  000A8A  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3144  000A8E  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3145  000A92  EC52  F009         	call	_stop	;wreg free
  3146                           
  3147                           ;Movement.c: 201: return -1;
  3148  000A96  0EFF               	movlw	255
  3149  000A98  0012               	return	
  3150  000A9A                     __end_of_ScanWithRange:
  3151                           	opt stack 0
  3152                           tblptru	equ	0xFF8
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           intcon	equ	0xFF2
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           indf1	equ	0xFE7
  3159                           fsr1h	equ	0xFE2
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           postinc2	equ	0xFDE
  3163                           postdec2	equ	0xFDD
  3164                           fsr2h	equ	0xFDA
  3165                           fsr2l	equ	0xFD9
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function _turnRight *****************
  3169 ;; Defined at:
  3170 ;;		line 98 in file "dc_motor.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3173 ;;		 -> main@mL(9), 
  3174 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3175 ;;		 -> main@mR(9), 
  3176 ;;  power           1   27[BANK0 ] unsigned char 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3188 ;;      Params:         0       5       0       0
  3189 ;;      Locals:         0       0       0       0
  3190 ;;      Temps:          0       0       0       0
  3191 ;;      Totals:         0       5       0       0
  3192 ;;Total ram usage:        5 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    6
  3195 ;; This function calls:
  3196 ;;		_fullSpeedAhead
  3197 ;; This function is called by:
  3198 ;;		_ScanWithRange
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text10
  3203  001658                     __ptext10:
  3204                           	opt stack 0
  3205  001658                     _turnRight:
  3206                           	opt stack 23
  3207                           
  3208                           ;dc_motor.c: 102: mL->direction=0;
  3209                           
  3210                           ;incstack = 0
  3211  001658  0100               	movlb	0	; () banked
  3212  00165A  EE20 F001          	lfsr	2,1
  3213  00165E  5177               	movf	turnRight@mL& (0+255),w,b
  3214  001660  26D9               	addwf	fsr2l,f,c
  3215  001662  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  3216  001664  22DA               	addwfc	fsr2h,f,c
  3217  001666  0E00               	movlw	0
  3218  001668  6EDF               	movwf	indf2,c
  3219                           
  3220                           ;dc_motor.c: 103: mR->direction=1;
  3221  00166A  EE20 F001          	lfsr	2,1
  3222  00166E  5179               	movf	turnRight@mR& (0+255),w,b
  3223  001670  26D9               	addwf	fsr2l,f,c
  3224  001672  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  3225  001674  22DA               	addwfc	fsr2h,f,c
  3226  001676  0E01               	movlw	1
  3227  001678  6EDF               	movwf	indf2,c
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3231  00167A  C077  F071         	movff	turnRight@mL,fullSpeedAhead@mL
  3232  00167E  C078  F072         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3233  001682  C079  F073         	movff	turnRight@mR,fullSpeedAhead@mR
  3234  001686  C07A  F074         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3235  00168A  C07B  F075         	movff	turnRight@power,fullSpeedAhead@power
  3236  00168E  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  3237  001692  0012               	return		;funcret
  3238  001694                     __end_of_turnRight:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           prodh	equ	0xFF4
  3242                           prodl	equ	0xFF3
  3243                           intcon	equ	0xFF2
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           indf1	equ	0xFE7
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _turnLeft *****************
  3257 ;; Defined at:
  3258 ;;		line 87 in file "dc_motor.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3261 ;;		 -> main@mL(9), 
  3262 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3263 ;;		 -> main@mR(9), 
  3264 ;;  power           1   27[BANK0 ] unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3276 ;;      Params:         0       5       0       0
  3277 ;;      Locals:         0       0       0       0
  3278 ;;      Temps:          0       0       0       0
  3279 ;;      Totals:         0       5       0       0
  3280 ;;Total ram usage:        5 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    6
  3283 ;; This function calls:
  3284 ;;		_fullSpeedAhead
  3285 ;; This function is called by:
  3286 ;;		_ScanWithRange
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text11
  3291  001694                     __ptext11:
  3292                           	opt stack 0
  3293  001694                     _turnLeft:
  3294                           	opt stack 23
  3295                           
  3296                           ;dc_motor.c: 91: mL->direction=1;
  3297                           
  3298                           ;incstack = 0
  3299  001694  0100               	movlb	0	; () banked
  3300  001696  EE20 F001          	lfsr	2,1
  3301  00169A  5177               	movf	turnLeft@mL& (0+255),w,b
  3302  00169C  26D9               	addwf	fsr2l,f,c
  3303  00169E  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  3304  0016A0  22DA               	addwfc	fsr2h,f,c
  3305  0016A2  0E01               	movlw	1
  3306  0016A4  6EDF               	movwf	indf2,c
  3307                           
  3308                           ;dc_motor.c: 92: mR->direction=0;
  3309  0016A6  EE20 F001          	lfsr	2,1
  3310  0016AA  5179               	movf	turnLeft@mR& (0+255),w,b
  3311  0016AC  26D9               	addwf	fsr2l,f,c
  3312  0016AE  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3313  0016B0  22DA               	addwfc	fsr2h,f,c
  3314  0016B2  0E00               	movlw	0
  3315  0016B4  6EDF               	movwf	indf2,c
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3319  0016B6  C077  F071         	movff	turnLeft@mL,fullSpeedAhead@mL
  3320  0016BA  C078  F072         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3321  0016BE  C079  F073         	movff	turnLeft@mR,fullSpeedAhead@mR
  3322  0016C2  C07A  F074         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3323  0016C6  C07B  F075         	movff	turnLeft@power,fullSpeedAhead@power
  3324  0016CA  ECDE  F009         	call	_fullSpeedAhead	;wreg free
  3325  0016CE  0012               	return		;funcret
  3326  0016D0                     __end_of_turnLeft:
  3327                           	opt stack 0
  3328                           tblptru	equ	0xFF8
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           indf1	equ	0xFE7
  3335                           fsr1h	equ	0xFE2
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           postinc2	equ	0xFDE
  3339                           postdec2	equ	0xFDD
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _fullSpeedAhead *****************
  3345 ;; Defined at:
  3346 ;;		line 108 in file "dc_motor.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3349 ;;		 -> main@mL(9), 
  3350 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3351 ;;		 -> main@mR(9), 
  3352 ;;  power           1   21[BANK0 ] unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       5       0       0
  3365 ;;      Locals:         0       0       0       0
  3366 ;;      Temps:          0       1       0       0
  3367 ;;      Totals:         0       6       0       0
  3368 ;;Total ram usage:        6 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    5
  3371 ;; This function calls:
  3372 ;;		_setMotorPWM
  3373 ;; This function is called by:
  3374 ;;		_turnLeft
  3375 ;;		_turnRight
  3376 ;;		_fullSpeedBack
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text12
  3382  0013BC                     __ptext12:
  3383                           	opt stack 0
  3384  0013BC                     _fullSpeedAhead:
  3385                           	opt stack 24
  3386                           
  3387                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3388                           
  3389                           ;incstack = 0
  3390  0013BC  D02B               	goto	l65
  3391  0013BE                     
  3392                           ;dc_motor.c: 112: if(mL->power<power){
  3393  0013BE  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3394  0013C2  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3395  0013C6  0100               	movlb	0	; () banked
  3396  0013C8  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3397  0013CA  5CDE               	subwf	postinc2,w,c
  3398  0013CC  B0D8               	btfsc	status,0,c
  3399  0013CE  D005               	goto	l67
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;dc_motor.c: 113: mL->power++;
  3403  0013D0  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3404  0013D4  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3405  0013D8  2ADF               	incf	indf2,f,c
  3406  0013DA                     l67:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;dc_motor.c: 114: }
  3410                           ;dc_motor.c: 115: if(mR->power<power){
  3411                           
  3412                           ; BSR set to: 0
  3413  0013DA  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3414  0013DE  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3415  0013E2  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3416  0013E4  5CDE               	subwf	postinc2,w,c
  3417  0013E6  B0D8               	btfsc	status,0,c
  3418  0013E8  D005               	goto	l68
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;dc_motor.c: 116: mR->power++;
  3422  0013EA  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3423  0013EE  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3424  0013F2  2ADF               	incf	indf2,f,c
  3425  0013F4                     l68:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;dc_motor.c: 117: }
  3429                           ;dc_motor.c: 118: setMotorPWM(mL);
  3430                           
  3431                           ; BSR set to: 0
  3432  0013F4  C071  F068         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3433  0013F8  C072  F069         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3434  0013FC  EC9D  F006         	call	_setMotorPWM	;wreg free
  3435                           
  3436                           ;dc_motor.c: 119: setMotorPWM(mR);
  3437  001400  C073  F068         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3438  001404  C074  F069         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3439  001408  EC9D  F006         	call	_setMotorPWM	;wreg free
  3440                           
  3441                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3442  00140C  0E21               	movlw	33
  3443  00140E                     u3157:
  3444  00140E  2EE8               	decfsz	wreg,f,c
  3445  001410  D7FE               	bra	u3157
  3446  001412  F000               	nop	
  3447  001414                     l65:
  3448  001414  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3449  001418  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3450  00141C  0100               	movlb	0	; () banked
  3451  00141E  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3452  001420  5CDE               	subwf	postinc2,w,c
  3453  001422  A0D8               	btfss	status,0,c
  3454  001424  D7CC               	goto	l66
  3455                           
  3456                           ; BSR set to: 0
  3457  001426  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3458  00142A  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3459  00142E  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3460  001430  5CDE               	subwf	postinc2,w,c
  3461  001432  B0D8               	btfsc	status,0,c
  3462  001434  0012               	return	
  3463  001436  D7C3               	goto	l66
  3464  001438                     __end_of_fullSpeedAhead:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           indf1	equ	0xFE7
  3473                           fsr1h	equ	0xFE2
  3474                           fsr1l	equ	0xFE1
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _delay_tenth_s *****************
  3483 ;; Defined at:
  3484 ;;		line 32 in file "Movement.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  tenth_second    1    wreg     unsigned char 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  tenth_second    1   44[COMRAM] unsigned char 
  3489 ;;  i               2   45[COMRAM] unsigned int 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3499 ;;      Params:         0       0       0       0
  3500 ;;      Locals:         3       0       0       0
  3501 ;;      Temps:          1       0       0       0
  3502 ;;      Totals:         4       0       0       0
  3503 ;;Total ram usage:        4 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    3
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_ScanWithRange
  3510 ;;		_main
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text13
  3515  0016D0                     __ptext13:
  3516                           	opt stack 0
  3517  0016D0                     _delay_tenth_s:
  3518                           	opt stack 27
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;incstack = 0
  3522                           ;delay_tenth_s@tenth_seconds stored from wreg
  3523  0016D0  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  3524                           
  3525                           ;Movement.c: 33: unsigned int i=0;
  3526  0016D2  0E00               	movlw	0
  3527  0016D4  6E2F               	movwf	delay_tenth_s@i+1,c
  3528  0016D6  0E00               	movlw	0
  3529  0016D8  6E2E               	movwf	delay_tenth_s@i,c
  3530                           
  3531                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3532  0016DA  0E00               	movlw	0
  3533  0016DC  6E2F               	movwf	delay_tenth_s@i+1,c
  3534  0016DE  0E01               	movlw	1
  3535  0016E0  6E2E               	movwf	delay_tenth_s@i,c
  3536  0016E2  D009               	goto	l204
  3537  0016E4                     
  3538                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3539  0016E4  0E82               	movlw	130
  3540  0016E6  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  3541  0016E8  0EDE               	movlw	222
  3542  0016EA                     u3167:
  3543  0016EA  2EE8               	decfsz	wreg,f,c
  3544  0016EC  D7FE               	bra	u3167
  3545  0016EE  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  3546  0016F0  D7FC               	bra	u3167
  3547  0016F2  4A2E               	infsnz	delay_tenth_s@i,f,c
  3548  0016F4  2A2F               	incf	delay_tenth_s@i+1,f,c
  3549  0016F6                     l204:
  3550  0016F6  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  3551  0016F8  0D02               	mullw	2
  3552  0016FA  502E               	movf	delay_tenth_s@i,w,c
  3553  0016FC  5CF3               	subwf	prodl,w,c
  3554  0016FE  502F               	movf	delay_tenth_s@i+1,w,c
  3555  001700  58F4               	subwfb	prodh,w,c
  3556  001702  A0D8               	btfss	status,0,c
  3557  001704  0012               	return	
  3558  001706  D7EE               	goto	l205
  3559  001708                     __end_of_delay_tenth_s:
  3560                           	opt stack 0
  3561                           tblptru	equ	0xFF8
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           postinc0	equ	0xFEE
  3566                           wreg	equ	0xFE8
  3567                           indf1	equ	0xFE7
  3568                           fsr1h	equ	0xFE2
  3569                           fsr1l	equ	0xFE1
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           postdec2	equ	0xFDD
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _ScanIR *****************
  3578 ;; Defined at:
  3579 ;;		line 45 in file "Movement.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  3582 ;;		 -> main@mL(9), 
  3583 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  3584 ;;		 -> main@mR(9), 
  3585 ;;  Move            2   32[BANK0 ] PTR unsigned char 
  3586 ;;		 -> main@Move(1), 
  3587 ;;  MoveTime        2   34[BANK0 ] PTR int 
  3588 ;;		 -> main@MoveTime(200), 
  3589 ;;  MoveType        2   36[BANK0 ] PTR unsigned char 
  3590 ;;		 -> main@MoveType(100), 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;  buf            40   39[BANK0 ] unsigned char [40]
  3593 ;;  SensorResult    4   81[BANK0 ] unsigned int [2]
  3594 ;;  DirectionMov    2   79[BANK0 ] const unsigned int 
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      unsigned char 
  3597 ;; Registers used:
  3598 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3604 ;;      Params:         0      10       0       0
  3605 ;;      Locals:         0      46       0       0
  3606 ;;      Temps:          0       1       0       0
  3607 ;;      Totals:         0      57       0       0
  3608 ;;Total ram usage:       57 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    7
  3611 ;; This function calls:
  3612 ;;		_LCD_String
  3613 ;;		_SendLCD
  3614 ;;		_SetLine
  3615 ;;		_grabLeftIR
  3616 ;;		_grabRightIR
  3617 ;;		_sprintf
  3618 ;;		_stop
  3619 ;; This function is called by:
  3620 ;;		_main
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text14
  3625  000F74                     __ptext14:
  3626                           	opt stack 0
  3627  000F74                     _ScanIR:
  3628                           	opt stack 23
  3629                           
  3630                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3631                           
  3632                           ;incstack = 0
  3633  000F74  C0D1  F0B1         	movff	ScanIR@F3544,ScanIR@SensorResult
  3634  000F78  C0D2  F0B2         	movff	ScanIR@F3544+1,ScanIR@SensorResult+1
  3635  000F7C  C0D3  F0B3         	movff	ScanIR@F3544+2,ScanIR@SensorResult+2
  3636  000F80  C0D4  F0B4         	movff	ScanIR@F3544+3,ScanIR@SensorResult+3
  3637                           
  3638                           ;Movement.c: 50: char buf[40];
  3639                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3640  000F84  0E09               	movlw	9
  3641  000F86  0100               	movlb	0	; () banked
  3642  000F88  6FB0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3643  000F8A  0EC4               	movlw	196
  3644  000F8C  6FAF               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3648  000F8E  EC57  F00A         	call	_grabLeftIR	;wreg free
  3649  000F92  C02C  F0B1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3650  000F96  C02D  F0B2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3651                           
  3652                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3653  000F9A  EC1C  F00A         	call	_grabRightIR	;wreg free
  3654  000F9E  C02C  F0B3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3655  000FA2  C02D  F0B4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3656                           
  3657                           ;Movement.c: 62: CAP1BUFH=0;
  3658  000FA6  0E00               	movlw	0
  3659  000FA8  6E69               	movwf	3945,c	;volatile
  3660                           
  3661                           ;Movement.c: 63: CAP1BUFL=0;
  3662  000FAA  0E00               	movlw	0
  3663  000FAC  6E68               	movwf	3944,c	;volatile
  3664                           
  3665                           ;Movement.c: 64: CAP2BUFH=0;
  3666  000FAE  0E00               	movlw	0
  3667  000FB0  6E67               	movwf	3943,c	;volatile
  3668                           
  3669                           ;Movement.c: 65: CAP2BUFL=0;
  3670  000FB2  0E00               	movlw	0
  3671  000FB4  6E66               	movwf	3942,c	;volatile
  3672                           
  3673                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3674  000FB6  0E00               	movlw	0
  3675  000FB8  6E30               	movwf	SendLCD@type,c
  3676  000FBA  0E01               	movlw	1
  3677  000FBC  ECD4  F00B         	call	_SendLCD
  3678                           
  3679                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3680  000FC0  0E21               	movlw	33
  3681  000FC2                     u3177:
  3682  000FC2  2EE8               	decfsz	wreg,f,c
  3683  000FC4  D7FE               	bra	u3177
  3684  000FC6  F000               	nop	
  3685                           
  3686                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3687  000FC8  0E00               	movlw	0
  3688  000FCA  6E30               	movwf	SendLCD@type,c
  3689  000FCC  0E02               	movlw	2
  3690  000FCE  ECD4  F00B         	call	_SendLCD
  3691                           
  3692                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3693  000FD2  0E06               	movlw	6
  3694  000FD4  0100               	movlb	0	; () banked
  3695  000FD6  6F86               	movwf	??_ScanIR& (0+255),b
  3696  000FD8  0E30               	movlw	48
  3697  000FDA                     u3187:
  3698  000FDA  2EE8               	decfsz	wreg,f,c
  3699  000FDC  D7FE               	bra	u3187
  3700  000FDE  2F86               	decfsz	??_ScanIR& (0+255),f,b
  3701  000FE0  D7FC               	bra	u3187
  3702  000FE2  F000               	nop	
  3703                           
  3704                           ;Movement.c: 72: SetLine(1);
  3705  000FE4  0E01               	movlw	1
  3706  000FE6  ECA0  F00B         	call	_SetLine
  3707                           
  3708                           ;Movement.c: 73: LCD_String("     ScanIR");
  3709  000FEA  0E2D               	movlw	low STR_1
  3710  000FEC  0100               	movlb	0	; () banked
  3711  000FEE  6F60               	movwf	LCD_String@string& (0+255),b
  3712  000FF0  0E03               	movlw	high STR_1
  3713  000FF2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3714  000FF4  EC92  F00A         	call	_LCD_String	;wreg free
  3715                           
  3716                           ;Movement.c: 74: SetLine(2);
  3717  000FF8  0E02               	movlw	2
  3718  000FFA  ECA0  F00B         	call	_SetLine
  3719                           
  3720                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3721  000FFE  0E87               	movlw	low ScanIR@buf
  3722  001000  0100               	movlb	0	; () banked
  3723  001002  6F67               	movwf	sprintf@sp& (0+255),b
  3724  001004  0E00               	movlw	high ScanIR@buf
  3725  001006  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3726  001008  0E0C               	movlw	low (STR_6+1)
  3727  00100A  6F69               	movwf	sprintf@f& (0+255),b
  3728  00100C  0E03               	movlw	high (STR_6+1)
  3729  00100E  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3730  001010  C0B1  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  3731  001014  C0B2  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3732  001018  C0B3  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3733  00101C  C0B4  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3734  001020  EC4D  F005         	call	_sprintf	;wreg free
  3735                           
  3736                           ;Movement.c: 76: LCD_String(buf);
  3737  001024  0E87               	movlw	low ScanIR@buf
  3738  001026  0100               	movlb	0	; () banked
  3739  001028  6F60               	movwf	LCD_String@string& (0+255),b
  3740  00102A  0E00               	movlw	high ScanIR@buf
  3741  00102C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3742  00102E  EC92  F00A         	call	_LCD_String	;wreg free
  3743                           
  3744                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3745                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3746  001032  0100               	movlb	0	; () banked
  3747  001034  51B1               	movf	ScanIR@SensorResult& (0+255),w,b
  3748  001036  5DAF               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3749  001038  51B2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3750  00103A  59B0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3751  00103C  B0D8               	btfsc	status,0,c
  3752  00103E  D008               	goto	l212
  3753                           
  3754                           ; BSR set to: 0
  3755  001040  51B3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3756  001042  5DAF               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3757  001044  51B4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3758  001046  59B0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3759  001048  B0D8               	btfsc	status,0,c
  3760  00104A  D002               	goto	l212
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Movement.c: 82: return 2;
  3764  00104C  0E02               	movlw	2
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;Movement.c: 83: } else {
  3768                           
  3769                           ; BSR set to: 0
  3770  00104E  0012               	return	
  3771  001050                     l212:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;Movement.c: 84: stop(mL,mR);
  3775                           
  3776                           ; BSR set to: 0
  3777  001050  C07C  F071         	movff	ScanIR@mL,stop@mL
  3778  001054  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  3779  001058  C07E  F073         	movff	ScanIR@mR,stop@mR
  3780  00105C  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  3781  001060  EC52  F009         	call	_stop	;wreg free
  3782                           
  3783                           ;Movement.c: 85: return 0;
  3784  001064  0E00               	movlw	0
  3785  001066  0012               	return	
  3786  001068                     __end_of_ScanIR:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           intcon	equ	0xFF2
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           indf1	equ	0xFE7
  3795                           fsr1h	equ	0xFE2
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _stop *****************
  3805 ;; Defined at:
  3806 ;;		line 67 in file "dc_motor.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3809 ;;		 -> main@mL(9), 
  3810 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3811 ;;		 -> main@mR(9), 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3823 ;;      Params:         0       4       0       0
  3824 ;;      Locals:         0       0       0       0
  3825 ;;      Temps:          0       0       0       0
  3826 ;;      Totals:         0       4       0       0
  3827 ;;Total ram usage:        4 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    5
  3830 ;; This function calls:
  3831 ;;		_setMotorPWM
  3832 ;; This function is called by:
  3833 ;;		_ScanIR
  3834 ;;		_ScanWithRange
  3835 ;;		_main
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text15
  3840  0012A4                     __ptext15:
  3841                           	opt stack 0
  3842  0012A4                     _stop:
  3843                           	opt stack 25
  3844                           
  3845                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3846                           
  3847                           ;incstack = 0
  3848  0012A4  D028               	goto	l51
  3849  0012A6                     
  3850                           ;dc_motor.c: 71: if(mL->power>0){
  3851  0012A6  C071  FFD9         	movff	stop@mL,fsr2l
  3852  0012AA  C072  FFDA         	movff	stop@mL+1,fsr2h
  3853  0012AE  50DF               	movf	indf2,w,c
  3854  0012B0  B4D8               	btfsc	status,2,c
  3855  0012B2  D005               	goto	l53
  3856                           
  3857                           ;dc_motor.c: 72: mL->power--;
  3858  0012B4  C071  FFD9         	movff	stop@mL,fsr2l
  3859  0012B8  C072  FFDA         	movff	stop@mL+1,fsr2h
  3860  0012BC  06DF               	decf	indf2,f,c
  3861  0012BE                     l53:
  3862                           
  3863                           ;dc_motor.c: 73: }
  3864                           ;dc_motor.c: 74: if(mR->power>0){
  3865  0012BE  C073  FFD9         	movff	stop@mR,fsr2l
  3866  0012C2  C074  FFDA         	movff	stop@mR+1,fsr2h
  3867  0012C6  50DF               	movf	indf2,w,c
  3868  0012C8  B4D8               	btfsc	status,2,c
  3869  0012CA  D005               	goto	l54
  3870                           
  3871                           ;dc_motor.c: 75: mR->power--;
  3872  0012CC  C073  FFD9         	movff	stop@mR,fsr2l
  3873  0012D0  C074  FFDA         	movff	stop@mR+1,fsr2h
  3874  0012D4  06DF               	decf	indf2,f,c
  3875  0012D6                     l54:
  3876                           
  3877                           ;dc_motor.c: 76: }
  3878                           ;dc_motor.c: 77: setMotorPWM(mL);
  3879  0012D6  C071  F068         	movff	stop@mL,setMotorPWM@m
  3880  0012DA  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  3881  0012DE  EC9D  F006         	call	_setMotorPWM	;wreg free
  3882                           
  3883                           ;dc_motor.c: 78: setMotorPWM(mR);
  3884  0012E2  C073  F068         	movff	stop@mR,setMotorPWM@m
  3885  0012E6  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  3886  0012EA  EC9D  F006         	call	_setMotorPWM	;wreg free
  3887                           
  3888                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3889  0012EE  0E21               	movlw	33
  3890  0012F0                     u3197:
  3891  0012F0  2EE8               	decfsz	wreg,f,c
  3892  0012F2  D7FE               	bra	u3197
  3893  0012F4  F000               	nop	
  3894  0012F6                     l51:
  3895  0012F6  C071  FFD9         	movff	stop@mL,fsr2l
  3896  0012FA  C072  FFDA         	movff	stop@mL+1,fsr2h
  3897  0012FE  50DF               	movf	indf2,w,c
  3898  001300  A4D8               	btfss	status,2,c
  3899  001302  D7D1               	goto	l52
  3900  001304  C073  FFD9         	movff	stop@mR,fsr2l
  3901  001308  C074  FFDA         	movff	stop@mR+1,fsr2h
  3902  00130C  50DF               	movf	indf2,w,c
  3903  00130E  A4D8               	btfss	status,2,c
  3904  001310  D7CA               	goto	l52
  3905                           
  3906                           ;dc_motor.c: 80: }
  3907                           ;dc_motor.c: 81: mL->direction=1;
  3908  001312  0100               	movlb	0	; () banked
  3909  001314  EE20 F001          	lfsr	2,1
  3910  001318  5171               	movf	stop@mL& (0+255),w,b
  3911  00131A  26D9               	addwf	fsr2l,f,c
  3912  00131C  5172               	movf	(stop@mL+1)& (0+255),w,b
  3913  00131E  22DA               	addwfc	fsr2h,f,c
  3914  001320  0E01               	movlw	1
  3915  001322  6EDF               	movwf	indf2,c
  3916                           
  3917                           ;dc_motor.c: 82: mR->direction=1;
  3918  001324  EE20 F001          	lfsr	2,1
  3919  001328  5173               	movf	stop@mR& (0+255),w,b
  3920  00132A  26D9               	addwf	fsr2l,f,c
  3921  00132C  5174               	movf	(stop@mR+1)& (0+255),w,b
  3922  00132E  22DA               	addwfc	fsr2h,f,c
  3923  001330  0E01               	movlw	1
  3924  001332  6EDF               	movwf	indf2,c
  3925                           
  3926                           ; BSR set to: 0
  3927  001334  0012               	return		;funcret
  3928  001336                     __end_of_stop:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           intcon	equ	0xFF2
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           indf1	equ	0xFE7
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           postinc2	equ	0xFDE
  3941                           postdec2	equ	0xFDD
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function _setMotorPWM *****************
  3947 ;; Defined at:
  3948 ;;		line 26 in file "dc_motor.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  3951 ;;		 -> main@mR(9), main@mL(9), 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  PWMduty         2   15[BANK0 ] int 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3963 ;;      Params:         0       2       0       0
  3964 ;;      Locals:         0       2       0       0
  3965 ;;      Temps:          0       5       0       0
  3966 ;;      Totals:         0       9       0       0
  3967 ;;Total ram usage:        9 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    4
  3970 ;; This function calls:
  3971 ;;		___awdiv
  3972 ;;		___wmul
  3973 ;; This function is called by:
  3974 ;;		_stop
  3975 ;;		_fullSpeedAhead
  3976 ;;		_setMotorFullSpeed
  3977 ;;		_stopMotor
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text16
  3982  000D3A                     __ptext16:
  3983                           	opt stack 0
  3984  000D3A                     _setMotorPWM:
  3985                           	opt stack 25
  3986                           
  3987                           ;dc_motor.c: 28: int PWMduty;
  3988                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;incstack = 0
  3992  000D3A  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  3993  000D3E  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3994  000D42  50DF               	movf	indf2,w,c
  3995  000D44  0100               	movlb	0	; () banked
  3996  000D46  6F6A               	movwf	??_setMotorPWM& (0+255),b
  3997  000D48  516A               	movf	??_setMotorPWM& (0+255),w,b
  3998  000D4A  6E2C               	movwf	___wmul@multiplier,c
  3999  000D4C  6A2D               	clrf	___wmul@multiplier+1,c
  4000  000D4E  EE20 F007          	lfsr	2,7
  4001  000D52  5168               	movf	setMotorPWM@m& (0+255),w,b
  4002  000D54  26D9               	addwf	fsr2l,f,c
  4003  000D56  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4004  000D58  22DA               	addwfc	fsr2h,f,c
  4005  000D5A  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4006  000D5E  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4007  000D62  EC14  F00C         	call	___wmul	;wreg free
  4008  000D66  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4009  000D6A  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4010  000D6E  0E00               	movlw	0
  4011  000D70  0100               	movlb	0	; () banked
  4012  000D72  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4013  000D74  0E64               	movlw	100
  4014  000D76  6F62               	movwf	___awdiv@divisor& (0+255),b
  4015  000D78  EC9B  F009         	call	___awdiv	;wreg free
  4016  000D7C  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4017  000D80  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4018                           
  4019                           ;dc_motor.c: 32: if (m->direction)
  4020  000D84  0100               	movlb	0	; () banked
  4021  000D86  EE20 F001          	lfsr	2,1
  4022  000D8A  5168               	movf	setMotorPWM@m& (0+255),w,b
  4023  000D8C  26D9               	addwf	fsr2l,f,c
  4024  000D8E  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4025  000D90  22DA               	addwfc	fsr2h,f,c
  4026  000D92  50DF               	movf	indf2,w,c
  4027  000D94  B4D8               	btfsc	status,2,c
  4028  000D96  D02D               	goto	l34
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;dc_motor.c: 33: {
  4032                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4033  000D98  EE20 F006          	lfsr	2,6
  4034  000D9C  5168               	movf	setMotorPWM@m& (0+255),w,b
  4035  000D9E  26D9               	addwf	fsr2l,f,c
  4036  000DA0  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4037  000DA2  22DA               	addwfc	fsr2h,f,c
  4038  000DA4  50DF               	movf	indf2,w,c
  4039  000DA6  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4040  000DA8  0E01               	movlw	1
  4041  000DAA  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4042  000DAC  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4043  000DAE  D002               	goto	u2184
  4044  000DB0                     u2185:
  4045  000DB0  90D8               	bcf	status,0,c
  4046  000DB2  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4047  000DB4                     u2184:
  4048  000DB4  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4049  000DB6  D7FC               	goto	u2185
  4050  000DB8  0100               	movlb	0	; () banked
  4051  000DBA  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4052  000DBC  108A               	iorwf	3978,w,c	;volatile
  4053  000DBE  6E8A               	movwf	3978,c	;volatile
  4054                           
  4055                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4056  000DC0  EE20 F007          	lfsr	2,7
  4057  000DC4  5168               	movf	setMotorPWM@m& (0+255),w,b
  4058  000DC6  26D9               	addwf	fsr2l,f,c
  4059  000DC8  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4060  000DCA  22DA               	addwfc	fsr2h,f,c
  4061  000DCC  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4062  000DD0  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4063  000DD4  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4064  000DD8  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4065  000DDC  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4066  000DDE  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4067  000DE0  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4068  000DE2  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4069  000DE4  516A               	movf	??_setMotorPWM& (0+255),w,b
  4070  000DE6  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4071  000DE8  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4072  000DEA  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4073  000DEC  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4074  000DEE  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4075                           
  4076                           ;dc_motor.c: 36: }
  4077  000DF0  D015               	goto	l35
  4078  000DF2                     l34:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;dc_motor.c: 37: else
  4082                           ;dc_motor.c: 38: {
  4083                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4084                           
  4085                           ; BSR set to: 0
  4086  000DF2  EE20 F006          	lfsr	2,6
  4087  000DF6  5168               	movf	setMotorPWM@m& (0+255),w,b
  4088  000DF8  26D9               	addwf	fsr2l,f,c
  4089  000DFA  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4090  000DFC  22DA               	addwfc	fsr2h,f,c
  4091  000DFE  50DF               	movf	indf2,w,c
  4092  000E00  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4093  000E02  0E01               	movlw	1
  4094  000E04  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4095  000E06  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4096  000E08  D002               	goto	u2194
  4097  000E0A                     u2195:
  4098  000E0A  90D8               	bcf	status,0,c
  4099  000E0C  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4100  000E0E                     u2194:
  4101  000E0E  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4102  000E10  D7FC               	goto	u2195
  4103  000E12  0100               	movlb	0	; () banked
  4104  000E14  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4105  000E16  0AFF               	xorlw	255
  4106  000E18  148A               	andwf	3978,w,c	;volatile
  4107  000E1A  6E8A               	movwf	3978,c	;volatile
  4108  000E1C                     l35:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;dc_motor.c: 40: }
  4112                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4113  000E1C  EE20 F002          	lfsr	2,2
  4114  000E20  5168               	movf	setMotorPWM@m& (0+255),w,b
  4115  000E22  26D9               	addwf	fsr2l,f,c
  4116  000E24  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4117  000E26  22DA               	addwfc	fsr2h,f,c
  4118  000E28  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4119  000E2C  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4120  000E30  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4121  000E34  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4122  000E38  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4123  000E3A  46E8               	rlncf	wreg,f,c
  4124  000E3C  0BFC               	andlw	252
  4125  000E3E  6EDF               	movwf	indf2,c
  4126                           
  4127                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4128  000E40  EE20 F004          	lfsr	2,4
  4129  000E44  5168               	movf	setMotorPWM@m& (0+255),w,b
  4130  000E46  26D9               	addwf	fsr2l,f,c
  4131  000E48  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4132  000E4A  22DA               	addwfc	fsr2h,f,c
  4133  000E4C  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4134  000E50  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4135  000E54  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4136  000E58  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4137  000E5C  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4138  000E60  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4139  000E64  0E06               	movlw	6
  4140  000E66  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  4141  000E68                     u2205:
  4142  000E68  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4143  000E6A  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4144  000E6C  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4145  000E6E  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4146  000E70  D7FB               	goto	u2205
  4147  000E72  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4148  000E74  6EDF               	movwf	indf2,c
  4149                           
  4150                           ; BSR set to: 0
  4151  000E76  0012               	return		;funcret
  4152  000E78                     __end_of_setMotorPWM:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon	equ	0xFF2
  4158                           postinc0	equ	0xFEE
  4159                           wreg	equ	0xFE8
  4160                           indf1	equ	0xFE7
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function ___awdiv *****************
  4171 ;; Defined at:
  4172 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  dividend        2    0[BANK0 ] int 
  4175 ;;  divisor         2    2[BANK0 ] int 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  quotient        2    6[BANK0 ] int 
  4178 ;;  sign            1    5[BANK0 ] unsigned char 
  4179 ;;  counter         1    4[BANK0 ] unsigned char 
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  2    0[BANK0 ] int 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2, status,0
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4189 ;;      Params:         0       4       0       0
  4190 ;;      Locals:         0       4       0       0
  4191 ;;      Temps:          0       0       0       0
  4192 ;;      Totals:         0       8       0       0
  4193 ;;Total ram usage:        8 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    3
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_setMotorPWM
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text17
  4204  001336                     __ptext17:
  4205                           	opt stack 0
  4206  001336                     ___awdiv:
  4207                           	opt stack 25
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;incstack = 0
  4211  001336  0E00               	movlw	0
  4212  001338  0100               	movlb	0	; () banked
  4213  00133A  6F65               	movwf	___awdiv@sign& (0+255),b
  4214                           
  4215                           ; BSR set to: 0
  4216  00133C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4217  00133E  D006               	goto	l638
  4218                           
  4219                           ; BSR set to: 0
  4220  001340  6D62               	negf	___awdiv@divisor& (0+255),b
  4221  001342  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4222  001344  B0D8               	btfsc	status,0,c
  4223  001346  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4224                           
  4225                           ; BSR set to: 0
  4226  001348  0E01               	movlw	1
  4227  00134A  6F65               	movwf	___awdiv@sign& (0+255),b
  4228  00134C                     l638:
  4229                           
  4230                           ; BSR set to: 0
  4231                           
  4232                           ; BSR set to: 0
  4233  00134C  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4234  00134E  D006               	goto	l639
  4235                           
  4236                           ; BSR set to: 0
  4237  001350  6D60               	negf	___awdiv@dividend& (0+255),b
  4238  001352  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4239  001354  B0D8               	btfsc	status,0,c
  4240  001356  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4241                           
  4242                           ; BSR set to: 0
  4243  001358  0E01               	movlw	1
  4244  00135A  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4245  00135C                     l639:
  4246                           
  4247                           ; BSR set to: 0
  4248                           
  4249                           ; BSR set to: 0
  4250  00135C  0E00               	movlw	0
  4251  00135E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4252  001360  0E00               	movlw	0
  4253  001362  6F66               	movwf	___awdiv@quotient& (0+255),b
  4254                           
  4255                           ; BSR set to: 0
  4256  001364  5162               	movf	___awdiv@divisor& (0+255),w,b
  4257  001366  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4258  001368  B4D8               	btfsc	status,2,c
  4259  00136A  D01C               	goto	l646
  4260                           
  4261                           ; BSR set to: 0
  4262  00136C  0E01               	movlw	1
  4263  00136E  6F64               	movwf	___awdiv@counter& (0+255),b
  4264  001370  D004               	goto	l641
  4265  001372                     
  4266                           ; BSR set to: 0
  4267                           
  4268                           ; BSR set to: 0
  4269  001372  90D8               	bcf	status,0,c
  4270  001374  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4271  001376  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4272  001378  2B64               	incf	___awdiv@counter& (0+255),f,b
  4273  00137A                     l641:
  4274                           
  4275                           ; BSR set to: 0
  4276                           
  4277                           ; BSR set to: 0
  4278  00137A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4279  00137C  D7FA               	goto	l642
  4280  00137E                     u1140:
  4281                           
  4282                           ; BSR set to: 0
  4283                           
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287  00137E  90D8               	bcf	status,0,c
  4288  001380  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4289  001382  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4290                           
  4291                           ; BSR set to: 0
  4292  001384  5162               	movf	___awdiv@divisor& (0+255),w,b
  4293  001386  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4294  001388  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4295  00138A  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4296  00138C  A0D8               	btfss	status,0,c
  4297  00138E  D005               	goto	l645
  4298                           
  4299                           ; BSR set to: 0
  4300  001390  5162               	movf	___awdiv@divisor& (0+255),w,b
  4301  001392  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4302  001394  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4303  001396  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306  001398  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4307  00139A                     l645:
  4308                           
  4309                           ; BSR set to: 0
  4310                           
  4311                           ; BSR set to: 0
  4312  00139A  90D8               	bcf	status,0,c
  4313  00139C  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4314  00139E  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4315                           
  4316                           ; BSR set to: 0
  4317  0013A0  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4318  0013A2  D7ED               	goto	u1140
  4319  0013A4                     l646:
  4320                           
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324                           
  4325                           ; BSR set to: 0
  4326  0013A4  5165               	movf	___awdiv@sign& (0+255),w,b
  4327  0013A6  B4D8               	btfsc	status,2,c
  4328  0013A8  D004               	goto	l647
  4329                           
  4330                           ; BSR set to: 0
  4331  0013AA  6D66               	negf	___awdiv@quotient& (0+255),b
  4332  0013AC  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4333  0013AE  B0D8               	btfsc	status,0,c
  4334  0013B0  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4335  0013B2                     l647:
  4336                           
  4337                           ; BSR set to: 0
  4338                           
  4339                           ; BSR set to: 0
  4340  0013B2  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4341  0013B6  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4342  0013BA  0012               	return	
  4343  0013BC                     __end_of___awdiv:
  4344                           	opt stack 0
  4345                           tblptru	equ	0xFF8
  4346                           prodh	equ	0xFF4
  4347                           prodl	equ	0xFF3
  4348                           intcon	equ	0xFF2
  4349                           postinc0	equ	0xFEE
  4350                           wreg	equ	0xFE8
  4351                           indf1	equ	0xFE7
  4352                           fsr1h	equ	0xFE2
  4353                           fsr1l	equ	0xFE1
  4354                           indf2	equ	0xFDF
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _sprintf *****************
  4362 ;; Defined at:
  4363 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  4366 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4367 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  4368 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  tmpval          4    0        struct .
  4371 ;;  cp              3    0        PTR const unsigned char 
  4372 ;;  width           2   25[BANK0 ] int 
  4373 ;;  val             2   22[BANK0 ] unsigned int 
  4374 ;;  ap              2   19[BANK0 ] PTR void [1]
  4375 ;;		 -> ?_sprintf(2), 
  4376 ;;  len             2    0        unsigned int 
  4377 ;;  c               1   27[BANK0 ] char 
  4378 ;;  flag            1   24[BANK0 ] unsigned char 
  4379 ;;  prec            1   21[BANK0 ] char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  2    7[BANK0 ] int 
  4382 ;; Registers used:
  4383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4389 ;;      Params:         0       8       0       0
  4390 ;;      Locals:         0       9       0       0
  4391 ;;      Temps:          0       4       0       0
  4392 ;;      Totals:         0      21       0       0
  4393 ;;Total ram usage:       21 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    4
  4396 ;; This function calls:
  4397 ;;		___lwdiv
  4398 ;;		___lwmod
  4399 ;;		___wmul
  4400 ;;		_isdigit
  4401 ;; This function is called by:
  4402 ;;		_ScanIR
  4403 ;;		_ScanWithRange
  4404 ;;		_main
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text18
  4409  000A9A                     __ptext18:
  4410                           	opt stack 0
  4411  000A9A                     _sprintf:
  4412                           	opt stack 26
  4413                           
  4414                           ;doprnt.c: 494: va_list ap;
  4415                           ;doprnt.c: 499: signed char c;
  4416                           ;doprnt.c: 501: int width;
  4417                           ;doprnt.c: 506: signed char prec;
  4418                           ;doprnt.c: 508: unsigned char flag;
  4419                           ;doprnt.c: 523: union {
  4420                           ;doprnt.c: 524: unsigned long vd;
  4421                           ;doprnt.c: 525: double integ;
  4422                           ;doprnt.c: 526: } tmpval;
  4423                           ;doprnt.c: 528: unsigned int val;
  4424                           ;doprnt.c: 529: unsigned len;
  4425                           ;doprnt.c: 530: const char * cp;
  4426                           ;doprnt.c: 533: *ap = __va_start();
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;incstack = 0
  4430  000A9A  0E6B               	movlw	low (?_sprintf+4)
  4431  000A9C  0100               	movlb	0	; () banked
  4432  000A9E  6F73               	movwf	sprintf@ap& (0+255),b
  4433  000AA0  0E00               	movlw	high (?_sprintf+4)
  4434  000AA2  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  4435                           
  4436                           ;doprnt.c: 536: while(c = *f++) {
  4437  000AA4  D136               	goto	u2680
  4438  000AA6                     
  4439                           ; BSR set to: 0
  4440                           ;doprnt.c: 538: if(c != '%')
  4441                           
  4442                           ; BSR set to: 0
  4443  000AA6  0E25               	movlw	37
  4444  000AA8  197B               	xorwf	sprintf@c& (0+255),w,b
  4445  000AAA  B4D8               	btfsc	status,2,c
  4446  000AAC  D009               	goto	l432
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;doprnt.c: 540: {
  4450                           ;doprnt.c: 541: ((*sp++ = (c)));
  4451  000AAE  C067  FFD9         	movff	sprintf@sp,fsr2l
  4452  000AB2  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4453  000AB6  C07B  FFDF         	movff	sprintf@c,indf2
  4454                           
  4455                           ; BSR set to: 0
  4456  000ABA  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4457  000ABC  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4458                           
  4459                           ;doprnt.c: 542: continue;
  4460  000ABE  D129               	goto	u2680
  4461  000AC0                     l432:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 543: }
  4465                           ;doprnt.c: 546: width = 0;
  4466                           
  4467                           ; BSR set to: 0
  4468  000AC0  0E00               	movlw	0
  4469  000AC2  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  4470  000AC4  0E00               	movlw	0
  4471  000AC6  6F79               	movwf	sprintf@width& (0+255),b
  4472                           
  4473                           ;doprnt.c: 548: flag = 0;
  4474  000AC8  0E00               	movlw	0
  4475  000ACA  6F78               	movwf	sprintf@flag& (0+255),b
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 551: switch(*f) {
  4479                           
  4480                           ;doprnt.c: 550: for(;;) {
  4481  000ACC  D004               	goto	l434
  4482  000ACE                     
  4483                           ;doprnt.c: 580: flag |= 0x04;
  4484                           
  4485                           ; BSR set to: 0
  4486  000ACE  0100               	movlb	0	; () banked
  4487  000AD0  8578               	bsf	sprintf@flag& (0+255),2,b
  4488                           
  4489                           ;doprnt.c: 581: f++;
  4490  000AD2  4B69               	infsnz	sprintf@f& (0+255),f,b
  4491  000AD4  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  4492  000AD6                     l434:
  4493                           
  4494                           ; BSR set to: 0
  4495  000AD6  C069  FFF6         	movff	sprintf@f,tblptrl
  4496  000ADA  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4497  000ADE                     	if	0	;tblptru may be non-zero
  4498  000ADE                     	endif
  4499  000ADE                     	if	0	;tblptru may be non-zero
  4500  000ADE                     	endif
  4501  000ADE  0008               	tblrd		*
  4502  000AE0  50F5               	movf	tablat,w,c
  4503                           
  4504                           ; Switch size 1, requested type "space"
  4505                           ; Number of cases is 1, Range of values is 48 to 48
  4506                           ; switch strategies available:
  4507                           ; Name         Instructions Cycles
  4508                           ; simple_byte            4     3 (average)
  4509                           ;	Chosen strategy is simple_byte
  4510  000AE2  0A30               	xorlw	48	; case 48
  4511  000AE4  B4D8               	btfsc	status,2,c
  4512  000AE6  D7F3               	goto	l435
  4513                           
  4514                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4515                           
  4516                           ;doprnt.c: 586: }
  4517                           
  4518                           ;doprnt.c: 585: break;
  4519  000AE8  C069  FFF6         	movff	sprintf@f,tblptrl
  4520  000AEC  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4521  000AF0                     	if	0	;tblptru may be non-zero
  4522  000AF0                     	endif
  4523  000AF0                     	if	0	;tblptru may be non-zero
  4524  000AF0                     	endif
  4525  000AF0  0008               	tblrd		*
  4526  000AF2  50F5               	movf	tablat,w,c
  4527  000AF4  EC38  F00C         	call	_isdigit
  4528  000AF8  A0D8               	btfss	status,0,c
  4529  000AFA  D034               	goto	l442
  4530                           
  4531                           ;doprnt.c: 598: width = 0;
  4532  000AFC  0E00               	movlw	0
  4533  000AFE  0100               	movlb	0	; () banked
  4534  000B00  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  4535  000B02  0E00               	movlw	0
  4536  000B04  6F79               	movwf	sprintf@width& (0+255),b
  4537  000B06                     
  4538                           ;doprnt.c: 600: width *= 10;
  4539                           
  4540                           ; BSR set to: 0
  4541  000B06  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  4542  000B0A  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  4543  000B0E  0E00               	movlw	0
  4544  000B10  6E2F               	movwf	___wmul@multiplicand+1,c
  4545  000B12  0E0A               	movlw	10
  4546  000B14  6E2E               	movwf	___wmul@multiplicand,c
  4547  000B16  EC14  F00C         	call	___wmul	;wreg free
  4548  000B1A  C02C  F079         	movff	?___wmul,sprintf@width
  4549  000B1E  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  4550                           
  4551                           ;doprnt.c: 601: width += *f++ - '0';
  4552  000B22  0ED0               	movlw	208
  4553  000B24  0100               	movlb	0	; () banked
  4554  000B26  6F6F               	movwf	??_sprintf& (0+255),b
  4555  000B28  0EFF               	movlw	255
  4556  000B2A  6F70               	movwf	(??_sprintf+1)& (0+255),b
  4557  000B2C  C069  FFF6         	movff	sprintf@f,tblptrl
  4558  000B30  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4559  000B34                     	if	0	;tblptru may be non-zero
  4560  000B34                     	endif
  4561  000B34                     	if	0	;tblptru may be non-zero
  4562  000B34                     	endif
  4563  000B34  0008               	tblrd		*
  4564  000B36  50F5               	movf	tablat,w,c
  4565  000B38  6F71               	movwf	(??_sprintf+2)& (0+255),b
  4566  000B3A  6B72               	clrf	(??_sprintf+3)& (0+255),b
  4567  000B3C  516F               	movf	??_sprintf& (0+255),w,b
  4568  000B3E  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  4569  000B40  5170               	movf	(??_sprintf+1)& (0+255),w,b
  4570  000B42  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  4571  000B44  5171               	movf	(??_sprintf+2)& (0+255),w,b
  4572  000B46  2779               	addwf	sprintf@width& (0+255),f,b
  4573  000B48  5172               	movf	(??_sprintf+3)& (0+255),w,b
  4574  000B4A  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  4575                           
  4576                           ; BSR set to: 0
  4577  000B4C  4B69               	infsnz	sprintf@f& (0+255),f,b
  4578  000B4E  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4582  000B50  C069  FFF6         	movff	sprintf@f,tblptrl
  4583  000B54  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4584  000B58                     	if	0	;tblptru may be non-zero
  4585  000B58                     	endif
  4586  000B58                     	if	0	;tblptru may be non-zero
  4587  000B58                     	endif
  4588  000B58  0008               	tblrd		*
  4589  000B5A  50F5               	movf	tablat,w,c
  4590  000B5C  EC38  F00C         	call	_isdigit
  4591  000B60  B0D8               	btfsc	status,0,c
  4592  000B62  D7D1               	goto	l440
  4593  000B64                     l442:
  4594  000B64  C069  FFF6         	movff	sprintf@f,tblptrl
  4595  000B68  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4596  000B6C  0100               	movlb	0	; () banked
  4597  000B6E  4B69               	infsnz	sprintf@f& (0+255),f,b
  4598  000B70  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  4599  000B72                     	if	0	;tblptru may be non-zero
  4600  000B72                     	endif
  4601  000B72                     	if	0	;tblptru may be non-zero
  4602  000B72                     	endif
  4603  000B72  0008               	tblrd		*
  4604  000B74  CFF5 F07B          	movff	tablat,sprintf@c
  4605  000B78  517B               	movf	sprintf@c& (0+255),w,b
  4606                           
  4607                           ; Switch size 1, requested type "space"
  4608                           ; Number of cases is 3, Range of values is 0 to 105
  4609                           ; switch strategies available:
  4610                           ; Name         Instructions Cycles
  4611                           ; simple_byte           10     6 (average)
  4612                           ;	Chosen strategy is simple_byte
  4613  000B7A  0A00               	xorlw	0	; case 0
  4614  000B7C  B4D8               	btfsc	status,2,c
  4615  000B7E  D0D6               	goto	u2690
  4616  000B80  0A64               	xorlw	100	; case 100
  4617  000B82  B4D8               	btfsc	status,2,c
  4618  000B84  D003               	goto	l447
  4619  000B86  0A0D               	xorlw	13	; case 105
  4620  000B88  A4D8               	btfss	status,2,c
  4621  000B8A  D0C3               	goto	u2680
  4622  000B8C                     l447:
  4623                           
  4624                           ;doprnt.c: 1253: {
  4625                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4626                           
  4627                           ; BSR set to: 0
  4628  000B8C  C073  FFD9         	movff	sprintf@ap,fsr2l
  4629  000B90  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  4630  000B94  CFDE F076          	movff	postinc2,sprintf@val
  4631  000B98  CFDD F077          	movff	postdec2,sprintf@val+1
  4632  000B9C  0E02               	movlw	2
  4633  000B9E  0100               	movlb	0	; () banked
  4634  000BA0  2773               	addwf	sprintf@ap& (0+255),f,b
  4635  000BA2  0E00               	movlw	0
  4636  000BA4  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;doprnt.c: 1261: if((int)val < 0) {
  4640  000BA6  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  4641  000BA8  D006               	goto	l449
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;doprnt.c: 1262: flag |= 0x03;
  4645  000BAA  0E03               	movlw	3
  4646  000BAC  1378               	iorwf	sprintf@flag& (0+255),f,b
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;doprnt.c: 1263: val = -val;
  4650  000BAE  6D76               	negf	sprintf@val& (0+255),b
  4651  000BB0  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  4652  000BB2  B0D8               	btfsc	status,0,c
  4653  000BB4  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  4654  000BB6                     l449:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;doprnt.c: 1264: }
  4658                           ;doprnt.c: 1266: }
  4659                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4660                           
  4661                           ; BSR set to: 0
  4662  000BB6  0E01               	movlw	1
  4663  000BB8  6F7B               	movwf	sprintf@c& (0+255),b
  4664  000BBA                     l3015:
  4665                           
  4666                           ; BSR set to: 0
  4667  000BBA  0E05               	movlw	5
  4668  000BBC  197B               	xorwf	sprintf@c& (0+255),w,b
  4669  000BBE  B4D8               	btfsc	status,2,c
  4670  000BC0  D012               	goto	u2570
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;doprnt.c: 1306: if(val < dpowers[c])
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  000BC2  517B               	movf	sprintf@c& (0+255),w,b
  4679  000BC4  0D02               	mullw	2
  4680  000BC6  0E01               	movlw	low _dpowers
  4681  000BC8  24F3               	addwf	prodl,w,c
  4682  000BCA  6EF6               	movwf	tblptrl,c
  4683  000BCC  0E03               	movlw	high _dpowers
  4684  000BCE  20F4               	addwfc	prodh,w,c
  4685  000BD0  6EF7               	movwf	tblptrh,c
  4686  000BD2                     	if	0	;There are less than 3 active tblptr bytes
  4687  000BD2                     	endif
  4688  000BD2  0009               	tblrd		*+
  4689  000BD4  50F5               	movf	tablat,w,c
  4690  000BD6  5D76               	subwf	sprintf@val& (0+255),w,b
  4691  000BD8  0009               	tblrd		*+
  4692  000BDA  50F5               	movf	tablat,w,c
  4693  000BDC  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  4694  000BDE  A0D8               	btfss	status,0,c
  4695  000BE0  D002               	goto	u2570
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;doprnt.c: 1307: break;
  4703  000BE2  2B7B               	incf	sprintf@c& (0+255),f,b
  4704  000BE4  D7EA               	goto	l3015
  4705  000BE6                     u2570:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4709                           
  4710                           ; BSR set to: 0
  4711  000BE6  5179               	movf	sprintf@width& (0+255),w,b
  4712  000BE8  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  4713  000BEA  B4D8               	btfsc	status,2,c
  4714  000BEC  D009               	goto	l453
  4715                           
  4716                           ; BSR set to: 0
  4717  000BEE  C078  F06F         	movff	sprintf@flag,??_sprintf
  4718  000BF2  0E03               	movlw	3
  4719  000BF4  176F               	andwf	??_sprintf& (0+255),f,b
  4720  000BF6  B4D8               	btfsc	status,2,c
  4721  000BF8  D003               	goto	l453
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1346: width--;
  4725  000BFA  0779               	decf	sprintf@width& (0+255),f,b
  4726  000BFC  A0D8               	btfss	status,0,c
  4727  000BFE  077A               	decf	(sprintf@width+1)& (0+255),f,b
  4728  000C00                     l453:
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;doprnt.c: 1381: if(width > c)
  4732                           
  4733                           ; BSR set to: 0
  4734  000C00  0E80               	movlw	128
  4735  000C02  BF7B               	btfsc	sprintf@c& (0+255),7,b
  4736  000C04  0E7F               	movlw	127
  4737  000C06  6F6F               	movwf	??_sprintf& (0+255),b
  4738  000C08  5179               	movf	sprintf@width& (0+255),w,b
  4739  000C0A  5D7B               	subwf	sprintf@c& (0+255),w,b
  4740  000C0C  517A               	movf	(sprintf@width+1)& (0+255),w,b
  4741  000C0E  0A80               	xorlw	128
  4742  000C10  596F               	subwfb	??_sprintf& (0+255),w,b
  4743  000C12  B0D8               	btfsc	status,0,c
  4744  000C14  D007               	goto	l454
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;doprnt.c: 1382: width -= c;
  4748  000C16  517B               	movf	sprintf@c& (0+255),w,b
  4749  000C18  5F79               	subwf	sprintf@width& (0+255),f,b
  4750  000C1A  0E00               	movlw	0
  4751  000C1C  BF7B               	btfsc	sprintf@c& (0+255),7,b
  4752  000C1E  0EFF               	movlw	255
  4753  000C20  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  4754  000C22  D004               	goto	l455
  4755  000C24                     l454:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 1383: else
  4759                           ;doprnt.c: 1384: width = 0;
  4760                           
  4761                           ; BSR set to: 0
  4762  000C24  0E00               	movlw	0
  4763  000C26  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  4764  000C28  0E00               	movlw	0
  4765  000C2A  6F79               	movwf	sprintf@width& (0+255),b
  4766  000C2C                     l455:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;doprnt.c: 1387: if(flag & 0x04) {
  4770                           
  4771                           ; BSR set to: 0
  4772  000C2C  A578               	btfss	sprintf@flag& (0+255),2,b
  4773  000C2E  D01E               	goto	l456
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1392: if(flag & 0x03)
  4777  000C30  C078  F06F         	movff	sprintf@flag,??_sprintf
  4778  000C34  0E03               	movlw	3
  4779  000C36  176F               	andwf	??_sprintf& (0+255),f,b
  4780  000C38  B4D8               	btfsc	status,2,c
  4781  000C3A  D008               	goto	l457
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4785  000C3C  C067  FFD9         	movff	sprintf@sp,fsr2l
  4786  000C40  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4787  000C44  0E2D               	movlw	45
  4788  000C46  6EDF               	movwf	indf2,c
  4789                           
  4790                           ; BSR set to: 0
  4791  000C48  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4792  000C4A  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4793  000C4C                     l457:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 1415: if(width)
  4797                           
  4798                           ; BSR set to: 0
  4799  000C4C  5179               	movf	sprintf@width& (0+255),w,b
  4800  000C4E  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  4801  000C50  B4D8               	btfsc	status,2,c
  4802  000C52  D02D               	goto	l465
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4806                           
  4807                           ; BSR set to: 0
  4808                           
  4809                           ;doprnt.c: 1416: do
  4810  000C54  C067  FFD9         	movff	sprintf@sp,fsr2l
  4811  000C58  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4812  000C5C  0E30               	movlw	48
  4813  000C5E  6EDF               	movwf	indf2,c
  4814                           
  4815                           ; BSR set to: 0
  4816  000C60  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4817  000C62  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 1418: while(--width);
  4821  000C64  0779               	decf	sprintf@width& (0+255),f,b
  4822  000C66  A0D8               	btfss	status,0,c
  4823  000C68  077A               	decf	(sprintf@width+1)& (0+255),f,b
  4824  000C6A  D7F0               	goto	l457
  4825  000C6C                     l456:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;doprnt.c: 1422: {
  4829                           ;doprnt.c: 1424: if(width
  4830                           ;doprnt.c: 1428: )
  4831                           
  4832                           ; BSR set to: 0
  4833  000C6C  5179               	movf	sprintf@width& (0+255),w,b
  4834  000C6E  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  4835  000C70  B4D8               	btfsc	status,2,c
  4836  000C72  D00F               	goto	u2660
  4837  000C74                     u2650:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4841                           
  4842                           ; BSR set to: 0
  4843                           
  4844                           ;doprnt.c: 1429: do
  4845  000C74  C067  FFD9         	movff	sprintf@sp,fsr2l
  4846  000C78  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4847  000C7C  0E20               	movlw	32
  4848  000C7E  6EDF               	movwf	indf2,c
  4849                           
  4850                           ; BSR set to: 0
  4851  000C80  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4852  000C82  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;doprnt.c: 1431: while(--width);
  4856  000C84  0779               	decf	sprintf@width& (0+255),f,b
  4857  000C86  A0D8               	btfss	status,0,c
  4858  000C88  077A               	decf	(sprintf@width+1)& (0+255),f,b
  4859  000C8A  5179               	movf	sprintf@width& (0+255),w,b
  4860  000C8C  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  4861  000C8E  A4D8               	btfss	status,2,c
  4862  000C90  D7F1               	goto	u2650
  4863  000C92                     u2660:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;doprnt.c: 1438: if(flag & 0x03)
  4867                           
  4868                           ; BSR set to: 0
  4869                           
  4870                           ; BSR set to: 0
  4871  000C92  C078  F06F         	movff	sprintf@flag,??_sprintf
  4872  000C96  0E03               	movlw	3
  4873  000C98  176F               	andwf	??_sprintf& (0+255),f,b
  4874  000C9A  B4D8               	btfsc	status,2,c
  4875  000C9C  D008               	goto	l465
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4879  000C9E  C067  FFD9         	movff	sprintf@sp,fsr2l
  4880  000CA2  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4881  000CA6  0E2D               	movlw	45
  4882  000CA8  6EDF               	movwf	indf2,c
  4883                           
  4884                           ; BSR set to: 0
  4885  000CAA  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4886  000CAC  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4887  000CAE                     l465:
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1469: }
  4891                           ;doprnt.c: 1472: prec = c;
  4892                           
  4893                           ; BSR set to: 0
  4894                           
  4895                           ; BSR set to: 0
  4896  000CAE  C07B  F075         	movff	sprintf@c,sprintf@prec
  4897                           
  4898                           ;doprnt.c: 1474: while(prec--) {
  4899  000CB2  D02B               	goto	l466
  4900  000CB4                     
  4901                           ; BSR set to: 0
  4902                           ;doprnt.c: 1478: {
  4903                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4904                           
  4905                           ; BSR set to: 0
  4906  000CB4  5175               	movf	sprintf@prec& (0+255),w,b
  4907  000CB6  0D02               	mullw	2
  4908  000CB8  0E01               	movlw	low _dpowers
  4909  000CBA  24F3               	addwf	prodl,w,c
  4910  000CBC  6EF6               	movwf	tblptrl,c
  4911  000CBE  0E03               	movlw	high _dpowers
  4912  000CC0  20F4               	addwfc	prodh,w,c
  4913  000CC2  6EF7               	movwf	tblptrh,c
  4914  000CC4                     	if	0	;There are less than 3 active tblptr bytes
  4915  000CC4                     	endif
  4916  000CC4  0009               	tblrd		*+
  4917  000CC6  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  4918  000CCA  000A               	tblrd		*-
  4919  000CCC  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  4920  000CD0  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  4921  000CD4  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  4922  000CD8  ECC2  F00A         	call	___lwdiv	;wreg free
  4923  000CDC  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  4924  000CE0  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  4925  000CE4  0E00               	movlw	0
  4926  000CE6  0100               	movlb	0	; () banked
  4927  000CE8  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  4928  000CEA  0E0A               	movlw	10
  4929  000CEC  6F65               	movwf	___lwmod@divisor& (0+255),b
  4930  000CEE  ECEC  F00A         	call	___lwmod	;wreg free
  4931  000CF2  0100               	movlb	0	; () banked
  4932  000CF4  5163               	movf	?___lwmod& (0+255),w,b
  4933  000CF6  0F30               	addlw	48
  4934  000CF8  6F7B               	movwf	sprintf@c& (0+255),b
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;doprnt.c: 1523: }
  4938                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4939  000CFA  C067  FFD9         	movff	sprintf@sp,fsr2l
  4940  000CFE  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4941  000D02  C07B  FFDF         	movff	sprintf@c,indf2
  4942                           
  4943                           ; BSR set to: 0
  4944  000D06  4B67               	infsnz	sprintf@sp& (0+255),f,b
  4945  000D08  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  4946  000D0A                     l466:
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951  000D0A  0775               	decf	sprintf@prec& (0+255),f,b
  4952  000D0C  2975               	incf	sprintf@prec& (0+255),w,b
  4953  000D0E  A4D8               	btfss	status,2,c
  4954  000D10  D7D1               	goto	l467
  4955  000D12                     u2680:
  4956                           
  4957                           ; BSR set to: 0
  4958                           
  4959                           ; BSR set to: 0
  4960  000D12  C069  FFF6         	movff	sprintf@f,tblptrl
  4961  000D16  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  4962  000D1A  0100               	movlb	0	; () banked
  4963  000D1C  4B69               	infsnz	sprintf@f& (0+255),f,b
  4964  000D1E  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  4965  000D20                     	if	0	;tblptru may be non-zero
  4966  000D20                     	endif
  4967  000D20                     	if	0	;tblptru may be non-zero
  4968  000D20                     	endif
  4969  000D20  0008               	tblrd		*
  4970  000D22  CFF5 F07B          	movff	tablat,sprintf@c
  4971  000D26  517B               	movf	sprintf@c& (0+255),w,b
  4972  000D28  A4D8               	btfss	status,2,c
  4973  000D2A  D6BD               	goto	l431
  4974  000D2C                     u2690:
  4975                           
  4976                           ;doprnt.c: 1538: *sp = 0;
  4977                           
  4978                           ; BSR set to: 0
  4979                           
  4980                           ;doprnt.c: 1525: }
  4981                           ;doprnt.c: 1533: }
  4982                           ;doprnt.c: 1535: alldone:
  4983                           
  4984                           ; BSR set to: 0
  4985  000D2C  C067  FFD9         	movff	sprintf@sp,fsr2l
  4986  000D30  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  4987  000D34  0E00               	movlw	0
  4988  000D36  6EDF               	movwf	indf2,c
  4989  000D38  0012               	return	
  4990  000D3A                     __end_of_sprintf:
  4991                           	opt stack 0
  4992                           tblptru	equ	0xFF8
  4993                           tblptrh	equ	0xFF7
  4994                           tblptrl	equ	0xFF6
  4995                           tablat	equ	0xFF5
  4996                           prodh	equ	0xFF4
  4997                           prodl	equ	0xFF3
  4998                           intcon	equ	0xFF2
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           indf1	equ	0xFE7
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _isdigit *****************
  5012 ;; Defined at:
  5013 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  c               1    wreg     unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  c               1   45[COMRAM] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;		None               void
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5027 ;;      Params:         0       0       0       0
  5028 ;;      Locals:         2       0       0       0
  5029 ;;      Temps:          1       0       0       0
  5030 ;;      Totals:         3       0       0       0
  5031 ;;Total ram usage:        3 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    3
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_sprintf
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text19
  5042  001870                     __ptext19:
  5043                           	opt stack 0
  5044  001870                     _isdigit:
  5045                           	opt stack 26
  5046                           
  5047                           ;incstack = 0
  5048                           ;isdigit@c stored from wreg
  5049  001870  6E2E               	movwf	isdigit@c,c
  5050  001872  0E00               	movlw	0
  5051  001874  6E2D               	movwf	_isdigit$1692,c
  5052  001876  0E3A               	movlw	58
  5053  001878  602E               	cpfslt	isdigit@c,c
  5054  00187A  D005               	goto	l800
  5055  00187C  0E2F               	movlw	47
  5056  00187E  642E               	cpfsgt	isdigit@c,c
  5057  001880  D002               	goto	l800
  5058  001882  0E01               	movlw	1
  5059  001884  6E2D               	movwf	_isdigit$1692,c
  5060  001886                     l800:
  5061  001886  C02D  F02C         	movff	_isdigit$1692,??_isdigit
  5062  00188A  302C               	rrcf	??_isdigit,w,c
  5063  00188C  0012               	return	
  5064  00188E                     __end_of_isdigit:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           indf1	equ	0xFE7
  5076                           fsr1h	equ	0xFE2
  5077                           fsr1l	equ	0xFE1
  5078                           indf2	equ	0xFDF
  5079                           postinc2	equ	0xFDE
  5080                           postdec2	equ	0xFDD
  5081                           fsr2h	equ	0xFDA
  5082                           fsr2l	equ	0xFD9
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function ___wmul *****************
  5086 ;; Defined at:
  5087 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  multiplier      2   43[COMRAM] unsigned int 
  5090 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  product         2   47[COMRAM] unsigned int 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2   43[COMRAM] unsigned int 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0, prodl, prodh
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5102 ;;      Params:         4       0       0       0
  5103 ;;      Locals:         2       0       0       0
  5104 ;;      Temps:          0       0       0       0
  5105 ;;      Totals:         6       0       0       0
  5106 ;;Total ram usage:        6 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    3
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_setMotorPWM
  5113 ;;		_sprintf
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text20
  5118  001828                     __ptext20:
  5119                           	opt stack 0
  5120  001828                     ___wmul:
  5121                           	opt stack 25
  5122                           
  5123                           ;incstack = 0
  5124  001828  502C               	movf	___wmul@multiplier,w,c
  5125  00182A  022E               	mulwf	___wmul@multiplicand,c
  5126  00182C  CFF3 F030          	movff	prodl,___wmul@product
  5127  001830  CFF4 F031          	movff	prodh,___wmul@product+1
  5128  001834  502C               	movf	___wmul@multiplier,w,c
  5129  001836  022F               	mulwf	___wmul@multiplicand+1,c
  5130  001838  50F3               	movf	prodl,w,c
  5131  00183A  2631               	addwf	___wmul@product+1,f,c
  5132  00183C  502D               	movf	___wmul@multiplier+1,w,c
  5133  00183E  022E               	mulwf	___wmul@multiplicand,c
  5134  001840  50F3               	movf	prodl,w,c
  5135  001842  2631               	addwf	___wmul@product+1,f,c
  5136  001844  C030  F02C         	movff	___wmul@product,?___wmul
  5137  001848  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  5138  00184C  0012               	return	
  5139  00184E                     __end_of___wmul:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           fsr1h	equ	0xFE2
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           postdec2	equ	0xFDD
  5156                           fsr2h	equ	0xFDA
  5157                           fsr2l	equ	0xFD9
  5158                           status	equ	0xFD8
  5159                           
  5160 ;; *************** function ___lwmod *****************
  5161 ;; Defined at:
  5162 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  dividend        2    3[BANK0 ] unsigned int 
  5165 ;;  divisor         2    5[BANK0 ] unsigned int 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;  counter         1   47[COMRAM] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2    3[BANK0 ] unsigned int 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5177 ;;      Params:         0       4       0       0
  5178 ;;      Locals:         1       0       0       0
  5179 ;;      Temps:          0       0       0       0
  5180 ;;      Totals:         1       4       0       0
  5181 ;;Total ram usage:        5 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    3
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_sprintf
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text21
  5192  0015D8                     __ptext21:
  5193                           	opt stack 0
  5194  0015D8                     ___lwmod:
  5195                           	opt stack 26
  5196                           
  5197                           ;incstack = 0
  5198  0015D8  0100               	movlb	0	; () banked
  5199  0015DA  5165               	movf	___lwmod@divisor& (0+255),w,b
  5200  0015DC  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5201  0015DE  B4D8               	btfsc	status,2,c
  5202  0015E0  D018               	goto	l894
  5203                           
  5204                           ; BSR set to: 0
  5205  0015E2  0E01               	movlw	1
  5206  0015E4  6E30               	movwf	___lwmod@counter,c
  5207  0015E6  D004               	goto	l889
  5208  0015E8                     
  5209                           ; BSR set to: 0
  5210                           
  5211                           ; BSR set to: 0
  5212  0015E8  90D8               	bcf	status,0,c
  5213  0015EA  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  5214  0015EC  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5215  0015EE  2A30               	incf	___lwmod@counter,f,c
  5216  0015F0                     l889:
  5217                           
  5218                           ; BSR set to: 0
  5219                           
  5220                           ; BSR set to: 0
  5221  0015F0  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5222  0015F2  D7FA               	goto	l890
  5223  0015F4                     u1390:
  5224                           
  5225                           ; BSR set to: 0
  5226                           
  5227                           ; BSR set to: 0
  5228                           
  5229                           ; BSR set to: 0
  5230  0015F4  5165               	movf	___lwmod@divisor& (0+255),w,b
  5231  0015F6  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  5232  0015F8  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5233  0015FA  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5234  0015FC  A0D8               	btfss	status,0,c
  5235  0015FE  D004               	goto	l893
  5236                           
  5237                           ; BSR set to: 0
  5238  001600  5165               	movf	___lwmod@divisor& (0+255),w,b
  5239  001602  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  5240  001604  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5241  001606  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5242  001608                     l893:
  5243                           
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  001608  90D8               	bcf	status,0,c
  5248  00160A  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5249  00160C  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  5250                           
  5251                           ; BSR set to: 0
  5252  00160E  2E30               	decfsz	___lwmod@counter,f,c
  5253  001610  D7F1               	goto	u1390
  5254  001612                     l894:
  5255                           
  5256                           ; BSR set to: 0
  5257                           
  5258                           ; BSR set to: 0
  5259  001612  C063  F063         	movff	___lwmod@dividend,?___lwmod
  5260  001616  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  5261                           
  5262                           ; BSR set to: 0
  5263  00161A  0012               	return		;funcret
  5264  00161C                     __end_of___lwmod:
  5265                           	opt stack 0
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodh	equ	0xFF4
  5271                           prodl	equ	0xFF3
  5272                           intcon	equ	0xFF2
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           indf1	equ	0xFE7
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function ___lwdiv *****************
  5286 ;; Defined at:
  5287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  dividend        2   43[COMRAM] unsigned int 
  5290 ;;  divisor         2   45[COMRAM] unsigned int 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  quotient        2    1[BANK0 ] unsigned int 
  5293 ;;  counter         1    0[BANK0 ] unsigned char 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  2   43[COMRAM] unsigned int 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5303 ;;      Params:         4       0       0       0
  5304 ;;      Locals:         0       3       0       0
  5305 ;;      Temps:          0       0       0       0
  5306 ;;      Totals:         4       3       0       0
  5307 ;;Total ram usage:        7 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_sprintf
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text22
  5318  001584                     __ptext22:
  5319                           	opt stack 0
  5320  001584                     ___lwdiv:
  5321                           	opt stack 26
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;incstack = 0
  5325  001584  0E00               	movlw	0
  5326  001586  0100               	movlb	0	; () banked
  5327  001588  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5328  00158A  0E00               	movlw	0
  5329  00158C  6F61               	movwf	___lwdiv@quotient& (0+255),b
  5330                           
  5331                           ; BSR set to: 0
  5332  00158E  502E               	movf	___lwdiv@divisor,w,c
  5333  001590  102F               	iorwf	___lwdiv@divisor+1,w,c
  5334  001592  B4D8               	btfsc	status,2,c
  5335  001594  D01C               	goto	l884
  5336                           
  5337                           ; BSR set to: 0
  5338  001596  0E01               	movlw	1
  5339  001598  6F60               	movwf	___lwdiv@counter& (0+255),b
  5340  00159A  D004               	goto	l879
  5341  00159C                     
  5342                           ; BSR set to: 0
  5343                           
  5344                           ; BSR set to: 0
  5345  00159C  90D8               	bcf	status,0,c
  5346  00159E  362E               	rlcf	___lwdiv@divisor,f,c
  5347  0015A0  362F               	rlcf	___lwdiv@divisor+1,f,c
  5348  0015A2  2B60               	incf	___lwdiv@counter& (0+255),f,b
  5349  0015A4                     l879:
  5350                           
  5351                           ; BSR set to: 0
  5352                           
  5353                           ; BSR set to: 0
  5354  0015A4  AE2F               	btfss	___lwdiv@divisor+1,7,c
  5355  0015A6  D7FA               	goto	l880
  5356  0015A8                     u2340:
  5357                           
  5358                           ; BSR set to: 0
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  0015A8  90D8               	bcf	status,0,c
  5364  0015AA  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  5365  0015AC  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5366                           
  5367                           ; BSR set to: 0
  5368  0015AE  502E               	movf	___lwdiv@divisor,w,c
  5369  0015B0  5C2C               	subwf	___lwdiv@dividend,w,c
  5370  0015B2  502F               	movf	___lwdiv@divisor+1,w,c
  5371  0015B4  582D               	subwfb	___lwdiv@dividend+1,w,c
  5372  0015B6  A0D8               	btfss	status,0,c
  5373  0015B8  D005               	goto	l883
  5374                           
  5375                           ; BSR set to: 0
  5376  0015BA  502E               	movf	___lwdiv@divisor,w,c
  5377  0015BC  5E2C               	subwf	___lwdiv@dividend,f,c
  5378  0015BE  502F               	movf	___lwdiv@divisor+1,w,c
  5379  0015C0  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  5380                           
  5381                           ; BSR set to: 0
  5382  0015C2  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  5383  0015C4                     l883:
  5384                           
  5385                           ; BSR set to: 0
  5386                           
  5387                           ; BSR set to: 0
  5388  0015C4  90D8               	bcf	status,0,c
  5389  0015C6  322F               	rrcf	___lwdiv@divisor+1,f,c
  5390  0015C8  322E               	rrcf	___lwdiv@divisor,f,c
  5391                           
  5392                           ; BSR set to: 0
  5393  0015CA  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  5394  0015CC  D7ED               	goto	u2340
  5395  0015CE                     l884:
  5396                           
  5397                           ; BSR set to: 0
  5398                           
  5399                           ; BSR set to: 0
  5400  0015CE  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  5401  0015D2  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5402                           
  5403                           ; BSR set to: 0
  5404  0015D6  0012               	return		;funcret
  5405  0015D8                     __end_of___lwdiv:
  5406                           	opt stack 0
  5407                           tblptru	equ	0xFF8
  5408                           tblptrh	equ	0xFF7
  5409                           tblptrl	equ	0xFF6
  5410                           tablat	equ	0xFF5
  5411                           prodh	equ	0xFF4
  5412                           prodl	equ	0xFF3
  5413                           intcon	equ	0xFF2
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           indf1	equ	0xFE7
  5417                           fsr1h	equ	0xFE2
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           postinc2	equ	0xFDE
  5421                           postdec2	equ	0xFDD
  5422                           fsr2h	equ	0xFDA
  5423                           fsr2l	equ	0xFD9
  5424                           status	equ	0xFD8
  5425                           
  5426 ;; *************** function _grabRightIR *****************
  5427 ;; Defined at:
  5428 ;;		line 74 in file "IR_Reading.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  5433 ;;  i               1    2[BANK0 ] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  2   43[COMRAM] unsigned int 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5443 ;;      Params:         2       0       0       0
  5444 ;;      Locals:         0       3       0       0
  5445 ;;      Temps:          3       0       0       0
  5446 ;;      Totals:         5       3       0       0
  5447 ;;Total ram usage:        8 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    3
  5450 ;; This function calls:
  5451 ;;		Nothing
  5452 ;; This function is called by:
  5453 ;;		_ScanIR
  5454 ;;		_ScanWithRange
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text23
  5460  001438                     __ptext23:
  5461                           	opt stack 0
  5462  001438                     _grabRightIR:
  5463                           	opt stack 27
  5464                           
  5465                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;incstack = 0
  5469  001438  0E00               	movlw	0
  5470  00143A  0100               	movlb	0	; () banked
  5471  00143C  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  5472  00143E  0E00               	movlw	0
  5473  001440  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  5474                           
  5475                           ;IR_Reading.c: 77: unsigned char i=0;
  5476  001442  0E00               	movlw	0
  5477  001444  6F62               	movwf	grabRightIR@i& (0+255),b
  5478                           
  5479                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5480  001446  0E00               	movlw	0
  5481  001448  6F62               	movwf	grabRightIR@i& (0+255),b
  5482  00144A                     l2921:
  5483                           
  5484                           ; BSR set to: 0
  5485  00144A  0E03               	movlw	3
  5486  00144C  6562               	cpfsgt	grabRightIR@i& (0+255),b
  5487  00144E  D001               	goto	l105
  5488  001450  D01F               	goto	u2420
  5489  001452                     l105:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5493                           
  5494                           ; BSR set to: 0
  5495  001452  5069               	movf	3945,w,c	;volatile
  5496  001454  6E2E               	movwf	??_grabRightIR& (0+255),c
  5497  001456  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  5498  001458  0E07               	movlw	7
  5499  00145A                     u2415:
  5500  00145A  90D8               	bcf	status,0,c
  5501  00145C  362E               	rlcf	??_grabRightIR,f,c
  5502  00145E  362F               	rlcf	??_grabRightIR+1,f,c
  5503  001460  2EE8               	decfsz	wreg,f,c
  5504  001462  D7FB               	goto	u2415
  5505  001464  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  5506  001468  90D8               	bcf	status,0,c
  5507  00146A  3230               	rrcf	??_grabRightIR+2,f,c
  5508  00146C  5030               	movf	??_grabRightIR+2,w,c
  5509  00146E  122E               	iorwf	??_grabRightIR,f,c
  5510  001470  0E00               	movlw	0
  5511  001472  122F               	iorwf	??_grabRightIR+1,f,c
  5512  001474  502E               	movf	??_grabRightIR,w,c
  5513  001476  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  5514  001478  502F               	movf	??_grabRightIR+1,w,c
  5515  00147A  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5519  00147C  0E82               	movlw	130
  5520  00147E  6E2E               	movwf	??_grabRightIR& (0+255),c
  5521  001480  0EDE               	movlw	222
  5522  001482                     u3207:
  5523  001482  2EE8               	decfsz	wreg,f,c
  5524  001484  D7FE               	bra	u3207
  5525  001486  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  5526  001488  D7FC               	bra	u3207
  5527  00148A  0100               	movlb	0	; () banked
  5528  00148C  2B62               	incf	grabRightIR@i& (0+255),f,b
  5529  00148E  D7DD               	goto	l2921
  5530  001490                     u2420:
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;IR_Reading.c: 83: }
  5534                           ;IR_Reading.c: 85: return IR_signal>>2;
  5535                           
  5536                           ; BSR set to: 0
  5537  001490  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  5538  001494  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5539  001498  90D8               	bcf	status,0,c
  5540  00149A  322F               	rrcf	??_grabRightIR+1,f,c
  5541  00149C  322E               	rrcf	??_grabRightIR,f,c
  5542  00149E  90D8               	bcf	status,0,c
  5543  0014A0  322F               	rrcf	??_grabRightIR+1,f,c
  5544  0014A2  322E               	rrcf	??_grabRightIR,f,c
  5545  0014A4  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  5546  0014A8  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  5547  0014AC  0012               	return	
  5548  0014AE                     __end_of_grabRightIR:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           intcon	equ	0xFF2
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           indf1	equ	0xFE7
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _grabLeftIR *****************
  5570 ;; Defined at:
  5571 ;;		line 90 in file "IR_Reading.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  5576 ;;  i               1    2[BANK0 ] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2   43[COMRAM] unsigned int 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5586 ;;      Params:         2       0       0       0
  5587 ;;      Locals:         0       3       0       0
  5588 ;;      Temps:          3       0       0       0
  5589 ;;      Totals:         5       3       0       0
  5590 ;;Total ram usage:        8 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    3
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_ScanIR
  5597 ;;		_ScanWithRange
  5598 ;;		_main
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text24
  5603  0014AE                     __ptext24:
  5604                           	opt stack 0
  5605  0014AE                     _grabLeftIR:
  5606                           	opt stack 27
  5607                           
  5608                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;incstack = 0
  5612  0014AE  0E00               	movlw	0
  5613  0014B0  0100               	movlb	0	; () banked
  5614  0014B2  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  5615  0014B4  0E00               	movlw	0
  5616  0014B6  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  5617                           
  5618                           ;IR_Reading.c: 93: unsigned char i=0;
  5619  0014B8  0E00               	movlw	0
  5620  0014BA  6F62               	movwf	grabLeftIR@i& (0+255),b
  5621                           
  5622                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5623  0014BC  0E00               	movlw	0
  5624  0014BE  6F62               	movwf	grabLeftIR@i& (0+255),b
  5625  0014C0                     l2937:
  5626                           
  5627                           ; BSR set to: 0
  5628  0014C0  0E03               	movlw	3
  5629  0014C2  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  5630  0014C4  D001               	goto	l110
  5631  0014C6  D01F               	goto	u2450
  5632  0014C8                     l110:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5636                           
  5637                           ; BSR set to: 0
  5638  0014C8  5067               	movf	3943,w,c	;volatile
  5639  0014CA  6E2E               	movwf	??_grabLeftIR& (0+255),c
  5640  0014CC  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  5641  0014CE  0E07               	movlw	7
  5642  0014D0                     u2445:
  5643  0014D0  90D8               	bcf	status,0,c
  5644  0014D2  362E               	rlcf	??_grabLeftIR,f,c
  5645  0014D4  362F               	rlcf	??_grabLeftIR+1,f,c
  5646  0014D6  2EE8               	decfsz	wreg,f,c
  5647  0014D8  D7FB               	goto	u2445
  5648  0014DA  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  5649  0014DE  90D8               	bcf	status,0,c
  5650  0014E0  3230               	rrcf	??_grabLeftIR+2,f,c
  5651  0014E2  5030               	movf	??_grabLeftIR+2,w,c
  5652  0014E4  122E               	iorwf	??_grabLeftIR,f,c
  5653  0014E6  0E00               	movlw	0
  5654  0014E8  122F               	iorwf	??_grabLeftIR+1,f,c
  5655  0014EA  502E               	movf	??_grabLeftIR,w,c
  5656  0014EC  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  5657  0014EE  502F               	movf	??_grabLeftIR+1,w,c
  5658  0014F0  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5662  0014F2  0E82               	movlw	130
  5663  0014F4  6E2E               	movwf	??_grabLeftIR& (0+255),c
  5664  0014F6  0EDE               	movlw	222
  5665  0014F8                     u3217:
  5666  0014F8  2EE8               	decfsz	wreg,f,c
  5667  0014FA  D7FE               	bra	u3217
  5668  0014FC  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  5669  0014FE  D7FC               	bra	u3217
  5670  001500  0100               	movlb	0	; () banked
  5671  001502  2B62               	incf	grabLeftIR@i& (0+255),f,b
  5672  001504  D7DD               	goto	l2937
  5673  001506                     u2450:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;IR_Reading.c: 99: }
  5677                           ;IR_Reading.c: 101: return IR_signal>>2;
  5678                           
  5679                           ; BSR set to: 0
  5680  001506  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5681  00150A  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5682  00150E  90D8               	bcf	status,0,c
  5683  001510  322F               	rrcf	??_grabLeftIR+1,f,c
  5684  001512  322E               	rrcf	??_grabLeftIR,f,c
  5685  001514  90D8               	bcf	status,0,c
  5686  001516  322F               	rrcf	??_grabLeftIR+1,f,c
  5687  001518  322E               	rrcf	??_grabLeftIR,f,c
  5688  00151A  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  5689  00151E  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5690  001522  0012               	return	
  5691  001524                     __end_of_grabLeftIR:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           postinc0	equ	0xFEE
  5701                           wreg	equ	0xFE8
  5702                           indf1	equ	0xFE7
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           fsr2h	equ	0xFDA
  5709                           fsr2l	equ	0xFD9
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _SetLine *****************
  5713 ;; Defined at:
  5714 ;;		line 74 in file "LCD.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  line            1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  line            1    0[BANK0 ] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5728 ;;      Params:         0       0       0       0
  5729 ;;      Locals:         0       1       0       0
  5730 ;;      Temps:          0       0       0       0
  5731 ;;      Totals:         0       1       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    6
  5735 ;; This function calls:
  5736 ;;		_SendLCD
  5737 ;; This function is called by:
  5738 ;;		_ScanIR
  5739 ;;		_ScanWithRange
  5740 ;;		_main
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           	psect	text25
  5745  001740                     __ptext25:
  5746                           	opt stack 0
  5747  001740                     _SetLine:
  5748                           	opt stack 24
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;incstack = 0
  5752                           ;SetLine@line stored from wreg
  5753  001740  0100               	movlb	0	; () banked
  5754  001742  6F60               	movwf	SetLine@line& (0+255),b
  5755                           
  5756                           ;LCD.c: 75: if (line==1) {
  5757  001744  0100               	movlb	0	; () banked
  5758  001746  0560               	decf	SetLine@line& (0+255),w,b
  5759  001748  A4D8               	btfss	status,2,c
  5760  00174A  D006               	goto	l147
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;LCD.c: 76: SendLCD(0x80,0);
  5764  00174C  0E00               	movlw	0
  5765  00174E  6E30               	movwf	SendLCD@type,c
  5766  001750  0E80               	movlw	128
  5767  001752  ECD4  F00B         	call	_SendLCD
  5768                           
  5769                           ;LCD.c: 77: } else if (line==2) {
  5770  001756  D00A               	goto	l149
  5771  001758                     l147:
  5772  001758  0E02               	movlw	2
  5773  00175A  0100               	movlb	0	; () banked
  5774  00175C  1960               	xorwf	SetLine@line& (0+255),w,b
  5775  00175E  A4D8               	btfss	status,2,c
  5776  001760  D005               	goto	l149
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;LCD.c: 78: SendLCD(0xC0,0);
  5780  001762  0E00               	movlw	0
  5781  001764  6E30               	movwf	SendLCD@type,c
  5782  001766  0EC0               	movlw	192
  5783  001768  ECD4  F00B         	call	_SendLCD
  5784  00176C                     l149:
  5785                           
  5786                           ;LCD.c: 79: }
  5787                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5788  00176C  0E21               	movlw	33
  5789  00176E                     u3227:
  5790  00176E  2EE8               	decfsz	wreg,f,c
  5791  001770  D7FE               	bra	u3227
  5792  001772  F000               	nop	
  5793  001774  0012               	return		;funcret
  5794  001776                     __end_of_SetLine:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           intcon	equ	0xFF2
  5803                           postinc0	equ	0xFEE
  5804                           wreg	equ	0xFE8
  5805                           indf1	equ	0xFE7
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           fsr2h	equ	0xFDA
  5812                           fsr2l	equ	0xFD9
  5813                           status	equ	0xFD8
  5814                           
  5815 ;; *************** function _LCD_String *****************
  5816 ;; Defined at:
  5817 ;;		line 83 in file "LCD.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  string          2    0[BANK0 ] PTR unsigned char 
  5820 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5821 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5822 ;;		 -> STR_1(12), 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5834 ;;      Params:         0       2       0       0
  5835 ;;      Locals:         0       0       0       0
  5836 ;;      Temps:          0       0       0       0
  5837 ;;      Totals:         0       2       0       0
  5838 ;;Total ram usage:        2 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    6
  5841 ;; This function calls:
  5842 ;;		_SendLCD
  5843 ;; This function is called by:
  5844 ;;		_ScanIR
  5845 ;;		_ScanWithRange
  5846 ;;		_main
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text26
  5851  001524                     __ptext26:
  5852                           	opt stack 0
  5853  001524                     _LCD_String:
  5854                           	opt stack 23
  5855                           
  5856                           ;LCD.c: 85: while(*string != 0){
  5857                           
  5858                           ;incstack = 0
  5859  001524  D01B               	goto	l153
  5860  001526                     
  5861                           ;LCD.c: 88: SendLCD(*string++,1);
  5862  001526  0E01               	movlw	1
  5863  001528  6E30               	movwf	SendLCD@type,c
  5864  00152A  C060  FFF6         	movff	LCD_String@string,tblptrl
  5865  00152E  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  5866  001532  6AF8               	clrf	tblptru,c
  5867  001534  0E02               	movlw	(high __ramtop+-1)
  5868  001536  64F7               	cpfsgt	tblptrh,c
  5869  001538  D003               	bra	u2487
  5870  00153A  0008               	tblrd		*
  5871  00153C  50F5               	movf	tablat,w,c
  5872  00153E  D005               	bra	u2480
  5873  001540                     u2487:
  5874  001540  CFF6 FFE1          	movff	tblptrl,fsr1l
  5875  001544  CFF7 FFE2          	movff	tblptrh,fsr1h
  5876  001548  50E7               	movf	indf1,w,c
  5877  00154A                     u2480:
  5878  00154A  ECD4  F00B         	call	_SendLCD
  5879  00154E  0100               	movlb	0	; () banked
  5880  001550  4B60               	infsnz	LCD_String@string& (0+255),f,b
  5881  001552  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5885  001554  0E21               	movlw	33
  5886  001556                     u3237:
  5887  001556  2EE8               	decfsz	wreg,f,c
  5888  001558  D7FE               	bra	u3237
  5889  00155A  F000               	nop	
  5890  00155C                     l153:
  5891  00155C  C060  FFF6         	movff	LCD_String@string,tblptrl
  5892  001560  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  5893  001564  6AF8               	clrf	tblptru,c
  5894  001566  0E02               	movlw	(high __ramtop+-1)
  5895  001568  64F7               	cpfsgt	tblptrh,c
  5896  00156A  D003               	bra	u2497
  5897  00156C  0008               	tblrd		*
  5898  00156E  50F5               	movf	tablat,w,c
  5899  001570  D005               	bra	u2490
  5900  001572                     u2497:
  5901  001572  CFF6 FFE1          	movff	tblptrl,fsr1l
  5902  001576  CFF7 FFE2          	movff	tblptrh,fsr1h
  5903  00157A  50E7               	movf	indf1,w,c
  5904  00157C                     u2490:
  5905  00157C  0900               	iorlw	0
  5906  00157E  B4D8               	btfsc	status,2,c
  5907  001580  0012               	return	
  5908  001582  D7D1               	goto	l154
  5909  001584                     __end_of_LCD_String:
  5910                           	opt stack 0
  5911                           tblptru	equ	0xFF8
  5912                           tblptrh	equ	0xFF7
  5913                           tblptrl	equ	0xFF6
  5914                           tablat	equ	0xFF5
  5915                           prodh	equ	0xFF4
  5916                           prodl	equ	0xFF3
  5917                           intcon	equ	0xFF2
  5918                           postinc0	equ	0xFEE
  5919                           wreg	equ	0xFE8
  5920                           indf1	equ	0xFE7
  5921                           fsr1h	equ	0xFE2
  5922                           fsr1l	equ	0xFE1
  5923                           indf2	equ	0xFDF
  5924                           postinc2	equ	0xFDE
  5925                           postdec2	equ	0xFDD
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930 ;; *************** function _SendLCD *****************
  5931 ;; Defined at:
  5932 ;;		line 27 in file "LCD.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  Byte            1    wreg     unsigned char 
  5935 ;;  type            1   47[COMRAM] unsigned char 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  Byte            1   48[COMRAM] unsigned char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0, cstack
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5947 ;;      Params:         1       0       0       0
  5948 ;;      Locals:         1       0       0       0
  5949 ;;      Temps:          0       0       0       0
  5950 ;;      Totals:         2       0       0       0
  5951 ;;Total ram usage:        2 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    5
  5954 ;; This function calls:
  5955 ;;		_LCDout
  5956 ;; This function is called by:
  5957 ;;		_initLCD
  5958 ;;		_SetLine
  5959 ;;		_LCD_String
  5960 ;;		_ScanIR
  5961 ;;		_ScanWithRange
  5962 ;;		_main
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text27
  5967  0017A8                     __ptext27:
  5968                           	opt stack 0
  5969  0017A8                     _SendLCD:
  5970                           	opt stack 24
  5971                           
  5972                           ;incstack = 0
  5973                           ;SendLCD@Byte stored from wreg
  5974  0017A8  6E31               	movwf	SendLCD@Byte,c
  5975                           
  5976                           ;LCD.c: 30: LATAbits.LATA6=type;
  5977  0017AA  B030               	btfsc	SendLCD@type,0,c
  5978  0017AC  D002               	bra	u2325
  5979  0017AE  9C89               	bcf	3977,6,c	;volatile
  5980  0017B0  D001               	bra	u2326
  5981  0017B2                     u2325:
  5982  0017B2  8C89               	bsf	3977,6,c	;volatile
  5983  0017B4                     u2326:
  5984                           
  5985                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5986  0017B4  3831               	swapf	SendLCD@Byte,w,c
  5987  0017B6  0B0F               	andlw	15
  5988  0017B8  0B0F               	andlw	15
  5989  0017BA  EC34  F008         	call	_LCDout
  5990                           
  5991                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5992  0017BE  0E06               	movlw	6
  5993  0017C0                     u3247:
  5994  0017C0  2EE8               	decfsz	wreg,f,c
  5995  0017C2  D7FE               	bra	u3247
  5996  0017C4  D000               	nop2	
  5997                           
  5998                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5999  0017C6  5031               	movf	SendLCD@Byte,w,c
  6000  0017C8  0B0F               	andlw	15
  6001  0017CA  EC34  F008         	call	_LCDout
  6002                           
  6003                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6004  0017CE  0E21               	movlw	33
  6005  0017D0                     u3257:
  6006  0017D0  2EE8               	decfsz	wreg,f,c
  6007  0017D2  D7FE               	bra	u3257
  6008  0017D4  F000               	nop	
  6009  0017D6  0012               	return		;funcret
  6010  0017D8                     __end_of_SendLCD:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           indf1	equ	0xFE7
  6022                           fsr1h	equ	0xFE2
  6023                           fsr1l	equ	0xFE1
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           postdec2	equ	0xFDD
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031 ;; *************** function _LCDout *****************
  6032 ;; Defined at:
  6033 ;;		line 14 in file "LCD.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  number          1    wreg     unsigned char 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  number          1   46[COMRAM] unsigned char 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6047 ;;      Params:         0       0       0       0
  6048 ;;      Locals:         1       0       0       0
  6049 ;;      Temps:          3       0       0       0
  6050 ;;      Totals:         4       0       0       0
  6051 ;;Total ram usage:        4 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    4
  6054 ;; This function calls:
  6055 ;;		_E_TOG
  6056 ;; This function is called by:
  6057 ;;		_SendLCD
  6058 ;;		_initLCD
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text28
  6063  001068                     __ptext28:
  6064                           	opt stack 0
  6065  001068                     _LCDout:
  6066                           	opt stack 24
  6067                           
  6068                           ;incstack = 0
  6069                           ;LCDout@number stored from wreg
  6070  001068  6E2F               	movwf	LCDout@number,c
  6071                           
  6072                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6073  00106A  502F               	movf	LCDout@number,w,c
  6074  00106C  6E2C               	movwf	??_LCDout& (0+255),c
  6075  00106E  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6076  001070  0E07               	movlw	7
  6077  001072                     u2215:
  6078  001072  90D8               	bcf	status,0,c
  6079  001074  362C               	rlcf	??_LCDout,f,c
  6080  001076  362D               	rlcf	??_LCDout+1,f,c
  6081  001078  2EE8               	decfsz	wreg,f,c
  6082  00107A  D7FB               	goto	u2215
  6083  00107C  0E07               	movlw	7
  6084  00107E  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6085  001080                     u2225:
  6086  001080  342D               	rlcf	??_LCDout+1,w,c
  6087  001082  322D               	rrcf	??_LCDout+1,f,c
  6088  001084  322C               	rrcf	??_LCDout,f,c
  6089  001086  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6090  001088  D7FB               	goto	u2225
  6091  00108A  462C               	rlncf	??_LCDout,f,c
  6092  00108C  508B               	movf	3979,w,c	;volatile
  6093  00108E  182C               	xorwf	??_LCDout,w,c
  6094  001090  0BFD               	andlw	-3
  6095  001092  182C               	xorwf	??_LCDout,w,c
  6096  001094  6E8B               	movwf	3979,c	;volatile
  6097                           
  6098                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6099  001096  502F               	movf	LCDout@number,w,c
  6100  001098  6E2C               	movwf	??_LCDout& (0+255),c
  6101  00109A  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6102  00109C  0E06               	movlw	6
  6103  00109E                     u2235:
  6104  00109E  90D8               	bcf	status,0,c
  6105  0010A0  362C               	rlcf	??_LCDout,f,c
  6106  0010A2  362D               	rlcf	??_LCDout+1,f,c
  6107  0010A4  2EE8               	decfsz	wreg,f,c
  6108  0010A6  D7FB               	goto	u2235
  6109  0010A8  0E07               	movlw	7
  6110  0010AA  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6111  0010AC                     u2245:
  6112  0010AC  342D               	rlcf	??_LCDout+1,w,c
  6113  0010AE  322D               	rrcf	??_LCDout+1,f,c
  6114  0010B0  322C               	rrcf	??_LCDout,f,c
  6115  0010B2  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6116  0010B4  D7FB               	goto	u2245
  6117  0010B6  462C               	rlncf	??_LCDout,f,c
  6118  0010B8  462C               	rlncf	??_LCDout,f,c
  6119  0010BA  508B               	movf	3979,w,c	;volatile
  6120  0010BC  182C               	xorwf	??_LCDout,w,c
  6121  0010BE  0BFB               	andlw	-5
  6122  0010C0  182C               	xorwf	??_LCDout,w,c
  6123  0010C2  6E8B               	movwf	3979,c	;volatile
  6124                           
  6125                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6126  0010C4  502F               	movf	LCDout@number,w,c
  6127  0010C6  6E2C               	movwf	??_LCDout& (0+255),c
  6128  0010C8  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6129  0010CA  0E05               	movlw	5
  6130  0010CC                     u2255:
  6131  0010CC  90D8               	bcf	status,0,c
  6132  0010CE  362C               	rlcf	??_LCDout,f,c
  6133  0010D0  362D               	rlcf	??_LCDout+1,f,c
  6134  0010D2  2EE8               	decfsz	wreg,f,c
  6135  0010D4  D7FB               	goto	u2255
  6136  0010D6  0E07               	movlw	7
  6137  0010D8  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6138  0010DA                     u2265:
  6139  0010DA  342D               	rlcf	??_LCDout+1,w,c
  6140  0010DC  322D               	rrcf	??_LCDout+1,f,c
  6141  0010DE  322C               	rrcf	??_LCDout,f,c
  6142  0010E0  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6143  0010E2  D7FB               	goto	u2265
  6144  0010E4  508C               	movf	3980,w,c	;volatile
  6145  0010E6  182C               	xorwf	??_LCDout,w,c
  6146  0010E8  0BFE               	andlw	-2
  6147  0010EA  182C               	xorwf	??_LCDout,w,c
  6148  0010EC  6E8C               	movwf	3980,c	;volatile
  6149                           
  6150                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6151  0010EE  502F               	movf	LCDout@number,w,c
  6152  0010F0  6E2C               	movwf	??_LCDout& (0+255),c
  6153  0010F2  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6154  0010F4  3A2C               	swapf	??_LCDout,f,c
  6155  0010F6  3A2D               	swapf	??_LCDout+1,f,c
  6156  0010F8  0EF0               	movlw	240
  6157  0010FA  162D               	andwf	??_LCDout+1,f,c
  6158  0010FC  502C               	movf	??_LCDout,w,c
  6159  0010FE  0B0F               	andlw	15
  6160  001100  122D               	iorwf	??_LCDout+1,f,c
  6161  001102  0EF0               	movlw	240
  6162  001104  162C               	andwf	??_LCDout,f,c
  6163  001106  0E07               	movlw	7
  6164  001108  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6165  00110A                     u2275:
  6166  00110A  342D               	rlcf	??_LCDout+1,w,c
  6167  00110C  322D               	rrcf	??_LCDout+1,f,c
  6168  00110E  322C               	rrcf	??_LCDout,f,c
  6169  001110  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6170  001112  D7FB               	goto	u2275
  6171  001114  462C               	rlncf	??_LCDout,f,c
  6172  001116  508C               	movf	3980,w,c	;volatile
  6173  001118  182C               	xorwf	??_LCDout,w,c
  6174  00111A  0BFD               	andlw	-3
  6175  00111C  182C               	xorwf	??_LCDout,w,c
  6176  00111E  6E8C               	movwf	3980,c	;volatile
  6177                           
  6178                           ;LCD.c: 21: E_TOG();
  6179  001120  EC5E  F00C         	call	_E_TOG	;wreg free
  6180                           
  6181                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6182  001124  0E03               	movlw	3
  6183  001126                     u3267:
  6184  001126  2EE8               	decfsz	wreg,f,c
  6185  001128  D7FE               	bra	u3267
  6186  00112A  F000               	nop	
  6187  00112C  0012               	return		;funcret
  6188  00112E                     __end_of_LCDout:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           postinc0	equ	0xFEE
  6198                           wreg	equ	0xFE8
  6199                           indf1	equ	0xFE7
  6200                           fsr1h	equ	0xFE2
  6201                           fsr1l	equ	0xFE1
  6202                           indf2	equ	0xFDF
  6203                           postinc2	equ	0xFDE
  6204                           postdec2	equ	0xFDD
  6205                           fsr2h	equ	0xFDA
  6206                           fsr2l	equ	0xFD9
  6207                           status	equ	0xFD8
  6208                           
  6209 ;; *************** function _E_TOG *****************
  6210 ;; Defined at:
  6211 ;;		line 5 in file "LCD.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;		None
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6225 ;;      Params:         0       0       0       0
  6226 ;;      Locals:         0       0       0       0
  6227 ;;      Temps:          0       0       0       0
  6228 ;;      Totals:         0       0       0       0
  6229 ;;Total ram usage:        0 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    3
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_LCDout
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text29
  6240  0018BC                     __ptext29:
  6241                           	opt stack 0
  6242  0018BC                     _E_TOG:
  6243                           	opt stack 24
  6244                           
  6245                           ;LCD.c: 8: LATCbits.LATC0=1;
  6246                           
  6247                           ;incstack = 0
  6248  0018BC  808B               	bsf	3979,0,c	;volatile
  6249                           
  6250                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6251  0018BE  0E03               	movlw	3
  6252  0018C0                     u3277:
  6253  0018C0  2EE8               	decfsz	wreg,f,c
  6254  0018C2  D7FE               	bra	u3277
  6255  0018C4  F000               	nop	
  6256                           
  6257                           ;LCD.c: 10: LATCbits.LATC0=0;
  6258  0018C6  908B               	bcf	3979,0,c	;volatile
  6259  0018C8  0012               	return		;funcret
  6260  0018CA                     __end_of_E_TOG:
  6261                           	opt stack 0
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           indf1	equ	0xFE7
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _InterruptHandlerLow *****************
  6282 ;; Defined at:
  6283 ;;		line 18 in file "main.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6297 ;;      Params:         0       0       0       0
  6298 ;;      Locals:         0       0       0       0
  6299 ;;      Temps:         21       0       0       0
  6300 ;;      Totals:        21       0       0       0
  6301 ;;Total ram usage:       21 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    2
  6304 ;; This function calls:
  6305 ;;		Nothing
  6306 ;; This function is called by:
  6307 ;;		Interrupt level 1
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	intcodelo
  6312  000018                     __pintcodelo:
  6313                           	opt stack 0
  6314  000018                     _InterruptHandlerLow:
  6315                           	opt stack 23
  6316                           
  6317                           ;incstack = 0
  6318  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6319  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6320  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6321  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6322  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6323  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6324  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6325  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6326  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6327  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6328  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6329  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6330  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6331  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6332  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6333  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6334  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6335  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6336  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  6337  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6338  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6339  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6340                           
  6341                           ;main.c: 20: if (PIR1bits.RCIF) {
  6342  00006E  AA9E               	btfss	3998,5,c	;volatile
  6343  000070  D016               	goto	i1l368
  6344                           
  6345                           ;main.c: 21: ReceivedString[i]=RCREG;
  6346  000072  5033               	movf	_i,w,c	;volatile
  6347  000074  0D01               	mullw	1
  6348  000076  0ED5               	movlw	low _ReceivedString
  6349  000078  24F3               	addwf	prodl,w,c
  6350  00007A  6ED9               	movwf	fsr2l,c
  6351  00007C  0E00               	movlw	high _ReceivedString
  6352  00007E  20F4               	addwfc	prodh,w,c
  6353  000080  6EDA               	movwf	fsr2h,c
  6354  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6355                           
  6356                           ;main.c: 22: RFID_Read=1;
  6357  000086  0E01               	movlw	1
  6358  000088  0101               	movlb	1	; () banked
  6359  00008A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6360                           
  6361                           ; BSR set to: 1
  6362                           ;main.c: 23: if (i==15){
  6363  00008C  0E0F               	movlw	15
  6364  00008E  1833               	xorwf	_i,w,c	;volatile
  6365  000090  A4D8               	btfss	status,2,c
  6366  000092  D003               	goto	i1l369
  6367                           
  6368                           ; BSR set to: 1
  6369                           ;main.c: 24: i=0;
  6370  000094  0E00               	movlw	0
  6371  000096  6E33               	movwf	_i,c	;volatile
  6372                           
  6373                           ;main.c: 25: }else{
  6374  000098  D001               	goto	i1l370
  6375  00009A                     i1l369:
  6376                           
  6377                           ; BSR set to: 1
  6378                           ;main.c: 26: i++;
  6379                           
  6380                           ; BSR set to: 1
  6381  00009A  2A33               	incf	_i,f,c	;volatile
  6382  00009C                     i1l370:
  6383                           
  6384                           ; BSR set to: 1
  6385                           ;main.c: 27: }
  6386                           ;main.c: 28: PIR1bits.RCIF=0;
  6387                           
  6388                           ; BSR set to: 1
  6389  00009C  9A9E               	bcf	3998,5,c	;volatile
  6390  00009E                     i1l368:
  6391                           
  6392                           ; BSR set to: 1
  6393  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  6394  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  6395  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  6396  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  6397  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6398  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6399  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6400  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6401  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6402  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6403  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6404  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6405  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6406  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6407  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6408  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6409  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6410  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6411  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6412  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6413  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  6414  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6415  0000F4  0010               	retfie	
  6416  0000F6                     __end_of_InterruptHandlerLow:
  6417                           	opt stack 0
  6418                           pclatu	equ	0xFFB
  6419                           pclath	equ	0xFFA
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           postinc0	equ	0xFEE
  6428                           fsr0h	equ	0xFEA
  6429                           fsr0l	equ	0xFE9
  6430                           wreg	equ	0xFE8
  6431                           indf1	equ	0xFE7
  6432                           fsr1h	equ	0xFE2
  6433                           fsr1l	equ	0xFE1
  6434                           bsr	equ	0xFE0
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _InterruptHandlerHigh *****************
  6443 ;; Defined at:
  6444 ;;		line 34 in file "main.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      void 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6458 ;;      Params:         0       0       0       0
  6459 ;;      Locals:         0       0       0       0
  6460 ;;      Temps:         18       0       0       0
  6461 ;;      Totals:        18       0       0       0
  6462 ;;Total ram usage:       18 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    1
  6465 ;; This function calls:
  6466 ;;		i2_delay_tenth_s
  6467 ;; This function is called by:
  6468 ;;		Interrupt level 2
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	intcode
  6473  000008                     __pintcode:
  6474                           	opt stack 0
  6475  000008                     _InterruptHandlerHigh:
  6476                           	opt stack 23
  6477                           
  6478                           ;incstack = 0
  6479  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6480  00000A  EFF9  F008         	goto	int_func
  6481                           pclatu	equ	0xFFB
  6482                           pclath	equ	0xFFA
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           postinc0	equ	0xFEE
  6491                           fsr0h	equ	0xFEA
  6492                           fsr0l	equ	0xFE9
  6493                           wreg	equ	0xFE8
  6494                           indf1	equ	0xFE7
  6495                           fsr1h	equ	0xFE2
  6496                           fsr1l	equ	0xFE1
  6497                           bsr	equ	0xFE0
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505                           	psect	intcode_body
  6506  0011F2                     __pintcode_body:
  6507                           	opt stack 23
  6508  0011F2                     int_func:
  6509                           	opt stack 23
  6510  0011F2  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6511  0011F6  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6512  0011FA  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6513  0011FE  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6514  001202  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6515  001206  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6516  00120A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6517  00120E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6518  001212  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6519  001216  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6520  00121A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6521  00121E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6522  001222  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6523  001226  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6524  00122A  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  6525  00122E  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  6526  001232  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  6527  001236  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  6528                           
  6529                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6530  00123A  A2F2               	btfss	intcon,1,c	;volatile
  6531  00123C  D00D               	goto	i2l376
  6532                           
  6533                           ;main.c: 36: if (mode==-1) {
  6534  00123E  2832               	incf	_mode,w,c	;volatile
  6535  001240  A4D8               	btfss	status,2,c
  6536  001242  D003               	goto	i2l377
  6537                           
  6538                           ;main.c: 38: mode=1;
  6539  001244  0E01               	movlw	1
  6540  001246  6E32               	movwf	_mode,c	;volatile
  6541                           
  6542                           ;main.c: 39: } else if (mode==0) {
  6543  001248  D003               	goto	i2l380
  6544  00124A                     i2l377:
  6545  00124A  5032               	movf	_mode,w,c	;volatile
  6546  00124C  A4D8               	btfss	status,2,c
  6547                           
  6548                           ;main.c: 43: mode=-1;
  6549                           
  6550                           ;main.c: 41: } else {
  6551  00124E  6832               	setf	_mode,c	;volatile
  6552  001250                     i2l380:
  6553                           
  6554                           ;main.c: 44: }
  6555                           ;main.c: 46: delay_tenth_s(2);
  6556  001250  0E02               	movlw	2
  6557  001252  EC84  F00B         	call	i2_delay_tenth_s
  6558                           
  6559                           ;main.c: 47: INTCONbits.INT0IF=0;
  6560  001256  92F2               	bcf	intcon,1,c	;volatile
  6561  001258                     i2l376:
  6562  001258  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  6563  00125C  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  6564  001260  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  6565  001264  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  6566  001268  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6567  00126C  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6568  001270  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6569  001274  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6570  001278  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6571  00127C  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6572  001280  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6573  001284  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6574  001288  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6575  00128C  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6576  001290  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6577  001294  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6578  001298  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6579  00129C  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6580  0012A0  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6581  0012A2  0011               	retfie		f
  6582  0012A4                     __end_of_InterruptHandlerHigh:
  6583                           	opt stack 0
  6584                           pclatu	equ	0xFFB
  6585                           pclath	equ	0xFFA
  6586                           tblptru	equ	0xFF8
  6587                           tblptrh	equ	0xFF7
  6588                           tblptrl	equ	0xFF6
  6589                           tablat	equ	0xFF5
  6590                           prodh	equ	0xFF4
  6591                           prodl	equ	0xFF3
  6592                           intcon	equ	0xFF2
  6593                           postinc0	equ	0xFEE
  6594                           fsr0h	equ	0xFEA
  6595                           fsr0l	equ	0xFE9
  6596                           wreg	equ	0xFE8
  6597                           indf1	equ	0xFE7
  6598                           fsr1h	equ	0xFE2
  6599                           fsr1l	equ	0xFE1
  6600                           bsr	equ	0xFE0
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function i2_delay_tenth_s *****************
  6609 ;; Defined at:
  6610 ;;		line 32 in file "Movement.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  tenth_second    1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6615 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6625 ;;      Params:         0       0       0       0
  6626 ;;      Locals:         3       0       0       0
  6627 ;;      Temps:          1       0       0       0
  6628 ;;      Totals:         4       0       0       0
  6629 ;;Total ram usage:        4 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_InterruptHandlerHigh
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text32
  6639  001708                     __ptext32:
  6640                           	opt stack 0
  6641  001708                     i2_delay_tenth_s:
  6642                           	opt stack 23
  6643                           
  6644                           ;incstack = 0
  6645                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6646  001708  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6647                           
  6648                           ;Movement.c: 33: unsigned int i=0;
  6649  00170A  0E00               	movlw	0
  6650  00170C  6E04               	movwf	i2delay_tenth_s@i+1,c
  6651  00170E  0E00               	movlw	0
  6652  001710  6E03               	movwf	i2delay_tenth_s@i,c
  6653                           
  6654                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6655  001712  0E00               	movlw	0
  6656  001714  6E04               	movwf	i2delay_tenth_s@i+1,c
  6657  001716  0E01               	movlw	1
  6658  001718  6E03               	movwf	i2delay_tenth_s@i,c
  6659  00171A  D009               	goto	i2l204
  6660  00171C                     
  6661                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6662  00171C  0E82               	movlw	130
  6663  00171E  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6664  001720  0EDE               	movlw	222
  6665  001722                     i2u328_47:
  6666  001722  2EE8               	decfsz	wreg,f,c
  6667  001724  D7FE               	bra	i2u328_47
  6668  001726  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6669  001728  D7FC               	bra	i2u328_47
  6670  00172A  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6671  00172C  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6672  00172E                     i2l204:
  6673  00172E  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6674  001730  0D02               	mullw	2
  6675  001732  5003               	movf	i2delay_tenth_s@i,w,c
  6676  001734  5CF3               	subwf	prodl,w,c
  6677  001736  5004               	movf	i2delay_tenth_s@i+1,w,c
  6678  001738  58F4               	subwfb	prodh,w,c
  6679  00173A  A0D8               	btfss	status,0,c
  6680  00173C  0012               	return	
  6681  00173E  D7EE               	goto	i2l205
  6682  001740                     __end_ofi2_delay_tenth_s:
  6683                           	opt stack 0
  6684                           pclatu	equ	0xFFB
  6685                           pclath	equ	0xFFA
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           postinc0	equ	0xFEE
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           indf1	equ	0xFE7
  6698                           fsr1h	equ	0xFE2
  6699                           fsr1l	equ	0xFE1
  6700                           bsr	equ	0xFE0
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           pclatu	equ	0xFFB
  6708                           pclath	equ	0xFFA
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           prodh	equ	0xFF4
  6714                           prodl	equ	0xFF3
  6715                           intcon	equ	0xFF2
  6716                           postinc0	equ	0xFEE
  6717                           fsr0h	equ	0xFEA
  6718                           fsr0l	equ	0xFE9
  6719                           wreg	equ	0xFE8
  6720                           indf1	equ	0xFE7
  6721                           fsr1h	equ	0xFE2
  6722                           fsr1l	equ	0xFE1
  6723                           bsr	equ	0xFE0
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731                           	psect	rparam
  6732  0000                     pclatu	equ	0xFFB
  6733                           pclath	equ	0xFFA
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           postinc0	equ	0xFEE
  6742                           fsr0h	equ	0xFEA
  6743                           fsr0l	equ	0xFE9
  6744                           wreg	equ	0xFE8
  6745                           indf1	equ	0xFE7
  6746                           fsr1h	equ	0xFE2
  6747                           fsr1l	equ	0xFE1
  6748                           bsr	equ	0xFE0
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756                           	psect	temp
  6757  000034                     btemp:
  6758                           	opt stack 0
  6759  000034                     	ds	1
  6760  0000                     int$flags	set	btemp
  6761  0000                     wtemp6	set	btemp+1
  6762                           pclatu	equ	0xFFB
  6763                           pclath	equ	0xFFA
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           postinc0	equ	0xFEE
  6772                           fsr0h	equ	0xFEA
  6773                           fsr0l	equ	0xFE9
  6774                           wreg	equ	0xFE8
  6775                           indf1	equ	0xFE7
  6776                           fsr1h	equ	0xFE2
  6777                           fsr1l	equ	0xFE1
  6778                           bsr	equ	0xFE0
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           fsr2h	equ	0xFDA
  6783                           fsr2l	equ	0xFD9
  6784                           status	equ	0xFD8
=======
  2829                           ;Movement.c: 137: CAP2BUFL=0;
  2830  00095A  0E00               	movlw	0
  2831  00095C  6E66               	movwf	3942,c	;volatile
  2832                           
  2833                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2834  00095E  0E00               	movlw	0
  2835  000960  6E28               	movwf	SendLCD@type,c
  2836  000962  0E01               	movlw	1
  2837  000964  EC6B  F00C         	call	_SendLCD
  2838                           
  2839                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2840  000968  0E21               	movlw	33
  2841  00096A                     u2887:
  2842  00096A  2EE8               	decfsz	wreg,f,c
  2843  00096C  D7FE               	goto	u2887
  2844  00096E  F000               	nop	
  2845                           
  2846                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2847  000970  0E00               	movlw	0
  2848  000972  6E28               	movwf	SendLCD@type,c
  2849  000974  0E02               	movlw	2
  2850  000976  EC6B  F00C         	call	_SendLCD
  2851                           
  2852                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2853  00097A  0E06               	movlw	6
  2854  00097C  0100               	movlb	0	; () banked
  2855  00097E  6F77               	movwf	??_ScanWithRange& (0+255),b
  2856  000980  0E30               	movlw	48
  2857  000982                     u2897:
  2858  000982  2EE8               	decfsz	wreg,f,c
  2859  000984  D7FE               	goto	u2897
  2860  000986  2F77               	decfsz	??_ScanWithRange& (0+255),f,b
  2861  000988  D7FC               	goto	u2897
  2862  00098A  D000               	nop2	
  2863                           
  2864                           ;Movement.c: 145: SetLine(1);
  2865  00098C  0E01               	movlw	1
  2866  00098E  EC53  F00C         	call	_SetLine
  2867                           
  2868                           ;Movement.c: 146: LCD_String("     ScanIR");
  2869  000992  0E2D               	movlw	low STR_1
  2870  000994  6E2A               	movwf	LCD_String@string,c
  2871  000996  0E03               	movlw	high STR_1
  2872  000998  6E2B               	movwf	LCD_String@string+1,c
  2873  00099A  EC2C  F00B         	call	_LCD_String	;wreg free
  2874                           
  2875                           ;Movement.c: 147: SetLine(2);
  2876  00099E  0E02               	movlw	2
  2877  0009A0  EC53  F00C         	call	_SetLine
  2878                           
  2879                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2880  0009A4  0E7C               	movlw	low ScanWithRange@buf
  2881  0009A6  6E30               	movwf	sprintf@sp,c
  2882  0009A8  0E00               	movlw	high ScanWithRange@buf
  2883  0009AA  6E31               	movwf	sprintf@sp+1,c
  2884  0009AC  0E0C               	movlw	low (STR_6+1)
  2885  0009AE  6E32               	movwf	sprintf@f,c
  2886  0009B0  0E03               	movlw	high (STR_6+1)
  2887  0009B2  6E33               	movwf	sprintf@f+1,c
  2888  0009B4  C0AE  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2889  0009B8  C0AF  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2890  0009BC  C0B0  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2891  0009C0  C0B1  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2892  0009C4  ECCE  F005         	call	_sprintf	;wreg free
  2893                           
  2894                           ;Movement.c: 149: LCD_String(buf);
  2895  0009C8  0E7C               	movlw	low ScanWithRange@buf
  2896  0009CA  6E2A               	movwf	LCD_String@string,c
  2897  0009CC  0E00               	movlw	high ScanWithRange@buf
  2898  0009CE  6E2B               	movwf	LCD_String@string+1,c
  2899  0009D0  EC2C  F00B         	call	_LCD_String	;wreg free
  2900                           
  2901                           ;Movement.c: 151: if (SensorResult[1]>DirectionFoundThreshold) {
  2902  0009D4  0100               	movlb	0	; () banked
  2903  0009D6  51B0               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2904  0009D8  0100               	movlb	0	; () banked
  2905  0009DA  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2906  0009DC  0100               	movlb	0	; () banked
  2907  0009DE  51B1               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2908  0009E0  0100               	movlb	0	; () banked
  2909  0009E2  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2910  0009E4  B0D8               	btfsc	status,0,c
  2911  0009E6  D00E               	goto	l221
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;Movement.c: 152: RightFlag= (TMR0H<<8)+TMR0L;
  2915  0009E8  50D7               	movf	4055,w,c	;volatile
  2916  0009EA  0100               	movlb	0	; () banked
  2917  0009EC  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2918  0009EE  6B77               	clrf	??_ScanWithRange& (0+255),b
  2919  0009F0  50D6               	movf	4054,w,c	;volatile
  2920  0009F2  0100               	movlb	0	; () banked
  2921  0009F4  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2922  0009F6  0100               	movlb	0	; () banked
  2923  0009F8  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2924  0009FA  0E00               	movlw	0
  2925  0009FC  0100               	movlb	0	; () banked
  2926  0009FE  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2927  000A00  0100               	movlb	0	; () banked
  2928  000A02  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2929  000A04                     l221:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Movement.c: 153: }
  2933                           ;Movement.c: 155: if (SensorResult[0]>DirectionFoundThreshold) {
  2934  000A04  0100               	movlb	0	; () banked
  2935  000A06  51AE               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2936  000A08  0100               	movlb	0	; () banked
  2937  000A0A  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2938  000A0C  0100               	movlb	0	; () banked
  2939  000A0E  51AF               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2940  000A10  0100               	movlb	0	; () banked
  2941  000A12  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2942  000A14  B0D8               	btfsc	status,0,c
  2943  000A16  D00E               	goto	l222
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;Movement.c: 156: LeftFlag=(TMR0H<<8)+TMR0L;
  2947  000A18  50D7               	movf	4055,w,c	;volatile
  2948  000A1A  0100               	movlb	0	; () banked
  2949  000A1C  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2950  000A1E  6B77               	clrf	??_ScanWithRange& (0+255),b
  2951  000A20  50D6               	movf	4054,w,c	;volatile
  2952  000A22  0100               	movlb	0	; () banked
  2953  000A24  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2954  000A26  0100               	movlb	0	; () banked
  2955  000A28  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2956  000A2A  0E00               	movlw	0
  2957  000A2C  0100               	movlb	0	; () banked
  2958  000A2E  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2959  000A30  0100               	movlb	0	; () banked
  2960  000A32  6FAC               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2961  000A34                     l222:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;Movement.c: 157: }
  2965                           ;Movement.c: 164: if (LeftFlag>0) {
  2966  000A34  0100               	movlb	0	; () banked
  2967  000A36  51AB               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2968  000A38  0100               	movlb	0	; () banked
  2969  000A3A  11AC               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2970  000A3C  B4D8               	btfsc	status,2,c
  2971  000A3E  D07C               	goto	l3143
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Movement.c: 167: if (RightFlag>0) {
  2975  000A40  0100               	movlb	0	; () banked
  2976  000A42  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2977  000A44  0100               	movlb	0	; () banked
  2978  000A46  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2979  000A48  B4D8               	btfsc	status,2,c
  2980  000A4A  D06A               	goto	l224
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Movement.c: 168: TimeAboveThreshold = LeftFlag - RightFlag;
  2984  000A4C  0100               	movlb	0	; () banked
  2985  000A4E  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2986  000A50  0800               	sublw	0
  2987  000A52  0100               	movlb	0	; () banked
  2988  000A54  25AB               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2989  000A56  0100               	movlb	0	; () banked
  2990  000A58  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;Movement.c: 169: TMR0L = 0;
  2994  000A5A  0E00               	movlw	0
  2995  000A5C  6ED6               	movwf	4054,c	;volatile
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;Movement.c: 170: TMR0H = 0;
  2999  000A5E  0E00               	movlw	0
  3000  000A60  6ED7               	movwf	4055,c	;volatile
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;Movement.c: 171: stop(mL,mR);
  3004  000A62  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3005  000A66  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3006  000A6A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3007  000A6E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3008  000A72  ECA9  F009         	call	_stop	;wreg free
  3009                           
  3010                           ;Movement.c: 172: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3011  000A76  D00C               	goto	l3125
  3012  000A78                     l3123:
  3013                           
  3014                           ;Movement.c: 173: turnLeft(mL,mR, power);
  3015  000A78  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3016  000A7C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3017  000A80  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3018  000A84  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3019  000A88  C0AA  F06B         	movff	ScanWithRange@power,turnLeft@power
  3020  000A8C  ECE3  F00B         	call	_turnLeft	;wreg free
  3021  000A90                     l3125:
  3022  000A90  0100               	movlb	0	; () banked
  3023  000A92  90D8               	bcf	status,0,c
  3024  000A94  31AD               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3025  000A96  0100               	movlb	0	; () banked
  3026  000A98  6F77               	movwf	??_ScanWithRange& (0+255),b
  3027  000A9A  6B78               	clrf	(??_ScanWithRange+1)& (0+255),b
  3028  000A9C  50D6               	movf	4054,w,c	;volatile
  3029  000A9E  CFD7 F079          	movff	4055,??_ScanWithRange+2	;volatile
  3030  000AA2  0100               	movlb	0	; () banked
  3031  000AA4  6B7A               	clrf	(??_ScanWithRange+3)& (0+255),b
  3032  000AA6  C079  F07A         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3033  000AAA  0100               	movlb	0	; () banked
  3034  000AAC  6B79               	clrf	(??_ScanWithRange+2)& (0+255),b
  3035  000AAE  0100               	movlb	0	; () banked
  3036  000AB0  2779               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3037  000AB2  0E00               	movlw	0
  3038  000AB4  237A               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3039  000AB6  0100               	movlb	0	; () banked
  3040  000AB8  5177               	movf	??_ScanWithRange& (0+255),w,b
  3041  000ABA  0100               	movlb	0	; () banked
  3042  000ABC  5D79               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3043  000ABE  0100               	movlb	0	; () banked
  3044  000AC0  517A               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3045  000AC2  0A80               	xorlw	128
  3046  000AC4  0100               	movlb	0	; () banked
  3047  000AC6  6F7B               	movwf	(??_ScanWithRange+4)& (0+255),b
  3048  000AC8  0100               	movlb	0	; () banked
  3049  000ACA  5178               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3050  000ACC  0A80               	xorlw	128
  3051  000ACE  0100               	movlb	0	; () banked
  3052  000AD0  597B               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3053  000AD2  A0D8               	btfss	status,0,c
  3054  000AD4  D7D1               	goto	l3123
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Movement.c: 174: }
  3058                           ;Movement.c: 175: T0CONbits.TMR0ON=0;
  3059  000AD6  9ED5               	bcf	4053,7,c	;volatile
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;Movement.c: 176: stop(mL,mR);
  3063  000AD8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3064  000ADC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3065  000AE0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3066  000AE4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3067  000AE8  ECA9  F009         	call	_stop	;wreg free
  3068                           
  3069                           ;Movement.c: 178: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3070  000AEC  C0AD  F077         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3071  000AF0  0100               	movlb	0	; () banked
  3072  000AF2  90D8               	bcf	status,0,c
  3073  000AF4  3377               	rrcf	??_ScanWithRange& (0+255),f,b
  3074  000AF6  0100               	movlb	0	; () banked
  3075  000AF8  5177               	movf	??_ScanWithRange& (0+255),w,b
  3076  000AFA  0100               	movlb	0	; () banked
  3077  000AFC  25B2               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3078  000AFE  0100               	movlb	0	; () banked
  3079  000B00  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3080  000B02  0E00               	movlw	0
  3081  000B04  0100               	movlb	0	; () banked
  3082  000B06  21B3               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3083  000B08  0100               	movlb	0	; () banked
  3084  000B0A  6F79               	movwf	(??_ScanWithRange+2)& (0+255),b
  3085  000B0C  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3086  000B10  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3087  000B14  C078  FFDE         	movff	??_ScanWithRange+1,postinc2
  3088  000B18  C079  FFDD         	movff	??_ScanWithRange+2,postdec2
  3089  000B1C                     l3131:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;Movement.c: 179: return 2;
  3093  000B1C  0E02               	movlw	2
  3094                           
  3095                           ; BSR set to: 0
  3096  000B1E  0012               	return	
  3097  000B20                     l224:
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;Movement.c: 182: T0CONbits.TMR0ON=0;
  3101  000B20  9ED5               	bcf	4053,7,c	;volatile
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;Movement.c: 183: stop(mL,mR);
  3105  000B22  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3106  000B26  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3107  000B2A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3108  000B2E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3109  000B32  ECA9  F009         	call	_stop	;wreg free
  3110  000B36  D7F2               	goto	l3131
  3111  000B38                     l3143:
  3112                           
  3113                           ;Movement.c: 185: }
  3114                           ;Movement.c: 186: }
  3115                           ;Movement.c: 188: if (*RFID_Read==1) {
  3116  000B38  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3117  000B3C  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3118  000B40  04DE               	decf	postinc2,w,c
  3119  000B42  A4D8               	btfss	status,2,c
  3120  000B44  D002               	goto	l3149
  3121                           
  3122                           ;Movement.c: 189: return 2;
  3123  000B46  0E02               	movlw	2
  3124  000B48  0012               	return	
  3125  000B4A                     l3149:
  3126  000B4A  0100               	movlb	0	; () banked
  3127  000B4C  4BA6               	infsnz	ScanWithRange@i& (0+255),f,b
  3128  000B4E  2BA7               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3129  000B50                     l3151:
  3130                           
  3131                           ; BSR set to: 0
  3132  000B50  0100               	movlb	0	; () banked
  3133  000B52  51A6               	movf	ScanWithRange@i& (0+255),w,b
  3134  000B54  0100               	movlb	0	; () banked
  3135  000B56  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3136  000B58  0100               	movlb	0	; () banked
  3137  000B5A  51A7               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3138  000B5C  0100               	movlb	0	; () banked
  3139  000B5E  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3140  000B60  B0D8               	btfsc	status,0,c
  3141  000B62  D6E9               	goto	l3083
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;Movement.c: 190: }
  3145                           ;Movement.c: 191: }
  3146                           ;Movement.c: 194: turnRight(mL,mR, 100);
  3147                           
  3148                           ; BSR set to: 0
  3149  000B64  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3150  000B68  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3151  000B6C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3152  000B70  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3153  000B74  0E64               	movlw	100
  3154  000B76  0100               	movlb	0	; () banked
  3155  000B78  6F6B               	movwf	turnRight@power& (0+255),b
  3156  000B7A  ECC4  F00B         	call	_turnRight	;wreg free
  3157                           
  3158                           ;Movement.c: 195: delay_tenth_s(2);
  3159  000B7E  0E02               	movlw	2
  3160  000B80  EC02  F00C         	call	_delay_tenth_s
  3161                           
  3162                           ;Movement.c: 196: stop(mL,mR);
  3163  000B84  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3164  000B88  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3165  000B8C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3166  000B90  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3167  000B94  ECA9  F009         	call	_stop	;wreg free
  3168                           
  3169                           ;Movement.c: 197: return -1;
  3170  000B98  0EFF               	movlw	255
  3171  000B9A  0012               	return	
  3172  000B9C                     __end_of_ScanWithRange:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           intcon	equ	0xFF2
  3178                           postinc0	equ	0xFEE
  3179                           wreg	equ	0xFE8
  3180                           indf1	equ	0xFE7
  3181                           fsr1h	equ	0xFE2
  3182                           fsr1l	equ	0xFE1
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _turnRight *****************
  3191 ;; Defined at:
  3192 ;;		line 98 in file "dc_motor.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3195 ;;		 -> main@mL(9), 
  3196 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3197 ;;		 -> main@mR(9), 
  3198 ;;  power           1   11[BANK0 ] unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       5       0       0
  3211 ;;      Locals:         0       0       0       0
  3212 ;;      Temps:          0       0       0       0
  3213 ;;      Totals:         0       5       0       0
  3214 ;;Total ram usage:        5 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    6
  3217 ;; This function calls:
  3218 ;;		_fullSpeedAhead
  3219 ;; This function is called by:
  3220 ;;		_ScanWithRange
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text10
  3225  001788                     __ptext10:
  3226                           	opt stack 0
  3227  001788                     _turnRight:
  3228                           	opt stack 23
  3229                           
  3230                           ;dc_motor.c: 102: mL->direction=0;
  3231                           
  3232                           ;incstack = 0
  3233  001788  0100               	movlb	0	; () banked
  3234  00178A  EE20 F001          	lfsr	2,1
  3235  00178E  5167               	movf	turnRight@mL& (0+255),w,b
  3236  001790  26D9               	addwf	fsr2l,f,c
  3237  001792  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3238  001794  22DA               	addwfc	fsr2h,f,c
  3239  001796  0E00               	movlw	0
  3240  001798  6EDF               	movwf	indf2,c
  3241                           
  3242                           ;dc_motor.c: 103: mR->direction=1;
  3243  00179A  0100               	movlb	0	; () banked
  3244  00179C  EE20 F001          	lfsr	2,1
  3245  0017A0  5169               	movf	turnRight@mR& (0+255),w,b
  3246  0017A2  26D9               	addwf	fsr2l,f,c
  3247  0017A4  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3248  0017A6  22DA               	addwfc	fsr2h,f,c
  3249  0017A8  0E01               	movlw	1
  3250  0017AA  6EDF               	movwf	indf2,c
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3254  0017AC  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3255  0017B0  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3256  0017B4  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3257  0017B8  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3258  0017BC  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3259  0017C0  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  3260  0017C4  0012               	return		;funcret
  3261  0017C6                     __end_of_turnRight:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           intcon	equ	0xFF2
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           indf1	equ	0xFE7
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           indf2	equ	0xFDF
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _turnLeft *****************
  3280 ;; Defined at:
  3281 ;;		line 87 in file "dc_motor.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3284 ;;		 -> main@mL(9), 
  3285 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3286 ;;		 -> main@mR(9), 
  3287 ;;  power           1   11[BANK0 ] unsigned char 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;		None               void
  3292 ;; Registers used:
  3293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3299 ;;      Params:         0       5       0       0
  3300 ;;      Locals:         0       0       0       0
  3301 ;;      Temps:          0       0       0       0
  3302 ;;      Totals:         0       5       0       0
  3303 ;;Total ram usage:        5 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    6
  3306 ;; This function calls:
  3307 ;;		_fullSpeedAhead
  3308 ;; This function is called by:
  3309 ;;		_ScanWithRange
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text11
  3314  0017C6                     __ptext11:
  3315                           	opt stack 0
  3316  0017C6                     _turnLeft:
  3317                           	opt stack 23
  3318                           
  3319                           ;dc_motor.c: 91: mL->direction=1;
  3320                           
  3321                           ;incstack = 0
  3322  0017C6  0100               	movlb	0	; () banked
  3323  0017C8  EE20 F001          	lfsr	2,1
  3324  0017CC  5167               	movf	turnLeft@mL& (0+255),w,b
  3325  0017CE  26D9               	addwf	fsr2l,f,c
  3326  0017D0  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3327  0017D2  22DA               	addwfc	fsr2h,f,c
  3328  0017D4  0E01               	movlw	1
  3329  0017D6  6EDF               	movwf	indf2,c
  3330                           
  3331                           ;dc_motor.c: 92: mR->direction=0;
  3332  0017D8  0100               	movlb	0	; () banked
  3333  0017DA  EE20 F001          	lfsr	2,1
  3334  0017DE  5169               	movf	turnLeft@mR& (0+255),w,b
  3335  0017E0  26D9               	addwf	fsr2l,f,c
  3336  0017E2  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3337  0017E4  22DA               	addwfc	fsr2h,f,c
  3338  0017E6  0E00               	movlw	0
  3339  0017E8  6EDF               	movwf	indf2,c
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3343  0017EA  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3344  0017EE  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3345  0017F2  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3346  0017F6  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3347  0017FA  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3348  0017FE  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  3349  001802  0012               	return		;funcret
  3350  001804                     __end_of_turnLeft:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           indf1	equ	0xFE7
  3359                           fsr1h	equ	0xFE2
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _fullSpeedAhead *****************
  3369 ;; Defined at:
  3370 ;;		line 108 in file "dc_motor.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3373 ;;		 -> main@mL(9), 
  3374 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3375 ;;		 -> main@mR(9), 
  3376 ;;  power           1    6[BANK0 ] unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3388 ;;      Params:         0       5       0       0
  3389 ;;      Locals:         0       0       0       0
  3390 ;;      Temps:          1       0       0       0
  3391 ;;      Totals:         1       5       0       0
  3392 ;;Total ram usage:        6 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    5
  3395 ;; This function calls:
  3396 ;;		_setMotorPWM
  3397 ;; This function is called by:
  3398 ;;		_turnLeft
  3399 ;;		_turnRight
  3400 ;;		_fullSpeedBack
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text12
  3406  0014F4                     __ptext12:
  3407                           	opt stack 0
  3408  0014F4                     _fullSpeedAhead:
  3409                           	opt stack 24
  3410                           
  3411                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3412                           
  3413                           ;incstack = 0
  3414  0014F4  D02C               	goto	l65
  3415  0014F6                     l2857:
  3416                           
  3417                           ;dc_motor.c: 112: if(mL->power<power){
  3418  0014F6  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3419  0014FA  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3420  0014FE  0100               	movlb	0	; () banked
  3421  001500  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3422  001502  5CDE               	subwf	postinc2,w,c
  3423  001504  B0D8               	btfsc	status,0,c
  3424  001506  D005               	goto	l2861
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;dc_motor.c: 113: mL->power++;
  3428  001508  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3429  00150C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3430  001510  2ADF               	incf	indf2,f,c
  3431  001512                     l2861:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;dc_motor.c: 114: }
  3435                           ;dc_motor.c: 115: if(mR->power<power){
  3436  001512  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3437  001516  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3438  00151A  0100               	movlb	0	; () banked
  3439  00151C  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3440  00151E  5CDE               	subwf	postinc2,w,c
  3441  001520  B0D8               	btfsc	status,0,c
  3442  001522  D005               	goto	l2865
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;dc_motor.c: 116: mR->power++;
  3446  001524  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3447  001528  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3448  00152C  2ADF               	incf	indf2,f,c
  3449  00152E                     l2865:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;dc_motor.c: 117: }
  3453                           ;dc_motor.c: 118: setMotorPWM(mL);
  3454  00152E  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3455  001532  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3456  001536  EC51  F007         	call	_setMotorPWM	;wreg free
  3457                           
  3458                           ;dc_motor.c: 119: setMotorPWM(mR);
  3459  00153A  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3460  00153E  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3461  001542  EC51  F007         	call	_setMotorPWM	;wreg free
  3462                           
  3463                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3464  001546  0E21               	movlw	33
  3465  001548                     u2907:
  3466  001548  2EE8               	decfsz	wreg,f,c
  3467  00154A  D7FE               	goto	u2907
  3468  00154C  F000               	nop	
  3469  00154E                     l65:
  3470  00154E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3471  001552  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3472  001556  0100               	movlb	0	; () banked
  3473  001558  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3474  00155A  5CDE               	subwf	postinc2,w,c
  3475  00155C  A0D8               	btfss	status,0,c
  3476  00155E  D7CB               	goto	l2857
  3477                           
  3478                           ; BSR set to: 0
  3479  001560  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3480  001564  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3481  001568  0100               	movlb	0	; () banked
  3482  00156A  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3483  00156C  5CDE               	subwf	postinc2,w,c
  3484  00156E  B0D8               	btfsc	status,0,c
  3485  001570  0012               	return	
  3486  001572  D7C1               	goto	l2857
  3487  001574                     __end_of_fullSpeedAhead:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           indf1	equ	0xFE7
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _delay_tenth_s *****************
  3506 ;; Defined at:
  3507 ;;		line 32 in file "Movement.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  tenth_second    1    wreg     unsigned char 
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3512 ;;  i               2   37[COMRAM] unsigned int 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         3       0       0       0
  3524 ;;      Temps:          1       0       0       0
  3525 ;;      Totals:         4       0       0       0
  3526 ;;Total ram usage:        4 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_ScanWithRange
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text13
  3538  001804                     __ptext13:
  3539                           	opt stack 0
  3540  001804                     _delay_tenth_s:
  3541                           	opt stack 27
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;incstack = 0
  3545                           ;delay_tenth_s@tenth_seconds stored from wreg
  3546  001804  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3547                           
  3548                           ;Movement.c: 33: unsigned int i=0;
  3549  001806  0E00               	movlw	0
  3550  001808  6E27               	movwf	delay_tenth_s@i+1,c
  3551  00180A  0E00               	movlw	0
  3552  00180C  6E26               	movwf	delay_tenth_s@i,c
  3553                           
  3554                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3555  00180E  0E00               	movlw	0
  3556  001810  6E27               	movwf	delay_tenth_s@i+1,c
  3557  001812  0E01               	movlw	1
  3558  001814  6E26               	movwf	delay_tenth_s@i,c
  3559  001816  D009               	goto	l2187
  3560  001818                     l2183:
  3561                           
  3562                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3563  001818  0E82               	movlw	130
  3564  00181A  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3565  00181C  0EDE               	movlw	222
  3566  00181E                     u2917:
  3567  00181E  2EE8               	decfsz	wreg,f,c
  3568  001820  D7FE               	goto	u2917
  3569  001822  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3570  001824  D7FC               	goto	u2917
  3571  001826  4A26               	infsnz	delay_tenth_s@i,f,c
  3572  001828  2A27               	incf	delay_tenth_s@i+1,f,c
  3573  00182A                     l2187:
  3574  00182A  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3575  00182C  0D02               	mullw	2
  3576  00182E  5026               	movf	delay_tenth_s@i,w,c
  3577  001830  5CF3               	subwf	prodl,w,c
  3578  001832  5027               	movf	delay_tenth_s@i+1,w,c
  3579  001834  58F4               	subwfb	prodh,w,c
  3580  001836  A0D8               	btfss	status,0,c
  3581  001838  0012               	return	
  3582  00183A  D7EE               	goto	l2183
  3583  00183C                     __end_of_delay_tenth_s:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           indf1	equ	0xFE7
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _ScanIR *****************
  3602 ;; Defined at:
  3603 ;;		line 45 in file "Movement.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3606 ;;		 -> main@mL(9), 
  3607 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3608 ;;		 -> main@mR(9), 
  3609 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3610 ;;		 -> main@Move(1), 
  3611 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3612 ;;		 -> main@MoveTime(200), 
  3613 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3614 ;;		 -> main@MoveType(100), 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3617 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3618 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3628 ;;      Params:         0      10       0       0
  3629 ;;      Locals:         0      46       0       0
  3630 ;;      Temps:          1       0       0       0
  3631 ;;      Totals:         1      56       0       0
  3632 ;;Total ram usage:       57 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    7
  3635 ;; This function calls:
  3636 ;;		_LCD_String
  3637 ;;		_SendLCD
  3638 ;;		_SetLine
  3639 ;;		_grabLeftIR
  3640 ;;		_grabRightIR
  3641 ;;		_sprintf
  3642 ;;		_stop
  3643 ;; This function is called by:
  3644 ;;		_main
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text14
  3649  0010D6                     __ptext14:
  3650                           	opt stack 0
  3651  0010D6                     _ScanIR:
  3652                           	opt stack 23
  3653                           
  3654                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3655                           
  3656                           ;incstack = 0
  3657  0010D6  C0BE  F0A1         	movff	ScanIR@F3883,ScanIR@SensorResult
  3658  0010DA  C0BF  F0A2         	movff	ScanIR@F3883+1,ScanIR@SensorResult+1
  3659  0010DE  C0C0  F0A3         	movff	ScanIR@F3883+2,ScanIR@SensorResult+2
  3660  0010E2  C0C1  F0A4         	movff	ScanIR@F3883+3,ScanIR@SensorResult+3
  3661                           
  3662                           ;Movement.c: 50: char buf[40];
  3663                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3664  0010E6  0E09               	movlw	9
  3665  0010E8  0100               	movlb	0	; () banked
  3666  0010EA  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3667  0010EC  0EC4               	movlw	196
  3668  0010EE  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3672  0010F0  ECF3  F00A         	call	_grabLeftIR	;wreg free
  3673  0010F4  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3674  0010F8  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3675                           
  3676                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3677  0010FC  ECBA  F00A         	call	_grabRightIR	;wreg free
  3678  001100  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3679  001104  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3680                           
  3681                           ;Movement.c: 62: CAP1BUFH=0;
  3682  001108  0E00               	movlw	0
  3683  00110A  6E69               	movwf	3945,c	;volatile
  3684                           
  3685                           ;Movement.c: 63: CAP1BUFL=0;
  3686  00110C  0E00               	movlw	0
  3687  00110E  6E68               	movwf	3944,c	;volatile
  3688                           
  3689                           ;Movement.c: 64: CAP2BUFH=0;
  3690  001110  0E00               	movlw	0
  3691  001112  6E67               	movwf	3943,c	;volatile
  3692                           
  3693                           ;Movement.c: 65: CAP2BUFL=0;
  3694  001114  0E00               	movlw	0
  3695  001116  6E66               	movwf	3942,c	;volatile
  3696                           
  3697                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3698  001118  0E00               	movlw	0
  3699  00111A  6E28               	movwf	SendLCD@type,c
  3700  00111C  0E01               	movlw	1
  3701  00111E  EC6B  F00C         	call	_SendLCD
  3702                           
  3703                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3704  001122  0E21               	movlw	33
  3705  001124                     u2927:
  3706  001124  2EE8               	decfsz	wreg,f,c
  3707  001126  D7FE               	goto	u2927
  3708  001128  F000               	nop	
  3709                           
  3710                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3711  00112A  0E00               	movlw	0
  3712  00112C  6E28               	movwf	SendLCD@type,c
  3713  00112E  0E02               	movlw	2
  3714  001130  EC6B  F00C         	call	_SendLCD
  3715                           
  3716                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3717  001134  0E06               	movlw	6
  3718  001136  6E39               	movwf	??_ScanIR& (0+255),c
  3719  001138  0E30               	movlw	48
  3720  00113A                     u2937:
  3721  00113A  2EE8               	decfsz	wreg,f,c
  3722  00113C  D7FE               	goto	u2937
  3723  00113E  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3724  001140  D7FC               	goto	u2937
  3725  001142  D000               	nop2	
  3726                           
  3727                           ;Movement.c: 72: SetLine(1);
  3728  001144  0E01               	movlw	1
  3729  001146  EC53  F00C         	call	_SetLine
  3730                           
  3731                           ;Movement.c: 73: LCD_String("     ScanIR");
  3732  00114A  0E2D               	movlw	low STR_1
  3733  00114C  6E2A               	movwf	LCD_String@string,c
  3734  00114E  0E03               	movlw	high STR_1
  3735  001150  6E2B               	movwf	LCD_String@string+1,c
  3736  001152  EC2C  F00B         	call	_LCD_String	;wreg free
  3737                           
  3738                           ;Movement.c: 74: SetLine(2);
  3739  001156  0E02               	movlw	2
  3740  001158  EC53  F00C         	call	_SetLine
  3741                           
  3742                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3743  00115C  0E77               	movlw	low ScanIR@buf
  3744  00115E  6E30               	movwf	sprintf@sp,c
  3745  001160  0E00               	movlw	high ScanIR@buf
  3746  001162  6E31               	movwf	sprintf@sp+1,c
  3747  001164  0E0C               	movlw	low (STR_6+1)
  3748  001166  6E32               	movwf	sprintf@f,c
  3749  001168  0E03               	movlw	high (STR_6+1)
  3750  00116A  6E33               	movwf	sprintf@f+1,c
  3751  00116C  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3752  001170  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3753  001174  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3754  001178  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3755  00117C  ECCE  F005         	call	_sprintf	;wreg free
  3756                           
  3757                           ;Movement.c: 76: LCD_String(buf);
  3758  001180  0E77               	movlw	low ScanIR@buf
  3759  001182  6E2A               	movwf	LCD_String@string,c
  3760  001184  0E00               	movlw	high ScanIR@buf
  3761  001186  6E2B               	movwf	LCD_String@string+1,c
  3762  001188  EC2C  F00B         	call	_LCD_String	;wreg free
  3763                           
  3764                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3765                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3766  00118C  0100               	movlb	0	; () banked
  3767  00118E  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3768  001190  0100               	movlb	0	; () banked
  3769  001192  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3770  001194  0100               	movlb	0	; () banked
  3771  001196  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3772  001198  0100               	movlb	0	; () banked
  3773  00119A  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3774  00119C  B0D8               	btfsc	status,0,c
  3775  00119E  D00C               	goto	l3057
  3776                           
  3777                           ; BSR set to: 0
  3778  0011A0  0100               	movlb	0	; () banked
  3779  0011A2  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3780  0011A4  0100               	movlb	0	; () banked
  3781  0011A6  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3782  0011A8  0100               	movlb	0	; () banked
  3783  0011AA  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3784  0011AC  0100               	movlb	0	; () banked
  3785  0011AE  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3786  0011B0  B0D8               	btfsc	status,0,c
  3787  0011B2  D002               	goto	l3057
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Movement.c: 82: return 2;
  3791  0011B4  0E02               	movlw	2
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Movement.c: 83: } else {
  3795                           
  3796                           ; BSR set to: 0
  3797  0011B6  0012               	return	
  3798  0011B8                     l3057:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;Movement.c: 84: stop(mL,mR);
  3802  0011B8  C06D  F062         	movff	ScanIR@mL,stop@mL
  3803  0011BC  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3804  0011C0  C06F  F064         	movff	ScanIR@mR,stop@mR
  3805  0011C4  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3806  0011C8  ECA9  F009         	call	_stop	;wreg free
  3807                           
  3808                           ;Movement.c: 85: return 0;
  3809  0011CC  0E00               	movlw	0
  3810  0011CE  0012               	return	
  3811  0011D0                     __end_of_ScanIR:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           indf1	equ	0xFE7
  3820                           fsr1h	equ	0xFE2
  3821                           fsr1l	equ	0xFE1
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _stop *****************
  3830 ;; Defined at:
  3831 ;;		line 67 in file "dc_motor.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3834 ;;		 -> main@mL(9), 
  3835 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3836 ;;		 -> main@mR(9), 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3848 ;;      Params:         0       4       0       0
  3849 ;;      Locals:         0       0       0       0
  3850 ;;      Temps:          0       0       0       0
  3851 ;;      Totals:         0       4       0       0
  3852 ;;Total ram usage:        4 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    5
  3855 ;; This function calls:
  3856 ;;		_setMotorPWM
  3857 ;; This function is called by:
  3858 ;;		_ScanIR
  3859 ;;		_ScanWithRange
  3860 ;;		_main
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text15
  3865  001352                     __ptext15:
  3866                           	opt stack 0
  3867  001352                     _stop:
  3868                           	opt stack 25
  3869                           
  3870                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3871                           
  3872                           ;incstack = 0
  3873  001352  D028               	goto	l2889
  3874  001354                     l2875:
  3875                           
  3876                           ;dc_motor.c: 71: if(mL->power>0){
  3877  001354  C062  FFD9         	movff	stop@mL,fsr2l
  3878  001358  C063  FFDA         	movff	stop@mL+1,fsr2h
  3879  00135C  50DF               	movf	indf2,w,c
  3880  00135E  B4D8               	btfsc	status,2,c
  3881  001360  D005               	goto	l2879
  3882                           
  3883                           ;dc_motor.c: 72: mL->power--;
  3884  001362  C062  FFD9         	movff	stop@mL,fsr2l
  3885  001366  C063  FFDA         	movff	stop@mL+1,fsr2h
  3886  00136A  06DF               	decf	indf2,f,c
  3887  00136C                     l2879:
  3888                           
  3889                           ;dc_motor.c: 73: }
  3890                           ;dc_motor.c: 74: if(mR->power>0){
  3891  00136C  C064  FFD9         	movff	stop@mR,fsr2l
  3892  001370  C065  FFDA         	movff	stop@mR+1,fsr2h
  3893  001374  50DF               	movf	indf2,w,c
  3894  001376  B4D8               	btfsc	status,2,c
  3895  001378  D005               	goto	l2883
  3896                           
  3897                           ;dc_motor.c: 75: mR->power--;
  3898  00137A  C064  FFD9         	movff	stop@mR,fsr2l
  3899  00137E  C065  FFDA         	movff	stop@mR+1,fsr2h
  3900  001382  06DF               	decf	indf2,f,c
  3901  001384                     l2883:
  3902                           
  3903                           ;dc_motor.c: 76: }
  3904                           ;dc_motor.c: 77: setMotorPWM(mL);
  3905  001384  C062  F032         	movff	stop@mL,setMotorPWM@m
  3906  001388  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3907  00138C  EC51  F007         	call	_setMotorPWM	;wreg free
  3908                           
  3909                           ;dc_motor.c: 78: setMotorPWM(mR);
  3910  001390  C064  F032         	movff	stop@mR,setMotorPWM@m
  3911  001394  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3912  001398  EC51  F007         	call	_setMotorPWM	;wreg free
  3913                           
  3914                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3915  00139C  0E21               	movlw	33
  3916  00139E                     u2947:
  3917  00139E  2EE8               	decfsz	wreg,f,c
  3918  0013A0  D7FE               	goto	u2947
  3919  0013A2  F000               	nop	
  3920  0013A4                     l2889:
  3921  0013A4  C062  FFD9         	movff	stop@mL,fsr2l
  3922  0013A8  C063  FFDA         	movff	stop@mL+1,fsr2h
  3923  0013AC  50DF               	movf	indf2,w,c
  3924  0013AE  A4D8               	btfss	status,2,c
  3925  0013B0  D7D1               	goto	l2875
  3926  0013B2  C064  FFD9         	movff	stop@mR,fsr2l
  3927  0013B6  C065  FFDA         	movff	stop@mR+1,fsr2h
  3928  0013BA  50DF               	movf	indf2,w,c
  3929  0013BC  A4D8               	btfss	status,2,c
  3930  0013BE  D7CA               	goto	l2875
  3931                           
  3932                           ;dc_motor.c: 80: }
  3933                           ;dc_motor.c: 81: mL->direction=1;
  3934  0013C0  0100               	movlb	0	; () banked
  3935  0013C2  EE20 F001          	lfsr	2,1
  3936  0013C6  5162               	movf	stop@mL& (0+255),w,b
  3937  0013C8  26D9               	addwf	fsr2l,f,c
  3938  0013CA  5163               	movf	(stop@mL+1)& (0+255),w,b
  3939  0013CC  22DA               	addwfc	fsr2h,f,c
  3940  0013CE  0E01               	movlw	1
  3941  0013D0  6EDF               	movwf	indf2,c
  3942                           
  3943                           ;dc_motor.c: 82: mR->direction=1;
  3944  0013D2  0100               	movlb	0	; () banked
  3945  0013D4  EE20 F001          	lfsr	2,1
  3946  0013D8  5164               	movf	stop@mR& (0+255),w,b
  3947  0013DA  26D9               	addwf	fsr2l,f,c
  3948  0013DC  5165               	movf	(stop@mR+1)& (0+255),w,b
  3949  0013DE  22DA               	addwfc	fsr2h,f,c
  3950  0013E0  0E01               	movlw	1
  3951  0013E2  6EDF               	movwf	indf2,c
  3952                           
  3953                           ; BSR set to: 0
  3954  0013E4  0012               	return		;funcret
  3955  0013E6                     __end_of_stop:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf1	equ	0xFE7
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _setMotorPWM *****************
  3974 ;; Defined at:
  3975 ;;		line 26 in file "dc_motor.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3978 ;;		 -> main@mR(9), main@mL(9), 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  PWMduty         2    0[BANK0 ] int 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3990 ;;      Params:         2       0       0       0
  3991 ;;      Locals:         0       2       0       0
  3992 ;;      Temps:          5       0       0       0
  3993 ;;      Totals:         7       2       0       0
  3994 ;;Total ram usage:        9 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    4
  3997 ;; This function calls:
  3998 ;;		___awdiv
  3999 ;;		___wmul
  4000 ;; This function is called by:
  4001 ;;		_stop
  4002 ;;		_fullSpeedAhead
  4003 ;;		_setMotorFullSpeed
  4004 ;;		_stopMotor
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text16
  4009  000EA2                     __ptext16:
  4010                           	opt stack 0
  4011  000EA2                     _setMotorPWM:
  4012                           	opt stack 25
  4013                           
  4014                           ;dc_motor.c: 28: int PWMduty;
  4015                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;incstack = 0
  4019  000EA2  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4020  000EA6  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4021  000EAA  50DF               	movf	indf2,w,c
  4022  000EAC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4023  000EAE  5034               	movf	??_setMotorPWM,w,c
  4024  000EB0  6E24               	movwf	___wmul@multiplier,c
  4025  000EB2  6A25               	clrf	___wmul@multiplier+1,c
  4026  000EB4  EE20 F007          	lfsr	2,7
  4027  000EB8  5032               	movf	setMotorPWM@m,w,c
  4028  000EBA  26D9               	addwf	fsr2l,f,c
  4029  000EBC  5033               	movf	setMotorPWM@m+1,w,c
  4030  000EBE  22DA               	addwfc	fsr2h,f,c
  4031  000EC0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4032  000EC4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4033  000EC8  ECAB  F00C         	call	___wmul	;wreg free
  4034  000ECC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4035  000ED0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4036  000ED4  0E00               	movlw	0
  4037  000ED6  6E2D               	movwf	___awdiv@divisor+1,c
  4038  000ED8  0E64               	movlw	100
  4039  000EDA  6E2C               	movwf	___awdiv@divisor,c
  4040  000EDC  EC38  F00A         	call	___awdiv	;wreg free
  4041  000EE0  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4042  000EE4  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4043                           
  4044                           ;dc_motor.c: 32: if (m->direction)
  4045  000EE8  EE20 F001          	lfsr	2,1
  4046  000EEC  5032               	movf	setMotorPWM@m,w,c
  4047  000EEE  26D9               	addwf	fsr2l,f,c
  4048  000EF0  5033               	movf	setMotorPWM@m+1,w,c
  4049  000EF2  22DA               	addwfc	fsr2h,f,c
  4050  000EF4  50DF               	movf	indf2,w,c
  4051  000EF6  B4D8               	btfsc	status,2,c
  4052  000EF8  D02E               	goto	l2853
  4053                           
  4054                           ;dc_motor.c: 33: {
  4055                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4056  000EFA  EE20 F006          	lfsr	2,6
  4057  000EFE  5032               	movf	setMotorPWM@m,w,c
  4058  000F00  26D9               	addwf	fsr2l,f,c
  4059  000F02  5033               	movf	setMotorPWM@m+1,w,c
  4060  000F04  22DA               	addwfc	fsr2h,f,c
  4061  000F06  50DF               	movf	indf2,w,c
  4062  000F08  6E34               	movwf	??_setMotorPWM& (0+255),c
  4063  000F0A  0E01               	movlw	1
  4064  000F0C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4065  000F0E  2A34               	incf	??_setMotorPWM,f,c
  4066  000F10  D002               	goto	u2204
  4067  000F12                     u2205:
  4068  000F12  90D8               	bcf	status,0,c
  4069  000F14  3635               	rlcf	??_setMotorPWM+1,f,c
  4070  000F16                     u2204:
  4071  000F16  2E34               	decfsz	??_setMotorPWM,f,c
  4072  000F18  D7FC               	goto	u2205
  4073  000F1A  5035               	movf	??_setMotorPWM+1,w,c
  4074  000F1C  108A               	iorwf	3978,w,c	;volatile
  4075  000F1E  6E8A               	movwf	3978,c	;volatile
  4076                           
  4077                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4078  000F20  EE20 F007          	lfsr	2,7
  4079  000F24  5032               	movf	setMotorPWM@m,w,c
  4080  000F26  26D9               	addwf	fsr2l,f,c
  4081  000F28  5033               	movf	setMotorPWM@m+1,w,c
  4082  000F2A  22DA               	addwfc	fsr2h,f,c
  4083  000F2C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4084  000F30  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4085  000F34  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4086  000F38  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4087  000F3C  1E36               	comf	??_setMotorPWM+2,f,c
  4088  000F3E  1E37               	comf	??_setMotorPWM+3,f,c
  4089  000F40  4A36               	infsnz	??_setMotorPWM+2,f,c
  4090  000F42  2A37               	incf	??_setMotorPWM+3,f,c
  4091  000F44  5034               	movf	??_setMotorPWM,w,c
  4092  000F46  2436               	addwf	??_setMotorPWM+2,w,c
  4093  000F48  0100               	movlb	0	; () banked
  4094  000F4A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4095  000F4C  5035               	movf	??_setMotorPWM+1,w,c
  4096  000F4E  2037               	addwfc	??_setMotorPWM+3,w,c
  4097  000F50  0100               	movlb	0	; () banked
  4098  000F52  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4099                           
  4100                           ;dc_motor.c: 36: }
  4101  000F54  D014               	goto	l35
  4102  000F56                     l2853:
  4103                           
  4104                           ;dc_motor.c: 37: else
  4105                           ;dc_motor.c: 38: {
  4106                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4107  000F56  EE20 F006          	lfsr	2,6
  4108  000F5A  5032               	movf	setMotorPWM@m,w,c
  4109  000F5C  26D9               	addwf	fsr2l,f,c
  4110  000F5E  5033               	movf	setMotorPWM@m+1,w,c
  4111  000F60  22DA               	addwfc	fsr2h,f,c
  4112  000F62  50DF               	movf	indf2,w,c
  4113  000F64  6E34               	movwf	??_setMotorPWM& (0+255),c
  4114  000F66  0E01               	movlw	1
  4115  000F68  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4116  000F6A  2A34               	incf	??_setMotorPWM,f,c
  4117  000F6C  D002               	goto	u2214
  4118  000F6E                     u2215:
  4119  000F6E  90D8               	bcf	status,0,c
  4120  000F70  3635               	rlcf	??_setMotorPWM+1,f,c
  4121  000F72                     u2214:
  4122  000F72  2E34               	decfsz	??_setMotorPWM,f,c
  4123  000F74  D7FC               	goto	u2215
  4124  000F76  5035               	movf	??_setMotorPWM+1,w,c
  4125  000F78  0AFF               	xorlw	255
  4126  000F7A  148A               	andwf	3978,w,c	;volatile
  4127  000F7C  6E8A               	movwf	3978,c	;volatile
  4128  000F7E                     l35:
  4129                           
  4130                           ;dc_motor.c: 40: }
  4131                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4132  000F7E  EE20 F002          	lfsr	2,2
  4133  000F82  5032               	movf	setMotorPWM@m,w,c
  4134  000F84  26D9               	addwf	fsr2l,f,c
  4135  000F86  5033               	movf	setMotorPWM@m+1,w,c
  4136  000F88  22DA               	addwfc	fsr2h,f,c
  4137  000F8A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4138  000F8E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4139  000F92  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4140  000F96  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4141  000F9A  0100               	movlb	0	; () banked
  4142  000F9C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4143  000F9E  46E8               	rlncf	wreg,f,c
  4144  000FA0  0BFC               	andlw	252
  4145  000FA2  6EDF               	movwf	indf2,c
  4146                           
  4147                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4148  000FA4  EE20 F004          	lfsr	2,4
  4149  000FA8  5032               	movf	setMotorPWM@m,w,c
  4150  000FAA  26D9               	addwf	fsr2l,f,c
  4151  000FAC  5033               	movf	setMotorPWM@m+1,w,c
  4152  000FAE  22DA               	addwfc	fsr2h,f,c
  4153  000FB0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4154  000FB4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4155  000FB8  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4156  000FBC  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4157  000FC0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4158  000FC4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4159  000FC8  0E06               	movlw	6
  4160  000FCA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4161  000FCC                     u2225:
  4162  000FCC  3437               	rlcf	??_setMotorPWM+3,w,c
  4163  000FCE  3237               	rrcf	??_setMotorPWM+3,f,c
  4164  000FD0  3236               	rrcf	??_setMotorPWM+2,f,c
  4165  000FD2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4166  000FD4  D7FB               	goto	u2225
  4167  000FD6  5036               	movf	??_setMotorPWM+2,w,c
  4168  000FD8  6EDF               	movwf	indf2,c
  4169                           
  4170                           ; BSR set to: 0
  4171  000FDA  0012               	return		;funcret
  4172  000FDC                     __end_of_setMotorPWM:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf1	equ	0xFE7
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function ___awdiv *****************
  4191 ;; Defined at:
  4192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  dividend        2   41[COMRAM] int 
  4195 ;;  divisor         2   43[COMRAM] int 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  quotient        2   47[COMRAM] int 
  4198 ;;  sign            1   46[COMRAM] unsigned char 
  4199 ;;  counter         1   45[COMRAM] unsigned char 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  2   41[COMRAM] int 
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, status,0
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4209 ;;      Params:         4       0       0       0
  4210 ;;      Locals:         4       0       0       0
  4211 ;;      Temps:          0       0       0       0
  4212 ;;      Totals:         8       0       0       0
  4213 ;;Total ram usage:        8 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    3
  4216 ;; This function calls:
  4217 ;;		Nothing
  4218 ;; This function is called by:
  4219 ;;		_setMotorPWM
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text17
  4224  001470                     __ptext17:
  4225                           	opt stack 0
  4226  001470                     ___awdiv:
  4227                           	opt stack 25
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;incstack = 0
  4231  001470  0E00               	movlw	0
  4232  001472  6E2F               	movwf	___awdiv@sign,c
  4233  001474  AE2D               	btfss	___awdiv@divisor+1,7,c
  4234  001476  D006               	goto	l2811
  4235  001478  6C2C               	negf	___awdiv@divisor,c
  4236  00147A  1E2D               	comf	___awdiv@divisor+1,f,c
  4237  00147C  B0D8               	btfsc	status,0,c
  4238  00147E  2A2D               	incf	___awdiv@divisor+1,f,c
  4239  001480  0E01               	movlw	1
  4240  001482  6E2F               	movwf	___awdiv@sign,c
  4241  001484                     l2811:
  4242  001484  AE2B               	btfss	___awdiv@dividend+1,7,c
  4243  001486  D006               	goto	l2817
  4244  001488  6C2A               	negf	___awdiv@dividend,c
  4245  00148A  1E2B               	comf	___awdiv@dividend+1,f,c
  4246  00148C  B0D8               	btfsc	status,0,c
  4247  00148E  2A2B               	incf	___awdiv@dividend+1,f,c
  4248  001490  0E01               	movlw	1
  4249  001492  1A2F               	xorwf	___awdiv@sign,f,c
  4250  001494                     l2817:
  4251  001494  0E00               	movlw	0
  4252  001496  6E31               	movwf	___awdiv@quotient+1,c
  4253  001498  0E00               	movlw	0
  4254  00149A  6E30               	movwf	___awdiv@quotient,c
  4255  00149C  502C               	movf	___awdiv@divisor,w,c
  4256  00149E  102D               	iorwf	___awdiv@divisor+1,w,c
  4257  0014A0  B4D8               	btfsc	status,2,c
  4258  0014A2  D01C               	goto	l2839
  4259  0014A4  0E01               	movlw	1
  4260  0014A6  6E2E               	movwf	___awdiv@counter,c
  4261  0014A8  D004               	goto	l2825
  4262  0014AA                     l2823:
  4263  0014AA  90D8               	bcf	status,0,c
  4264  0014AC  362C               	rlcf	___awdiv@divisor,f,c
  4265  0014AE  362D               	rlcf	___awdiv@divisor+1,f,c
  4266  0014B0  2A2E               	incf	___awdiv@counter,f,c
  4267  0014B2                     l2825:
  4268  0014B2  AE2D               	btfss	___awdiv@divisor+1,7,c
  4269  0014B4  D7FA               	goto	l2823
  4270  0014B6                     l2827:
  4271  0014B6  90D8               	bcf	status,0,c
  4272  0014B8  3630               	rlcf	___awdiv@quotient,f,c
  4273  0014BA  3631               	rlcf	___awdiv@quotient+1,f,c
  4274  0014BC  502C               	movf	___awdiv@divisor,w,c
  4275  0014BE  5C2A               	subwf	___awdiv@dividend,w,c
  4276  0014C0  502D               	movf	___awdiv@divisor+1,w,c
  4277  0014C2  582B               	subwfb	___awdiv@dividend+1,w,c
  4278  0014C4  A0D8               	btfss	status,0,c
  4279  0014C6  D005               	goto	l2835
  4280  0014C8  502C               	movf	___awdiv@divisor,w,c
  4281  0014CA  5E2A               	subwf	___awdiv@dividend,f,c
  4282  0014CC  502D               	movf	___awdiv@divisor+1,w,c
  4283  0014CE  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4284  0014D0  8030               	bsf	___awdiv@quotient,0,c
  4285  0014D2                     l2835:
  4286  0014D2  90D8               	bcf	status,0,c
  4287  0014D4  322D               	rrcf	___awdiv@divisor+1,f,c
  4288  0014D6  322C               	rrcf	___awdiv@divisor,f,c
  4289  0014D8  2E2E               	decfsz	___awdiv@counter,f,c
  4290  0014DA  D7ED               	goto	l2827
  4291  0014DC                     l2839:
  4292  0014DC  502F               	movf	___awdiv@sign,w,c
  4293  0014DE  B4D8               	btfsc	status,2,c
  4294  0014E0  D004               	goto	l2843
  4295  0014E2  6C30               	negf	___awdiv@quotient,c
  4296  0014E4  1E31               	comf	___awdiv@quotient+1,f,c
  4297  0014E6  B0D8               	btfsc	status,0,c
  4298  0014E8  2A31               	incf	___awdiv@quotient+1,f,c
  4299  0014EA                     l2843:
  4300  0014EA  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4301  0014EE  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4302  0014F2  0012               	return	
  4303  0014F4                     __end_of___awdiv:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           intcon	equ	0xFF2
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           indf1	equ	0xFE7
  4312                           fsr1h	equ	0xFE2
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _sprintf *****************
  4322 ;; Defined at:
  4323 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4326 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4327 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4328 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  tmpval          4    0        struct .
  4331 ;;  cp              3    0        PTR const unsigned char 
  4332 ;;  width           2   10[BANK0 ] int 
  4333 ;;  val             2    7[BANK0 ] unsigned int 
  4334 ;;  ap              2    4[BANK0 ] PTR void [1]
  4335 ;;		 -> ?_sprintf(2), 
  4336 ;;  len             2    0        unsigned int 
  4337 ;;  c               1   12[BANK0 ] char 
  4338 ;;  flag            1    9[BANK0 ] unsigned char 
  4339 ;;  prec            1    6[BANK0 ] char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2   47[COMRAM] int 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4349 ;;      Params:         8       0       0       0
  4350 ;;      Locals:         0       9       0       0
  4351 ;;      Temps:          0       4       0       0
  4352 ;;      Totals:         8      13       0       0
  4353 ;;Total ram usage:       21 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    4
  4356 ;; This function calls:
  4357 ;;		___lwdiv
  4358 ;;		___lwmod
  4359 ;;		___wmul
  4360 ;;		_isdigit
  4361 ;; This function is called by:
  4362 ;;		_ScanIR
  4363 ;;		_ScanWithRange
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text18
  4369  000B9C                     __ptext18:
  4370                           	opt stack 0
  4371  000B9C                     _sprintf:
  4372                           	opt stack 26
  4373                           
  4374                           ;doprnt.c: 494: va_list ap;
  4375                           ;doprnt.c: 499: signed char c;
  4376                           ;doprnt.c: 501: int width;
  4377                           ;doprnt.c: 506: signed char prec;
  4378                           ;doprnt.c: 508: unsigned char flag;
  4379                           ;doprnt.c: 523: union {
  4380                           ;doprnt.c: 524: unsigned long vd;
  4381                           ;doprnt.c: 525: double integ;
  4382                           ;doprnt.c: 526: } tmpval;
  4383                           ;doprnt.c: 528: unsigned int val;
  4384                           ;doprnt.c: 529: unsigned len;
  4385                           ;doprnt.c: 530: const char * cp;
  4386                           ;doprnt.c: 533: *ap = __va_start();
  4387                           
  4388                           ;incstack = 0
  4389  000B9C  0E34               	movlw	low (?_sprintf+4)
  4390  000B9E  0100               	movlb	0	; () banked
  4391  000BA0  6F64               	movwf	sprintf@ap& (0+255),b
  4392  000BA2  0E00               	movlw	high (?_sprintf+4)
  4393  000BA4  0100               	movlb	0	; () banked
  4394  000BA6  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4395                           
  4396                           ;doprnt.c: 536: while(c = *f++) {
  4397  000BA8  D168               	goto	l3011
  4398  000BAA                     l2905:
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;doprnt.c: 538: if(c != '%')
  4402  000BAA  0E25               	movlw	37
  4403  000BAC  0100               	movlb	0	; () banked
  4404  000BAE  196C               	xorwf	sprintf@c& (0+255),w,b
  4405  000BB0  B4D8               	btfsc	status,2,c
  4406  000BB2  D009               	goto	l2911
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;doprnt.c: 540: {
  4410                           ;doprnt.c: 541: ((*sp++ = (c)));
  4411  000BB4  C030  FFD9         	movff	sprintf@sp,fsr2l
  4412  000BB8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4413  000BBC  C06C  FFDF         	movff	sprintf@c,indf2
  4414                           
  4415                           ; BSR set to: 0
  4416  000BC0  4A30               	infsnz	sprintf@sp,f,c
  4417  000BC2  2A31               	incf	sprintf@sp+1,f,c
  4418                           
  4419                           ;doprnt.c: 542: continue;
  4420  000BC4  D15A               	goto	l3011
  4421  000BC6                     l2911:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 543: }
  4425                           ;doprnt.c: 546: width = 0;
  4426  000BC6  0E00               	movlw	0
  4427  000BC8  0100               	movlb	0	; () banked
  4428  000BCA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4429  000BCC  0E00               	movlw	0
  4430  000BCE  6F6A               	movwf	sprintf@width& (0+255),b
  4431                           
  4432                           ;doprnt.c: 548: flag = 0;
  4433  000BD0  0E00               	movlw	0
  4434  000BD2  0100               	movlb	0	; () banked
  4435  000BD4  6F69               	movwf	sprintf@flag& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 551: switch(*f) {
  4439                           
  4440                           ;doprnt.c: 550: for(;;) {
  4441  000BD6  D004               	goto	l2917
  4442  000BD8                     l2913:
  4443                           
  4444                           ;doprnt.c: 580: flag |= 0x04;
  4445  000BD8  0100               	movlb	0	; () banked
  4446  000BDA  8569               	bsf	sprintf@flag& (0+255),2,b
  4447                           
  4448                           ;doprnt.c: 581: f++;
  4449  000BDC  4A32               	infsnz	sprintf@f,f,c
  4450  000BDE  2A33               	incf	sprintf@f+1,f,c
  4451  000BE0                     l2917:
  4452  000BE0  C032  FFF6         	movff	sprintf@f,tblptrl
  4453  000BE4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4454  000BE8                     	if	0	;tblptru may be non-zero
  4455  000BE8                     	endif
  4456  000BE8                     	if	0	;tblptru may be non-zero
  4457  000BE8                     	endif
  4458  000BE8  0008               	tblrd		*
  4459  000BEA  50F5               	movf	tablat,w,c
  4460                           
  4461                           ; Switch size 1, requested type "space"
  4462                           ; Number of cases is 1, Range of values is 48 to 48
  4463                           ; switch strategies available:
  4464                           ; Name         Instructions Cycles
  4465                           ; simple_byte            4     3 (average)
  4466                           ;	Chosen strategy is simple_byte
  4467  000BEC  0A30               	xorlw	48	; case 48
  4468  000BEE  B4D8               	btfsc	status,2,c
  4469  000BF0  D7F3               	goto	l2913
  4470                           
  4471                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4472                           
  4473                           ;doprnt.c: 586: }
  4474                           
  4475                           ;doprnt.c: 585: break;
  4476  000BF2  C032  FFF6         	movff	sprintf@f,tblptrl
  4477  000BF6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4478  000BFA                     	if	0	;tblptru may be non-zero
  4479  000BFA                     	endif
  4480  000BFA                     	if	0	;tblptru may be non-zero
  4481  000BFA                     	endif
  4482  000BFA  0008               	tblrd		*
  4483  000BFC  50F5               	movf	tablat,w,c
  4484  000BFE  ECCF  F00C         	call	_isdigit
  4485  000C02  A0D8               	btfss	status,0,c
  4486  000C04  D03E               	goto	l2933
  4487                           
  4488                           ;doprnt.c: 598: width = 0;
  4489  000C06  0E00               	movlw	0
  4490  000C08  0100               	movlb	0	; () banked
  4491  000C0A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4492  000C0C  0E00               	movlw	0
  4493  000C0E  6F6A               	movwf	sprintf@width& (0+255),b
  4494  000C10                     l2923:
  4495                           
  4496                           ;doprnt.c: 600: width *= 10;
  4497  000C10  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4498  000C14  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4499  000C18  0E00               	movlw	0
  4500  000C1A  6E27               	movwf	___wmul@multiplicand+1,c
  4501  000C1C  0E0A               	movlw	10
  4502  000C1E  6E26               	movwf	___wmul@multiplicand,c
  4503  000C20  ECAB  F00C         	call	___wmul	;wreg free
  4504  000C24  C024  F06A         	movff	?___wmul,sprintf@width
  4505  000C28  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4506                           
  4507                           ;doprnt.c: 601: width += *f++ - '0';
  4508  000C2C  0ED0               	movlw	208
  4509  000C2E  0100               	movlb	0	; () banked
  4510  000C30  6F60               	movwf	??_sprintf& (0+255),b
  4511  000C32  0EFF               	movlw	255
  4512  000C34  0100               	movlb	0	; () banked
  4513  000C36  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4514  000C38  C032  FFF6         	movff	sprintf@f,tblptrl
  4515  000C3C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4516  000C40                     	if	0	;tblptru may be non-zero
  4517  000C40                     	endif
  4518  000C40                     	if	0	;tblptru may be non-zero
  4519  000C40                     	endif
  4520  000C40  0008               	tblrd		*
  4521  000C42  50F5               	movf	tablat,w,c
  4522  000C44  0100               	movlb	0	; () banked
  4523  000C46  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4524  000C48  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4525  000C4A  0100               	movlb	0	; () banked
  4526  000C4C  5160               	movf	??_sprintf& (0+255),w,b
  4527  000C4E  0100               	movlb	0	; () banked
  4528  000C50  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4529  000C52  0100               	movlb	0	; () banked
  4530  000C54  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4531  000C56  0100               	movlb	0	; () banked
  4532  000C58  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4533  000C5A  0100               	movlb	0	; () banked
  4534  000C5C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4535  000C5E  0100               	movlb	0	; () banked
  4536  000C60  276A               	addwf	sprintf@width& (0+255),f,b
  4537  000C62  0100               	movlb	0	; () banked
  4538  000C64  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4539  000C66  0100               	movlb	0	; () banked
  4540  000C68  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4541                           
  4542                           ; BSR set to: 0
  4543  000C6A  4A32               	infsnz	sprintf@f,f,c
  4544  000C6C  2A33               	incf	sprintf@f+1,f,c
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4548  000C6E  C032  FFF6         	movff	sprintf@f,tblptrl
  4549  000C72  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4550  000C76                     	if	0	;tblptru may be non-zero
  4551  000C76                     	endif
  4552  000C76                     	if	0	;tblptru may be non-zero
  4553  000C76                     	endif
  4554  000C76  0008               	tblrd		*
  4555  000C78  50F5               	movf	tablat,w,c
  4556  000C7A  ECCF  F00C         	call	_isdigit
  4557  000C7E  B0D8               	btfsc	status,0,c
  4558  000C80  D7C7               	goto	l2923
  4559  000C82                     l2933:
  4560  000C82  C032  FFF6         	movff	sprintf@f,tblptrl
  4561  000C86  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4562  000C8A  4A32               	infsnz	sprintf@f,f,c
  4563  000C8C  2A33               	incf	sprintf@f+1,f,c
  4564  000C8E                     	if	0	;tblptru may be non-zero
  4565  000C8E                     	endif
  4566  000C8E                     	if	0	;tblptru may be non-zero
  4567  000C8E                     	endif
  4568  000C8E  0008               	tblrd		*
  4569  000C90  CFF5 F06C          	movff	tablat,sprintf@c
  4570  000C94  0100               	movlb	0	; () banked
  4571  000C96  516C               	movf	sprintf@c& (0+255),w,b
  4572                           
  4573                           ; Switch size 1, requested type "space"
  4574                           ; Number of cases is 3, Range of values is 0 to 105
  4575                           ; switch strategies available:
  4576                           ; Name         Instructions Cycles
  4577                           ; simple_byte           10     6 (average)
  4578                           ;	Chosen strategy is simple_byte
  4579  000C98  0A00               	xorlw	0	; case 0
  4580  000C9A  B4D8               	btfsc	status,2,c
  4581  000C9C  D0FB               	goto	l3013
  4582  000C9E  0A64               	xorlw	100	; case 100
  4583  000CA0  B4D8               	btfsc	status,2,c
  4584  000CA2  D003               	goto	l2935
  4585  000CA4  0A0D               	xorlw	13	; case 105
  4586  000CA6  A4D8               	btfss	status,2,c
  4587  000CA8  D0E8               	goto	l3011
  4588  000CAA                     l2935:
  4589                           
  4590                           ;doprnt.c: 1253: {
  4591                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4592  000CAA  C064  FFD9         	movff	sprintf@ap,fsr2l
  4593  000CAE  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4594  000CB2  CFDE F067          	movff	postinc2,sprintf@val
  4595  000CB6  CFDD F068          	movff	postdec2,sprintf@val+1
  4596  000CBA  0E02               	movlw	2
  4597  000CBC  0100               	movlb	0	; () banked
  4598  000CBE  2764               	addwf	sprintf@ap& (0+255),f,b
  4599  000CC0  0E00               	movlw	0
  4600  000CC2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1261: if((int)val < 0) {
  4604  000CC4  0100               	movlb	0	; () banked
  4605  000CC6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4606  000CC8  D008               	goto	l2945
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1262: flag |= 0x03;
  4610  000CCA  0E03               	movlw	3
  4611  000CCC  0100               	movlb	0	; () banked
  4612  000CCE  1369               	iorwf	sprintf@flag& (0+255),f,b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1263: val = -val;
  4616  000CD0  0100               	movlb	0	; () banked
  4617  000CD2  6D67               	negf	sprintf@val& (0+255),b
  4618  000CD4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4619  000CD6  B0D8               	btfsc	status,0,c
  4620  000CD8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4621  000CDA                     l2945:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 1264: }
  4625                           ;doprnt.c: 1266: }
  4626                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4627  000CDA  0E01               	movlw	1
  4628  000CDC  0100               	movlb	0	; () banked
  4629  000CDE  6F6C               	movwf	sprintf@c& (0+255),b
  4630  000CE0                     l2947:
  4631                           
  4632                           ; BSR set to: 0
  4633  000CE0  0E05               	movlw	5
  4634  000CE2  0100               	movlb	0	; () banked
  4635  000CE4  196C               	xorwf	sprintf@c& (0+255),w,b
  4636  000CE6  B4D8               	btfsc	status,2,c
  4637  000CE8  D016               	goto	l2959
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;doprnt.c: 1306: if(val < dpowers[c])
  4641                           
  4642                           ; BSR set to: 0
  4643                           
  4644                           ; BSR set to: 0
  4645  000CEA  0100               	movlb	0	; () banked
  4646  000CEC  516C               	movf	sprintf@c& (0+255),w,b
  4647  000CEE  0D02               	mullw	2
  4648  000CF0  0E01               	movlw	low _dpowers
  4649  000CF2  24F3               	addwf	prodl,w,c
  4650  000CF4  6EF6               	movwf	tblptrl,c
  4651  000CF6  0E03               	movlw	high _dpowers
  4652  000CF8  20F4               	addwfc	prodh,w,c
  4653  000CFA  6EF7               	movwf	tblptrh,c
  4654  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  4655  000CFC                     	endif
  4656  000CFC  0009               	tblrd		*+
  4657  000CFE  50F5               	movf	tablat,w,c
  4658  000D00  0100               	movlb	0	; () banked
  4659  000D02  5D67               	subwf	sprintf@val& (0+255),w,b
  4660  000D04  0009               	tblrd		*+
  4661  000D06  50F5               	movf	tablat,w,c
  4662  000D08  0100               	movlb	0	; () banked
  4663  000D0A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4664  000D0C  A0D8               	btfss	status,0,c
  4665  000D0E  D003               	goto	l2959
  4666                           
  4667                           ; BSR set to: 0
  4668                           
  4669                           ; BSR set to: 0
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1307: break;
  4673  000D10  0100               	movlb	0	; () banked
  4674  000D12  2B6C               	incf	sprintf@c& (0+255),f,b
  4675  000D14  D7E5               	goto	l2947
  4676  000D16                     l2959:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4680  000D16  0100               	movlb	0	; () banked
  4681  000D18  516A               	movf	sprintf@width& (0+255),w,b
  4682  000D1A  0100               	movlb	0	; () banked
  4683  000D1C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4684  000D1E  B4D8               	btfsc	status,2,c
  4685  000D20  D00B               	goto	l2965
  4686                           
  4687                           ; BSR set to: 0
  4688  000D22  C069  F060         	movff	sprintf@flag,??_sprintf
  4689  000D26  0E03               	movlw	3
  4690  000D28  0100               	movlb	0	; () banked
  4691  000D2A  1760               	andwf	??_sprintf& (0+255),f,b
  4692  000D2C  B4D8               	btfsc	status,2,c
  4693  000D2E  D004               	goto	l2965
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 1346: width--;
  4697  000D30  0100               	movlb	0	; () banked
  4698  000D32  076A               	decf	sprintf@width& (0+255),f,b
  4699  000D34  A0D8               	btfss	status,0,c
  4700  000D36  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4701  000D38                     l2965:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;doprnt.c: 1381: if(width > c)
  4705  000D38  0E80               	movlw	128
  4706  000D3A  0100               	movlb	0	; () banked
  4707  000D3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4708  000D3E  0E7F               	movlw	127
  4709  000D40  0100               	movlb	0	; () banked
  4710  000D42  6F60               	movwf	??_sprintf& (0+255),b
  4711  000D44  0100               	movlb	0	; () banked
  4712  000D46  516A               	movf	sprintf@width& (0+255),w,b
  4713  000D48  0100               	movlb	0	; () banked
  4714  000D4A  5D6C               	subwf	sprintf@c& (0+255),w,b
  4715  000D4C  0100               	movlb	0	; () banked
  4716  000D4E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4717  000D50  0A80               	xorlw	128
  4718  000D52  0100               	movlb	0	; () banked
  4719  000D54  5960               	subwfb	??_sprintf& (0+255),w,b
  4720  000D56  B0D8               	btfsc	status,0,c
  4721  000D58  D00B               	goto	l2969
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1382: width -= c;
  4725  000D5A  0100               	movlb	0	; () banked
  4726  000D5C  516C               	movf	sprintf@c& (0+255),w,b
  4727  000D5E  0100               	movlb	0	; () banked
  4728  000D60  5F6A               	subwf	sprintf@width& (0+255),f,b
  4729  000D62  0E00               	movlw	0
  4730  000D64  0100               	movlb	0	; () banked
  4731  000D66  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4732  000D68  0EFF               	movlw	255
  4733  000D6A  0100               	movlb	0	; () banked
  4734  000D6C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4735  000D6E  D005               	goto	l2971
  4736  000D70                     l2969:
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 1383: else
  4740                           ;doprnt.c: 1384: width = 0;
  4741  000D70  0E00               	movlw	0
  4742  000D72  0100               	movlb	0	; () banked
  4743  000D74  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4744  000D76  0E00               	movlw	0
  4745  000D78  6F6A               	movwf	sprintf@width& (0+255),b
  4746  000D7A                     l2971:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 1387: if(flag & 0x04) {
  4750  000D7A  0100               	movlb	0	; () banked
  4751  000D7C  A569               	btfss	sprintf@flag& (0+255),2,b
  4752  000D7E  D022               	goto	l2987
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 1392: if(flag & 0x03)
  4756  000D80  C069  F060         	movff	sprintf@flag,??_sprintf
  4757  000D84  0E03               	movlw	3
  4758  000D86  0100               	movlb	0	; () banked
  4759  000D88  1760               	andwf	??_sprintf& (0+255),f,b
  4760  000D8A  B4D8               	btfsc	status,2,c
  4761  000D8C  D008               	goto	l2979
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4765  000D8E  C030  FFD9         	movff	sprintf@sp,fsr2l
  4766  000D92  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4767  000D96  0E2D               	movlw	45
  4768  000D98  6EDF               	movwf	indf2,c
  4769                           
  4770                           ; BSR set to: 0
  4771  000D9A  4A30               	infsnz	sprintf@sp,f,c
  4772  000D9C  2A31               	incf	sprintf@sp+1,f,c
  4773  000D9E                     l2979:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1415: if(width)
  4777  000D9E  0100               	movlb	0	; () banked
  4778  000DA0  516A               	movf	sprintf@width& (0+255),w,b
  4779  000DA2  0100               	movlb	0	; () banked
  4780  000DA4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4781  000DA6  B4D8               	btfsc	status,2,c
  4782  000DA8  D034               	goto	l3001
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4786                           
  4787                           ; BSR set to: 0
  4788                           
  4789                           ;doprnt.c: 1416: do
  4790  000DAA  C030  FFD9         	movff	sprintf@sp,fsr2l
  4791  000DAE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4792  000DB2  0E30               	movlw	48
  4793  000DB4  6EDF               	movwf	indf2,c
  4794                           
  4795                           ; BSR set to: 0
  4796  000DB6  4A30               	infsnz	sprintf@sp,f,c
  4797  000DB8  2A31               	incf	sprintf@sp+1,f,c
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1418: while(--width);
  4801  000DBA  0100               	movlb	0	; () banked
  4802  000DBC  076A               	decf	sprintf@width& (0+255),f,b
  4803  000DBE  A0D8               	btfss	status,0,c
  4804  000DC0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4805  000DC2  D7ED               	goto	l2979
  4806  000DC4                     l2987:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1422: {
  4810                           ;doprnt.c: 1424: if(width
  4811                           ;doprnt.c: 1428: )
  4812  000DC4  0100               	movlb	0	; () banked
  4813  000DC6  516A               	movf	sprintf@width& (0+255),w,b
  4814  000DC8  0100               	movlb	0	; () banked
  4815  000DCA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4816  000DCC  B4D8               	btfsc	status,2,c
  4817  000DCE  D012               	goto	l2995
  4818  000DD0                     l2989:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4822  000DD0  C030  FFD9         	movff	sprintf@sp,fsr2l
  4823  000DD4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4824  000DD8  0E20               	movlw	32
  4825  000DDA  6EDF               	movwf	indf2,c
  4826                           
  4827                           ; BSR set to: 0
  4828  000DDC  4A30               	infsnz	sprintf@sp,f,c
  4829  000DDE  2A31               	incf	sprintf@sp+1,f,c
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 1431: while(--width);
  4833  000DE0  0100               	movlb	0	; () banked
  4834  000DE2  076A               	decf	sprintf@width& (0+255),f,b
  4835  000DE4  A0D8               	btfss	status,0,c
  4836  000DE6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4837  000DE8  0100               	movlb	0	; () banked
  4838  000DEA  516A               	movf	sprintf@width& (0+255),w,b
  4839  000DEC  0100               	movlb	0	; () banked
  4840  000DEE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4841  000DF0  A4D8               	btfss	status,2,c
  4842  000DF2  D7EE               	goto	l2989
  4843  000DF4                     l2995:
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;doprnt.c: 1438: if(flag & 0x03)
  4847  000DF4  C069  F060         	movff	sprintf@flag,??_sprintf
  4848  000DF8  0E03               	movlw	3
  4849  000DFA  0100               	movlb	0	; () banked
  4850  000DFC  1760               	andwf	??_sprintf& (0+255),f,b
  4851  000DFE  B4D8               	btfsc	status,2,c
  4852  000E00  D008               	goto	l3001
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4856  000E02  C030  FFD9         	movff	sprintf@sp,fsr2l
  4857  000E06  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4858  000E0A  0E2D               	movlw	45
  4859  000E0C  6EDF               	movwf	indf2,c
  4860                           
  4861                           ; BSR set to: 0
  4862  000E0E  4A30               	infsnz	sprintf@sp,f,c
  4863  000E10  2A31               	incf	sprintf@sp+1,f,c
  4864  000E12                     l3001:
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;doprnt.c: 1469: }
  4868                           ;doprnt.c: 1472: prec = c;
  4869  000E12  C06C  F066         	movff	sprintf@c,sprintf@prec
  4870                           
  4871                           ;doprnt.c: 1474: while(prec--) {
  4872  000E16  D02B               	goto	l3009
  4873  000E18                     l3003:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;doprnt.c: 1478: {
  4877                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4878  000E18  0100               	movlb	0	; () banked
  4879  000E1A  5166               	movf	sprintf@prec& (0+255),w,b
  4880  000E1C  0D02               	mullw	2
  4881  000E1E  0E01               	movlw	low _dpowers
  4882  000E20  24F3               	addwf	prodl,w,c
  4883  000E22  6EF6               	movwf	tblptrl,c
  4884  000E24  0E03               	movlw	high _dpowers
  4885  000E26  20F4               	addwfc	prodh,w,c
  4886  000E28  6EF7               	movwf	tblptrh,c
  4887  000E2A                     	if	0	;There are less than 3 active tblptr bytes
  4888  000E2A                     	endif
  4889  000E2A  0009               	tblrd		*+
  4890  000E2C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4891  000E30  000A               	tblrd		*-
  4892  000E32  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4893  000E36  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4894  000E3A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4895  000E3E  EC5B  F00B         	call	___lwdiv	;wreg free
  4896  000E42  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4897  000E46  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4898  000E4A  0E00               	movlw	0
  4899  000E4C  6E2E               	movwf	___lwmod@divisor+1,c
  4900  000E4E  0E0A               	movlw	10
  4901  000E50  6E2D               	movwf	___lwmod@divisor,c
  4902  000E52  EC84  F00B         	call	___lwmod	;wreg free
  4903  000E56  502B               	movf	?___lwmod,w,c
  4904  000E58  0F30               	addlw	48
  4905  000E5A  0100               	movlb	0	; () banked
  4906  000E5C  6F6C               	movwf	sprintf@c& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 1523: }
  4910                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4911  000E5E  C030  FFD9         	movff	sprintf@sp,fsr2l
  4912  000E62  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4913  000E66  C06C  FFDF         	movff	sprintf@c,indf2
  4914                           
  4915                           ; BSR set to: 0
  4916  000E6A  4A30               	infsnz	sprintf@sp,f,c
  4917  000E6C  2A31               	incf	sprintf@sp+1,f,c
  4918  000E6E                     l3009:
  4919                           
  4920                           ; BSR set to: 0
  4921  000E6E  0100               	movlb	0	; () banked
  4922  000E70  0766               	decf	sprintf@prec& (0+255),f,b
  4923  000E72  0100               	movlb	0	; () banked
  4924  000E74  2966               	incf	sprintf@prec& (0+255),w,b
  4925  000E76  A4D8               	btfss	status,2,c
  4926  000E78  D7CF               	goto	l3003
  4927  000E7A                     l3011:
  4928  000E7A  C032  FFF6         	movff	sprintf@f,tblptrl
  4929  000E7E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4930  000E82  4A32               	infsnz	sprintf@f,f,c
  4931  000E84  2A33               	incf	sprintf@f+1,f,c
  4932  000E86                     	if	0	;tblptru may be non-zero
  4933  000E86                     	endif
  4934  000E86                     	if	0	;tblptru may be non-zero
  4935  000E86                     	endif
  4936  000E86  0008               	tblrd		*
  4937  000E88  CFF5 F06C          	movff	tablat,sprintf@c
  4938  000E8C  0100               	movlb	0	; () banked
  4939  000E8E  516C               	movf	sprintf@c& (0+255),w,b
  4940  000E90  A4D8               	btfss	status,2,c
  4941  000E92  D68B               	goto	l2905
  4942  000E94                     l3013:
  4943                           
  4944                           ;doprnt.c: 1538: *sp = 0;
  4945  000E94  C030  FFD9         	movff	sprintf@sp,fsr2l
  4946  000E98  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4947  000E9C  0E00               	movlw	0
  4948  000E9E  6EDF               	movwf	indf2,c
  4949  000EA0  0012               	return	
  4950  000EA2                     __end_of_sprintf:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _isdigit *****************
  4972 ;; Defined at:
  4973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  c               1    wreg     unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  c               1   37[COMRAM] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4987 ;;      Params:         0       0       0       0
  4988 ;;      Locals:         2       0       0       0
  4989 ;;      Temps:          1       0       0       0
  4990 ;;      Totals:         3       0       0       0
  4991 ;;Total ram usage:        3 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    3
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_sprintf
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text19
  5002  00199E                     __ptext19:
  5003                           	opt stack 0
  5004  00199E                     _isdigit:
  5005                           	opt stack 26
  5006                           
  5007                           ;incstack = 0
  5008                           ;isdigit@c stored from wreg
  5009  00199E  6E26               	movwf	isdigit@c,c
  5010  0019A0  0E00               	movlw	0
  5011  0019A2  6E25               	movwf	_isdigit$1962,c
  5012  0019A4  0E3A               	movlw	58
  5013  0019A6  6026               	cpfslt	isdigit@c,c
  5014  0019A8  D005               	goto	l2057
  5015  0019AA  0E2F               	movlw	47
  5016  0019AC  6426               	cpfsgt	isdigit@c,c
  5017  0019AE  D002               	goto	l2057
  5018  0019B0  0E01               	movlw	1
  5019  0019B2  6E25               	movwf	_isdigit$1962,c
  5020  0019B4                     l2057:
  5021  0019B4  C025  F024         	movff	_isdigit$1962,??_isdigit
  5022  0019B8  3024               	rrcf	??_isdigit,w,c
  5023  0019BA  0012               	return	
  5024  0019BC                     __end_of_isdigit:
  5025                           	opt stack 0
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           intcon	equ	0xFF2
  5033                           postinc0	equ	0xFEE
  5034                           wreg	equ	0xFE8
  5035                           indf1	equ	0xFE7
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function ___wmul *****************
  5046 ;; Defined at:
  5047 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  multiplier      2   35[COMRAM] unsigned int 
  5050 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  product         2   39[COMRAM] unsigned int 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2   35[COMRAM] unsigned int 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0, prodl, prodh
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5062 ;;      Params:         4       0       0       0
  5063 ;;      Locals:         2       0       0       0
  5064 ;;      Temps:          0       0       0       0
  5065 ;;      Totals:         6       0       0       0
  5066 ;;Total ram usage:        6 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_setMotorPWM
  5073 ;;		_sprintf
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text20
  5078  001956                     __ptext20:
  5079                           	opt stack 0
  5080  001956                     ___wmul:
  5081                           	opt stack 25
  5082                           
  5083                           ;incstack = 0
  5084  001956  5024               	movf	___wmul@multiplier,w,c
  5085  001958  0226               	mulwf	___wmul@multiplicand,c
  5086  00195A  CFF3 F028          	movff	prodl,___wmul@product
  5087  00195E  CFF4 F029          	movff	prodh,___wmul@product+1
  5088  001962  5024               	movf	___wmul@multiplier,w,c
  5089  001964  0227               	mulwf	___wmul@multiplicand+1,c
  5090  001966  50F3               	movf	prodl,w,c
  5091  001968  2629               	addwf	___wmul@product+1,f,c
  5092  00196A  5025               	movf	___wmul@multiplier+1,w,c
  5093  00196C  0226               	mulwf	___wmul@multiplicand,c
  5094  00196E  50F3               	movf	prodl,w,c
  5095  001970  2629               	addwf	___wmul@product+1,f,c
  5096  001972  C028  F024         	movff	___wmul@product,?___wmul
  5097  001976  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5098  00197A  0012               	return	
  5099  00197C                     __end_of___wmul:
  5100                           	opt stack 0
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           indf1	equ	0xFE7
  5111                           fsr1h	equ	0xFE2
  5112                           fsr1l	equ	0xFE1
  5113                           indf2	equ	0xFDF
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function ___lwmod *****************
  5121 ;; Defined at:
  5122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  dividend        2   42[COMRAM] unsigned int 
  5125 ;;  divisor         2   44[COMRAM] unsigned int 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  counter         1   46[COMRAM] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  2   42[COMRAM] unsigned int 
  5130 ;; Registers used:
  5131 ;;		wreg, status,2, status,0
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5137 ;;      Params:         4       0       0       0
  5138 ;;      Locals:         1       0       0       0
  5139 ;;      Temps:          0       0       0       0
  5140 ;;      Totals:         5       0       0       0
  5141 ;;Total ram usage:        5 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    3
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_sprintf
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text21
  5152  001708                     __ptext21:
  5153                           	opt stack 0
  5154  001708                     ___lwmod:
  5155                           	opt stack 26
  5156                           
  5157                           ;incstack = 0
  5158  001708  502D               	movf	___lwmod@divisor,w,c
  5159  00170A  102E               	iorwf	___lwmod@divisor+1,w,c
  5160  00170C  B4D8               	btfsc	status,2,c
  5161  00170E  D018               	goto	l880
  5162  001710  0E01               	movlw	1
  5163  001712  6E2F               	movwf	___lwmod@counter,c
  5164  001714  D004               	goto	l2089
  5165  001716                     l2087:
  5166  001716  90D8               	bcf	status,0,c
  5167  001718  362D               	rlcf	___lwmod@divisor,f,c
  5168  00171A  362E               	rlcf	___lwmod@divisor+1,f,c
  5169  00171C  2A2F               	incf	___lwmod@counter,f,c
  5170  00171E                     l2089:
  5171  00171E  AE2E               	btfss	___lwmod@divisor+1,7,c
  5172  001720  D7FA               	goto	l2087
  5173  001722                     l2091:
  5174  001722  502D               	movf	___lwmod@divisor,w,c
  5175  001724  5C2B               	subwf	___lwmod@dividend,w,c
  5176  001726  502E               	movf	___lwmod@divisor+1,w,c
  5177  001728  582C               	subwfb	___lwmod@dividend+1,w,c
  5178  00172A  A0D8               	btfss	status,0,c
  5179  00172C  D004               	goto	l2095
  5180  00172E  502D               	movf	___lwmod@divisor,w,c
  5181  001730  5E2B               	subwf	___lwmod@dividend,f,c
  5182  001732  502E               	movf	___lwmod@divisor+1,w,c
  5183  001734  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5184  001736                     l2095:
  5185  001736  90D8               	bcf	status,0,c
  5186  001738  322E               	rrcf	___lwmod@divisor+1,f,c
  5187  00173A  322D               	rrcf	___lwmod@divisor,f,c
  5188  00173C  2E2F               	decfsz	___lwmod@counter,f,c
  5189  00173E  D7F1               	goto	l2091
  5190  001740                     l880:
  5191  001740  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5192  001744  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5193  001748  0012               	return		;funcret
  5194  00174A                     __end_of___lwmod:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           fsr1h	equ	0xFE2
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function ___lwdiv *****************
  5216 ;; Defined at:
  5217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  dividend        2   35[COMRAM] unsigned int 
  5220 ;;  divisor         2   37[COMRAM] unsigned int 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  quotient        2   39[COMRAM] unsigned int 
  5223 ;;  counter         1   41[COMRAM] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  2   35[COMRAM] unsigned int 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5233 ;;      Params:         4       0       0       0
  5234 ;;      Locals:         3       0       0       0
  5235 ;;      Temps:          0       0       0       0
  5236 ;;      Totals:         7       0       0       0
  5237 ;;Total ram usage:        7 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    3
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_sprintf
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text22
  5248  0016B6                     __ptext22:
  5249                           	opt stack 0
  5250  0016B6                     ___lwdiv:
  5251                           	opt stack 26
  5252                           
  5253                           ;incstack = 0
  5254  0016B6  0E00               	movlw	0
  5255  0016B8  6E29               	movwf	___lwdiv@quotient+1,c
  5256  0016BA  0E00               	movlw	0
  5257  0016BC  6E28               	movwf	___lwdiv@quotient,c
  5258  0016BE  5026               	movf	___lwdiv@divisor,w,c
  5259  0016C0  1027               	iorwf	___lwdiv@divisor+1,w,c
  5260  0016C2  B4D8               	btfsc	status,2,c
  5261  0016C4  D01C               	goto	l870
  5262  0016C6  0E01               	movlw	1
  5263  0016C8  6E2A               	movwf	___lwdiv@counter,c
  5264  0016CA  D004               	goto	l2069
  5265  0016CC                     l2067:
  5266  0016CC  90D8               	bcf	status,0,c
  5267  0016CE  3626               	rlcf	___lwdiv@divisor,f,c
  5268  0016D0  3627               	rlcf	___lwdiv@divisor+1,f,c
  5269  0016D2  2A2A               	incf	___lwdiv@counter,f,c
  5270  0016D4                     l2069:
  5271  0016D4  AE27               	btfss	___lwdiv@divisor+1,7,c
  5272  0016D6  D7FA               	goto	l2067
  5273  0016D8                     l2071:
  5274  0016D8  90D8               	bcf	status,0,c
  5275  0016DA  3628               	rlcf	___lwdiv@quotient,f,c
  5276  0016DC  3629               	rlcf	___lwdiv@quotient+1,f,c
  5277  0016DE  5026               	movf	___lwdiv@divisor,w,c
  5278  0016E0  5C24               	subwf	___lwdiv@dividend,w,c
  5279  0016E2  5027               	movf	___lwdiv@divisor+1,w,c
  5280  0016E4  5825               	subwfb	___lwdiv@dividend+1,w,c
  5281  0016E6  A0D8               	btfss	status,0,c
  5282  0016E8  D005               	goto	l2079
  5283  0016EA  5026               	movf	___lwdiv@divisor,w,c
  5284  0016EC  5E24               	subwf	___lwdiv@dividend,f,c
  5285  0016EE  5027               	movf	___lwdiv@divisor+1,w,c
  5286  0016F0  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5287  0016F2  8028               	bsf	___lwdiv@quotient,0,c
  5288  0016F4                     l2079:
  5289  0016F4  90D8               	bcf	status,0,c
  5290  0016F6  3227               	rrcf	___lwdiv@divisor+1,f,c
  5291  0016F8  3226               	rrcf	___lwdiv@divisor,f,c
  5292  0016FA  2E2A               	decfsz	___lwdiv@counter,f,c
  5293  0016FC  D7ED               	goto	l2071
  5294  0016FE                     l870:
  5295  0016FE  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5296  001702  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5297  001706  0012               	return		;funcret
  5298  001708                     __end_of___lwdiv:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           indf1	equ	0xFE7
  5310                           fsr1h	equ	0xFE2
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _grabRightIR *****************
  5320 ;; Defined at:
  5321 ;;		line 74 in file "IR_Reading.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5326 ;;  i               1   42[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  2   35[COMRAM] unsigned int 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5336 ;;      Params:         2       0       0       0
  5337 ;;      Locals:         3       0       0       0
  5338 ;;      Temps:          3       0       0       0
  5339 ;;      Totals:         8       0       0       0
  5340 ;;Total ram usage:        8 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    3
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_ScanIR
  5347 ;;		_ScanWithRange
  5348 ;;		_main
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  001574                     __ptext23:
  5354                           	opt stack 0
  5355  001574                     _grabRightIR:
  5356                           	opt stack 27
  5357                           
  5358                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5359                           
  5360                           ;incstack = 0
  5361  001574  0E00               	movlw	0
  5362  001576  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5363  001578  0E00               	movlw	0
  5364  00157A  6E29               	movwf	grabRightIR@IR_signal,c
  5365                           
  5366                           ;IR_Reading.c: 77: unsigned char i=0;
  5367  00157C  0E00               	movlw	0
  5368  00157E  6E2B               	movwf	grabRightIR@i,c
  5369                           
  5370                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5371  001580  0E00               	movlw	0
  5372  001582  6E2B               	movwf	grabRightIR@i,c
  5373  001584                     l2131:
  5374  001584  0E03               	movlw	3
  5375  001586  642B               	cpfsgt	grabRightIR@i,c
  5376  001588  D001               	goto	l2135
  5377  00158A  D01E               	goto	l2141
  5378  00158C                     l2135:
  5379                           
  5380                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5381  00158C  5069               	movf	3945,w,c	;volatile
  5382  00158E  6E26               	movwf	??_grabRightIR& (0+255),c
  5383  001590  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5384  001592  0E07               	movlw	7
  5385  001594                     u1445:
  5386  001594  90D8               	bcf	status,0,c
  5387  001596  3626               	rlcf	??_grabRightIR,f,c
  5388  001598  3627               	rlcf	??_grabRightIR+1,f,c
  5389  00159A  2EE8               	decfsz	wreg,f,c
  5390  00159C  D7FB               	goto	u1445
  5391  00159E  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5392  0015A2  90D8               	bcf	status,0,c
  5393  0015A4  3228               	rrcf	??_grabRightIR+2,f,c
  5394  0015A6  5028               	movf	??_grabRightIR+2,w,c
  5395  0015A8  1226               	iorwf	??_grabRightIR,f,c
  5396  0015AA  0E00               	movlw	0
  5397  0015AC  1227               	iorwf	??_grabRightIR+1,f,c
  5398  0015AE  5026               	movf	??_grabRightIR,w,c
  5399  0015B0  2629               	addwf	grabRightIR@IR_signal,f,c
  5400  0015B2  5027               	movf	??_grabRightIR+1,w,c
  5401  0015B4  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5402                           
  5403                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5404  0015B6  0E82               	movlw	130
  5405  0015B8  6E26               	movwf	??_grabRightIR& (0+255),c
  5406  0015BA  0EDE               	movlw	222
  5407  0015BC                     u2957:
  5408  0015BC  2EE8               	decfsz	wreg,f,c
  5409  0015BE  D7FE               	goto	u2957
  5410  0015C0  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5411  0015C2  D7FC               	goto	u2957
  5412  0015C4  2A2B               	incf	grabRightIR@i,f,c
  5413  0015C6  D7DE               	goto	l2131
  5414  0015C8                     l2141:
  5415                           
  5416                           ;IR_Reading.c: 83: }
  5417                           ;IR_Reading.c: 85: return IR_signal>>2;
  5418  0015C8  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5419  0015CC  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5420  0015D0  90D8               	bcf	status,0,c
  5421  0015D2  3227               	rrcf	??_grabRightIR+1,f,c
  5422  0015D4  3226               	rrcf	??_grabRightIR,f,c
  5423  0015D6  90D8               	bcf	status,0,c
  5424  0015D8  3227               	rrcf	??_grabRightIR+1,f,c
  5425  0015DA  3226               	rrcf	??_grabRightIR,f,c
  5426  0015DC  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5427  0015E0  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5428  0015E4  0012               	return	
  5429  0015E6                     __end_of_grabRightIR:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           indf1	equ	0xFE7
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _grabLeftIR *****************
  5451 ;; Defined at:
  5452 ;;		line 90 in file "IR_Reading.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5457 ;;  i               1   42[COMRAM] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  2   35[COMRAM] unsigned int 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5467 ;;      Params:         2       0       0       0
  5468 ;;      Locals:         3       0       0       0
  5469 ;;      Temps:          3       0       0       0
  5470 ;;      Totals:         8       0       0       0
  5471 ;;Total ram usage:        8 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    3
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_ScanIR
  5478 ;;		_ScanWithRange
  5479 ;;		_main
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text24
  5484  0015E6                     __ptext24:
  5485                           	opt stack 0
  5486  0015E6                     _grabLeftIR:
  5487                           	opt stack 27
  5488                           
  5489                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5490                           
  5491                           ;incstack = 0
  5492  0015E6  0E00               	movlw	0
  5493  0015E8  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5494  0015EA  0E00               	movlw	0
  5495  0015EC  6E29               	movwf	grabLeftIR@IR_signal,c
  5496                           
  5497                           ;IR_Reading.c: 93: unsigned char i=0;
  5498  0015EE  0E00               	movlw	0
  5499  0015F0  6E2B               	movwf	grabLeftIR@i,c
  5500                           
  5501                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5502  0015F2  0E00               	movlw	0
  5503  0015F4  6E2B               	movwf	grabLeftIR@i,c
  5504  0015F6                     l2147:
  5505  0015F6  0E03               	movlw	3
  5506  0015F8  642B               	cpfsgt	grabLeftIR@i,c
  5507  0015FA  D001               	goto	l2151
  5508  0015FC  D01E               	goto	l2157
  5509  0015FE                     l2151:
  5510                           
  5511                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5512  0015FE  5067               	movf	3943,w,c	;volatile
  5513  001600  6E26               	movwf	??_grabLeftIR& (0+255),c
  5514  001602  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5515  001604  0E07               	movlw	7
  5516  001606                     u1475:
  5517  001606  90D8               	bcf	status,0,c
  5518  001608  3626               	rlcf	??_grabLeftIR,f,c
  5519  00160A  3627               	rlcf	??_grabLeftIR+1,f,c
  5520  00160C  2EE8               	decfsz	wreg,f,c
  5521  00160E  D7FB               	goto	u1475
  5522  001610  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5523  001614  90D8               	bcf	status,0,c
  5524  001616  3228               	rrcf	??_grabLeftIR+2,f,c
  5525  001618  5028               	movf	??_grabLeftIR+2,w,c
  5526  00161A  1226               	iorwf	??_grabLeftIR,f,c
  5527  00161C  0E00               	movlw	0
  5528  00161E  1227               	iorwf	??_grabLeftIR+1,f,c
  5529  001620  5026               	movf	??_grabLeftIR,w,c
  5530  001622  2629               	addwf	grabLeftIR@IR_signal,f,c
  5531  001624  5027               	movf	??_grabLeftIR+1,w,c
  5532  001626  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5533                           
  5534                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5535  001628  0E82               	movlw	130
  5536  00162A  6E26               	movwf	??_grabLeftIR& (0+255),c
  5537  00162C  0EDE               	movlw	222
  5538  00162E                     u2967:
  5539  00162E  2EE8               	decfsz	wreg,f,c
  5540  001630  D7FE               	goto	u2967
  5541  001632  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5542  001634  D7FC               	goto	u2967
  5543  001636  2A2B               	incf	grabLeftIR@i,f,c
  5544  001638  D7DE               	goto	l2147
  5545  00163A                     l2157:
  5546                           
  5547                           ;IR_Reading.c: 99: }
  5548                           ;IR_Reading.c: 101: return IR_signal>>2;
  5549  00163A  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5550  00163E  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5551  001642  90D8               	bcf	status,0,c
  5552  001644  3227               	rrcf	??_grabLeftIR+1,f,c
  5553  001646  3226               	rrcf	??_grabLeftIR,f,c
  5554  001648  90D8               	bcf	status,0,c
  5555  00164A  3227               	rrcf	??_grabLeftIR+1,f,c
  5556  00164C  3226               	rrcf	??_grabLeftIR,f,c
  5557  00164E  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5558  001652  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5559  001656  0012               	return	
  5560  001658                     __end_of_grabLeftIR:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf1	equ	0xFE7
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function _SetLine *****************
  5582 ;; Defined at:
  5583 ;;		line 74 in file "LCD.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  line            1    wreg     unsigned char 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  line            1   41[COMRAM] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;		None               void
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5597 ;;      Params:         0       0       0       0
  5598 ;;      Locals:         1       0       0       0
  5599 ;;      Temps:          0       0       0       0
  5600 ;;      Totals:         1       0       0       0
  5601 ;;Total ram usage:        1 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    6
  5604 ;; This function calls:
  5605 ;;		_SendLCD
  5606 ;; This function is called by:
  5607 ;;		_ScanIR
  5608 ;;		_ScanWithRange
  5609 ;;		_main
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text25
  5614  0018A6                     __ptext25:
  5615                           	opt stack 0
  5616  0018A6                     _SetLine:
  5617                           	opt stack 24
  5618                           
  5619                           ;incstack = 0
  5620                           ;SetLine@line stored from wreg
  5621  0018A6  6E2A               	movwf	SetLine@line,c
  5622                           
  5623                           ;LCD.c: 75: if (line==1) {
  5624  0018A8  042A               	decf	SetLine@line,w,c
  5625  0018AA  A4D8               	btfss	status,2,c
  5626  0018AC  D006               	goto	l2165
  5627                           
  5628                           ;LCD.c: 76: SendLCD(0x80,0);
  5629  0018AE  0E00               	movlw	0
  5630  0018B0  6E28               	movwf	SendLCD@type,c
  5631  0018B2  0E80               	movlw	128
  5632  0018B4  EC6B  F00C         	call	_SendLCD
  5633                           
  5634                           ;LCD.c: 77: } else if (line==2) {
  5635  0018B8  D009               	goto	l2169
  5636  0018BA                     l2165:
  5637  0018BA  0E02               	movlw	2
  5638  0018BC  182A               	xorwf	SetLine@line,w,c
  5639  0018BE  A4D8               	btfss	status,2,c
  5640  0018C0  D005               	goto	l2169
  5641                           
  5642                           ;LCD.c: 78: SendLCD(0xC0,0);
  5643  0018C2  0E00               	movlw	0
  5644  0018C4  6E28               	movwf	SendLCD@type,c
  5645  0018C6  0EC0               	movlw	192
  5646  0018C8  EC6B  F00C         	call	_SendLCD
  5647  0018CC                     l2169:
  5648                           
  5649                           ;LCD.c: 79: }
  5650                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5651  0018CC  0E21               	movlw	33
  5652  0018CE                     u2977:
  5653  0018CE  2EE8               	decfsz	wreg,f,c
  5654  0018D0  D7FE               	goto	u2977
  5655  0018D2  F000               	nop	
  5656  0018D4  0012               	return		;funcret
  5657  0018D6                     __end_of_SetLine:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf1	equ	0xFE7
  5669                           fsr1h	equ	0xFE2
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _LCD_String *****************
  5679 ;; Defined at:
  5680 ;;		line 83 in file "LCD.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  string          2   41[COMRAM] PTR unsigned char 
  5683 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5684 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5685 ;;		 -> STR_1(12), 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5697 ;;      Params:         2       0       0       0
  5698 ;;      Locals:         0       0       0       0
  5699 ;;      Temps:          0       0       0       0
  5700 ;;      Totals:         2       0       0       0
  5701 ;;Total ram usage:        2 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    6
  5704 ;; This function calls:
  5705 ;;		_SendLCD
  5706 ;; This function is called by:
  5707 ;;		_ScanIR
  5708 ;;		_ScanWithRange
  5709 ;;		_main
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text26
  5714  001658                     __ptext26:
  5715                           	opt stack 0
  5716  001658                     _LCD_String:
  5717                           	opt stack 23
  5718                           
  5719                           ;LCD.c: 85: while(*string != 0){
  5720                           
  5721                           ;incstack = 0
  5722  001658  D01A               	goto	l2179
  5723  00165A                     l2173:
  5724                           
  5725                           ;LCD.c: 88: SendLCD(*string++,1);
  5726  00165A  0E01               	movlw	1
  5727  00165C  6E28               	movwf	SendLCD@type,c
  5728  00165E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5729  001662  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5730  001666  6AF8               	clrf	tblptru,c
  5731  001668  0E02               	movlw	(high __ramtop+-1)
  5732  00166A  64F7               	cpfsgt	tblptrh,c
  5733  00166C  D003               	bra	u1517
  5734  00166E  0008               	tblrd		*
  5735  001670  50F5               	movf	tablat,w,c
  5736  001672  D005               	bra	u1510
  5737  001674                     u1517:
  5738  001674  CFF6 FFE1          	movff	tblptrl,fsr1l
  5739  001678  CFF7 FFE2          	movff	tblptrh,fsr1h
  5740  00167C  50E7               	movf	indf1,w,c
  5741  00167E                     u1510:
  5742  00167E  EC6B  F00C         	call	_SendLCD
  5743  001682  4A2A               	infsnz	LCD_String@string,f,c
  5744  001684  2A2B               	incf	LCD_String@string+1,f,c
  5745                           
  5746                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5747  001686  0E21               	movlw	33
  5748  001688                     u2987:
  5749  001688  2EE8               	decfsz	wreg,f,c
  5750  00168A  D7FE               	goto	u2987
  5751  00168C  F000               	nop	
  5752  00168E                     l2179:
  5753  00168E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5754  001692  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5755  001696  6AF8               	clrf	tblptru,c
  5756  001698  0E02               	movlw	(high __ramtop+-1)
  5757  00169A  64F7               	cpfsgt	tblptrh,c
  5758  00169C  D003               	bra	u1527
  5759  00169E  0008               	tblrd		*
  5760  0016A0  50F5               	movf	tablat,w,c
  5761  0016A2  D005               	bra	u1520
  5762  0016A4                     u1527:
  5763  0016A4  CFF6 FFE1          	movff	tblptrl,fsr1l
  5764  0016A8  CFF7 FFE2          	movff	tblptrh,fsr1h
  5765  0016AC  50E7               	movf	indf1,w,c
  5766  0016AE                     u1520:
  5767  0016AE  0900               	iorlw	0
  5768  0016B0  B4D8               	btfsc	status,2,c
  5769  0016B2  0012               	return	
  5770  0016B4  D7D2               	goto	l2173
  5771  0016B6                     __end_of_LCD_String:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _SendLCD *****************
  5793 ;; Defined at:
  5794 ;;		line 27 in file "LCD.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  Byte            1    wreg     unsigned char 
  5797 ;;  type            1   39[COMRAM] unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  Byte            1   40[COMRAM] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;		None               void
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5809 ;;      Params:         1       0       0       0
  5810 ;;      Locals:         1       0       0       0
  5811 ;;      Temps:          0       0       0       0
  5812 ;;      Totals:         2       0       0       0
  5813 ;;Total ram usage:        2 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		_LCDout
  5818 ;; This function is called by:
  5819 ;;		_initLCD
  5820 ;;		_SetLine
  5821 ;;		_LCD_String
  5822 ;;		_ScanIR
  5823 ;;		_ScanWithRange
  5824 ;;		_main
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text27
  5829  0018D6                     __ptext27:
  5830                           	opt stack 0
  5831  0018D6                     _SendLCD:
  5832                           	opt stack 24
  5833                           
  5834                           ;incstack = 0
  5835                           ;SendLCD@Byte stored from wreg
  5836  0018D6  6E29               	movwf	SendLCD@Byte,c
  5837                           
  5838                           ;LCD.c: 30: LATAbits.LATA6=type;
  5839  0018D8  B028               	btfsc	SendLCD@type,0,c
  5840  0018DA  D002               	bra	u1305
  5841  0018DC  9C89               	bcf	3977,6,c	;volatile
  5842  0018DE  D001               	bra	u1306
  5843  0018E0                     u1305:
  5844  0018E0  8C89               	bsf	3977,6,c	;volatile
  5845  0018E2                     u1306:
  5846                           
  5847                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5848  0018E2  3829               	swapf	SendLCD@Byte,w,c
  5849  0018E4  0B0F               	andlw	15
  5850  0018E6  0B0F               	andlw	15
  5851  0018E8  ECE8  F008         	call	_LCDout
  5852                           
  5853                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5854  0018EC  0E06               	movlw	6
  5855  0018EE                     u2997:
  5856  0018EE  2EE8               	decfsz	wreg,f,c
  5857  0018F0  D7FE               	goto	u2997
  5858  0018F2  D000               	nop2		;nop
  5859                           
  5860                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5861  0018F4  5029               	movf	SendLCD@Byte,w,c
  5862  0018F6  0B0F               	andlw	15
  5863  0018F8  ECE8  F008         	call	_LCDout
  5864                           
  5865                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5866  0018FC  0E21               	movlw	33
  5867  0018FE                     u3007:
  5868  0018FE  2EE8               	decfsz	wreg,f,c
  5869  001900  D7FE               	goto	u3007
  5870  001902  F000               	nop	
  5871  001904  0012               	return		;funcret
  5872  001906                     __end_of_SendLCD:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           indf1	equ	0xFE7
  5884                           fsr1h	equ	0xFE2
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _LCDout *****************
  5894 ;; Defined at:
  5895 ;;		line 14 in file "LCD.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  number          1    wreg     unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  number          1   38[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5909 ;;      Params:         0       0       0       0
  5910 ;;      Locals:         1       0       0       0
  5911 ;;      Temps:          3       0       0       0
  5912 ;;      Totals:         4       0       0       0
  5913 ;;Total ram usage:        4 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    4
  5916 ;; This function calls:
  5917 ;;		_E_TOG
  5918 ;; This function is called by:
  5919 ;;		_SendLCD
  5920 ;;		_initLCD
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text28
  5925  0011D0                     __ptext28:
  5926                           	opt stack 0
  5927  0011D0                     _LCDout:
  5928                           	opt stack 24
  5929                           
  5930                           ;incstack = 0
  5931                           ;LCDout@number stored from wreg
  5932  0011D0  6E27               	movwf	LCDout@number,c
  5933                           
  5934                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5935  0011D2  5027               	movf	LCDout@number,w,c
  5936  0011D4  6E24               	movwf	??_LCDout& (0+255),c
  5937  0011D6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5938  0011D8  0E07               	movlw	7
  5939  0011DA                     u1195:
  5940  0011DA  90D8               	bcf	status,0,c
  5941  0011DC  3624               	rlcf	??_LCDout,f,c
  5942  0011DE  3625               	rlcf	??_LCDout+1,f,c
  5943  0011E0  2EE8               	decfsz	wreg,f,c
  5944  0011E2  D7FB               	goto	u1195
  5945  0011E4  0E07               	movlw	7
  5946  0011E6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5947  0011E8                     u1205:
  5948  0011E8  3425               	rlcf	??_LCDout+1,w,c
  5949  0011EA  3225               	rrcf	??_LCDout+1,f,c
  5950  0011EC  3224               	rrcf	??_LCDout,f,c
  5951  0011EE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5952  0011F0  D7FB               	goto	u1205
  5953  0011F2  4624               	rlncf	??_LCDout,f,c
  5954  0011F4  508B               	movf	3979,w,c	;volatile
  5955  0011F6  1824               	xorwf	??_LCDout,w,c
  5956  0011F8  0BFD               	andlw	-3
  5957  0011FA  1824               	xorwf	??_LCDout,w,c
  5958  0011FC  6E8B               	movwf	3979,c	;volatile
  5959                           
  5960                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5961  0011FE  5027               	movf	LCDout@number,w,c
  5962  001200  6E24               	movwf	??_LCDout& (0+255),c
  5963  001202  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5964  001204  0E06               	movlw	6
  5965  001206                     u1215:
  5966  001206  90D8               	bcf	status,0,c
  5967  001208  3624               	rlcf	??_LCDout,f,c
  5968  00120A  3625               	rlcf	??_LCDout+1,f,c
  5969  00120C  2EE8               	decfsz	wreg,f,c
  5970  00120E  D7FB               	goto	u1215
  5971  001210  0E07               	movlw	7
  5972  001212  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5973  001214                     u1225:
  5974  001214  3425               	rlcf	??_LCDout+1,w,c
  5975  001216  3225               	rrcf	??_LCDout+1,f,c
  5976  001218  3224               	rrcf	??_LCDout,f,c
  5977  00121A  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5978  00121C  D7FB               	goto	u1225
  5979  00121E  4624               	rlncf	??_LCDout,f,c
  5980  001220  4624               	rlncf	??_LCDout,f,c
  5981  001222  508B               	movf	3979,w,c	;volatile
  5982  001224  1824               	xorwf	??_LCDout,w,c
  5983  001226  0BFB               	andlw	-5
  5984  001228  1824               	xorwf	??_LCDout,w,c
  5985  00122A  6E8B               	movwf	3979,c	;volatile
  5986                           
  5987                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5988  00122C  5027               	movf	LCDout@number,w,c
  5989  00122E  6E24               	movwf	??_LCDout& (0+255),c
  5990  001230  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5991  001232  0E05               	movlw	5
  5992  001234                     u1235:
  5993  001234  90D8               	bcf	status,0,c
  5994  001236  3624               	rlcf	??_LCDout,f,c
  5995  001238  3625               	rlcf	??_LCDout+1,f,c
  5996  00123A  2EE8               	decfsz	wreg,f,c
  5997  00123C  D7FB               	goto	u1235
  5998  00123E  0E07               	movlw	7
  5999  001240  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6000  001242                     u1245:
  6001  001242  3425               	rlcf	??_LCDout+1,w,c
  6002  001244  3225               	rrcf	??_LCDout+1,f,c
  6003  001246  3224               	rrcf	??_LCDout,f,c
  6004  001248  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6005  00124A  D7FB               	goto	u1245
  6006  00124C  508C               	movf	3980,w,c	;volatile
  6007  00124E  1824               	xorwf	??_LCDout,w,c
  6008  001250  0BFE               	andlw	-2
  6009  001252  1824               	xorwf	??_LCDout,w,c
  6010  001254  6E8C               	movwf	3980,c	;volatile
  6011                           
  6012                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6013  001256  5027               	movf	LCDout@number,w,c
  6014  001258  6E24               	movwf	??_LCDout& (0+255),c
  6015  00125A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6016  00125C  3A24               	swapf	??_LCDout,f,c
  6017  00125E  3A25               	swapf	??_LCDout+1,f,c
  6018  001260  0EF0               	movlw	240
  6019  001262  1625               	andwf	??_LCDout+1,f,c
  6020  001264  5024               	movf	??_LCDout,w,c
  6021  001266  0B0F               	andlw	15
  6022  001268  1225               	iorwf	??_LCDout+1,f,c
  6023  00126A  0EF0               	movlw	240
  6024  00126C  1624               	andwf	??_LCDout,f,c
  6025  00126E  0E07               	movlw	7
  6026  001270  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6027  001272                     u1255:
  6028  001272  3425               	rlcf	??_LCDout+1,w,c
  6029  001274  3225               	rrcf	??_LCDout+1,f,c
  6030  001276  3224               	rrcf	??_LCDout,f,c
  6031  001278  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6032  00127A  D7FB               	goto	u1255
  6033  00127C  4624               	rlncf	??_LCDout,f,c
  6034  00127E  508C               	movf	3980,w,c	;volatile
  6035  001280  1824               	xorwf	??_LCDout,w,c
  6036  001282  0BFD               	andlw	-3
  6037  001284  1824               	xorwf	??_LCDout,w,c
  6038  001286  6E8C               	movwf	3980,c	;volatile
  6039                           
  6040                           ;LCD.c: 21: E_TOG();
  6041  001288  ECF5  F00C         	call	_E_TOG	;wreg free
  6042                           
  6043                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6044  00128C  0E03               	movlw	3
  6045  00128E                     u3017:
  6046  00128E  2EE8               	decfsz	wreg,f,c
  6047  001290  D7FE               	goto	u3017
  6048  001292  F000               	nop	
  6049  001294  0012               	return		;funcret
  6050  001296                     __end_of_LCDout:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           intcon	equ	0xFF2
  6059                           postinc0	equ	0xFEE
  6060                           wreg	equ	0xFE8
  6061                           indf1	equ	0xFE7
  6062                           fsr1h	equ	0xFE2
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _E_TOG *****************
  6072 ;; Defined at:
  6073 ;;		line 5 in file "LCD.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;		None               void
  6080 ;; Registers used:
  6081 ;;		wreg
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6087 ;;      Params:         0       0       0       0
  6088 ;;      Locals:         0       0       0       0
  6089 ;;      Temps:          0       0       0       0
  6090 ;;      Totals:         0       0       0       0
  6091 ;;Total ram usage:        0 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    3
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_LCDout
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           	psect	text29
  6102  0019EA                     __ptext29:
  6103                           	opt stack 0
  6104  0019EA                     _E_TOG:
  6105                           	opt stack 24
  6106                           
  6107                           ;LCD.c: 8: LATCbits.LATC0=1;
  6108                           
  6109                           ;incstack = 0
  6110  0019EA  808B               	bsf	3979,0,c	;volatile
  6111                           
  6112                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6113  0019EC  0E03               	movlw	3
  6114  0019EE                     u3027:
  6115  0019EE  2EE8               	decfsz	wreg,f,c
  6116  0019F0  D7FE               	goto	u3027
  6117  0019F2  F000               	nop	
  6118                           
  6119                           ;LCD.c: 10: LATCbits.LATC0=0;
  6120  0019F4  908B               	bcf	3979,0,c	;volatile
  6121  0019F6  0012               	return		;funcret
  6122  0019F8                     __end_of_E_TOG:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           indf1	equ	0xFE7
  6134                           fsr1h	equ	0xFE2
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           postdec2	equ	0xFDD
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143 ;; *************** function _InterruptHandlerLow *****************
  6144 ;; Defined at:
  6145 ;;		line 18 in file "main.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;		None
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6159 ;;      Params:         0       0       0       0
  6160 ;;      Locals:         0       0       0       0
  6161 ;;      Temps:         17       0       0       0
  6162 ;;      Totals:        17       0       0       0
  6163 ;;Total ram usage:       17 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    2
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		Interrupt level 1
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	intcodelo
  6174  000018                     __pintcodelo:
  6175                           	opt stack 0
  6176  000018                     _InterruptHandlerLow:
  6177                           	opt stack 23
  6178                           
  6179                           ;incstack = 0
  6180  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6181  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6182  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6183  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6184  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6185  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6186  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6187  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6188  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6189  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6190  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6191  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6192  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6193  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6194  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6195  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6196  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6197  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6198                           
  6199                           ;main.c: 20: if (PIR1bits.RCIF) {
  6200  00005E  AA9E               	btfss	3998,5,c	;volatile
  6201  000060  D016               	goto	i1l367
  6202                           
  6203                           ;main.c: 21: ReceivedString[i]=RCREG;
  6204  000062  503A               	movf	_i,w,c	;volatile
  6205  000064  0D01               	mullw	1
  6206  000066  0EC6               	movlw	low _ReceivedString
  6207  000068  24F3               	addwf	prodl,w,c
  6208  00006A  6ED9               	movwf	fsr2l,c
  6209  00006C  0E00               	movlw	high _ReceivedString
  6210  00006E  20F4               	addwfc	prodh,w,c
  6211  000070  6EDA               	movwf	fsr2h,c
  6212  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6213                           
  6214                           ;main.c: 22: RFID_Read=1;
  6215  000076  0E01               	movlw	1
  6216  000078  0101               	movlb	1	; () banked
  6217  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6218                           
  6219                           ; BSR set to: 1
  6220                           ;main.c: 23: if (i==15){
  6221  00007C  0E0F               	movlw	15
  6222  00007E  183A               	xorwf	_i,w,c	;volatile
  6223  000080  A4D8               	btfss	status,2,c
  6224  000082  D003               	goto	i1l2587
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;main.c: 24: i=0;
  6228  000084  0E00               	movlw	0
  6229  000086  6E3A               	movwf	_i,c	;volatile
  6230                           
  6231                           ;main.c: 25: }else{
  6232  000088  D001               	goto	i1l2589
  6233  00008A                     i1l2587:
  6234                           
  6235                           ; BSR set to: 1
  6236                           ;main.c: 26: i++;
  6237  00008A  2A3A               	incf	_i,f,c	;volatile
  6238  00008C                     i1l2589:
  6239                           
  6240                           ; BSR set to: 1
  6241                           ;main.c: 27: }
  6242                           ;main.c: 28: PIR1bits.RCIF=0;
  6243  00008C  9A9E               	bcf	3998,5,c	;volatile
  6244  00008E                     i1l367:
  6245  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6246  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6247  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6248  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6249  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6250  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6251  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6252  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6253  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6254  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6255  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6256  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6257  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6258  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6259  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6260  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6261  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6262  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6263  0000D4  0010               	retfie	
  6264  0000D6                     __end_of_InterruptHandlerLow:
  6265                           	opt stack 0
  6266                           pclatu	equ	0xFFB
  6267                           pclath	equ	0xFFA
  6268                           tblptru	equ	0xFF8
  6269                           tblptrh	equ	0xFF7
  6270                           tblptrl	equ	0xFF6
  6271                           tablat	equ	0xFF5
  6272                           prodh	equ	0xFF4
  6273                           prodl	equ	0xFF3
  6274                           intcon	equ	0xFF2
  6275                           postinc0	equ	0xFEE
  6276                           fsr0h	equ	0xFEA
  6277                           fsr0l	equ	0xFE9
  6278                           wreg	equ	0xFE8
  6279                           indf1	equ	0xFE7
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           bsr	equ	0xFE0
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _InterruptHandlerHigh *****************
  6291 ;; Defined at:
  6292 ;;		line 34 in file "main.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;		None
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;		None               void
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6306 ;;      Params:         0       0       0       0
  6307 ;;      Locals:         0       0       0       0
  6308 ;;      Temps:         14       0       0       0
  6309 ;;      Totals:        14       0       0       0
  6310 ;;Total ram usage:       14 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    1
  6313 ;; This function calls:
  6314 ;;		i2_delay_tenth_s
  6315 ;; This function is called by:
  6316 ;;		Interrupt level 2
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	intcode
  6321  000008                     __pintcode:
  6322                           	opt stack 0
  6323  000008                     _InterruptHandlerHigh:
  6324                           	opt stack 23
  6325                           
  6326                           ;incstack = 0
  6327  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6328  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6329  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6330  000012  EFF3  F009         	goto	int_func
  6331                           pclatu	equ	0xFFB
  6332                           pclath	equ	0xFFA
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           indf1	equ	0xFE7
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           bsr	equ	0xFE0
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355                           	psect	intcode_body
  6356  0013E6                     __pintcode_body:
  6357                           	opt stack 23
  6358  0013E6                     int_func:
  6359                           	opt stack 23
  6360  0013E6  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6361  0013EA  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6362  0013EE  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6363  0013F2  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6364  0013F6  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6365  0013FA  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6366  0013FE  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6367  001402  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6368  001406  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6369  00140A  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6370  00140E  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6371  001412  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6372                           
  6373                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6374  001416  A2F2               	btfss	intcon,1,c	;volatile
  6375  001418  D00D               	goto	i2l375
  6376                           
  6377                           ;main.c: 36: if (mode==-1) {
  6378  00141A  283B               	incf	_mode,w,c	;volatile
  6379  00141C  A4D8               	btfss	status,2,c
  6380  00141E  D003               	goto	i2l2597
  6381                           
  6382                           ;main.c: 38: mode=1;
  6383  001420  0E01               	movlw	1
  6384  001422  6E3B               	movwf	_mode,c	;volatile
  6385                           
  6386                           ;main.c: 39: } else if (mode==0) {
  6387  001424  D003               	goto	i2l2601
  6388  001426                     i2l2597:
  6389  001426  503B               	movf	_mode,w,c	;volatile
  6390  001428  A4D8               	btfss	status,2,c
  6391                           
  6392                           ;main.c: 43: mode=-1;
  6393                           
  6394                           ;main.c: 41: } else {
  6395  00142A  683B               	setf	_mode,c	;volatile
  6396  00142C                     i2l2601:
  6397                           
  6398                           ;main.c: 44: }
  6399                           ;main.c: 46: delay_tenth_s(2);
  6400  00142C  0E02               	movlw	2
  6401  00142E  EC1E  F00C         	call	i2_delay_tenth_s
  6402                           
  6403                           ;main.c: 47: INTCONbits.INT0IF=0;
  6404  001432  92F2               	bcf	intcon,1,c	;volatile
  6405  001434                     i2l375:
  6406  001434  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6407  001438  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6408  00143C  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6409  001440  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6410  001444  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6411  001448  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6412  00144C  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6413  001450  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6414  001454  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6415  001458  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6416  00145C  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6417  001460  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6418  001464  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6419  001468  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6420  00146C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6421  00146E  0011               	retfie		f
  6422  001470                     __end_of_InterruptHandlerHigh:
  6423                           	opt stack 0
  6424                           pclatu	equ	0xFFB
  6425                           pclath	equ	0xFFA
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           fsr0h	equ	0xFEA
  6435                           fsr0l	equ	0xFE9
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           bsr	equ	0xFE0
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function i2_delay_tenth_s *****************
  6449 ;; Defined at:
  6450 ;;		line 32 in file "Movement.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  tenth_second    1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6455 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;		None               void
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6465 ;;      Params:         0       0       0       0
  6466 ;;      Locals:         3       0       0       0
  6467 ;;      Temps:          1       0       0       0
  6468 ;;      Totals:         4       0       0       0
  6469 ;;Total ram usage:        4 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_InterruptHandlerHigh
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text32
  6479  00183C                     __ptext32:
  6480                           	opt stack 0
  6481  00183C                     i2_delay_tenth_s:
  6482                           	opt stack 23
  6483                           
  6484                           ;incstack = 0
  6485                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6486  00183C  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6487                           
  6488                           ;Movement.c: 33: unsigned int i=0;
  6489  00183E  0E00               	movlw	0
  6490  001840  6E04               	movwf	i2delay_tenth_s@i+1,c
  6491  001842  0E00               	movlw	0
  6492  001844  6E03               	movwf	i2delay_tenth_s@i,c
  6493                           
  6494                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6495  001846  0E00               	movlw	0
  6496  001848  6E04               	movwf	i2delay_tenth_s@i+1,c
  6497  00184A  0E01               	movlw	1
  6498  00184C  6E03               	movwf	i2delay_tenth_s@i,c
  6499  00184E  D009               	goto	i2l2559
  6500  001850                     i2l2555:
  6501                           
  6502                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6503  001850  0E82               	movlw	130
  6504  001852  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6505  001854  0EDE               	movlw	222
  6506  001856                     i2u303_47:
  6507  001856  2EE8               	decfsz	wreg,f,c
  6508  001858  D7FE               	goto	i2u303_47
  6509  00185A  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6510  00185C  D7FC               	goto	i2u303_47
  6511  00185E  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6512  001860  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6513  001862                     i2l2559:
  6514  001862  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6515  001864  0D02               	mullw	2
  6516  001866  5003               	movf	i2delay_tenth_s@i,w,c
  6517  001868  5CF3               	subwf	prodl,w,c
  6518  00186A  5004               	movf	i2delay_tenth_s@i+1,w,c
  6519  00186C  58F4               	subwfb	prodh,w,c
  6520  00186E  A0D8               	btfss	status,0,c
  6521  001870  0012               	return	
  6522  001872  D7EE               	goto	i2l2555
  6523  001874                     __end_ofi2_delay_tenth_s:
  6524                           	opt stack 0
  6525                           pclatu	equ	0xFFB
  6526                           pclath	equ	0xFFA
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           postinc0	equ	0xFEE
  6535                           fsr0h	equ	0xFEA
  6536                           fsr0l	equ	0xFE9
  6537                           wreg	equ	0xFE8
  6538                           indf1	equ	0xFE7
  6539                           fsr1h	equ	0xFE2
  6540                           fsr1l	equ	0xFE1
  6541                           bsr	equ	0xFE0
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           pclatu	equ	0xFFB
  6549                           pclath	equ	0xFFA
  6550                           tblptru	equ	0xFF8
  6551                           tblptrh	equ	0xFF7
  6552                           tblptrl	equ	0xFF6
  6553                           tablat	equ	0xFF5
  6554                           prodh	equ	0xFF4
  6555                           prodl	equ	0xFF3
  6556                           intcon	equ	0xFF2
  6557                           postinc0	equ	0xFEE
  6558                           fsr0h	equ	0xFEA
  6559                           fsr0l	equ	0xFE9
  6560                           wreg	equ	0xFE8
  6561                           indf1	equ	0xFE7
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           bsr	equ	0xFE0
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572                           	psect	rparam
  6573  0000                     pclatu	equ	0xFFB
  6574                           pclath	equ	0xFFA
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           postinc0	equ	0xFEE
  6583                           fsr0h	equ	0xFEA
  6584                           fsr0l	equ	0xFE9
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           bsr	equ	0xFE0
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597                           	psect	temp
  6598  00003C                     btemp:
  6599                           	opt stack 0
  6600  00003C                     	ds	1
  6601  0000                     int$flags	set	btemp
  6602                           pclatu	equ	0xFFB
  6603                           pclath	equ	0xFFA
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           intcon	equ	0xFF2
  6611                           postinc0	equ	0xFEE
  6612                           fsr0h	equ	0xFEA
  6613                           fsr0l	equ	0xFE9
  6614                           wreg	equ	0xFE8
  6615                           indf1	equ	0xFE7
  6616                           fsr1h	equ	0xFE2
  6617                           fsr1l	equ	0xFE1
  6618                           bsr	equ	0xFE0
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    109     133
    BANK1           256    250     255
    BANK2           239    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _main->_VerifySignal
    _initLCD->_SendLCD
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (0) _main                                               378   378      0   63565
                                             99 BANK0     10    10      0
=======
 (0) _main                                               378   378      0   56429
                                             84 BANK0     10    10      0
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4381
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     582
                                             43 COMRAM     6     4      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _ScanWithRange                                       71    61     10   23934
                                             28 BANK0     71    61     10
=======
 (1) _ScanWithRange                                       71    61     10   21560
                                             13 BANK0     71    61     10
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4651
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4651
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3956
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   13591
                                             28 BANK0     57    47     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3984
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF     76      76       9       49.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      85       4       83.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22D       5        0.0%
DATA                 0      0     22D      11        0.0%
CODE                 0      0       0       0        0.0%


<<<<<<< HEAD
Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 21:36:47 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l34 0DF2  
                                  l35 0E1C                                    l51 12F6  
                                  l52 12A6                                    l53 12BE  
                                  l54 12D6                                    l65 1414  
                                  l66 13BE                                    l67 13DA  
                                  l68 13F4                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01F0                           ?_LCD_String 0060  
                                 l110 14C8                                   l105 1452  
                                 l115 1816                                   l212 1050  
                                 l204 16F6                                   l220 0874  
                                 l205 16E4                                   l222 0940  
                                 l231 0A40                                   l232 0A52  
                                 l224 0966                                   l153 155C  
                                 l401 05AA                                   l154 1526  
                                 l226 0A26                                   l410 0668  
                                 l147 1758                                   l219 0A58  
                                 l227 09B4                                   l403 05E2  
                                 l228 099C                                   l412 06A6  
                                 l149 176C                                   l406 0604  
                                 l431 0AA6                                   l407 0716  
                                 l440 0B06                                   l432 0AC0  
                                 l416 0770                                   l409 06C4  
                                 l442 0B64                                   l434 0AD6  
                                 l435 0ACE                                   l453 0C00  
                                 l277 0EDA                                   l454 0C24  
                                 l455 0C2C                                   l447 0B8C  
                                 l279 0F70                                   l800 1886  
                                 l456 0C6C                                   l465 0CAE  
                                 l457 0C4C                                   l449 0BB6  
                                 l641 137A                                   l393 03DA  
                                 l466 0D0A                                   l642 1372  
                                 l394 047E                                   l467 0CB4  
                                 l645 139A                                   l397 04B4  
                                 l389 03D4                                   l646 13A4  
                                 l638 134C                                   l398 04FE  
                                 l647 13B2                                   l639 135C  
                                 l399 0568                                   l880 159C  
                                 l890 15E8                                   l883 15C4  
                                 l884 15CE                                   l893 1608  
                                 l894 1612                                   l879 15A4  
                                 l889 15F0                           grabLeftIR@i 0062  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 0100                          __CFG_LVP$OFF 000000  
                        main@MoveType 0200                                  l3015 0BBA  
                                l3443 0660                                  l3269 0ED2  
                                l3429 05EE                                  l3455 069E  
                                l2921 144A                                  l3289 0F70  
                                l3485 076C                                  l3495 07AE  
                                l2937 14C0                                  l3497 07B0  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1140 137E                                  u3000 06BE  
                                u2205 0E68                                  _LATB 000F8A  
                                u2215 1072                                  u2225 1080  
                                u3017 042A                                  u2235 109E  
                                u3107 11C2                                  u3027 0442  
                                u2420 1490                                  u2340 15A8  
                                u2245 10AC                                  u2325 17B2  
                                u3117 11D8                                  u3037 1142  
                                u2326 17B4                                  u1390 15F4  
                                u2255 10CC                                  u3207 1482  
                                u2415 145A                                  u3127 11EA  
                                u3047 1158                                  u2184 0DB4  
                                u2265 10DA                                  u3217 14F8  
                                u2185 0DB0                                  u3137 08A8  
                                u3057 116A                                  u2450 1506  
                                u2194 0E0E                                  u2275 110A  
                                u3227 176E                                  u2195 0E0A  
                                u3147 08C0                                  u3067 1178  
                                u3237 1556                                  u2445 14D0  
                                u3157 140E                                  u3077 1186  
                                u3247 17C0                                  u3167 16EA  
                                u3087 1198                                  u2480 154A  
                                u3257 17D0                                  u3177 0FC2  
                                u3097 11AA                                  u2490 157C  
                                u2650 0C74                                  u2570 0BE6  
                                u3267 1126                                  u3187 0FDA  
                                u2660 0C92                                  u2820 0F2A  
                                u3277 18C0                                  u3197 12F0  
                                u2487 1540                                  u1775 1812  
                                u2680 0D12                                  u1776 1814  
                                u2497 1572                                  u2690 0D2C  
                                u2930 0630                                  u1795 1824  
                                u1796 1826                                  u2940 0640  
                                u2932 0632                                  u2942 0642  
                                u2980 069A                            ScanIR@Move 0080  
                                _main 0350                                  _mode 0032  
                       main@ScanAngle 00C5                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0034  
                                _stop 12A4                   fullSpeedAhead@power 0075  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00F6                          ___param_bank 000000  
                     i2_delay_tenth_s 1708                       __end_of_SendLCD 17D8  
                     __end_of_SetLine 1776                    ScanWithRange@F3555 00CD  
                         ScanIR@F3544 00D1                                 ?_main 0001  
                     __end_of___awdiv 13BC                                 ?_stop 0071  
                     ___awdiv@divisor 0062                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0062                       __end_of___lwdiv 15D8  
                     __end_of___lwmod 161C                                 i1l370 009C  
                               i2l204 172E                                 i2l205 171C  
                               i1l368 009E                                 i1l369 009A  
                               i2l380 1250                                 i2l376 1258  
                               i2l377 124A                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 18BC  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 11F2  
                  ScanWithRange@power 00B9                       __end_of_dpowers 030B  
                     __end_of_isdigit 188E                                 main@i 00CC  
                               pclath 000FFA                                 tablat 000FF5  
                               status 000FD8                                 wtemp6 0035  
                 __size_of_LCD_String 0060                       __end_of_sprintf 0D3A  
              __size_of_ScanWithRange 02C8                        __CFG_MCLRE$OFF 000000  
                     __initialization 17D8                          __end_of_main 07D2  
                        __end_of_stop 1336                        delay_tenth_s@i 002E  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 0060  
        ScanIR@DirectionMoveThreshold 00AF                  __end_of_enableSensor 1828  
                 VerifySignal@hexByte 002E                                ??_main 00C3  
                              ??_stop 0032                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1708                                _LCDout 1068  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 1740  
                         SendLCD@type 0030                             ??_SendLCD 0031  
                              _ScanIR 0F74                             ??_SetLine 0032  
                              ___wmul 1828                             ??___awdiv 0032  
                    __end_of_initRFID 18AA                             ??___lwdiv 0030  
                           ??___lwmod 0030                                _initIR 184E  
                __size_of_grabRightIR 0076                                clear_0 17EA  
                    ___awdiv@quotient 0066                                main@mL 0264  
                              main@mR 026D                        ??_initMotorPWM 002C  
                           ??_initLCD 0060                         _ScanWithRange 07D2  
                           ??_isdigit 002C          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0071                                stop@mR 0073  
                           ??_sprintf 006F       ScanWithRange@TimeAboveThreshold 00BA  
                    __end_of_turnLeft 16D0                       fullSpeedBack@mL 0077  
                     fullSpeedBack@mR 0079                            __accesstop 0060  
             __end_of__initialization 17F4                         ___rparam_used 000001  
                         SetLine@line 0060                         __end_of_E_TOG 18CA  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 161C  
                        ??_LCD_String 0032                        ?_ScanWithRange 007C  
                VerifySignal@checksum 0030                               ??_E_TOG 002C  
       __size_of_InterruptHandlerHigh 129C           __end_of_InterruptHandlerLow 00F6  
          delay_tenth_s@tenth_seconds 002D                          sprintf@width 0079  
                          __pbssBANK0 00CD                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 1584  
                             ?_ScanIR 007C                        ?_fullSpeedBack 0077  
               __size_of_enableSensor 0026                               ?___wmul 002C  
                 grabLeftIR@IR_signal 0060                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 007C                            _grabLeftIR 14AE  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013E  
                     __size_of_LCDout 00C6                          _enableSensor 1802  
                  __size_of_turnRight 003C                  __end_of_initMotorPWM 17A8  
              ScanWithRange@RFID_Read 0084                               _SendLCD 17A8  
                             __Hparam 0000                               _SetLine 1740  
                             __Lparam 0000                       __size_of_ScanIR 00F4  
                             ___awdiv 1336                       __size_of___wmul 0026  
                             ___lwdiv 1584                               ___lwmod 15D8  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 17D8                       ??_ScanWithRange 0086  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 18AA  
                             __ptext2 188E                               __ptext3 1776  
                             __ptext4 112E                               __ptext5 184E  
                             __ptext6 161C                               __ptext7 1802  
                             __ptext8 0E78                               __ptext9 07D2  
                           _T0CONbits 000FD5                               _initLCD 112E  
                   __end_of_initTimer 18BC                               _dpowers 0301  
                             _isdigit 1870                          LCDout@number 002F  
                       ?_VerifySignal 002C                               main@buf 01C8  
                             _sprintf 0A9A                        __pintcode_body 11F2  
                end_of_initialization 17F4                        ScanWithRange@i 00B5  
                      ScanWithRange@n 00B3                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                         __Lmediumconst 0000  
                             int_func 11F2                    ScanIR@SensorResult 00B1  
                     ??_fullSpeedBack 0032                             _RFID_Read 01FE  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 0032                     __end_of_turnRight 1694  
                         ?_grabLeftIR 002C                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0060                      fullSpeedAhead@mL 0071  
                    fullSpeedAhead@mR 0073                ScanWithRange@RightFlag 00C1  
                      __end_of_LCDout 112E                             _TXSTAbits 000FAC  
                           ScanIR@buf 0087            ScanWithRange@MoveTimeEntry 0082  
                       ??_grabRightIR 002E                        __end_of_ScanIR 1068  
                      _fullSpeedAhead 13BC                        _ReceivedString 00D5  
                      __end_of___wmul 184E                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1870                __size_of_delay_tenth_s 0038  
                 start_initialization 17D8                    VerifySignal@Signal 002C  
               __size_of_initMotorPWM 0032                              ??_LCDout 002C  
        __end_of_InterruptHandlerHigh 12A4                              ??_ScanIR 0086  
              __end_of_fullSpeedAhead 1438                   __size_of_grabLeftIR 0076  
                            ??___wmul 0030                              ??_initIR 002C  
                 __end_of_grabRightIR 14AE                          _initMotorPWM 1776  
                         __pbssCOMRAM 0032                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1692 002D          __size_of_InterruptHandlerLow 00DE  
                       _delay_tenth_s 16D0                           sprintf@flag 0078  
                         sprintf@prec 0075                     __size_of_initRFID 001C  
                            ?_SendLCD 0030                              ?_SetLine 0001  
                    ___lwdiv@dividend 002C                       ?_fullSpeedAhead 0071  
                           __pintcode 0008                  __end_of_VerifySignal 0F74  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 00C6                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003C                         ??_setMotorPWM 006A  
                           _initTimer 18AA                      ___lwdiv@quotient 0061  
                            ?_sprintf 0067                        ?_delay_tenth_s 0001  
                      ___wmul@product 0030                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0077  
                         turnRight@mR 0079                              i2u328_47 1722  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3558 01FA                           _grabRightIR 1438  
               ScanWithRange@LeftFlag 00BF                  grabRightIR@IR_signal 0060  
           ScanWithRange@milliseconds 0080                     ___wmul@multiplier 002C  
               __end_of_ScanWithRange 0A9A                          setMotorPWM@m 0068  
                _InterruptHandlerHigh 0008                              ScanIR@mL 007C  
                            ScanIR@mR 007E                          ??_grabLeftIR 002E  
                          ?_initTimer 0001                             _turnRight 1658  
                      ScanIR@MoveTime 0082                        ScanIR@MoveType 0084  
                    ScanWithRange@buf 008B                   __end_of_setMotorPWM 0E78  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1658  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 1524  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0076                      __size_of_initLCD 00C4  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 002E  
                     ___lwdiv@counter 0060                            ?_turnRight 0077  
                            __ptext10 1658                              __ptext11 1694  
                            __ptext20 1828                              __ptext12 13BC  
                            __ptext21 15D8                              __ptext13 16D0  
                            __ptext22 1584                              __ptext14 0F74  
                            __ptext23 1438                              __ptext15 12A4  
                            __ptext32 1708                              __ptext24 14AE  
                            __ptext16 0D3A                              __ptext25 1740  
                            __ptext17 1336                              __ptext26 1524  
                            __ptext18 0A9A                              __ptext27 17A8  
                            __ptext19 1870                              __ptext28 1068  
                            __ptext29 18BC                       ??_delay_tenth_s 002C  
                    __size_of_sprintf 02A0                              _initRFID 188E  
           ScanWithRange@SensorResult 00BB                        turnRight@power 007B  
                       __size_of_main 0482                    main@DirectionFound 00CA  
                       turnLeft@power 007B                         __size_of_stop 0092  
                          turnLeft@mL 0077                            turnLeft@mR 0079  
               __size_of_VerifySignal 00FC                              int$flags 0034  
                            main@Move 00CB                   _InterruptHandlerLow 0018  
                          _LCD_String 1524                              _turnLeft 1694  
                     ScanWithRange@mL 007C                       ScanWithRange@mR 007E  
                  enableSensor@sensor 002D                    enableSensor@status 002C  
                       VerifySignal@i 0031                            _INTCONbits 000FF2  
                         ??_initTimer 002C                              isdigit@c 002E  
                         _setMotorPWM 0D3A                          _VerifySignal 0E78  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0073                             sprintf@sp 0067  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 002C  
                    ___lwmod@dividend 0063                      ??_fullSpeedAhead 0076  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00B7  
              ??_InterruptHandlerHigh 0005                              sprintf@c 007B  
                            sprintf@f 0069                       ___lwmod@divisor 0065  
                     ___lwmod@counter 0030                           ??_turnRight 0032  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 002D  
                    i2delay_tenth_s@i 0003  
=======
Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 22:13:49 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F7E  
                                  l65 154E                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A04                                   l222 0A34  
                                 l224 0B20                                   l380 03F8  
                                 l870 16FE                                   l880 1740  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3001 0E12                                  l2131 1584  
                                l3003 0E18                                  l3011 0E7A  
                                l2141 15C8                                  l3013 0E94  
                                l2151 15FE                                  l2135 158C  
                                l2071 16D8                                  l2057 19B4  
                                l3009 0E6E                                  l2147 15F6  
                                l2067 16CC                                  l2091 1722  
                                l3131 0B1C                                  l3123 0A78  
                                l3211 03FE                                  l2173 165A  
                                l2165 18BA                                  l2157 163A  
                                l2069 16D4                                  l3125 0A90  
                                l2079 16F4                                  l2095 1736  
                                l2087 1716                                  l2183 1818  
                                l3143 0B38                                  l3151 0B50  
                                l3303 066E                                  l2169 18CC  
                                l2089 171E                                  l3057 11B8  
                                l2329 1944                                  l3313 06D6  
                                l2179 168E                                  l2187 182A  
                                l3083 0936                                  l3323 0720  
                                l3149 0B4A                                  l2541 108C  
                                l2533 103C                                  l3325 0726  
                                l3317 06E0                                  l3245 04A4  
                                l3335 074C                                  l2529 1034  
                                l3329 0730                                  l3337 0752  
                                l3345 07BA                                  l3249 04D6  
                                l2811 1484                                  l3355 081C  
                                l3291 05FC                                  l2549 10D2  
                                l3365 0862                                  l3357 0822  
                                l3285 05A2                                  l3269 0528  
                                l2911 0BC6                                  l2823 14AA  
                                l3295 064A                                  l2913 0BD8  
                                l2905 0BAA                                  l2825 14B2  
                                l2817 1494                                  l3369 0864  
                                l2923 0C10                                  l2843 14EA  
                                l2835 14D2                                  l2827 14B6  
                                l3299 0658                                  l2933 0C82  
                                l2917 0BE0                                  l2853 0F56  
                                l2861 1512                                  l2935 0CAA  
                                l2839 14DC                                  l2945 0CDA  
                                l2865 152E                                  l2857 14F6  
                                l2971 0D7A                                  l2947 0CE0  
                                l2883 1384                                  l2875 1354  
                                l2965 0D38                                  l2959 0D16  
                                l2879 136C                                  l2969 0D70  
                                l2889 13A4                                  l2995 0DF4  
                                l2979 0D9E                                  l2987 0DC4  
                                l2989 0DD0                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 11E8  
                                u1215 1206                                  u1225 1214  
                                u1305 18E0                                  u1306 18E2  
                                u1235 1234                                  u2204 0F16  
                                u1245 1242                                  u2205 0F12  
                                u1510 167E                                  u2214 0F72  
                                _LATB 000F8A                                  u1255 1272  
                                u3007 18FE                                  u2215 0F6E  
                                u1520 16AE                                  u3017 128E  
                                u2225 0FCC                                  u3027 19EE  
                                u1195 11DA                                  u1517 1674  
                                u1445 1594                                  u1527 16A4  
                                u1475 1606                                  u1755 1940  
                                u1756 1942                                  u1775 1952  
                                u2807 12CE                                  u1776 1954  
                                u2680 06A0                                  u2817 12DC  
                                u2690 06B4                                  u2682 06A2  
                                u2907 1548                                  u2827 12EA  
                                u2692 06B6                                  u2917 181E  
                                u2837 12FC                                  u2927 1124  
                                u2847 130E                                  u2767 0454  
                                u2937 113A                                  u2857 1324  
                                u2777 046C                                  u2947 139E  
                                u2867 1338                                  u2787 12A8  
                                u2957 15BC                                  u2877 134A  
                                u2797 12BE                                  u2967 162E  
                                u2887 096A                                  u2977 18CE  
                                u2897 0982                                  u2987 1688  
                                u2997 18EE                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B6                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1352                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 183C  
                     __end_of_SendLCD 1906                       __end_of_SetLine 18D6  
                  ScanWithRange@F3894 00C2                           ScanIR@F3883 00BE  
                               ?_main 0001                       __end_of___awdiv 14F4  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1708                       __end_of___lwmod 174A  
                               i1l367 008E                                 i2l375 1434  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 19EA                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1352                    ScanWithRange@power 00AA  
                     __end_of_dpowers 030B                       __end_of_isdigit 19BC  
                               main@i 00BD                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0EA2                __size_of_ScanWithRange 0316  
                      __CFG_MCLRE$OFF 000000                       __initialization 1906  
                        __end_of_main 0886                          __end_of_stop 13E6  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 1956                   VerifySignal@hexByte 002C  
                              ??_main 00B4                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2587 008A                                i1l2589 008C  
                              i2l2601 142C                        __CFG_WDTEN$OFF 000000  
                              i2l2555 1850                                i2l2559 1862  
                              i2l2597 1426                 __end_of_delay_tenth_s 183C  
                              _LCDout 11D0                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1874                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 10D6  
                           ??_SetLine 002A                                ___wmul 1956  
                           ??___awdiv 002E                      __end_of_initRFID 19D8  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 197C                  __size_of_grabRightIR 0072  
                              clear_0 1918                      ___awdiv@quotient 0030  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0886                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AD                      __end_of_turnLeft 1804  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1922  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 19F8                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 174A                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002E  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 1468  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BE  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 16B6                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15E6                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 1930                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 18A6                ScanWithRange@RFID_Read 0075  
                             _SendLCD 18D6                               __Hparam 0000  
                             _SetLine 18A6                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1470  
                     __size_of___wmul 0026                               ___lwdiv 16B6  
                             ___lwmod 1708                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1906  
                     ??_ScanWithRange 0077                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 19D8                               __ptext2 19BC  
                             __ptext3 1874                               __ptext4 1296  
                             __ptext5 197C                               __ptext6 174A  
                             __ptext7 1930                               __ptext8 0FDC  
                             __ptext9 0886                             _T0CONbits 000FD5  
                             _initLCD 1296                     __end_of_initTimer 19EA  
                             _dpowers 0301                               _isdigit 199E  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0B9C  
                      __pintcode_body 13E6                  end_of_initialization 1922  
                      ScanWithRange@i 00A6                        ScanWithRange@n 00A4  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 13E6  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 17C6                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B2                        __end_of_LCDout 1296  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 11D0                        _fullSpeedAhead 14F4  
                      _ReceivedString 00C6                        __end_of___wmul 197C  
                         _BAUDCONbits 000FAA                        __end_of_initIR 199E  
              __size_of_delay_tenth_s 0038                   start_initialization 1906  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1470  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 1574  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 15E6  
                        _initMotorPWM 1874                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1962 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1804  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 10D6                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B7  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 19D8  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u303_47 1856                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3897 01FA  
                         _grabRightIR 1574                 ScanWithRange@LeftFlag 00AB  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0B9C  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1788                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007C  
                 __end_of_setMotorPWM 0FDC                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1788                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1658                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1788  
                            __ptext11 17C6                              __ptext20 1956  
                            __ptext12 14F4                              __ptext21 1708  
                            __ptext13 1804                              __ptext22 16B6  
                            __ptext14 10D6                              __ptext23 1574  
                            __ptext15 1352                              __ptext32 183C  
                            __ptext24 15E6                              __ptext16 0EA2  
                            __ptext25 18A6                              __ptext17 1470  
                            __ptext26 1658                              __ptext18 0B9C  
                            __ptext27 18D6                              __ptext19 199E  
                            __ptext28 11D0                              __ptext29 19EA  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 19BC             ScanWithRange@SensorResult 00AE  
                      turnRight@power 006B                         __size_of_main 0536  
                  main@DirectionFound 00BB                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00FA  
                            int$flags 003C                              main@Move 00BC  
                 _InterruptHandlerLow 0018                            _LCD_String 1658  
                            _turnLeft 17C6                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0EA2  
                        _VerifySignal 0FDC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A8                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
>>>>>>> 31f55633f6aeb83b3a98e66242e5fd1fd320f202
