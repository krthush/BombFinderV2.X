

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 22:25:25 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _CAP1BUFH	set	3945
    65  0000                     _CAP1BUFL	set	3944
    66  0000                     _CAP1CON	set	3939
    67  0000                     _CAP2BUFH	set	3943
    68  0000                     _CAP2BUFL	set	3942
    69  0000                     _CAP2CON	set	3938
    70  0000                     _LATAbits	set	3977
    71  0000                     _LATB	set	3978
    72  0000                     _LATBbits	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXSTAbits	set	4012
   106  0000                     _T0CONbits	set	4053
   107  0000                     _TMR0H	set	4055
   108  0000                     _TMR0L	set	4054
   109  0000                     _INTCONbits	set	4082
   110  00030B                     STR_6:
   111  00030B  20                 	db	32
   112  00030C  20                 	db	32
   113  00030D  20                 	db	32
   114  00030E  20                 	db	32
   115  00030F  20                 	db	32
   116  000310  20                 	db	32
   117  000311  25                 	db	37
   118  000312  30                 	db	48	;'0'
   119  000313  34                 	db	52	;'4'
   120  000314  64                 	db	100	;'d'
   121  000315  2C                 	db	44
   122  000316  20                 	db	32
   123  000317  25                 	db	37
   124  000318  30                 	db	48	;'0'
   125  000319  34                 	db	52	;'4'
   126  00031A  64                 	db	100	;'d'
   127  00031B  00                 	db	0
   128  00031C                     STR_5:
   129  00031C  20                 	db	32
   130  00031D  20                 	db	32
   131  00031E  20                 	db	32
   132  00031F  20                 	db	32
   133  000320  20                 	db	32
   134  000321  20                 	db	32
   135  000322  49                 	db	73	;'I'
   136  000323  6E                 	db	110	;'n'
   137  000324  65                 	db	101	;'e'
   138  000325  72                 	db	114	;'r'
   139  000326  74                 	db	116	;'t'
   140  000327  20                 	db	32
   141  000328  4D                 	db	77	;'M'
   142  000329  6F                 	db	111	;'o'
   143  00032A  64                 	db	100	;'d'
   144  00032B  65                 	db	101	;'e'
   145  00032C  00                 	db	0
   146  00032D                     STR_1:
   147  00032D  20                 	db	32
   148  00032E  20                 	db	32
   149  00032F  20                 	db	32
   150  000330  20                 	db	32
   151  000331  20                 	db	32
   152  000332  53                 	db	83	;'S'
   153  000333  63                 	db	99	;'c'
   154  000334  61                 	db	97	;'a'
   155  000335  6E                 	db	110	;'n'
   156  000336  49                 	db	73	;'I'
   157  000337  52                 	db	82	;'R'
   158  000338  00                 	db	0
   159  000339                     STR_8:
   160  000339  47                 	db	71	;'G'
   161  00033A  6F                 	db	111	;'o'
   162  00033B  69                 	db	105	;'i'
   163  00033C  6E                 	db	110	;'n'
   164  00033D  67                 	db	103	;'g'
   165  00033E  20                 	db	32
   166  00033F  48                 	db	72	;'H'
   167  000340  6F                 	db	111	;'o'
   168  000341  6D                 	db	109	;'m'
   169  000342  65                 	db	101	;'e'
   170  000343  00                 	db	0
   171  000344                     STR_7:
   172  000344  53                 	db	83	;'S'
   173  000345  65                 	db	101	;'e'
   174  000346  61                 	db	97	;'a'
   175  000347  72                 	db	114	;'r'
   176  000348  63                 	db	99	;'c'
   177  000349  68                 	db	104	;'h'
   178  00034A  69                 	db	105	;'i'
   179  00034B  6E                 	db	110	;'n'
   180  00034C  67                 	db	103	;'g'
   181  00034D  00                 	db	0
   182  0000                     
   183                           ; #config settings
   184  00034E  00                 	db	0	; dummy byte at the end
   185  0000                     
   186                           	psect	cinit
   187  00013A                     __pcinit:
   188                           	opt stack 0
   189  00013A                     start_initialization:
   190                           	opt stack 0
   191  00013A                     __initialization:
   192                           	opt stack 0
   193                           
   194                           ; Clear objects allocated to BANK1 (98 bytes)
   195  00013A  EE01  F097         	lfsr	0,__pbssBANK1
   196  00013E  0E62               	movlw	98
   197  000140                     clear_0:
   198  000140  6AEE               	clrf	postinc0,c
   199  000142  06E8               	decf	wreg,f,c
   200  000144  E1FD               	bnz	clear_0
   201                           
   202                           ; Clear objects allocated to BANK0 (8 bytes)
   203  000146  EE00  F0BC         	lfsr	0,__pbssBANK0
   204  00014A  0E08               	movlw	8
   205  00014C                     clear_1:
   206  00014C  6AEE               	clrf	postinc0,c
   207  00014E  06E8               	decf	wreg,f,c
   208  000150  E1FD               	bnz	clear_1
   209                           
   210                           ; Clear objects allocated to COMRAM (2 bytes)
   211  000152  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   212  000154  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   213  000156                     end_of_initialization:
   214                           	opt stack 0
   215  000156                     __end_of__initialization:
   216                           	opt stack 0
   217  000156  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   218  000158  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   219  00015A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   220  00015C  6EF8               	movwf	tblptru,c
   221  00015E  0100               	movlb	0
   222  000160  EFA8  F001         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	bssCOMRAM
   228  00003A                     __pbssCOMRAM:
   229                           	opt stack 0
   230  00003A                     _i:
   231                           	opt stack 0
   232  00003A                     	ds	1
   233  00003B                     _mode:
   234                           	opt stack 0
   235  00003B                     	ds	1
   236                           tblptru	equ	0xFF8
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           
   240                           	psect	bssBANK0
   241  0000BC                     __pbssBANK0:
   242                           	opt stack 0
   243  0000BC                     ScanIR@F3880:
   244                           	opt stack 0
   245  0000BC                     	ds	4
   246  0000C0                     ScanWithRange@F3894:
   247                           	opt stack 0
   248  0000C0                     	ds	4
   249                           tblptru	equ	0xFF8
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	bssBANK1
   254  000197                     __pbssBANK1:
   255                           	opt stack 0
   256  000197                     main@F3893:
   257                           	opt stack 0
   258  000197                     	ds	50
   259  0001C9                     main@F3895:
   260                           	opt stack 0
   261  0001C9                     	ds	25
   262  0001E2                     main@F3898:
   263                           	opt stack 0
   264  0001E2                     	ds	4
   265  0001E6                     _ReceivedString:
   266                           	opt stack 0
   267  0001E6                     	ds	16
   268  0001F6                     _millis:
   269                           	opt stack 0
   270  0001F6                     	ds	2
   271  0001F8                     _RFID_Read:
   272                           	opt stack 0
   273  0001F8                     	ds	1
   274                           tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           	psect	cstackBANK1
   279  000100                     __pcstackBANK1:
   280                           	opt stack 0
   281  000100                     main@buf:
   282                           	opt stack 0
   283                           
   284                           ; 40 bytes @ 0x0
   285  000100                     	ds	40
   286  000128                     main@Message:
   287                           	opt stack 0
   288                           
   289                           ; 10 bytes @ 0x28
   290  000128                     	ds	10
   291  000132                     main@MoveType:
   292                           	opt stack 0
   293                           
   294                           ; 25 bytes @ 0x32
   295  000132                     	ds	25
   296  00014B                     main@MoveTime:
   297                           	opt stack 0
   298                           
   299                           ; 50 bytes @ 0x4B
   300  00014B                     	ds	50
   301  00017D                     main@ScanAngle:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x7D
   305  00017D                     	ds	1
   306  00017E                     main@SensorResult:
   307                           	opt stack 0
   308                           
   309                           ; 4 bytes @ 0x7E
   310  00017E                     	ds	4
   311  000182                     main@DirectionFound:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x82
   315  000182                     	ds	1
   316  000183                     main@i:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x83
   320  000183                     	ds	1
   321  000184                     main@Move:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x84
   325  000184                     	ds	1
   326  000185                     main@mL:
   327                           	opt stack 0
   328                           
   329                           ; 9 bytes @ 0x85
   330  000185                     	ds	9
   331  00018E                     main@mR:
   332                           	opt stack 0
   333                           
   334                           ; 9 bytes @ 0x8E
   335  00018E                     	ds	9
   336                           tblptru	equ	0xFF8
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	cstackBANK0
   341  000060                     __pcstackBANK0:
   342                           	opt stack 0
   343  000060                     ??_sprintf:
   344  000060                     setMotorPWM@PWMduty:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x0
   348  000060                     	ds	2
   349  000062                     stop@mL:
   350                           	opt stack 0
   351  000062                     fullSpeed@mL:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x2
   355  000062                     	ds	2
   356  000064                     stop@mR:
   357                           	opt stack 0
   358  000064                     fullSpeed@mR:
   359                           	opt stack 0
   360  000064                     sprintf@ap:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x4
   364  000064                     	ds	2
   365  000066                     fullSpeed@power:
   366                           	opt stack 0
   367  000066                     sprintf@prec:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x6
   371  000066                     	ds	1
   372  000067                     turnLeft@mL:
   373                           	opt stack 0
   374  000067                     turnRight@mL:
   375                           	opt stack 0
   376  000067                     fullSpeedBack@mL:
   377                           	opt stack 0
   378  000067                     sprintf@val:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x7
   382  000067                     	ds	2
   383  000069                     sprintf@flag:
   384                           	opt stack 0
   385  000069                     turnLeft@mR:
   386                           	opt stack 0
   387  000069                     turnRight@mR:
   388                           	opt stack 0
   389  000069                     fullSpeedBack@mR:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x9
   393  000069                     	ds	1
   394  00006A                     sprintf@width:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0xA
   398  00006A                     	ds	1
   399  00006B                     turnLeft@power:
   400                           	opt stack 0
   401  00006B                     turnRight@power:
   402                           	opt stack 0
   403  00006B                     fullSpeedBack@power:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0xB
   407  00006B                     	ds	1
   408  00006C                     sprintf@c:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0xC
   412  00006C                     	ds	1
   413  00006D                     ScanIR@mL:
   414                           	opt stack 0
   415  00006D                     ScanWithRange@mL:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0xD
   419  00006D                     	ds	2
   420  00006F                     ScanIR@mR:
   421                           	opt stack 0
   422  00006F                     ScanWithRange@mR:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0xF
   426  00006F                     	ds	2
   427  000071                     ScanWithRange@loops:
   428                           	opt stack 0
   429  000071                     ScanIR@buf:
   430                           	opt stack 0
   431                           
   432                           ; 40 bytes @ 0x11
   433  000071                     	ds	2
   434  000073                     ScanWithRange@MoveTime:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x13
   438  000073                     	ds	2
   439  000075                     ScanWithRange@Move:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x15
   443  000075                     	ds	2
   444  000077                     ScanWithRange@MoveType:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x17
   448  000077                     	ds	2
   449  000079                     ScanWithRange@RFID_Read:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x19
   453  000079                     	ds	2
   454  00007B                     ScanWithRange@millis:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x1B
   458  00007B                     	ds	2
   459  00007D                     ??_ScanWithRange:
   460                           
   461                           ; 0 bytes @ 0x1D
   462  00007D                     	ds	4
   463  000081                     ScanWithRange@buf:
   464                           	opt stack 0
   465                           
   466                           ; 40 bytes @ 0x21
   467  000081                     	ds	24
   468  000099                     ScanIR@DirectionMoveThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x39
   472  000099                     	ds	2
   473  00009B                     ScanIR@SensorResult:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x3B
   477  00009B                     	ds	14
   478  0000A9                     ScanWithRange@i:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x49
   482  0000A9                     	ds	2
   483  0000AB                     ScanWithRange@DirectionFoundThreshold:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x4B
   487  0000AB                     	ds	2
   488  0000AD                     ScanWithRange@MotorPower:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x4D
   492  0000AD                     	ds	1
   493  0000AE                     ScanWithRange@MiniLeftFlick:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x4E
   497  0000AE                     	ds	1
   498  0000AF                     ScanWithRange@LeftFlag:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x4F
   502  0000AF                     	ds	2
   503  0000B1                     ScanWithRange@TimeAboveThreshold:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x51
   507  0000B1                     	ds	2
   508  0000B3                     ScanWithRange@SensorResult:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x53
   512  0000B3                     	ds	4
   513  0000B7                     ScanWithRange@LeftFlick:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x57
   517  0000B7                     	ds	1
   518  0000B8                     ScanWithRange@RightFlag:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x58
   522  0000B8                     	ds	2
   523  0000BA                     ??_main:
   524                           
   525                           ; 0 bytes @ 0x5A
   526  0000BA                     	ds	2
   527                           tblptru	equ	0xFF8
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           
   531                           	psect	cstackCOMRAM
   532  000001                     __pcstackCOMRAM:
   533                           	opt stack 0
   534  000001                     ??i2_delay_tenth_s:
   535                           
   536                           ; 0 bytes @ 0x0
   537  000001                     	ds	1
   538  000002                     i2delay_tenth_s@tenth_seconds:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x1
   542  000002                     	ds	1
   543  000003                     i2delay_tenth_s@i:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x2
   547  000003                     	ds	2
   548  000005                     ??_InterruptHandlerHigh:
   549                           
   550                           ; 0 bytes @ 0x4
   551  000005                     	ds	14
   552  000013                     ??_InterruptHandlerLow:
   553                           
   554                           ; 0 bytes @ 0x12
   555  000013                     	ds	17
   556  000024                     ??_isdigit:
   557  000024                     ??_LCDout:
   558  000024                     ??_delay_tenth_s:
   559  000024                     ?_grabRightIR:
   560                           	opt stack 0
   561  000024                     ?_grabLeftIR:
   562                           	opt stack 0
   563  000024                     ?___wmul:
   564                           	opt stack 0
   565  000024                     ?___lwdiv:
   566                           	opt stack 0
   567  000024                     enableSensor@status:
   568                           	opt stack 0
   569  000024                     VerifySignal@Signal:
   570                           	opt stack 0
   571  000024                     ___wmul@multiplier:
   572                           	opt stack 0
   573  000024                     ___lwdiv@dividend:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x23
   577  000024                     	ds	1
   578  000025                     enableSensor@sensor:
   579                           	opt stack 0
   580  000025                     delay_tenth_s@tenth_seconds:
   581                           	opt stack 0
   582  000025                     _isdigit$2086:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x24
   586  000025                     	ds	1
   587  000026                     ??_grabRightIR:
   588  000026                     ??_grabLeftIR:
   589  000026                     ??_VerifySignal:
   590  000026                     isdigit@c:
   591                           	opt stack 0
   592  000026                     delay_tenth_s@i:
   593                           	opt stack 0
   594  000026                     ___wmul@multiplicand:
   595                           	opt stack 0
   596  000026                     ___lwdiv@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x25
   600  000026                     	ds	1
   601  000027                     LCDout@number:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x26
   605  000027                     	ds	1
   606  000028                     SendLCD@type:
   607                           	opt stack 0
   608  000028                     ___wmul@product:
   609                           	opt stack 0
   610  000028                     ___lwdiv@quotient:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x27
   614  000028                     	ds	1
   615  000029                     SendLCD@Byte:
   616                           	opt stack 0
   617  000029                     grabRightIR@IR_signal:
   618                           	opt stack 0
   619  000029                     grabLeftIR@IR_signal:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x28
   623  000029                     	ds	1
   624  00002A                     ??_initLCD:
   625  00002A                     ?___awdiv:
   626                           	opt stack 0
   627  00002A                     SetLine@line:
   628                           	opt stack 0
   629  00002A                     VerifySignal@i:
   630                           	opt stack 0
   631  00002A                     ___lwdiv@counter:
   632                           	opt stack 0
   633  00002A                     LCD_String@string:
   634                           	opt stack 0
   635  00002A                     ___awdiv@dividend:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x29
   639  00002A                     	ds	1
   640  00002B                     ?___lwmod:
   641                           	opt stack 0
   642  00002B                     grabRightIR@i:
   643                           	opt stack 0
   644  00002B                     grabLeftIR@i:
   645                           	opt stack 0
   646  00002B                     VerifySignal@checksum:
   647                           	opt stack 0
   648  00002B                     ___lwmod@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2A
   652  00002B                     	ds	1
   653  00002C                     VerifySignal@hexByte:
   654                           	opt stack 0
   655  00002C                     ___awdiv@divisor:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x2B
   659  00002C                     	ds	1
   660  00002D                     ___lwmod@divisor:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x2C
   664  00002D                     	ds	1
   665  00002E                     ___awdiv@counter:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2D
   669  00002E                     	ds	1
   670  00002F                     ___awdiv@sign:
   671                           	opt stack 0
   672  00002F                     ___lwmod@counter:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x2E
   676  00002F                     	ds	1
   677  000030                     ?_sprintf:
   678                           	opt stack 0
   679  000030                     sprintf@sp:
   680                           	opt stack 0
   681  000030                     ___awdiv@quotient:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x2F
   685  000030                     	ds	2
   686  000032                     setMotorPWM@m:
   687                           	opt stack 0
   688  000032                     sprintf@f:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x31
   692  000032                     	ds	2
   693  000034                     ??_setMotorPWM:
   694                           
   695                           ; 0 bytes @ 0x33
   696  000034                     	ds	5
   697  000039                     ??_ScanIR:
   698                           
   699                           ; 0 bytes @ 0x38
   700  000039                     	ds	1
   701  00003A                     tblptru	equ	0xFF8
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           
   705                           ; 0 bytes @ 0x39
   706 ;;
   707 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   708 ;;
   709 ;; *************** function _main *****************
   710 ;; Defined at:
   711 ;;		line 55 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  MoveTime       50   75[BANK1 ] int [25]
   716 ;;  buf            40    0[BANK1 ] unsigned char [40]
   717 ;;  MoveType       25   50[BANK1 ] unsigned char [25]
   718 ;;  Message        10   40[BANK1 ] unsigned char [10]
   719 ;;  mR              9  142[BANK1 ] struct DC_motor
   720 ;;  mL              9  133[BANK1 ] struct DC_motor
   721 ;;  SensorResult    4  126[BANK1 ] unsigned int [2]
   722 ;;  Move            1  132[BANK1 ] char 
   723 ;;  i               1  131[BANK1 ] unsigned char 
   724 ;;  DirectionFou    1  130[BANK1 ] char 
   725 ;;  ScanAngle       1  125[BANK1 ] unsigned char 
   726 ;; Return value:  Size  Location     Type
   727 ;;		None               void
   728 ;; Registers used:
   729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   735 ;;      Params:         0       0       0       0
   736 ;;      Locals:         0       0     151       0
   737 ;;      Temps:          0       2       0       0
   738 ;;      Totals:         0       2     151       0
   739 ;;Total ram usage:      153 bytes
   740 ;; Hardware stack levels required when called:    8
   741 ;; This function calls:
   742 ;;		_LCD_String
   743 ;;		_ScanIR
   744 ;;		_ScanWithRange
   745 ;;		_SendLCD
   746 ;;		_SetLine
   747 ;;		_VerifySignal
   748 ;;		_delay_tenth_s
   749 ;;		_enableSensor
   750 ;;		_fullSpeed
   751 ;;		_fullSpeedBack
   752 ;;		_grabLeftIR
   753 ;;		_grabRightIR
   754 ;;		_initIR
   755 ;;		_initLCD
   756 ;;		_initMotorPWM
   757 ;;		_initRFID
   758 ;;		_initTimer
   759 ;;		_sprintf
   760 ;;		_stop
   761 ;;		_turnLeft
   762 ;;		_turnRight
   763 ;; This function is called by:
   764 ;;		Startup code after reset
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text0
   769  000350                     __ptext0:
   770                           	opt stack 0
   771  000350                     _main:
   772                           	opt stack 23
   773                           
   774                           ;main.c: 58: unsigned char Message[10];
   775                           ;main.c: 59: unsigned char i=0;
   776                           
   777                           ;incstack = 0
   778  000350  0E00               	movlw	0
   779  000352  0101               	movlb	1	; () banked
   780  000354  6F83               	movwf	main@i& (0+255),b
   781                           
   782                           ;main.c: 60: signed char DirectionFound=0;
   783  000356  0E00               	movlw	0
   784  000358  0101               	movlb	1	; () banked
   785  00035A  6F82               	movwf	main@DirectionFound& (0+255),b
   786                           
   787                           ; BSR set to: 1
   788                           ;main.c: 61: signed int MoveTime[25] = { 0 };
   789  00035C  EE21  F097         	lfsr	2,main@F3893
   790  000360  EE11  F04B         	lfsr	1,main@MoveTime
   791  000364  0E31               	movlw	49
   792  000366                     u2801:
   793  000366  CFDB FFE3          	movff	plusw2,plusw1
   794  00036A  06E8               	decf	wreg,f,c
   795  00036C  E2FC               	bc	u2801
   796                           
   797                           ; BSR set to: 1
   798                           ;main.c: 64: unsigned char MoveType[25] = { 0 };
   799  00036E  EE21  F0C9         	lfsr	2,main@F3895
   800  000372  EE11  F032         	lfsr	1,main@MoveType
   801  000376  0E18               	movlw	24
   802  000378                     u2811:
   803  000378  CFDB FFE3          	movff	plusw2,plusw1
   804  00037C  06E8               	decf	wreg,f,c
   805  00037E  E2FC               	bc	u2811
   806                           
   807                           ;main.c: 67: signed char Move=0;
   808  000380  0E00               	movlw	0
   809  000382  0101               	movlb	1	; () banked
   810  000384  6F84               	movwf	main@Move& (0+255),b
   811                           
   812                           ; BSR set to: 1
   813                           ;main.c: 68: unsigned int SensorResult[2]={0,0};
   814  000386  C1E2  F17E         	movff	main@F3898,main@SensorResult
   815  00038A  C1E3  F17F         	movff	main@F3898+1,main@SensorResult+1
   816  00038E  C1E4  F180         	movff	main@F3898+2,main@SensorResult+2
   817  000392  C1E5  F181         	movff	main@F3898+3,main@SensorResult+3
   818                           
   819                           ;main.c: 69: char buf[40];
   820                           ;main.c: 71: unsigned char ScanAngle=60;
   821  000396  0E3C               	movlw	60
   822  000398  0101               	movlb	1	; () banked
   823  00039A  6F7D               	movwf	main@ScanAngle& (0+255),b
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 80: INTCONbits.GIEH=1;
   827  00039C  8EF2               	bsf	intcon,7,c	;volatile
   828                           
   829                           ; BSR set to: 1
   830                           ;main.c: 81: INTCONbits.GIEL=1;
   831  00039E  8CF2               	bsf	intcon,6,c	;volatile
   832                           
   833                           ; BSR set to: 1
   834                           ;main.c: 82: INTCONbits.PEIE=1;
   835  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   836                           
   837                           ; BSR set to: 1
   838                           ;main.c: 83: RCONbits.IPEN=1;
   839  0003A2  8ED0               	bsf	4048,7,c	;volatile
   840                           
   841                           ; BSR set to: 1
   842                           ;main.c: 86: IPR1bits.RCIP=0;
   843  0003A4  9A9F               	bcf	3999,5,c	;volatile
   844                           
   845                           ; BSR set to: 1
   846                           ;main.c: 87: PIE1bits.RCIE=1;
   847  0003A6  8A9D               	bsf	3997,5,c	;volatile
   848                           
   849                           ; BSR set to: 1
   850                           ;main.c: 90: TRISCbits.RC3=1;
   851  0003A8  8694               	bsf	3988,3,c	;volatile
   852                           
   853                           ; BSR set to: 1
   854                           ;main.c: 91: INTCONbits.INT0IE=1;
   855  0003AA  88F2               	bsf	intcon,4,c	;volatile
   856                           
   857                           ; BSR set to: 1
   858                           ;main.c: 94: PIR1bits.RC1IF=0;
   859  0003AC  9A9E               	bcf	3998,5,c	;volatile
   860                           
   861                           ; BSR set to: 1
   862                           ;main.c: 95: INTCONbits.INT0IF=0;
   863  0003AE  92F2               	bcf	intcon,1,c	;volatile
   864                           
   865                           ;main.c: 98: struct DC_motor mL, mR;
   866                           ;main.c: 99: mL.power=0;
   867  0003B0  0E00               	movlw	0
   868  0003B2  0101               	movlb	1	; () banked
   869  0003B4  6F85               	movwf	main@mL& (0+255),b
   870                           
   871                           ;main.c: 100: mL.direction=1;
   872  0003B6  0E01               	movlw	1
   873  0003B8  0101               	movlb	1	; () banked
   874  0003BA  6F86               	movwf	(main@mL+1)& (0+255),b
   875                           
   876                           ; BSR set to: 1
   877                           ;main.c: 101: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   878  0003BC  0E79               	movlw	121
   879  0003BE  0101               	movlb	1	; () banked
   880  0003C0  6F87               	movwf	(main@mL+2)& (0+255),b
   881  0003C2  0E0F               	movlw	15
   882  0003C4  0101               	movlb	1	; () banked
   883  0003C6  6F88               	movwf	(main@mL+3)& (0+255),b
   884                           
   885                           ; BSR set to: 1
   886                           ;main.c: 102: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   887  0003C8  0E78               	movlw	120
   888  0003CA  0101               	movlb	1	; () banked
   889  0003CC  6F89               	movwf	(main@mL+4)& (0+255),b
   890  0003CE  0E0F               	movlw	15
   891  0003D0  0101               	movlb	1	; () banked
   892  0003D2  6F8A               	movwf	(main@mL+5)& (0+255),b
   893                           
   894                           ;main.c: 103: mL.dir_pin=0;
   895  0003D4  0E00               	movlw	0
   896  0003D6  0101               	movlb	1	; () banked
   897  0003D8  6F8B               	movwf	(main@mL+6)& (0+255),b
   898                           
   899                           ;main.c: 104: mL.PWMperiod=199;
   900  0003DA  0E00               	movlw	0
   901  0003DC  0101               	movlb	1	; () banked
   902  0003DE  6F8D               	movwf	(main@mL+8)& (0+255),b
   903  0003E0  0EC7               	movlw	199
   904  0003E2  6F8C               	movwf	(main@mL+7)& (0+255),b
   905                           
   906                           ;main.c: 106: mR.power=0;
   907  0003E4  0E00               	movlw	0
   908  0003E6  0101               	movlb	1	; () banked
   909  0003E8  6F8E               	movwf	main@mR& (0+255),b
   910                           
   911                           ;main.c: 107: mR.direction=1;
   912  0003EA  0E01               	movlw	1
   913  0003EC  0101               	movlb	1	; () banked
   914  0003EE  6F8F               	movwf	(main@mR+1)& (0+255),b
   915                           
   916                           ; BSR set to: 1
   917                           ;main.c: 108: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   918  0003F0  0E77               	movlw	119
   919  0003F2  0101               	movlb	1	; () banked
   920  0003F4  6F90               	movwf	(main@mR+2)& (0+255),b
   921  0003F6  0E0F               	movlw	15
   922  0003F8  0101               	movlb	1	; () banked
   923  0003FA  6F91               	movwf	(main@mR+3)& (0+255),b
   924                           
   925                           ; BSR set to: 1
   926                           ;main.c: 109: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   927  0003FC  0E76               	movlw	118
   928  0003FE  0101               	movlb	1	; () banked
   929  000400  6F92               	movwf	(main@mR+4)& (0+255),b
   930  000402  0E0F               	movlw	15
   931  000404  0101               	movlb	1	; () banked
   932  000406  6F93               	movwf	(main@mR+5)& (0+255),b
   933                           
   934                           ;main.c: 110: mR.dir_pin=2;
   935  000408  0E02               	movlw	2
   936  00040A  0101               	movlb	1	; () banked
   937  00040C  6F94               	movwf	(main@mR+6)& (0+255),b
   938                           
   939                           ;main.c: 111: mR.PWMperiod=199;
   940  00040E  0E00               	movlw	0
   941  000410  0101               	movlb	1	; () banked
   942  000412  6F96               	movwf	(main@mR+8)& (0+255),b
   943  000414  0EC7               	movlw	199
   944  000416  6F95               	movwf	(main@mR+7)& (0+255),b
   945                           
   946                           ;main.c: 113: OSCCON = 0b1110010;
   947  000418  0E72               	movlw	114
   948  00041A  6ED3               	movwf	4051,c	;volatile
   949  00041C                     l392:
   950  00041C  B4D3               	btfsc	4051,2,c	;volatile
   951  00041E  D354               	goto	l3643
   952  000420  D7FD               	goto	l392
   953  000422                     l3445:
   954                           
   955                           ;main.c: 125: stop(&mL, &mR);
   956  000422  0E85               	movlw	low main@mL
   957  000424  0100               	movlb	0	; () banked
   958  000426  6F62               	movwf	stop@mL& (0+255),b
   959  000428  0E01               	movlw	high main@mL
   960  00042A  0100               	movlb	0	; () banked
   961  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   962  00042E  0E8E               	movlw	low main@mR
   963  000430  0100               	movlb	0	; () banked
   964  000432  6F64               	movwf	stop@mR& (0+255),b
   965  000434  0E01               	movlw	high main@mR
   966  000436  0100               	movlb	0	; () banked
   967  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   968  00043A  ECD9  F00B         	call	_stop	;wreg free
   969                           
   970                           ;main.c: 128: RFID_Read=0;
   971  00043E  0E00               	movlw	0
   972  000440  0101               	movlb	1	; () banked
   973  000442  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
   974                           
   975                           ; BSR set to: 1
   976                           ;main.c: 129: Move=0;
   977  000444  0E00               	movlw	0
   978  000446  0101               	movlb	1	; () banked
   979  000448  6F84               	movwf	main@Move& (0+255),b
   980                           
   981                           ; BSR set to: 1
   982                           ;main.c: 132: SensorResult[0]=grabLeftIR();
   983  00044A  ECDE  F00C         	call	_grabLeftIR	;wreg free
   984  00044E  C024  F17E         	movff	?_grabLeftIR,main@SensorResult
   985  000452  C025  F17F         	movff	?_grabLeftIR+1,main@SensorResult+1
   986                           
   987                           ;main.c: 133: SensorResult[1]=grabRightIR();
   988  000456  ECA5  F00C         	call	_grabRightIR	;wreg free
   989  00045A  C024  F180         	movff	?_grabRightIR,main@SensorResult+2
   990  00045E  C025  F181         	movff	?_grabRightIR+1,main@SensorResult+3
   991                           
   992                           ;main.c: 137: CAP1BUFH=0;
   993  000462  0E00               	movlw	0
   994  000464  6E69               	movwf	3945,c	;volatile
   995                           
   996                           ;main.c: 138: CAP1BUFL=0;
   997  000466  0E00               	movlw	0
   998  000468  6E68               	movwf	3944,c	;volatile
   999                           
  1000                           ;main.c: 139: CAP2BUFH=0;
  1001  00046A  0E00               	movlw	0
  1002  00046C  6E67               	movwf	3943,c	;volatile
  1003                           
  1004                           ;main.c: 140: CAP2BUFL=0;
  1005  00046E  0E00               	movlw	0
  1006  000470  6E66               	movwf	3942,c	;volatile
  1007                           
  1008                           ;main.c: 143: SendLCD(0b00000001,0);
  1009  000472  0E00               	movlw	0
  1010  000474  6E28               	movwf	SendLCD@type,c
  1011  000476  0E01               	movlw	1
  1012  000478  EC85  F000         	call	_SendLCD
  1013                           
  1014                           ;main.c: 144: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1015  00047C  0E21               	movlw	33
  1016  00047E                     u3077:
  1017  00047E  2EE8               	decfsz	wreg,f,c
  1018  000480  D7FE               	goto	u3077
  1019  000482  F000               	nop	
  1020                           
  1021                           ;main.c: 145: SendLCD(0b00000010,0);
  1022  000484  0E00               	movlw	0
  1023  000486  6E28               	movwf	SendLCD@type,c
  1024  000488  0E02               	movlw	2
  1025  00048A  EC85  F000         	call	_SendLCD
  1026                           
  1027                           ;main.c: 146: _delay((unsigned long)((2)*(8000000/4000.0)));
  1028  00048E  0E06               	movlw	6
  1029  000490  0100               	movlb	0	; () banked
  1030  000492  6FBA               	movwf	??_main& (0+255),b
  1031  000494  0E30               	movlw	48
  1032  000496                     u3087:
  1033  000496  2EE8               	decfsz	wreg,f,c
  1034  000498  D7FE               	goto	u3087
  1035  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1036  00049C  D7FC               	goto	u3087
  1037  00049E  D000               	nop2	
  1038                           
  1039                           ;main.c: 147: SetLine(1);
  1040  0004A0  0E01               	movlw	1
  1041  0004A2  EC6D  F000         	call	_SetLine
  1042                           
  1043                           ;main.c: 148: LCD_String("      Inert Mode");
  1044  0004A6  0E1C               	movlw	low STR_5
  1045  0004A8  6E2A               	movwf	LCD_String@string,c
  1046  0004AA  0E03               	movlw	high STR_5
  1047  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1048  0004AE  EC17  F00D         	call	_LCD_String	;wreg free
  1049                           
  1050                           ;main.c: 149: SetLine(2);
  1051  0004B2  0E02               	movlw	2
  1052  0004B4  EC6D  F000         	call	_SetLine
  1053                           
  1054                           ;main.c: 150: if (RFID_Read) {
  1055  0004B8  0101               	movlb	1	; () banked
  1056  0004BA  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1057  0004BC  B4D8               	btfsc	status,2,c
  1058  0004BE  D007               	goto	l3481
  1059                           
  1060                           ; BSR set to: 1
  1061                           ;main.c: 151: LCD_String(Message);
  1062  0004C0  0E28               	movlw	low main@Message
  1063  0004C2  6E2A               	movwf	LCD_String@string,c
  1064  0004C4  0E01               	movlw	high main@Message
  1065  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1066  0004C8  EC17  F00D         	call	_LCD_String	;wreg free
  1067                           
  1068                           ;main.c: 152: } else {
  1069  0004CC  D2FD               	goto	l3643
  1070  0004CE                     l3481:
  1071                           
  1072                           ;main.c: 153: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1073  0004CE  0E00               	movlw	low main@buf
  1074  0004D0  6E30               	movwf	sprintf@sp,c
  1075  0004D2  0E01               	movlw	high main@buf
  1076  0004D4  6E31               	movwf	sprintf@sp+1,c
  1077  0004D6  0E0B               	movlw	low STR_6
  1078  0004D8  6E32               	movwf	sprintf@f,c
  1079  0004DA  0E03               	movlw	high STR_6
  1080  0004DC  6E33               	movwf	sprintf@f+1,c
  1081  0004DE  C17E  F034         	movff	main@SensorResult,?_sprintf+4
  1082  0004E2  C17F  F035         	movff	main@SensorResult+1,?_sprintf+5
  1083  0004E6  C180  F036         	movff	main@SensorResult+2,?_sprintf+6
  1084  0004EA  C181  F037         	movff	main@SensorResult+3,?_sprintf+7
  1085  0004EE  EC30  F008         	call	_sprintf	;wreg free
  1086                           
  1087                           ;main.c: 154: LCD_String(buf);
  1088  0004F2  0E00               	movlw	low main@buf
  1089  0004F4  6E2A               	movwf	LCD_String@string,c
  1090  0004F6  0E01               	movlw	high main@buf
  1091  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1092  0004FA  EC17  F00D         	call	_LCD_String	;wreg free
  1093                           
  1094                           ;main.c: 155: }
  1095                           ;main.c: 157: break;
  1096  0004FE  D2E4               	goto	l3643
  1097  000500                     l3485:
  1098                           
  1099                           ;main.c: 161: initMotorPWM();
  1100  000500  EC19  F00E         	call	_initMotorPWM	;wreg free
  1101                           
  1102                           ;main.c: 162: initTimer();
  1103  000504  ECF5  F000         	call	_initTimer	;wreg free
  1104                           
  1105                           ;main.c: 163: initRFID();
  1106  000508  ECE7  F000         	call	_initRFID	;wreg free
  1107                           
  1108                           ;main.c: 164: initLCD();
  1109  00050C  EC30  F00B         	call	_initLCD	;wreg free
  1110                           
  1111                           ;main.c: 165: initIR();
  1112  000510  EC6E  F00E         	call	_initIR	;wreg free
  1113                           
  1114                           ;main.c: 167: enableSensor(0, 1);
  1115  000514  0E01               	movlw	1
  1116  000516  6E24               	movwf	enableSensor@status,c
  1117  000518  0E00               	movlw	0
  1118  00051A  ECB2  F000         	call	_enableSensor
  1119                           
  1120                           ;main.c: 168: enableSensor(1, 1);
  1121  00051E  0E01               	movlw	1
  1122  000520  6E24               	movwf	enableSensor@status,c
  1123  000522  0E01               	movlw	1
  1124  000524  ECB2  F000         	call	_enableSensor
  1125                           
  1126                           ;main.c: 171: fullSpeed(&mL, &mR, 100);
  1127  000528  0E85               	movlw	low main@mL
  1128  00052A  0100               	movlb	0	; () banked
  1129  00052C  6F62               	movwf	fullSpeed@mL& (0+255),b
  1130  00052E  0E01               	movlw	high main@mL
  1131  000530  0100               	movlb	0	; () banked
  1132  000532  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1133  000534  0E8E               	movlw	low main@mR
  1134  000536  0100               	movlb	0	; () banked
  1135  000538  6F64               	movwf	fullSpeed@mR& (0+255),b
  1136  00053A  0E01               	movlw	high main@mR
  1137  00053C  0100               	movlb	0	; () banked
  1138  00053E  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1139  000540  0E64               	movlw	100
  1140  000542  0100               	movlb	0	; () banked
  1141  000544  6F66               	movwf	fullSpeed@power& (0+255),b
  1142  000546  EC65  F00C         	call	_fullSpeed	;wreg free
  1143                           
  1144                           ;main.c: 172: delay_tenth_s(1);
  1145  00054A  0E01               	movlw	1
  1146  00054C  EC36  F00E         	call	_delay_tenth_s
  1147  000550  D2BA               	goto	l3639
  1148  000552                     l3501:
  1149                           
  1150                           ;main.c: 180: SetLine(1);
  1151  000552  0E01               	movlw	1
  1152  000554  EC6D  F000         	call	_SetLine
  1153                           
  1154                           ;main.c: 181: LCD_String("Searching");
  1155  000558  0E44               	movlw	low STR_7
  1156  00055A  6E2A               	movwf	LCD_String@string,c
  1157  00055C  0E03               	movlw	high STR_7
  1158  00055E  6E2B               	movwf	LCD_String@string+1,c
  1159  000560  EC17  F00D         	call	_LCD_String	;wreg free
  1160                           
  1161                           ;main.c: 183: if (DirectionFound==-1) {
  1162  000564  0101               	movlb	1	; () banked
  1163  000566  2982               	incf	main@DirectionFound& (0+255),w,b
  1164  000568  A4D8               	btfss	status,2,c
  1165  00056A  D03E               	goto	l3519
  1166                           
  1167                           ; BSR set to: 1
  1168                           ;main.c: 188: MoveType[Move]=0;
  1169  00056C  0101               	movlb	1	; () banked
  1170  00056E  5184               	movf	main@Move& (0+255),w,b
  1171  000570  0D01               	mullw	1
  1172  000572  0E32               	movlw	low main@MoveType
  1173  000574  24F3               	addwf	prodl,w,c
  1174  000576  6ED9               	movwf	fsr2l,c
  1175  000578  0E01               	movlw	high main@MoveType
  1176  00057A  20F4               	addwfc	prodh,w,c
  1177  00057C  6EDA               	movwf	fsr2h,c
  1178  00057E  0E00               	movlw	0
  1179  000580  6EDF               	movwf	indf2,c
  1180                           
  1181                           ;main.c: 189: MoveTime[Move]=6;
  1182  000582  0101               	movlb	1	; () banked
  1183  000584  5184               	movf	main@Move& (0+255),w,b
  1184  000586  0D02               	mullw	2
  1185  000588  0E4B               	movlw	low main@MoveTime
  1186  00058A  24F3               	addwf	prodl,w,c
  1187  00058C  6ED9               	movwf	fsr2l,c
  1188  00058E  0E01               	movlw	high main@MoveTime
  1189  000590  20F4               	addwfc	prodh,w,c
  1190  000592  6EDA               	movwf	fsr2h,c
  1191  000594  0E06               	movlw	6
  1192  000596  6EDE               	movwf	postinc2,c
  1193  000598  0E00               	movlw	0
  1194  00059A  6EDD               	movwf	postdec2,c
  1195                           
  1196                           ; BSR set to: 1
  1197                           ;main.c: 190: Move++;
  1198  00059C  0101               	movlb	1	; () banked
  1199  00059E  2B84               	incf	main@Move& (0+255),f,b
  1200                           
  1201                           ; BSR set to: 1
  1202                           ;main.c: 191: fullSpeed(&mL, &mR, 100);
  1203  0005A0  0E85               	movlw	low main@mL
  1204  0005A2  0100               	movlb	0	; () banked
  1205  0005A4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1206  0005A6  0E01               	movlw	high main@mL
  1207  0005A8  0100               	movlb	0	; () banked
  1208  0005AA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1209  0005AC  0E8E               	movlw	low main@mR
  1210  0005AE  0100               	movlb	0	; () banked
  1211  0005B0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1212  0005B2  0E01               	movlw	high main@mR
  1213  0005B4  0100               	movlb	0	; () banked
  1214  0005B6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1215  0005B8  0E64               	movlw	100
  1216  0005BA  0100               	movlb	0	; () banked
  1217  0005BC  6F66               	movwf	fullSpeed@power& (0+255),b
  1218  0005BE  EC65  F00C         	call	_fullSpeed	;wreg free
  1219                           
  1220                           ;main.c: 192: delay_tenth_s(6);
  1221  0005C2  0E06               	movlw	6
  1222  0005C4  EC36  F00E         	call	_delay_tenth_s
  1223                           
  1224                           ;main.c: 193: stop(&mL,&mR);
  1225  0005C8  0E85               	movlw	low main@mL
  1226  0005CA  0100               	movlb	0	; () banked
  1227  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1228  0005CE  0E01               	movlw	high main@mL
  1229  0005D0  0100               	movlb	0	; () banked
  1230  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1231  0005D4  0E8E               	movlw	low main@mR
  1232  0005D6  0100               	movlb	0	; () banked
  1233  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1234  0005DA  0E01               	movlw	high main@mR
  1235  0005DC  0100               	movlb	0	; () banked
  1236  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1237  0005E0  ECD9  F00B         	call	_stop	;wreg free
  1238                           
  1239                           ;main.c: 194: DirectionFound=0;
  1240  0005E4  0E00               	movlw	0
  1241  0005E6  D048               	goto	L2
  1242  0005E8                     l3519:
  1243                           
  1244                           ; BSR set to: 1
  1245  0005E8  0101               	movlb	1	; () banked
  1246  0005EA  5182               	movf	main@DirectionFound& (0+255),w,b
  1247  0005EC  0101               	movlb	1	; () banked
  1248  0005EE  A4D8               	btfss	status,2,c
  1249  0005F0  D031               	goto	l3523
  1250                           
  1251                           ; BSR set to: 1
  1252                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1253                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1254  0005F2  0E85               	movlw	low main@mL
  1255  0005F4  0100               	movlb	0	; () banked
  1256  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1257  0005F8  0E01               	movlw	high main@mL
  1258  0005FA  0100               	movlb	0	; () banked
  1259  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1260  0005FE  0E8E               	movlw	low main@mR
  1261  000600  0100               	movlb	0	; () banked
  1262  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1263  000604  0E01               	movlw	high main@mR
  1264  000606  0100               	movlb	0	; () banked
  1265  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1266  00060A  C17D  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1267  00060E  0100               	movlb	0	; () banked
  1268  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1269  000612  0E4B               	movlw	low main@MoveTime
  1270  000614  0100               	movlb	0	; () banked
  1271  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1272  000618  0E01               	movlw	high main@MoveTime
  1273  00061A  0100               	movlb	0	; () banked
  1274  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1275  00061E  0E84               	movlw	low main@Move
  1276  000620  0100               	movlb	0	; () banked
  1277  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1278  000624  0E01               	movlw	high main@Move
  1279  000626  0100               	movlb	0	; () banked
  1280  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1281  00062A  0E32               	movlw	low main@MoveType
  1282  00062C  0100               	movlb	0	; () banked
  1283  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1284  000630  0E01               	movlw	high main@MoveType
  1285  000632  0100               	movlb	0	; () banked
  1286  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1287  000636  0EF8               	movlw	low _RFID_Read
  1288  000638  0100               	movlb	0	; () banked
  1289  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1290  00063C  0E01               	movlw	high _RFID_Read
  1291  00063E  0100               	movlb	0	; () banked
  1292  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1293  000642  0EF6               	movlw	low _millis
  1294  000644  0100               	movlb	0	; () banked
  1295  000646  6F7B               	movwf	ScanWithRange@millis& (0+255),b
  1296  000648  0E01               	movlw	high _millis
  1297  00064A  0100               	movlb	0	; () banked
  1298  00064C  6F7C               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1299  00064E  EC75  F005         	call	_ScanWithRange	;wreg free
  1300  000652  D012               	goto	L2
  1301  000654                     l3523:
  1302                           
  1303                           ; BSR set to: 1
  1304  000654  0101               	movlb	1	; () banked
  1305  000656  0582               	decf	main@DirectionFound& (0+255),w,b
  1306  000658  A4D8               	btfss	status,2,c
  1307  00065A  D011               	goto	l3527
  1308                           
  1309                           ; BSR set to: 1
  1310                           ;main.c: 201: DirectionFound=ScanIR(&mL, &mR);
  1311  00065C  0E85               	movlw	low main@mL
  1312  00065E  0100               	movlb	0	; () banked
  1313  000660  6F6D               	movwf	ScanIR@mL& (0+255),b
  1314  000662  0E01               	movlw	high main@mL
  1315  000664  0100               	movlb	0	; () banked
  1316  000666  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1317  000668  0E8E               	movlw	low main@mR
  1318  00066A  0100               	movlb	0	; () banked
  1319  00066C  6F6F               	movwf	ScanIR@mR& (0+255),b
  1320  00066E  0E01               	movlw	high main@mR
  1321  000670  0100               	movlb	0	; () banked
  1322  000672  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1323  000674  EC50  F00A         	call	_ScanIR	;wreg free
  1324  000678                     L2:
  1325  000678  0101               	movlb	1	; () banked
  1326  00067A  6F82               	movwf	main@DirectionFound& (0+255),b
  1327                           
  1328                           ;main.c: 202: } else if (DirectionFound==2) {
  1329  00067C  D225               	goto	l3643
  1330  00067E                     l3527:
  1331                           
  1332                           ; BSR set to: 1
  1333  00067E  0E02               	movlw	2
  1334  000680  0101               	movlb	1	; () banked
  1335  000682  1982               	xorwf	main@DirectionFound& (0+255),w,b
  1336  000684  A4D8               	btfss	status,2,c
  1337  000686  D220               	goto	l3643
  1338                           
  1339                           ; BSR set to: 1
  1340                           ;main.c: 204: mode=2;
  1341  000688  0E02               	movlw	2
  1342  00068A  6E3B               	movwf	_mode,c	;volatile
  1343                           
  1344                           ; BSR set to: 1
  1345                           ;main.c: 205: MoveType[Move]=1;
  1346  00068C  0101               	movlb	1	; () banked
  1347  00068E  5184               	movf	main@Move& (0+255),w,b
  1348  000690  0D01               	mullw	1
  1349  000692  0E32               	movlw	low main@MoveType
  1350  000694  24F3               	addwf	prodl,w,c
  1351  000696  6ED9               	movwf	fsr2l,c
  1352  000698  0E01               	movlw	high main@MoveType
  1353  00069A  20F4               	addwfc	prodh,w,c
  1354  00069C  6EDA               	movwf	fsr2h,c
  1355  00069E  0E01               	movlw	1
  1356  0006A0  6EDF               	movwf	indf2,c
  1357                           
  1358                           ; BSR set to: 1
  1359                           ;main.c: 206: }
  1360                           ;main.c: 208: break;
  1361                           
  1362                           ; BSR set to: 1
  1363                           
  1364                           ; BSR set to: 1
  1365                           
  1366                           ; BSR set to: 1
  1367  0006A2  D212               	goto	l3643
  1368  0006A4                     l3533:
  1369                           
  1370                           ;main.c: 215: if (RFID_Read) {
  1371  0006A4  0101               	movlb	1	; () banked
  1372  0006A6  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1373  0006A8  B4D8               	btfsc	status,2,c
  1374  0006AA  D0A2               	goto	l3575
  1375                           
  1376                           ; BSR set to: 1
  1377                           ;main.c: 216: stop(&mL, &mR);
  1378  0006AC  0E85               	movlw	low main@mL
  1379  0006AE  0100               	movlb	0	; () banked
  1380  0006B0  6F62               	movwf	stop@mL& (0+255),b
  1381  0006B2  0E01               	movlw	high main@mL
  1382  0006B4  0100               	movlb	0	; () banked
  1383  0006B6  6F63               	movwf	(stop@mL+1)& (0+255),b
  1384  0006B8  0E8E               	movlw	low main@mR
  1385  0006BA  0100               	movlb	0	; () banked
  1386  0006BC  6F64               	movwf	stop@mR& (0+255),b
  1387  0006BE  0E01               	movlw	high main@mR
  1388  0006C0  0100               	movlb	0	; () banked
  1389  0006C2  6F65               	movwf	(stop@mR+1)& (0+255),b
  1390  0006C4  ECD9  F00B         	call	_stop	;wreg free
  1391                           
  1392                           ;main.c: 217: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1393  0006C8  0E03               	movlw	3
  1394  0006CA  0101               	movlb	1	; () banked
  1395  0006CC  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1396  0006CE  A4D8               	btfss	status,2,c
  1397  0006D0  D002               	goto	u2890
  1398  0006D2  0E01               	movlw	1
  1399  0006D4  D001               	goto	u2892
  1400  0006D6                     u2890:
  1401  0006D6  0E00               	movlw	0
  1402  0006D8                     u2892:
  1403  0006D8  0100               	movlb	0	; () banked
  1404  0006DA  6FBA               	movwf	??_main& (0+255),b
  1405  0006DC  0E02               	movlw	2
  1406  0006DE  0101               	movlb	1	; () banked
  1407  0006E0  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1408  0006E2  A4D8               	btfss	status,2,c
  1409  0006E4  D002               	goto	u2900
  1410  0006E6  0E01               	movlw	1
  1411  0006E8  D001               	goto	u2902
  1412  0006EA                     u2900:
  1413  0006EA  0E00               	movlw	0
  1414  0006EC                     u2902:
  1415  0006EC  0100               	movlb	0	; () banked
  1416  0006EE  15BA               	andwf	??_main& (0+255),w,b
  1417  0006F0  A0E8               	btfss	wreg,0,c
  1418  0006F2  D1EA               	goto	l3643
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 218: if (VerifySignal(&ReceivedString)){
  1422  0006F4  0EE6               	movlw	low _ReceivedString
  1423  0006F6  6E24               	movwf	VerifySignal@Signal,c
  1424  0006F8  0E01               	movlw	high _ReceivedString
  1425  0006FA  6E25               	movwf	VerifySignal@Signal+1,c
  1426  0006FC  EC46  F00D         	call	_VerifySignal	;wreg free
  1427  000700  0900               	iorlw	0
  1428  000702  B4D8               	btfsc	status,2,c
  1429  000704  D041               	goto	l3567
  1430                           
  1431                           ;main.c: 220: for (i=0; i<10; i++){
  1432  000706  0E00               	movlw	0
  1433  000708  0101               	movlb	1	; () banked
  1434  00070A  6F83               	movwf	main@i& (0+255),b
  1435  00070C                     l3543:
  1436                           
  1437                           ; BSR set to: 1
  1438  00070C  0E09               	movlw	9
  1439  00070E  0101               	movlb	1	; () banked
  1440  000710  6583               	cpfsgt	main@i& (0+255),b
  1441  000712  D001               	goto	l3547
  1442  000714  D020               	goto	l3553
  1443  000716                     l3547:
  1444                           
  1445                           ; BSR set to: 1
  1446                           ;main.c: 221: Message[i] = ReceivedString[i+1];
  1447  000716  0101               	movlb	1	; () banked
  1448  000718  5183               	movf	main@i& (0+255),w,b
  1449  00071A  0100               	movlb	0	; () banked
  1450  00071C  6FBA               	movwf	??_main& (0+255),b
  1451  00071E  6BBB               	clrf	(??_main+1)& (0+255),b
  1452  000720  0E01               	movlw	1
  1453  000722  0100               	movlb	0	; () banked
  1454  000724  27BA               	addwf	??_main& (0+255),f,b
  1455  000726  0E00               	movlw	0
  1456  000728  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1457  00072A  0EE6               	movlw	low _ReceivedString
  1458  00072C  0100               	movlb	0	; () banked
  1459  00072E  25BA               	addwf	??_main& (0+255),w,b
  1460  000730  6ED9               	movwf	fsr2l,c
  1461  000732  0E01               	movlw	high _ReceivedString
  1462  000734  0100               	movlb	0	; () banked
  1463  000736  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1464  000738  6EDA               	movwf	fsr2h,c
  1465  00073A  0101               	movlb	1	; () banked
  1466  00073C  5183               	movf	main@i& (0+255),w,b
  1467  00073E  0D01               	mullw	1
  1468  000740  0E28               	movlw	low main@Message
  1469  000742  24F3               	addwf	prodl,w,c
  1470  000744  6EE1               	movwf	fsr1l,c
  1471  000746  0E01               	movlw	high main@Message
  1472  000748  20F4               	addwfc	prodh,w,c
  1473  00074A  6EE2               	movwf	fsr1h,c
  1474  00074C  CFDF FFE7          	movff	indf2,indf1
  1475                           
  1476                           ; BSR set to: 1
  1477  000750  0101               	movlb	1	; () banked
  1478  000752  2B83               	incf	main@i& (0+255),f,b
  1479  000754  D7DB               	goto	l3543
  1480  000756                     l3553:
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;main.c: 222: }
  1484                           ;main.c: 225: for (i=0; i<16; i++) {
  1485  000756  0E00               	movlw	0
  1486  000758  0101               	movlb	1	; () banked
  1487  00075A  6F83               	movwf	main@i& (0+255),b
  1488  00075C                     l3555:
  1489                           
  1490                           ; BSR set to: 1
  1491  00075C  0E0F               	movlw	15
  1492  00075E  0101               	movlb	1	; () banked
  1493  000760  6583               	cpfsgt	main@i& (0+255),b
  1494  000762  D001               	goto	l3559
  1495  000764  D00E               	goto	l3565
  1496  000766                     l3559:
  1497                           
  1498                           ; BSR set to: 1
  1499                           ;main.c: 226: ReceivedString[i]=0;
  1500  000766  0101               	movlb	1	; () banked
  1501  000768  5183               	movf	main@i& (0+255),w,b
  1502  00076A  0D01               	mullw	1
  1503  00076C  0EE6               	movlw	low _ReceivedString
  1504  00076E  24F3               	addwf	prodl,w,c
  1505  000770  6ED9               	movwf	fsr2l,c
  1506  000772  0E01               	movlw	high _ReceivedString
  1507  000774  20F4               	addwfc	prodh,w,c
  1508  000776  6EDA               	movwf	fsr2h,c
  1509  000778  0E00               	movlw	0
  1510  00077A  6EDF               	movwf	indf2,c
  1511                           
  1512                           ; BSR set to: 1
  1513  00077C  0101               	movlb	1	; () banked
  1514  00077E  2B83               	incf	main@i& (0+255),f,b
  1515  000780  D7ED               	goto	l3555
  1516  000782                     l3565:
  1517                           
  1518                           ; BSR set to: 1
  1519                           ;main.c: 227: }
  1520                           ;main.c: 228: mode=3;
  1521  000782  0E03               	movlw	3
  1522  000784  6E3B               	movwf	_mode,c	;volatile
  1523                           
  1524                           ;main.c: 230: } else {
  1525  000786  D1A0               	goto	l3643
  1526  000788                     l3567:
  1527                           
  1528                           ;main.c: 231: fullSpeedBack(&mL,&mR, 100);
  1529  000788  0E85               	movlw	low main@mL
  1530  00078A  0100               	movlb	0	; () banked
  1531  00078C  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1532  00078E  0E01               	movlw	high main@mL
  1533  000790  0100               	movlb	0	; () banked
  1534  000792  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1535  000794  0E8E               	movlw	low main@mR
  1536  000796  0100               	movlb	0	; () banked
  1537  000798  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1538  00079A  0E01               	movlw	high main@mR
  1539  00079C  0100               	movlb	0	; () banked
  1540  00079E  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1541  0007A0  0E64               	movlw	100
  1542  0007A2  0100               	movlb	0	; () banked
  1543  0007A4  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1544  0007A6  ECBC  F00D         	call	_fullSpeedBack	;wreg free
  1545                           
  1546                           ;main.c: 232: delay_tenth_s(5);
  1547  0007AA  0E05               	movlw	5
  1548  0007AC  EC36  F00E         	call	_delay_tenth_s
  1549                           
  1550                           ;main.c: 233: stop(&mL,&mR);
  1551  0007B0  0E85               	movlw	low main@mL
  1552  0007B2  0100               	movlb	0	; () banked
  1553  0007B4  6F62               	movwf	stop@mL& (0+255),b
  1554  0007B6  0E01               	movlw	high main@mL
  1555  0007B8  0100               	movlb	0	; () banked
  1556  0007BA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1557  0007BC  0E8E               	movlw	low main@mR
  1558  0007BE  0100               	movlb	0	; () banked
  1559  0007C0  6F64               	movwf	stop@mR& (0+255),b
  1560  0007C2  0E01               	movlw	high main@mR
  1561  0007C4  0100               	movlb	0	; () banked
  1562  0007C6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1563  0007C8  ECD9  F00B         	call	_stop	;wreg free
  1564                           
  1565                           ;main.c: 234: fullSpeed(&mL,&mR, 100);
  1566  0007CC  0E85               	movlw	low main@mL
  1567  0007CE  0100               	movlb	0	; () banked
  1568  0007D0  6F62               	movwf	fullSpeed@mL& (0+255),b
  1569  0007D2  0E01               	movlw	high main@mL
  1570  0007D4  0100               	movlb	0	; () banked
  1571  0007D6  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1572  0007D8  0E8E               	movlw	low main@mR
  1573  0007DA  0100               	movlb	0	; () banked
  1574  0007DC  6F64               	movwf	fullSpeed@mR& (0+255),b
  1575  0007DE  0E01               	movlw	high main@mR
  1576  0007E0  0100               	movlb	0	; () banked
  1577  0007E2  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1578  0007E4  0E64               	movlw	100
  1579  0007E6  0100               	movlb	0	; () banked
  1580  0007E8  6F66               	movwf	fullSpeed@power& (0+255),b
  1581  0007EA  EC65  F00C         	call	_fullSpeed	;wreg free
  1582                           
  1583                           ;main.c: 235: }
  1584                           ;main.c: 236: }
  1585                           ;main.c: 237: } else {
  1586  0007EE  D16C               	goto	l3643
  1587  0007F0                     l3575:
  1588                           
  1589                           ;main.c: 238: DirectionFound=1;
  1590  0007F0  0E01               	movlw	1
  1591  0007F2  0101               	movlb	1	; () banked
  1592  0007F4  6F82               	movwf	main@DirectionFound& (0+255),b
  1593                           
  1594                           ;main.c: 239: mode=1;
  1595  0007F6  0E01               	movlw	1
  1596  0007F8  6E3B               	movwf	_mode,c	;volatile
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;main.c: 241: fullSpeed(&mL,&mR, 100);
  1600  0007FA  0E85               	movlw	low main@mL
  1601  0007FC  0100               	movlb	0	; () banked
  1602  0007FE  6F62               	movwf	fullSpeed@mL& (0+255),b
  1603  000800  0E01               	movlw	high main@mL
  1604  000802  0100               	movlb	0	; () banked
  1605  000804  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1606  000806  0E8E               	movlw	low main@mR
  1607  000808  0100               	movlb	0	; () banked
  1608  00080A  6F64               	movwf	fullSpeed@mR& (0+255),b
  1609  00080C  0E01               	movlw	high main@mR
  1610  00080E  0100               	movlb	0	; () banked
  1611  000810  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1612  000812  0E64               	movlw	100
  1613  000814  0100               	movlb	0	; () banked
  1614  000816  6F66               	movwf	fullSpeed@power& (0+255),b
  1615  000818  EC65  F00C         	call	_fullSpeed	;wreg free
  1616                           
  1617                           ;main.c: 242: delay_tenth_s(1);
  1618  00081C  0E01               	movlw	1
  1619  00081E  EC36  F00E         	call	_delay_tenth_s
  1620                           
  1621                           ;main.c: 243: MoveType[Move] = 0;
  1622  000822  0101               	movlb	1	; () banked
  1623  000824  5184               	movf	main@Move& (0+255),w,b
  1624  000826  0D01               	mullw	1
  1625  000828  0E32               	movlw	low main@MoveType
  1626  00082A  24F3               	addwf	prodl,w,c
  1627  00082C  6ED9               	movwf	fsr2l,c
  1628  00082E  0E01               	movlw	high main@MoveType
  1629  000830  20F4               	addwfc	prodh,w,c
  1630  000832  6EDA               	movwf	fsr2h,c
  1631  000834  0E00               	movlw	0
  1632  000836  6EDF               	movwf	indf2,c
  1633                           
  1634                           ; BSR set to: 1
  1635                           ;main.c: 244: MoveTime[Move] = 5;
  1636  000838  0101               	movlb	1	; () banked
  1637  00083A  5184               	movf	main@Move& (0+255),w,b
  1638  00083C  0D02               	mullw	2
  1639  00083E  0E4B               	movlw	low main@MoveTime
  1640  000840  24F3               	addwf	prodl,w,c
  1641  000842  6ED9               	movwf	fsr2l,c
  1642  000844  0E01               	movlw	high main@MoveTime
  1643  000846  20F4               	addwfc	prodh,w,c
  1644  000848  6EDA               	movwf	fsr2h,c
  1645  00084A  0E05               	movlw	5
  1646  00084C  6EDE               	movwf	postinc2,c
  1647  00084E  0E00               	movlw	0
  1648  000850  6EDD               	movwf	postdec2,c
  1649                           
  1650                           ; BSR set to: 1
  1651                           ;main.c: 245: Move++;
  1652  000852  0101               	movlb	1	; () banked
  1653  000854  2B84               	incf	main@Move& (0+255),f,b
  1654                           
  1655                           ; BSR set to: 1
  1656                           ;main.c: 246: }
  1657                           ;main.c: 248: break;
  1658  000856  D138               	goto	l3643
  1659  000858                     l3587:
  1660                           
  1661                           ;main.c: 253: SetLine(1);
  1662  000858  0E01               	movlw	1
  1663  00085A  EC6D  F000         	call	_SetLine
  1664                           
  1665                           ;main.c: 254: LCD_String(Message);
  1666  00085E  0E28               	movlw	low main@Message
  1667  000860  6E2A               	movwf	LCD_String@string,c
  1668  000862  0E01               	movlw	high main@Message
  1669  000864  6E2B               	movwf	LCD_String@string+1,c
  1670  000866  EC17  F00D         	call	_LCD_String	;wreg free
  1671                           
  1672                           ;main.c: 255: SetLine(2);
  1673  00086A  0E02               	movlw	2
  1674  00086C  EC6D  F000         	call	_SetLine
  1675                           
  1676                           ;main.c: 256: LCD_String("Going Home");
  1677  000870  0E39               	movlw	low STR_8
  1678  000872  6E2A               	movwf	LCD_String@string,c
  1679  000874  0E03               	movlw	high STR_8
  1680  000876  6E2B               	movwf	LCD_String@string+1,c
  1681  000878  EC17  F00D         	call	_LCD_String	;wreg free
  1682  00087C                     l3593:
  1683  00087C  0101               	movlb	1	; () banked
  1684  00087E  BF84               	btfsc	main@Move& (0+255),7,b
  1685  000880  D114               	goto	l3637
  1686                           
  1687                           ; BSR set to: 1
  1688                           ;main.c: 259: stop(&mL,&mR);
  1689                           
  1690                           ; BSR set to: 1
  1691                           
  1692                           ; BSR set to: 1
  1693  000882  0E85               	movlw	low main@mL
  1694  000884  0100               	movlb	0	; () banked
  1695  000886  6F62               	movwf	stop@mL& (0+255),b
  1696  000888  0E01               	movlw	high main@mL
  1697  00088A  0100               	movlb	0	; () banked
  1698  00088C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1699  00088E  0E8E               	movlw	low main@mR
  1700  000890  0100               	movlb	0	; () banked
  1701  000892  6F64               	movwf	stop@mR& (0+255),b
  1702  000894  0E01               	movlw	high main@mR
  1703  000896  0100               	movlb	0	; () banked
  1704  000898  6F65               	movwf	(stop@mR+1)& (0+255),b
  1705  00089A  ECD9  F00B         	call	_stop	;wreg free
  1706                           
  1707                           ;main.c: 260: if (MoveType[Move]==0) {
  1708  00089E  0101               	movlb	1	; () banked
  1709  0008A0  5184               	movf	main@Move& (0+255),w,b
  1710  0008A2  0D01               	mullw	1
  1711  0008A4  0E32               	movlw	low main@MoveType
  1712  0008A6  24F3               	addwf	prodl,w,c
  1713  0008A8  6ED9               	movwf	fsr2l,c
  1714  0008AA  0E01               	movlw	high main@MoveType
  1715  0008AC  20F4               	addwfc	prodh,w,c
  1716  0008AE  6EDA               	movwf	fsr2h,c
  1717  0008B0  50DF               	movf	indf2,w,c
  1718  0008B2  A4D8               	btfss	status,2,c
  1719  0008B4  D01E               	goto	l3603
  1720                           
  1721                           ; BSR set to: 1
  1722                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1723  0008B6  0E85               	movlw	low main@mL
  1724  0008B8  0100               	movlb	0	; () banked
  1725  0008BA  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1726  0008BC  0E01               	movlw	high main@mL
  1727  0008BE  0100               	movlb	0	; () banked
  1728  0008C0  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1729  0008C2  0E8E               	movlw	low main@mR
  1730  0008C4  0100               	movlb	0	; () banked
  1731  0008C6  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1732  0008C8  0E01               	movlw	high main@mR
  1733  0008CA  0100               	movlb	0	; () banked
  1734  0008CC  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1735  0008CE  0E64               	movlw	100
  1736  0008D0  0100               	movlb	0	; () banked
  1737  0008D2  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1738  0008D4  ECBC  F00D         	call	_fullSpeedBack	;wreg free
  1739                           
  1740                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1741  0008D8  0101               	movlb	1	; () banked
  1742  0008DA  5184               	movf	main@Move& (0+255),w,b
  1743  0008DC  0D02               	mullw	2
  1744  0008DE  0E4B               	movlw	low main@MoveTime
  1745  0008E0  24F3               	addwf	prodl,w,c
  1746  0008E2  6ED9               	movwf	fsr2l,c
  1747  0008E4  0E01               	movlw	high main@MoveTime
  1748  0008E6  20F4               	addwfc	prodh,w,c
  1749  0008E8  6EDA               	movwf	fsr2h,c
  1750  0008EA  50DF               	movf	indf2,w,c
  1751  0008EC  EC36  F00E         	call	_delay_tenth_s
  1752                           
  1753                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1754  0008F0  D0D6               	goto	l3629
  1755  0008F2                     l3603:
  1756  0008F2  0101               	movlb	1	; () banked
  1757  0008F4  5184               	movf	main@Move& (0+255),w,b
  1758  0008F6  0D01               	mullw	1
  1759  0008F8  0E32               	movlw	low main@MoveType
  1760  0008FA  24F3               	addwf	prodl,w,c
  1761  0008FC  6ED9               	movwf	fsr2l,c
  1762  0008FE  0E01               	movlw	high main@MoveType
  1763  000900  20F4               	addwfc	prodh,w,c
  1764  000902  6EDA               	movwf	fsr2h,c
  1765  000904  04DE               	decf	postinc2,w,c
  1766  000906  A4D8               	btfss	status,2,c
  1767  000908  D070               	goto	l3621
  1768                           
  1769                           ; BSR set to: 1
  1770                           ;main.c: 264: T0CONbits.TMR0ON=0;
  1771  00090A  9ED5               	bcf	4053,7,c	;volatile
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 265: TMR0L = 0;
  1775  00090C  0E00               	movlw	0
  1776  00090E  6ED6               	movwf	4054,c	;volatile
  1777                           
  1778                           ;main.c: 266: TMR0H = 0;
  1779  000910  0E00               	movlw	0
  1780  000912  6ED7               	movwf	4055,c	;volatile
  1781                           
  1782                           ;main.c: 267: millis = 0;
  1783  000914  0E00               	movlw	0
  1784  000916  0101               	movlb	1	; () banked
  1785  000918  6FF7               	movwf	(_millis+1)& (0+255),b	;volatile
  1786  00091A  0E00               	movlw	0
  1787  00091C  6FF6               	movwf	_millis& (0+255),b	;volatile
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 268: if (MoveTime[Move]>0) {
  1791  00091E  0101               	movlb	1	; () banked
  1792  000920  5184               	movf	main@Move& (0+255),w,b
  1793  000922  0D02               	mullw	2
  1794  000924  0E4B               	movlw	low main@MoveTime
  1795  000926  24F3               	addwf	prodl,w,c
  1796  000928  6ED9               	movwf	fsr2l,c
  1797  00092A  0E01               	movlw	high main@MoveTime
  1798  00092C  20F4               	addwfc	prodh,w,c
  1799  00092E  6EDA               	movwf	fsr2h,c
  1800  000930  0E01               	movlw	1
  1801  000932  BEDB               	btfsc	plusw2,7,c
  1802  000934  D02A               	goto	l426
  1803  000936  0E01               	movlw	1
  1804  000938  50DB               	movf	plusw2,w,c
  1805  00093A  E103               	bnz	u3000
  1806  00093C  04DE               	decf	postinc2,w,c
  1807  00093E  A0D8               	btfss	status,0,c
  1808  000940  D024               	goto	l426
  1809  000942                     u3000:
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;main.c: 269: T0CONbits.TMR0ON=1;
  1813  000942  8ED5               	bsf	4053,7,c	;volatile
  1814                           
  1815                           ; BSR set to: 1
  1816                           ;main.c: 270: turnRight(&mL,&mR,40);
  1817  000944  0E85               	movlw	low main@mL
  1818  000946  0100               	movlb	0	; () banked
  1819  000948  6F67               	movwf	turnRight@mL& (0+255),b
  1820  00094A  0E01               	movlw	high main@mL
  1821  00094C  0100               	movlb	0	; () banked
  1822  00094E  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1823  000950  0E8E               	movlw	low main@mR
  1824  000952  0100               	movlb	0	; () banked
  1825  000954  6F69               	movwf	turnRight@mR& (0+255),b
  1826  000956  0E01               	movlw	high main@mR
  1827  000958  0100               	movlb	0	; () banked
  1828  00095A  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1829  00095C  0E28               	movlw	40
  1830  00095E  0100               	movlb	0	; () banked
  1831  000960  6F6B               	movwf	turnRight@power& (0+255),b
  1832  000962  ECDB  F00D         	call	_turnRight	;wreg free
  1833  000966                     l3615:
  1834  000966  0101               	movlb	1	; () banked
  1835  000968  5184               	movf	main@Move& (0+255),w,b
  1836  00096A  0D02               	mullw	2
  1837  00096C  0E4B               	movlw	low main@MoveTime
  1838  00096E  24F3               	addwf	prodl,w,c
  1839  000970  6ED9               	movwf	fsr2l,c
  1840  000972  0E01               	movlw	high main@MoveTime
  1841  000974  20F4               	addwfc	prodh,w,c
  1842  000976  6EDA               	movwf	fsr2h,c
  1843  000978  50DE               	movf	postinc2,w,c
  1844  00097A  0101               	movlb	1	; () banked
  1845  00097C  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1846  00097E  50DE               	movf	postinc2,w,c
  1847  000980  0101               	movlb	1	; () banked
  1848  000982  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1849  000984  A0D8               	btfss	status,0,c
  1850  000986  D7EF               	goto	l3615
  1851  000988  D02E               	goto	l433
  1852  00098A                     l426:
  1853                           
  1854                           ; BSR set to: 1
  1855                           ;main.c: 275: T0CONbits.TMR0ON=1;
  1856  00098A  8ED5               	bsf	4053,7,c	;volatile
  1857                           
  1858                           ; BSR set to: 1
  1859                           ;main.c: 276: turnLeft(&mL,&mR,40);
  1860  00098C  0E85               	movlw	low main@mL
  1861  00098E  0100               	movlb	0	; () banked
  1862  000990  6F67               	movwf	turnLeft@mL& (0+255),b
  1863  000992  0E01               	movlw	high main@mL
  1864  000994  0100               	movlb	0	; () banked
  1865  000996  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1866  000998  0E8E               	movlw	low main@mR
  1867  00099A  0100               	movlb	0	; () banked
  1868  00099C  6F69               	movwf	turnLeft@mR& (0+255),b
  1869  00099E  0E01               	movlw	high main@mR
  1870  0009A0  0100               	movlb	0	; () banked
  1871  0009A2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1872  0009A4  0E28               	movlw	40
  1873  0009A6  0100               	movlb	0	; () banked
  1874  0009A8  6F6B               	movwf	turnLeft@power& (0+255),b
  1875  0009AA  ECFA  F00D         	call	_turnLeft	;wreg free
  1876  0009AE                     l3619:
  1877  0009AE  0101               	movlb	1	; () banked
  1878  0009B0  5184               	movf	main@Move& (0+255),w,b
  1879  0009B2  0D02               	mullw	2
  1880  0009B4  0E4B               	movlw	low main@MoveTime
  1881  0009B6  24F3               	addwf	prodl,w,c
  1882  0009B8  6ED9               	movwf	fsr2l,c
  1883  0009BA  0E01               	movlw	high main@MoveTime
  1884  0009BC  20F4               	addwfc	prodh,w,c
  1885  0009BE  6EDA               	movwf	fsr2h,c
  1886  0009C0  CFDE F0BA          	movff	postinc2,??_main
  1887  0009C4  CFDD F0BB          	movff	postdec2,??_main+1
  1888  0009C8  0100               	movlb	0	; () banked
  1889  0009CA  1FBA               	comf	??_main& (0+255),f,b
  1890  0009CC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1891  0009CE  4BBA               	infsnz	??_main& (0+255),f,b
  1892  0009D0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1893  0009D2  0100               	movlb	0	; () banked
  1894  0009D4  51BA               	movf	??_main& (0+255),w,b
  1895  0009D6  0101               	movlb	1	; () banked
  1896  0009D8  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1897  0009DA  0100               	movlb	0	; () banked
  1898  0009DC  51BB               	movf	(??_main+1)& (0+255),w,b
  1899  0009DE  0101               	movlb	1	; () banked
  1900  0009E0  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1901  0009E2  A0D8               	btfss	status,0,c
  1902  0009E4  D7E4               	goto	l3619
  1903  0009E6                     l433:
  1904                           
  1905                           ; BSR set to: 1
  1906                           ;main.c: 279: T0CONbits.TMR0ON=0;
  1907  0009E6  9ED5               	bcf	4053,7,c	;volatile
  1908                           
  1909                           ; BSR set to: 1
  1910                           ;main.c: 280: }
  1911                           ;main.c: 281: } else if (MoveType[Move]==2) {
  1912  0009E8  D05A               	goto	l3629
  1913  0009EA                     l3621:
  1914                           
  1915                           ; BSR set to: 1
  1916  0009EA  0101               	movlb	1	; () banked
  1917  0009EC  5184               	movf	main@Move& (0+255),w,b
  1918  0009EE  0D01               	mullw	1
  1919  0009F0  0E32               	movlw	low main@MoveType
  1920  0009F2  24F3               	addwf	prodl,w,c
  1921  0009F4  6ED9               	movwf	fsr2l,c
  1922  0009F6  0E01               	movlw	high main@MoveType
  1923  0009F8  20F4               	addwfc	prodh,w,c
  1924  0009FA  6EDA               	movwf	fsr2h,c
  1925  0009FC  0E02               	movlw	2
  1926  0009FE  18DE               	xorwf	postinc2,w,c
  1927  000A00  A4D8               	btfss	status,2,c
  1928  000A02  D04D               	goto	l3629
  1929                           
  1930                           ; BSR set to: 1
  1931                           ;main.c: 282: if (MoveTime[Move]>0) {
  1932  000A04  0101               	movlb	1	; () banked
  1933  000A06  5184               	movf	main@Move& (0+255),w,b
  1934  000A08  0D02               	mullw	2
  1935  000A0A  0E4B               	movlw	low main@MoveTime
  1936  000A0C  24F3               	addwf	prodl,w,c
  1937  000A0E  6ED9               	movwf	fsr2l,c
  1938  000A10  0E01               	movlw	high main@MoveTime
  1939  000A12  20F4               	addwfc	prodh,w,c
  1940  000A14  6EDA               	movwf	fsr2h,c
  1941  000A16  0E01               	movlw	1
  1942  000A18  BEDB               	btfsc	plusw2,7,c
  1943  000A1A  D024               	goto	l3627
  1944  000A1C  0E01               	movlw	1
  1945  000A1E  50DB               	movf	plusw2,w,c
  1946  000A20  E103               	bnz	u3040
  1947  000A22  04DE               	decf	postinc2,w,c
  1948  000A24  A0D8               	btfss	status,0,c
  1949  000A26  D01E               	goto	l3627
  1950  000A28                     u3040:
  1951                           
  1952                           ; BSR set to: 1
  1953                           ;main.c: 283: turnRight(&mL,&mR,100);
  1954  000A28  0E85               	movlw	low main@mL
  1955  000A2A  0100               	movlb	0	; () banked
  1956  000A2C  6F67               	movwf	turnRight@mL& (0+255),b
  1957  000A2E  0E01               	movlw	high main@mL
  1958  000A30  0100               	movlb	0	; () banked
  1959  000A32  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1960  000A34  0E8E               	movlw	low main@mR
  1961  000A36  0100               	movlb	0	; () banked
  1962  000A38  6F69               	movwf	turnRight@mR& (0+255),b
  1963  000A3A  0E01               	movlw	high main@mR
  1964  000A3C  0100               	movlb	0	; () banked
  1965  000A3E  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1966  000A40  0E64               	movlw	100
  1967  000A42  0100               	movlb	0	; () banked
  1968  000A44  6F6B               	movwf	turnRight@power& (0+255),b
  1969  000A46  ECDB  F00D         	call	_turnRight	;wreg free
  1970                           
  1971                           ;main.c: 284: delay_tenth_s(MoveTime[Move]);
  1972  000A4A  0101               	movlb	1	; () banked
  1973  000A4C  5184               	movf	main@Move& (0+255),w,b
  1974  000A4E  0D02               	mullw	2
  1975  000A50  0E4B               	movlw	low main@MoveTime
  1976  000A52  24F3               	addwf	prodl,w,c
  1977  000A54  6ED9               	movwf	fsr2l,c
  1978  000A56  0E01               	movlw	high main@MoveTime
  1979  000A58  20F4               	addwfc	prodh,w,c
  1980  000A5A  6EDA               	movwf	fsr2h,c
  1981  000A5C  50DF               	movf	indf2,w,c
  1982  000A5E  EC36  F00E         	call	_delay_tenth_s
  1983                           
  1984                           ;main.c: 285: } else {
  1985  000A62  D01D               	goto	l3629
  1986  000A64                     l3627:
  1987                           
  1988                           ;main.c: 286: turnLeft(&mL,&mR,100);
  1989  000A64  0E85               	movlw	low main@mL
  1990  000A66  0100               	movlb	0	; () banked
  1991  000A68  6F67               	movwf	turnLeft@mL& (0+255),b
  1992  000A6A  0E01               	movlw	high main@mL
  1993  000A6C  0100               	movlb	0	; () banked
  1994  000A6E  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1995  000A70  0E8E               	movlw	low main@mR
  1996  000A72  0100               	movlb	0	; () banked
  1997  000A74  6F69               	movwf	turnLeft@mR& (0+255),b
  1998  000A76  0E01               	movlw	high main@mR
  1999  000A78  0100               	movlb	0	; () banked
  2000  000A7A  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2001  000A7C  0E64               	movlw	100
  2002  000A7E  0100               	movlb	0	; () banked
  2003  000A80  6F6B               	movwf	turnLeft@power& (0+255),b
  2004  000A82  ECFA  F00D         	call	_turnLeft	;wreg free
  2005                           
  2006                           ;main.c: 287: delay_tenth_s(MoveTime[Move]);
  2007  000A86  0101               	movlb	1	; () banked
  2008  000A88  5184               	movf	main@Move& (0+255),w,b
  2009  000A8A  0D02               	mullw	2
  2010  000A8C  0E4B               	movlw	low main@MoveTime
  2011  000A8E  24F3               	addwf	prodl,w,c
  2012  000A90  6ED9               	movwf	fsr2l,c
  2013  000A92  0E01               	movlw	high main@MoveTime
  2014  000A94  20F4               	addwfc	prodh,w,c
  2015  000A96  6EDA               	movwf	fsr2h,c
  2016  000A98  50DF               	movf	indf2,w,c
  2017  000A9A  EC36  F00E         	call	_delay_tenth_s
  2018  000A9E                     l3629:
  2019                           
  2020                           ;main.c: 288: }
  2021                           ;main.c: 289: }
  2022                           ;main.c: 290: if (mode==-1) {
  2023  000A9E  283B               	incf	_mode,w,c	;volatile
  2024  000AA0  B4D8               	btfsc	status,2,c
  2025  000AA2  D003               	goto	l3637
  2026                           
  2027                           ;main.c: 291: break;
  2028  000AA4  0101               	movlb	1	; () banked
  2029  000AA6  0784               	decf	main@Move& (0+255),f,b
  2030  000AA8  D6E9               	goto	l3593
  2031  000AAA                     l3637:
  2032                           
  2033                           ;main.c: 292: }
  2034                           ;main.c: 293: }
  2035                           ;main.c: 294: stop(&mL,&mR);
  2036  000AAA  0E85               	movlw	low main@mL
  2037  000AAC  0100               	movlb	0	; () banked
  2038  000AAE  6F62               	movwf	stop@mL& (0+255),b
  2039  000AB0  0E01               	movlw	high main@mL
  2040  000AB2  0100               	movlb	0	; () banked
  2041  000AB4  6F63               	movwf	(stop@mL+1)& (0+255),b
  2042  000AB6  0E8E               	movlw	low main@mR
  2043  000AB8  0100               	movlb	0	; () banked
  2044  000ABA  6F64               	movwf	stop@mR& (0+255),b
  2045  000ABC  0E01               	movlw	high main@mR
  2046  000ABE  0100               	movlb	0	; () banked
  2047  000AC0  6F65               	movwf	(stop@mR+1)& (0+255),b
  2048  000AC2  ECD9  F00B         	call	_stop	;wreg free
  2049  000AC6                     l3639:
  2050                           
  2051                           ;main.c: 295: mode=-1;
  2052  000AC6  683B               	setf	_mode,c	;volatile
  2053  000AC8                     l3643:
  2054  000AC8  503B               	movf	_mode,w,c	;volatile
  2055                           
  2056                           ; Switch size 1, requested type "space"
  2057                           ; Number of cases is 5, Range of values is 0 to 255
  2058                           ; switch strategies available:
  2059                           ; Name         Instructions Cycles
  2060                           ; simple_byte           16     9 (average)
  2061                           ;	Chosen strategy is simple_byte
  2062  000ACA  0A00               	xorlw	0	; case 0
  2063  000ACC  B4D8               	btfsc	status,2,c
  2064  000ACE  D518               	goto	l3485
  2065  000AD0  0A01               	xorlw	1	; case 1
  2066  000AD2  B4D8               	btfsc	status,2,c
  2067  000AD4  D53E               	goto	l3501
  2068  000AD6  0A03               	xorlw	3	; case 2
  2069  000AD8  B4D8               	btfsc	status,2,c
  2070  000ADA  D5E4               	goto	l3533
  2071  000ADC  0A01               	xorlw	1	; case 3
  2072  000ADE  B4D8               	btfsc	status,2,c
  2073  000AE0  D6BB               	goto	l3587
  2074  000AE2  0AFC               	xorlw	252	; case 255
  2075  000AE4  B4D8               	btfsc	status,2,c
  2076  000AE6  D49D               	goto	l3445
  2077  000AE8  D7EF               	goto	l3643
  2078  000AEA                     __end_of_main:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           prodh	equ	0xFF4
  2082                           prodl	equ	0xFF3
  2083                           intcon	equ	0xFF2
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           indf1	equ	0xFE7
  2087                           plusw1	equ	0xFE3
  2088                           fsr1h	equ	0xFE2
  2089                           fsr1l	equ	0xFE1
  2090                           indf2	equ	0xFDF
  2091                           postinc2	equ	0xFDE
  2092                           postdec2	equ	0xFDD
  2093                           plusw2	equ	0xFDB
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _initTimer *****************
  2099 ;; Defined at:
  2100 ;;		line 8 in file "Movement.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;		None
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;		None               void
  2107 ;; Registers used:
  2108 ;;		wreg, status,2
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2114 ;;      Params:         0       0       0       0
  2115 ;;      Locals:         0       0       0       0
  2116 ;;      Temps:          0       0       0       0
  2117 ;;      Totals:         0       0       0       0
  2118 ;;Total ram usage:        0 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    3
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text1
  2129  0001EA                     __ptext1:
  2130                           	opt stack 0
  2131  0001EA                     _initTimer:
  2132                           	opt stack 27
  2133                           
  2134                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2135                           
  2136                           ;incstack = 0
  2137  0001EA  9ED5               	bcf	4053,7,c	;volatile
  2138                           
  2139                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2140  0001EC  8CD5               	bsf	4053,6,c	;volatile
  2141                           
  2142                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2143  0001EE  9AD5               	bcf	4053,5,c	;volatile
  2144                           
  2145                           ;Movement.c: 13: T0CONbits.PSA=0;
  2146  0001F0  96D5               	bcf	4053,3,c	;volatile
  2147                           
  2148                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2149  0001F2  50D5               	movf	4053,w,c	;volatile
  2150  0001F4  0BF8               	andlw	-8
  2151  0001F6  0902               	iorlw	2
  2152  0001F8  6ED5               	movwf	4053,c	;volatile
  2153                           
  2154                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2155  0001FA  8AF2               	bsf	intcon,5,c	;volatile
  2156  0001FC  0012               	return		;funcret
  2157  0001FE                     __end_of_initTimer:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           postinc0	equ	0xFEE
  2164                           wreg	equ	0xFE8
  2165                           indf1	equ	0xFE7
  2166                           plusw1	equ	0xFE3
  2167                           fsr1h	equ	0xFE2
  2168                           fsr1l	equ	0xFE1
  2169                           indf2	equ	0xFDF
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           plusw2	equ	0xFDB
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _initRFID *****************
  2178 ;; Defined at:
  2179 ;;		line 8 in file "RFID_Reader.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;		None               void
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2193 ;;      Params:         0       0       0       0
  2194 ;;      Locals:         0       0       0       0
  2195 ;;      Temps:          0       0       0       0
  2196 ;;      Totals:         0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    3
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text2
  2208  0001CE                     __ptext2:
  2209                           	opt stack 0
  2210  0001CE                     _initRFID:
  2211                           	opt stack 27
  2212                           
  2213                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2214                           
  2215                           ;incstack = 0
  2216  0001CE  5094               	movf	3988,w,c	;volatile
  2217  0001D0  09C0               	iorlw	192
  2218  0001D2  6E94               	movwf	3988,c	;volatile
  2219                           
  2220                           ;RFID_Reader.c: 13: SPBRG=205;
  2221  0001D4  0ECD               	movlw	205
  2222  0001D6  6EAF               	movwf	4015,c	;volatile
  2223                           
  2224                           ;RFID_Reader.c: 14: SPBRGH=0;
  2225  0001D8  0E00               	movlw	0
  2226  0001DA  6EB0               	movwf	4016,c	;volatile
  2227                           
  2228                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2229  0001DC  86AA               	bsf	4010,3,c	;volatile
  2230                           
  2231                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2232  0001DE  84AC               	bsf	4012,2,c	;volatile
  2233                           
  2234                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2235  0001E0  88AB               	bsf	4011,4,c	;volatile
  2236                           
  2237                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2238  0001E2  8EAB               	bsf	4011,7,c	;volatile
  2239                           
  2240                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2241  0001E4  98AC               	bcf	4012,4,c	;volatile
  2242                           
  2243                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2244  0001E6  9CAB               	bcf	4011,6,c	;volatile
  2245  0001E8  0012               	return		;funcret
  2246  0001EA                     __end_of_initRFID:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           indf1	equ	0xFE7
  2255                           plusw1	equ	0xFE3
  2256                           fsr1h	equ	0xFE2
  2257                           fsr1l	equ	0xFE1
  2258                           indf2	equ	0xFDF
  2259                           postinc2	equ	0xFDE
  2260                           postdec2	equ	0xFDD
  2261                           plusw2	equ	0xFDB
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _initMotorPWM *****************
  2267 ;; Defined at:
  2268 ;;		line 4 in file "dc_motor.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;		None               void
  2275 ;; Registers used:
  2276 ;;		wreg, status,2
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2282 ;;      Params:         0       0       0       0
  2283 ;;      Locals:         0       0       0       0
  2284 ;;      Temps:          0       0       0       0
  2285 ;;      Totals:         0       0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    3
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text3
  2297  001C32                     __ptext3:
  2298                           	opt stack 0
  2299  001C32                     _initMotorPWM:
  2300                           	opt stack 27
  2301                           
  2302                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2303                           
  2304                           ;incstack = 0
  2305  001C32  0E00               	movlw	0
  2306  001C34  6E7F               	movwf	3967,c	;volatile
  2307                           
  2308                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2309  001C36  0E80               	movlw	128
  2310  001C38  6E7E               	movwf	3966,c	;volatile
  2311                           
  2312                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2313  001C3A  0E6F               	movlw	111
  2314  001C3C  6E6F               	movwf	3951,c	;volatile
  2315                           
  2316                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2317  001C3E  0E00               	movlw	0
  2318  001C40  6E6E               	movwf	3950,c	;volatile
  2319                           
  2320                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2321  001C42  0EC7               	movlw	199
  2322  001C44  6E7B               	movwf	3963,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2325  001C46  0E00               	movlw	0
  2326  001C48  6E7A               	movwf	3962,c	;volatile
  2327                           
  2328                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2329  001C4A  0E00               	movlw	0
  2330  001C4C  6E79               	movwf	3961,c	;volatile
  2331                           
  2332                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2333  001C4E  0E00               	movlw	0
  2334  001C50  6E78               	movwf	3960,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2337  001C52  0E00               	movlw	0
  2338  001C54  6E77               	movwf	3959,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2341  001C56  0E00               	movlw	0
  2342  001C58  6E76               	movwf	3958,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2345  001C5A  9093               	bcf	3987,0,c	;volatile
  2346                           
  2347                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2348  001C5C  9293               	bcf	3987,1,c	;volatile
  2349                           
  2350                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2351  001C5E  9493               	bcf	3987,2,c	;volatile
  2352                           
  2353                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2354  001C60  9693               	bcf	3987,3,c	;volatile
  2355                           
  2356                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2357  001C62  908A               	bcf	3978,0,c	;volatile
  2358                           
  2359                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2360  001C64  928A               	bcf	3978,1,c	;volatile
  2361                           
  2362                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2363  001C66  948A               	bcf	3978,2,c	;volatile
  2364                           
  2365                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2366  001C68  968A               	bcf	3978,3,c	;volatile
  2367  001C6A  0012               	return		;funcret
  2368  001C6C                     __end_of_initMotorPWM:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           intcon	equ	0xFF2
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           indf1	equ	0xFE7
  2377                           plusw1	equ	0xFE3
  2378                           fsr1h	equ	0xFE2
  2379                           fsr1l	equ	0xFE1
  2380                           indf2	equ	0xFDF
  2381                           postinc2	equ	0xFDE
  2382                           postdec2	equ	0xFDD
  2383                           plusw2	equ	0xFDB
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _initLCD *****************
  2389 ;; Defined at:
  2390 ;;		line 38 in file "LCD.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;		None               void
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2404 ;;      Params:         0       0       0       0
  2405 ;;      Locals:         0       0       0       0
  2406 ;;      Temps:          1       0       0       0
  2407 ;;      Totals:         1       0       0       0
  2408 ;;Total ram usage:        1 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    6
  2411 ;; This function calls:
  2412 ;;		_LCDout
  2413 ;;		_SendLCD
  2414 ;; This function is called by:
  2415 ;;		_main
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text4
  2420  001660                     __ptext4:
  2421                           	opt stack 0
  2422  001660                     _initLCD:
  2423                           	opt stack 24
  2424                           
  2425                           ;LCD.c: 44: TRISAbits.RA6=0;
  2426                           
  2427                           ;incstack = 0
  2428  001660  9C92               	bcf	3986,6,c	;volatile
  2429                           
  2430                           ;LCD.c: 45: TRISCbits.RC0=0;
  2431  001662  9094               	bcf	3988,0,c	;volatile
  2432                           
  2433                           ;LCD.c: 46: TRISCbits.RC1=0;
  2434  001664  9294               	bcf	3988,1,c	;volatile
  2435                           
  2436                           ;LCD.c: 47: TRISCbits.RC2=0;
  2437  001666  9494               	bcf	3988,2,c	;volatile
  2438                           
  2439                           ;LCD.c: 48: TRISDbits.RD0=0;
  2440  001668  9095               	bcf	3989,0,c	;volatile
  2441                           
  2442                           ;LCD.c: 49: TRISDbits.RD1=0;
  2443  00166A  9295               	bcf	3989,1,c	;volatile
  2444                           
  2445                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2446  00166C  0E27               	movlw	39
  2447  00166E  6E2A               	movwf	??_initLCD& (0+255),c
  2448  001670  0EF5               	movlw	245
  2449  001672                     u3097:
  2450  001672  2EE8               	decfsz	wreg,f,c
  2451  001674  D7FE               	goto	u3097
  2452  001676  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2453  001678  D7FC               	goto	u3097
  2454  00167A  F000               	nop	
  2455                           
  2456                           ;LCD.c: 52: LCDout(0b0011);
  2457  00167C  0E03               	movlw	3
  2458  00167E  ECCD  F00A         	call	_LCDout
  2459                           
  2460                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2461  001682  0E0D               	movlw	13
  2462  001684  6E2A               	movwf	??_initLCD& (0+255),c
  2463  001686  0EFC               	movlw	252
  2464  001688                     u3107:
  2465  001688  2EE8               	decfsz	wreg,f,c
  2466  00168A  D7FE               	goto	u3107
  2467  00168C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2468  00168E  D7FC               	goto	u3107
  2469                           
  2470                           ;LCD.c: 54: LCDout(0b0011);
  2471  001690  0E03               	movlw	3
  2472  001692  ECCD  F00A         	call	_LCDout
  2473                           
  2474                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2475  001696  0E85               	movlw	133
  2476  001698                     u3117:
  2477  001698  2EE8               	decfsz	wreg,f,c
  2478  00169A  D7FE               	goto	u3117
  2479  00169C  F000               	nop	
  2480                           
  2481                           ;LCD.c: 56: LCDout(0b0011);
  2482  00169E  0E03               	movlw	3
  2483  0016A0  ECCD  F00A         	call	_LCDout
  2484                           
  2485                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2486  0016A4  0E21               	movlw	33
  2487  0016A6                     u3127:
  2488  0016A6  2EE8               	decfsz	wreg,f,c
  2489  0016A8  D7FE               	goto	u3127
  2490  0016AA  F000               	nop	
  2491                           
  2492                           ;LCD.c: 58: LCDout(0b0010);
  2493  0016AC  0E02               	movlw	2
  2494  0016AE  ECCD  F00A         	call	_LCDout
  2495                           
  2496                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2497  0016B2  0E21               	movlw	33
  2498  0016B4                     u3137:
  2499  0016B4  2EE8               	decfsz	wreg,f,c
  2500  0016B6  D7FE               	goto	u3137
  2501  0016B8  F000               	nop	
  2502                           
  2503                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2504  0016BA  0E00               	movlw	0
  2505  0016BC  6E28               	movwf	SendLCD@type,c
  2506  0016BE  0E28               	movlw	40
  2507  0016C0  EC85  F000         	call	_SendLCD
  2508                           
  2509                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2510  0016C4  0E21               	movlw	33
  2511  0016C6                     u3147:
  2512  0016C6  2EE8               	decfsz	wreg,f,c
  2513  0016C8  D7FE               	goto	u3147
  2514  0016CA  F000               	nop	
  2515                           
  2516                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2517  0016CC  0E00               	movlw	0
  2518  0016CE  6E28               	movwf	SendLCD@type,c
  2519  0016D0  0E08               	movlw	8
  2520  0016D2  EC85  F000         	call	_SendLCD
  2521                           
  2522                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2523  0016D6  0E21               	movlw	33
  2524  0016D8                     u3157:
  2525  0016D8  2EE8               	decfsz	wreg,f,c
  2526  0016DA  D7FE               	goto	u3157
  2527  0016DC  F000               	nop	
  2528                           
  2529                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2530  0016DE  0E00               	movlw	0
  2531  0016E0  6E28               	movwf	SendLCD@type,c
  2532  0016E2  0E01               	movlw	1
  2533  0016E4  EC85  F000         	call	_SendLCD
  2534                           
  2535                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2536  0016E8  0E0D               	movlw	13
  2537  0016EA  6E2A               	movwf	??_initLCD& (0+255),c
  2538  0016EC  0EFC               	movlw	252
  2539  0016EE                     u3167:
  2540  0016EE  2EE8               	decfsz	wreg,f,c
  2541  0016F0  D7FE               	goto	u3167
  2542  0016F2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2543  0016F4  D7FC               	goto	u3167
  2544                           
  2545                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2546  0016F6  0E00               	movlw	0
  2547  0016F8  6E28               	movwf	SendLCD@type,c
  2548  0016FA  0E06               	movlw	6
  2549  0016FC  EC85  F000         	call	_SendLCD
  2550                           
  2551                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2552  001700  0E21               	movlw	33
  2553  001702                     u3177:
  2554  001702  2EE8               	decfsz	wreg,f,c
  2555  001704  D7FE               	goto	u3177
  2556  001706  F000               	nop	
  2557                           
  2558                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2559  001708  0E00               	movlw	0
  2560  00170A  6E28               	movwf	SendLCD@type,c
  2561  00170C  0E0C               	movlw	12
  2562  00170E  EC85  F000         	call	_SendLCD
  2563                           
  2564                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2565  001712  0E21               	movlw	33
  2566  001714                     u3187:
  2567  001714  2EE8               	decfsz	wreg,f,c
  2568  001716  D7FE               	goto	u3187
  2569  001718  F000               	nop	
  2570  00171A  0012               	return		;funcret
  2571  00171C                     __end_of_initLCD:
  2572                           	opt stack 0
  2573                           tblptru	equ	0xFF8
  2574                           prodh	equ	0xFF4
  2575                           prodl	equ	0xFF3
  2576                           intcon	equ	0xFF2
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           indf1	equ	0xFE7
  2580                           plusw1	equ	0xFE3
  2581                           fsr1h	equ	0xFE2
  2582                           fsr1l	equ	0xFE1
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           plusw2	equ	0xFDB
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _initIR *****************
  2592 ;; Defined at:
  2593 ;;		line 30 in file "IR_Reading.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;		None
  2598 ;; Return value:  Size  Location     Type
  2599 ;;		None               void
  2600 ;; Registers used:
  2601 ;;		wreg, status,2
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2607 ;;      Params:         0       0       0       0
  2608 ;;      Locals:         0       0       0       0
  2609 ;;      Temps:          0       0       0       0
  2610 ;;      Totals:         0       0       0       0
  2611 ;;Total ram usage:        0 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    3
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_main
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text5
  2622  001CDC                     __ptext5:
  2623                           	opt stack 0
  2624  001CDC                     _initIR:
  2625                           	opt stack 27
  2626                           
  2627                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2628                           
  2629                           ;incstack = 0
  2630  001CDC  9489               	bcf	3977,2,c	;volatile
  2631                           
  2632                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2633  001CDE  9689               	bcf	3977,3,c	;volatile
  2634                           
  2635                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2636  001CE0  8492               	bsf	3986,2,c	;volatile
  2637                           
  2638                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2639  001CE2  8692               	bsf	3986,3,c	;volatile
  2640                           
  2641                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2642  001CE4  94B8               	bcf	4024,2,c	;volatile
  2643                           
  2644                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2645  001CE6  96B8               	bcf	4024,3,c	;volatile
  2646                           
  2647                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2648  001CE8  9CB8               	bcf	4024,6,c	;volatile
  2649                           
  2650                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2651  001CEA  9EB8               	bcf	4024,7,c	;volatile
  2652                           
  2653                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2654  001CEC  0E06               	movlw	6
  2655  001CEE  6E63               	movwf	3939,c	;volatile
  2656                           
  2657                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2658  001CF0  0E06               	movlw	6
  2659  001CF2  6E62               	movwf	3938,c	;volatile
  2660                           
  2661                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2662  001CF4  9096               	bcf	3990,0,c	;volatile
  2663                           
  2664                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2665  001CF6  9296               	bcf	3990,1,c	;volatile
  2666                           
  2667                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2668  001CF8  0E59               	movlw	89
  2669  001CFA  6EB7               	movwf	4023,c	;volatile
  2670  001CFC  0012               	return		;funcret
  2671  001CFE                     __end_of_initIR:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           intcon	equ	0xFF2
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf1	equ	0xFE7
  2680                           plusw1	equ	0xFE3
  2681                           fsr1h	equ	0xFE2
  2682                           fsr1l	equ	0xFE1
  2683                           indf2	equ	0xFDF
  2684                           postinc2	equ	0xFDE
  2685                           postdec2	equ	0xFDD
  2686                           plusw2	equ	0xFDB
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _fullSpeedBack *****************
  2692 ;; Defined at:
  2693 ;;		line 138 in file "dc_motor.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2696 ;;		 -> main@mL(9), 
  2697 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2698 ;;		 -> main@mR(9), 
  2699 ;;  power           1   11[BANK0 ] unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;		None               void
  2704 ;; Registers used:
  2705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2711 ;;      Params:         0       5       0       0
  2712 ;;      Locals:         0       0       0       0
  2713 ;;      Temps:          0       0       0       0
  2714 ;;      Totals:         0       5       0       0
  2715 ;;Total ram usage:        5 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    6
  2718 ;; This function calls:
  2719 ;;		_fullSpeed
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text6
  2726  001B78                     __ptext6:
  2727                           	opt stack 0
  2728  001B78                     _fullSpeedBack:
  2729                           	opt stack 24
  2730                           
  2731                           ;dc_motor.c: 141: mL->direction=0;
  2732                           
  2733                           ;incstack = 0
  2734  001B78  0100               	movlb	0	; () banked
  2735  001B7A  EE20 F001          	lfsr	2,1
  2736  001B7E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2737  001B80  26D9               	addwf	fsr2l,f,c
  2738  001B82  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2739  001B84  22DA               	addwfc	fsr2h,f,c
  2740  001B86  0E00               	movlw	0
  2741  001B88  6EDF               	movwf	indf2,c
  2742                           
  2743                           ;dc_motor.c: 142: mR->direction=0;
  2744  001B8A  0100               	movlb	0	; () banked
  2745  001B8C  EE20 F001          	lfsr	2,1
  2746  001B90  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2747  001B92  26D9               	addwf	fsr2l,f,c
  2748  001B94  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2749  001B96  22DA               	addwfc	fsr2h,f,c
  2750  001B98  0E00               	movlw	0
  2751  001B9A  6EDF               	movwf	indf2,c
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2755  001B9C  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2756  001BA0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2757  001BA4  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2758  001BA8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2759  001BAC  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2760  001BB0  EC65  F00C         	call	_fullSpeed	;wreg free
  2761  001BB4  0012               	return		;funcret
  2762  001BB6                     __end_of_fullSpeedBack:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           indf1	equ	0xFE7
  2771                           plusw1	equ	0xFE3
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           indf2	equ	0xFDF
  2775                           postinc2	equ	0xFDE
  2776                           postdec2	equ	0xFDD
  2777                           plusw2	equ	0xFDB
  2778                           fsr2h	equ	0xFDA
  2779                           fsr2l	equ	0xFD9
  2780                           status	equ	0xFD8
  2781                           
  2782 ;; *************** function _enableSensor *****************
  2783 ;; Defined at:
  2784 ;;		line 106 in file "IR_Reading.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  sensor          1    wreg     unsigned char 
  2787 ;;  status          1   35[COMRAM] unsigned char 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  sensor          1   36[COMRAM] unsigned char 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;		None               void
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2799 ;;      Params:         1       0       0       0
  2800 ;;      Locals:         1       0       0       0
  2801 ;;      Temps:          0       0       0       0
  2802 ;;      Totals:         2       0       0       0
  2803 ;;Total ram usage:        2 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    3
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text7
  2814  000164                     __ptext7:
  2815                           	opt stack 0
  2816  000164                     _enableSensor:
  2817                           	opt stack 27
  2818                           
  2819                           ;incstack = 0
  2820                           ;enableSensor@sensor stored from wreg
  2821  000164  6E25               	movwf	enableSensor@sensor,c
  2822                           
  2823                           ;IR_Reading.c: 108: if (sensor==0){
  2824  000166  5025               	movf	enableSensor@sensor,w,c
  2825  000168  A4D8               	btfss	status,2,c
  2826  00016A  D006               	goto	l2445
  2827                           
  2828                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2829  00016C  B024               	btfsc	enableSensor@status,0,c
  2830  00016E  D002               	bra	u1845
  2831  000170  908D               	bcf	3981,0,c	;volatile
  2832  000172  D001               	bra	u1846
  2833  000174                     u1845:
  2834  000174  808D               	bsf	3981,0,c	;volatile
  2835  000176                     u1846:
  2836                           
  2837                           ;IR_Reading.c: 110: } else if (sensor==1){
  2838  000176  0012               	return	
  2839  000178                     l2445:
  2840  000178  0425               	decf	enableSensor@sensor,w,c
  2841  00017A  A4D8               	btfss	status,2,c
  2842  00017C  0012               	return	
  2843                           
  2844                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2845  00017E  B024               	btfsc	enableSensor@status,0,c
  2846  000180  D002               	bra	u1865
  2847  000182  928D               	bcf	3981,1,c	;volatile
  2848  000184  D001               	bra	u1866
  2849  000186                     u1865:
  2850  000186  828D               	bsf	3981,1,c	;volatile
  2851  000188                     u1866:
  2852  000188  0012               	return	
  2853  00018A                     __end_of_enableSensor:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           indf1	equ	0xFE7
  2862                           plusw1	equ	0xFE3
  2863                           fsr1h	equ	0xFE2
  2864                           fsr1l	equ	0xFE1
  2865                           indf2	equ	0xFDF
  2866                           postinc2	equ	0xFDE
  2867                           postdec2	equ	0xFDD
  2868                           plusw2	equ	0xFDB
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _VerifySignal *****************
  2874 ;; Defined at:
  2875 ;;		line 53 in file "RFID_Reader.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2878 ;;		 -> ReceivedString(16), 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  ptr             3    0        PTR unsigned char 
  2881 ;;  hexByte         2   43[COMRAM] unsigned int 
  2882 ;;  checksum        1   42[COMRAM] unsigned char 
  2883 ;;  i               1   41[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      unsigned char 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2893 ;;      Params:         2       0       0       0
  2894 ;;      Locals:         4       0       0       0
  2895 ;;      Temps:          4       0       0       0
  2896 ;;      Totals:        10       0       0       0
  2897 ;;Total ram usage:       10 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    3
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_main
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text8
  2908  001A8C                     __ptext8:
  2909                           	opt stack 0
  2910  001A8C                     _VerifySignal:
  2911                           	opt stack 27
  2912                           
  2913                           ;RFID_Reader.c: 54: unsigned char checksum=0;
  2914                           
  2915                           ;incstack = 0
  2916  001A8C  0E00               	movlw	0
  2917  001A8E  6E2B               	movwf	VerifySignal@checksum,c
  2918                           
  2919                           ;RFID_Reader.c: 55: unsigned int hexByte=0;
  2920  001A90  0E00               	movlw	0
  2921  001A92  6E2D               	movwf	VerifySignal@hexByte+1,c
  2922  001A94  0E00               	movlw	0
  2923  001A96  6E2C               	movwf	VerifySignal@hexByte,c
  2924                           
  2925                           ;RFID_Reader.c: 56: unsigned char i=0;
  2926  001A98  0E00               	movlw	0
  2927  001A9A  6E2A               	movwf	VerifySignal@i,c
  2928                           
  2929                           ;RFID_Reader.c: 57: unsigned char *ptr;
  2930                           ;RFID_Reader.c: 60: hexByte = (Signal[3]<<8) + Signal[4];
  2931  001A9C  EE20 F004          	lfsr	2,4
  2932  001AA0  5024               	movf	VerifySignal@Signal,w,c
  2933  001AA2  26D9               	addwf	fsr2l,f,c
  2934  001AA4  5025               	movf	VerifySignal@Signal+1,w,c
  2935  001AA6  22DA               	addwfc	fsr2h,f,c
  2936  001AA8  50DF               	movf	indf2,w,c
  2937  001AAA  6E26               	movwf	??_VerifySignal& (0+255),c
  2938  001AAC  EE20 F003          	lfsr	2,3
  2939  001AB0  5024               	movf	VerifySignal@Signal,w,c
  2940  001AB2  26D9               	addwf	fsr2l,f,c
  2941  001AB4  5025               	movf	VerifySignal@Signal+1,w,c
  2942  001AB6  22DA               	addwfc	fsr2h,f,c
  2943  001AB8  50DF               	movf	indf2,w,c
  2944  001ABA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2945  001ABC  5027               	movf	??_VerifySignal+1,w,c
  2946  001ABE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2947  001AC0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2948  001AC2  5026               	movf	??_VerifySignal,w,c
  2949  001AC4  2428               	addwf	??_VerifySignal+2,w,c
  2950  001AC6  6E2C               	movwf	VerifySignal@hexByte,c
  2951  001AC8  0E00               	movlw	0
  2952  001ACA  2029               	addwfc	??_VerifySignal+3,w,c
  2953  001ACC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2954                           
  2955                           ;RFID_Reader.c: 61: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2956  001ACE  EE20 F002          	lfsr	2,2
  2957  001AD2  5024               	movf	VerifySignal@Signal,w,c
  2958  001AD4  26D9               	addwf	fsr2l,f,c
  2959  001AD6  5025               	movf	VerifySignal@Signal+1,w,c
  2960  001AD8  22DA               	addwfc	fsr2h,f,c
  2961  001ADA  50DF               	movf	indf2,w,c
  2962  001ADC  182C               	xorwf	VerifySignal@hexByte,w,c
  2963  001ADE  6E2B               	movwf	VerifySignal@checksum,c
  2964                           
  2965                           ;RFID_Reader.c: 70: return 1;
  2966  001AE0  0E01               	movlw	1
  2967  001AE2  0012               	return	
  2968  001AE4                     __end_of_VerifySignal:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           indf1	equ	0xFE7
  2977                           plusw1	equ	0xFE3
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           plusw2	equ	0xFDB
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _ScanWithRange *****************
  2989 ;; Defined at:
  2990 ;;		line 98 in file "Movement.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2993 ;;		 -> main@mL(9), 
  2994 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2995 ;;		 -> main@mR(9), 
  2996 ;;  loops           2   17[BANK0 ] int 
  2997 ;;  MoveTime        2   19[BANK0 ] PTR int 
  2998 ;;		 -> main@MoveTime(50), 
  2999 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3000 ;;		 -> main@Move(1), 
  3001 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3002 ;;		 -> main@MoveType(25), 
  3003 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3004 ;;		 -> RFID_Read(1), 
  3005 ;;  millis          2   27[BANK0 ] PTR unsigned int 
  3006 ;;		 -> millis(2), 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  buf            40   33[BANK0 ] unsigned char [40]
  3009 ;;  SensorResult    4   83[BANK0 ] unsigned int [2]
  3010 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3011 ;;  TimeAboveThr    2   81[BANK0 ] unsigned int 
  3012 ;;  LeftFlag        2   79[BANK0 ] unsigned int 
  3013 ;;  DirectionFou    2   75[BANK0 ] const unsigned int 
  3014 ;;  i               2   73[BANK0 ] unsigned int 
  3015 ;;  LeftFlick       1   87[BANK0 ] const char 
  3016 ;;  MiniLeftFlic    1   78[BANK0 ] const unsigned char 
  3017 ;;  MotorPower      1   77[BANK0 ] const unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      unsigned char 
  3020 ;; Registers used:
  3021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3027 ;;      Params:         0      16       0       0
  3028 ;;      Locals:         0      57       0       0
  3029 ;;      Temps:          0       4       0       0
  3030 ;;      Totals:         0      77       0       0
  3031 ;;Total ram usage:       77 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    7
  3034 ;; This function calls:
  3035 ;;		_LCD_String
  3036 ;;		_SendLCD
  3037 ;;		_SetLine
  3038 ;;		_delay_tenth_s
  3039 ;;		_grabLeftIR
  3040 ;;		_grabRightIR
  3041 ;;		_sprintf
  3042 ;;		_stop
  3043 ;;		_turnLeft
  3044 ;;		_turnRight
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text9
  3051  000AEA                     __ptext9:
  3052                           	opt stack 0
  3053  000AEA                     _ScanWithRange:
  3054                           	opt stack 23
  3055                           
  3056                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3057                           
  3058                           ;incstack = 0
  3059  000AEA  C0C0  F0B3         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  3060  000AEE  C0C1  F0B4         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  3061  000AF2  C0C2  F0B5         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  3062  000AF6  C0C3  F0B6         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  3063                           
  3064                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3065  000AFA  0E00               	movlw	0
  3066  000AFC  0100               	movlb	0	; () banked
  3067  000AFE  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3068  000B00  0E00               	movlw	0
  3069  000B02  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3070                           
  3071                           ;Movement.c: 105: unsigned int RightFlag=0;
  3072  000B04  0E00               	movlw	0
  3073  000B06  0100               	movlb	0	; () banked
  3074  000B08  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3075  000B0A  0E00               	movlw	0
  3076  000B0C  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3077                           
  3078                           ;Movement.c: 106: char buf[40];
  3079                           ;Movement.c: 107: unsigned int i=0;
  3080  000B0E  0E00               	movlw	0
  3081  000B10  0100               	movlb	0	; () banked
  3082  000B12  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3083  000B14  0E00               	movlw	0
  3084  000B16  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3085                           
  3086                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3087  000B18  0E00               	movlw	0
  3088  000B1A  0100               	movlb	0	; () banked
  3089  000B1C  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3090  000B1E  0E00               	movlw	0
  3091  000B20  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3092                           
  3093                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3094  000B22  0E03               	movlw	3
  3095  000B24  0100               	movlb	0	; () banked
  3096  000B26  6FAC               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3097  000B28  0EE8               	movlw	232
  3098  000B2A  6FAB               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3099                           
  3100                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3101  000B2C  0E28               	movlw	40
  3102  000B2E  0100               	movlb	0	; () banked
  3103  000B30  6FAD               	movwf	ScanWithRange@MotorPower& (0+255),b
  3104                           
  3105                           ;Movement.c: 114: const signed char LeftFlick=2;
  3106  000B32  0E02               	movlw	2
  3107  000B34  0100               	movlb	0	; () banked
  3108  000B36  6FB7               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3109                           
  3110                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3111  000B38  0E01               	movlw	1
  3112  000B3A  0100               	movlb	0	; () banked
  3113  000B3C  6FAE               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3117  000B3E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3118  000B42  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3119  000B46  50DF               	movf	indf2,w,c
  3120  000B48  0100               	movlb	0	; () banked
  3121  000B4A  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3122  000B4C  0100               	movlb	0	; () banked
  3123  000B4E  517D               	movf	??_ScanWithRange& (0+255),w,b
  3124  000B50  0D01               	mullw	1
  3125  000B52  50F3               	movf	prodl,w,c
  3126  000B54  0100               	movlb	0	; () banked
  3127  000B56  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3128  000B58  6ED9               	movwf	fsr2l,c
  3129  000B5A  50F4               	movf	prodh,w,c
  3130  000B5C  0100               	movlb	0	; () banked
  3131  000B5E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3132  000B60  6EDA               	movwf	fsr2h,c
  3133  000B62  0E02               	movlw	2
  3134  000B64  6EDF               	movwf	indf2,c
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3138  000B66  C0B7  F07D         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3139  000B6A  0100               	movlb	0	; () banked
  3140  000B6C  6B7E               	clrf	(??_ScanWithRange+1)& (0+255),b
  3141  000B6E  BF7D               	btfsc	??_ScanWithRange& (0+255),7,b
  3142  000B70  077E               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3143  000B72  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3144  000B76  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3145  000B7A  50DF               	movf	indf2,w,c
  3146  000B7C  0100               	movlb	0	; () banked
  3147  000B7E  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3148  000B80  0100               	movlb	0	; () banked
  3149  000B82  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3150  000B84  0D02               	mullw	2
  3151  000B86  50F3               	movf	prodl,w,c
  3152  000B88  0100               	movlb	0	; () banked
  3153  000B8A  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3154  000B8C  6ED9               	movwf	fsr2l,c
  3155  000B8E  50F4               	movf	prodh,w,c
  3156  000B90  0100               	movlb	0	; () banked
  3157  000B92  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3158  000B94  6EDA               	movwf	fsr2h,c
  3159  000B96  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3160  000B9A  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;Movement.c: 126: *Move = *Move+1;
  3164  000B9E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3165  000BA2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3166  000BA6  50DF               	movf	indf2,w,c
  3167  000BA8  0100               	movlb	0	; () banked
  3168  000BAA  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3169  000BAC  0100               	movlb	0	; () banked
  3170  000BAE  297D               	incf	??_ScanWithRange& (0+255),w,b
  3171  000BB0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3172  000BB4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3173  000BB8  6EDF               	movwf	indf2,c
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3177  000BBA  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3178  000BBE  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3179  000BC2  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3180  000BC6  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3181  000BCA  0E64               	movlw	100
  3182  000BCC  0100               	movlb	0	; () banked
  3183  000BCE  6F6B               	movwf	turnLeft@power& (0+255),b
  3184  000BD0  ECFA  F00D         	call	_turnLeft	;wreg free
  3185                           
  3186                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3187  000BD4  0100               	movlb	0	; () banked
  3188  000BD6  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3189  000BD8  EC36  F00E         	call	_delay_tenth_s
  3190                           
  3191                           ;Movement.c: 129: stop(mL,mR);
  3192  000BDC  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3193  000BE0  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3194  000BE4  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3195  000BE8  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3196  000BEC  ECD9  F00B         	call	_stop	;wreg free
  3197                           
  3198                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3199  000BF0  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3200  000BF4  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3201  000BF8  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3202  000BFC  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3203  000C00  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3204  000C04  ECDB  F00D         	call	_turnRight	;wreg free
  3205                           
  3206                           ;Movement.c: 135: TMR0L = 0;
  3207  000C08  0E00               	movlw	0
  3208  000C0A  6ED6               	movwf	4054,c	;volatile
  3209                           
  3210                           ;Movement.c: 136: TMR0H = 0;
  3211  000C0C  0E00               	movlw	0
  3212  000C0E  6ED7               	movwf	4055,c	;volatile
  3213                           
  3214                           ;Movement.c: 137: *millis = 0;
  3215  000C10  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3216  000C14  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3217  000C18  0E00               	movlw	0
  3218  000C1A  6EDE               	movwf	postinc2,c
  3219  000C1C  0E00               	movlw	0
  3220  000C1E  6EDD               	movwf	postdec2,c
  3221                           
  3222                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3223  000C20  8ED5               	bsf	4053,7,c	;volatile
  3224                           
  3225                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3226  000C22  0E00               	movlw	0
  3227  000C24  0100               	movlb	0	; () banked
  3228  000C26  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3229  000C28  0E01               	movlw	1
  3230  000C2A  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3231  000C2C  D1BA               	goto	l3375
  3232  000C2E                     l3281:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3236  000C2E  ECDE  F00C         	call	_grabLeftIR	;wreg free
  3237  000C32  C024  F0B3         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3238  000C36  C025  F0B4         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3239                           
  3240                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3241  000C3A  ECA5  F00C         	call	_grabRightIR	;wreg free
  3242  000C3E  C024  F0B5         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3243  000C42  C025  F0B6         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3244                           
  3245                           ;Movement.c: 148: CAP1BUFH=0;
  3246  000C46  0E00               	movlw	0
  3247  000C48  6E69               	movwf	3945,c	;volatile
  3248                           
  3249                           ;Movement.c: 149: CAP1BUFL=0;
  3250  000C4A  0E00               	movlw	0
  3251  000C4C  6E68               	movwf	3944,c	;volatile
  3252                           
  3253                           ;Movement.c: 150: CAP2BUFH=0;
  3254  000C4E  0E00               	movlw	0
  3255  000C50  6E67               	movwf	3943,c	;volatile
  3256                           
  3257                           ;Movement.c: 151: CAP2BUFL=0;
  3258  000C52  0E00               	movlw	0
  3259  000C54  6E66               	movwf	3942,c	;volatile
  3260                           
  3261                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3262  000C56  0E00               	movlw	0
  3263  000C58  6E28               	movwf	SendLCD@type,c
  3264  000C5A  0E01               	movlw	1
  3265  000C5C  EC85  F000         	call	_SendLCD
  3266                           
  3267                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3268  000C60  0E21               	movlw	33
  3269  000C62                     u3197:
  3270  000C62  2EE8               	decfsz	wreg,f,c
  3271  000C64  D7FE               	goto	u3197
  3272  000C66  F000               	nop	
  3273                           
  3274                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3275  000C68  0E00               	movlw	0
  3276  000C6A  6E28               	movwf	SendLCD@type,c
  3277  000C6C  0E02               	movlw	2
  3278  000C6E  EC85  F000         	call	_SendLCD
  3279                           
  3280                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3281  000C72  0E06               	movlw	6
  3282  000C74  0100               	movlb	0	; () banked
  3283  000C76  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3284  000C78  0E30               	movlw	48
  3285  000C7A                     u3207:
  3286  000C7A  2EE8               	decfsz	wreg,f,c
  3287  000C7C  D7FE               	goto	u3207
  3288  000C7E  2F7D               	decfsz	??_ScanWithRange& (0+255),f,b
  3289  000C80  D7FC               	goto	u3207
  3290  000C82  D000               	nop2	
  3291                           
  3292                           ;Movement.c: 159: SetLine(1);
  3293  000C84  0E01               	movlw	1
  3294  000C86  EC6D  F000         	call	_SetLine
  3295                           
  3296                           ;Movement.c: 160: LCD_String("     ScanIR");
  3297  000C8A  0E2D               	movlw	low STR_1
  3298  000C8C  6E2A               	movwf	LCD_String@string,c
  3299  000C8E  0E03               	movlw	high STR_1
  3300  000C90  6E2B               	movwf	LCD_String@string+1,c
  3301  000C92  EC17  F00D         	call	_LCD_String	;wreg free
  3302                           
  3303                           ;Movement.c: 161: SetLine(2);
  3304  000C96  0E02               	movlw	2
  3305  000C98  EC6D  F000         	call	_SetLine
  3306                           
  3307                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3308  000C9C  0E81               	movlw	low ScanWithRange@buf
  3309  000C9E  6E30               	movwf	sprintf@sp,c
  3310  000CA0  0E00               	movlw	high ScanWithRange@buf
  3311  000CA2  6E31               	movwf	sprintf@sp+1,c
  3312  000CA4  0E0C               	movlw	low (STR_6+1)
  3313  000CA6  6E32               	movwf	sprintf@f,c
  3314  000CA8  0E03               	movlw	high (STR_6+1)
  3315  000CAA  6E33               	movwf	sprintf@f+1,c
  3316  000CAC  C0B3  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3317  000CB0  C0B4  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3318  000CB4  C0B5  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3319  000CB8  C0B6  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3320  000CBC  EC30  F008         	call	_sprintf	;wreg free
  3321                           
  3322                           ;Movement.c: 163: LCD_String(buf);
  3323  000CC0  0E81               	movlw	low ScanWithRange@buf
  3324  000CC2  6E2A               	movwf	LCD_String@string,c
  3325  000CC4  0E00               	movlw	high ScanWithRange@buf
  3326  000CC6  6E2B               	movwf	LCD_String@string+1,c
  3327  000CC8  EC17  F00D         	call	_LCD_String	;wreg free
  3328                           
  3329                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3330  000CCC  0100               	movlb	0	; () banked
  3331  000CCE  51B5               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3332  000CD0  0100               	movlb	0	; () banked
  3333  000CD2  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3334  000CD4  0100               	movlb	0	; () banked
  3335  000CD6  51B6               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3336  000CD8  0100               	movlb	0	; () banked
  3337  000CDA  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3338  000CDC  B0D8               	btfsc	status,0,c
  3339  000CDE  D008               	goto	l3309
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;Movement.c: 168: RightFlag=*millis;
  3343  000CE0  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3344  000CE4  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3345  000CE8  CFDE F0B8          	movff	postinc2,ScanWithRange@RightFlag
  3346  000CEC  CFDD F0B9          	movff	postdec2,ScanWithRange@RightFlag+1
  3347  000CF0                     l3309:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;Movement.c: 169: }
  3351                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3352  000CF0  0100               	movlb	0	; () banked
  3353  000CF2  51B3               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3354  000CF4  0100               	movlb	0	; () banked
  3355  000CF6  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3356  000CF8  0100               	movlb	0	; () banked
  3357  000CFA  51B4               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3358  000CFC  0100               	movlb	0	; () banked
  3359  000CFE  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3360  000D00  B0D8               	btfsc	status,0,c
  3361  000D02  D008               	goto	l3313
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Movement.c: 172: LeftFlag=*millis;
  3365  000D04  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3366  000D08  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3367  000D0C  CFDE F0AF          	movff	postinc2,ScanWithRange@LeftFlag
  3368  000D10  CFDD F0B0          	movff	postdec2,ScanWithRange@LeftFlag+1
  3369  000D14                     l3313:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Movement.c: 173: }
  3373                           ;Movement.c: 180: if (LeftFlag>0) {
  3374  000D14  0100               	movlb	0	; () banked
  3375  000D16  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3376  000D18  0100               	movlb	0	; () banked
  3377  000D1A  11B0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3378  000D1C  B4D8               	btfsc	status,2,c
  3379  000D1E  D135               	goto	l3367
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Movement.c: 183: if (RightFlag>0) {
  3383  000D20  0100               	movlb	0	; () banked
  3384  000D22  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3385  000D24  0100               	movlb	0	; () banked
  3386  000D26  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3387  000D28  B4D8               	btfsc	status,2,c
  3388  000D2A  D09B               	goto	l229
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3392  000D2C  C0B8  F07D         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3393  000D30  C0B9  F07E         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3394  000D34  0100               	movlb	0	; () banked
  3395  000D36  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3396  000D38  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3397  000D3A  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3398  000D3C  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3399  000D3E  0100               	movlb	0	; () banked
  3400  000D40  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3401  000D42  0100               	movlb	0	; () banked
  3402  000D44  257D               	addwf	??_ScanWithRange& (0+255),w,b
  3403  000D46  0100               	movlb	0	; () banked
  3404  000D48  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3405  000D4A  0100               	movlb	0	; () banked
  3406  000D4C  51B0               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3407  000D4E  0100               	movlb	0	; () banked
  3408  000D50  217E               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3409  000D52  0100               	movlb	0	; () banked
  3410  000D54  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;Movement.c: 185: TMR0L = 0;
  3414  000D56  0E00               	movlw	0
  3415  000D58  6ED6               	movwf	4054,c	;volatile
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Movement.c: 186: TMR0H = 0;
  3419  000D5A  0E00               	movlw	0
  3420  000D5C  6ED7               	movwf	4055,c	;volatile
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;Movement.c: 187: *millis = 0;
  3424  000D5E  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3425  000D62  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3426  000D66  0E00               	movlw	0
  3427  000D68  6EDE               	movwf	postinc2,c
  3428  000D6A  0E00               	movlw	0
  3429  000D6C  6EDD               	movwf	postdec2,c
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;Movement.c: 188: stop(mL,mR);
  3433  000D6E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3434  000D72  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3435  000D76  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3436  000D7A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3437  000D7E  ECD9  F00B         	call	_stop	;wreg free
  3438                           
  3439                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3440  000D82  D00C               	goto	l3329
  3441  000D84                     l3327:
  3442                           
  3443                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3444  000D84  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3445  000D88  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3446  000D8C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3447  000D90  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3448  000D94  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3449  000D98  ECFA  F00D         	call	_turnLeft	;wreg free
  3450  000D9C                     l3329:
  3451  000D9C  90D8               	bcf	status,0,c
  3452  000D9E  0100               	movlb	0	; () banked
  3453  000DA0  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3454  000DA2  0100               	movlb	0	; () banked
  3455  000DA4  6F7E               	movwf	(??_ScanWithRange+1)& (0+255),b
  3456  000DA6  0100               	movlb	0	; () banked
  3457  000DA8  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3458  000DAA  0100               	movlb	0	; () banked
  3459  000DAC  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3460  000DAE  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3461  000DB2  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3462  000DB6  0100               	movlb	0	; () banked
  3463  000DB8  517D               	movf	??_ScanWithRange& (0+255),w,b
  3464  000DBA  5CDE               	subwf	postinc2,w,c
  3465  000DBC  0100               	movlb	0	; () banked
  3466  000DBE  517E               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3467  000DC0  58DE               	subwfb	postinc2,w,c
  3468  000DC2  A0D8               	btfss	status,0,c
  3469  000DC4  D7DF               	goto	l3327
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Movement.c: 191: }
  3473                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3474  000DC6  9ED5               	bcf	4053,7,c	;volatile
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;Movement.c: 193: stop(mL,mR);
  3478  000DC8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3479  000DCC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3480  000DD0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3481  000DD4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3482  000DD8  ECD9  F00B         	call	_stop	;wreg free
  3483                           
  3484                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3485  000DDC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3486  000DE0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3487  000DE4  50DF               	movf	indf2,w,c
  3488  000DE6  0100               	movlb	0	; () banked
  3489  000DE8  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3490  000DEA  0100               	movlb	0	; () banked
  3491  000DEC  517D               	movf	??_ScanWithRange& (0+255),w,b
  3492  000DEE  0D01               	mullw	1
  3493  000DF0  50F3               	movf	prodl,w,c
  3494  000DF2  0100               	movlb	0	; () banked
  3495  000DF4  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3496  000DF6  6ED9               	movwf	fsr2l,c
  3497  000DF8  50F4               	movf	prodh,w,c
  3498  000DFA  0100               	movlb	0	; () banked
  3499  000DFC  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3500  000DFE  6EDA               	movwf	fsr2h,c
  3501  000E00  0E01               	movlw	1
  3502  000E02  6EDF               	movwf	indf2,c
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3506  000E04  90D8               	bcf	status,0,c
  3507  000E06  0100               	movlb	0	; () banked
  3508  000E08  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3509  000E0A  0100               	movlb	0	; () banked
  3510  000E0C  6F7E               	movwf	(??_ScanWithRange+1)& (0+255),b
  3511  000E0E  0100               	movlb	0	; () banked
  3512  000E10  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3513  000E12  0100               	movlb	0	; () banked
  3514  000E14  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3515  000E16  0100               	movlb	0	; () banked
  3516  000E18  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3517  000E1A  0100               	movlb	0	; () banked
  3518  000E1C  277D               	addwf	??_ScanWithRange& (0+255),f,b
  3519  000E1E  0100               	movlb	0	; () banked
  3520  000E20  51B9               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3521  000E22  0100               	movlb	0	; () banked
  3522  000E24  237E               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3523  000E26  0100               	movlb	0	; () banked
  3524  000E28  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3525  000E2A  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3526  000E2C  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3527  000E2E  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3528  000E30  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3529  000E34  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3530  000E38  50DF               	movf	indf2,w,c
  3531  000E3A  0100               	movlb	0	; () banked
  3532  000E3C  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3533  000E3E  0100               	movlb	0	; () banked
  3534  000E40  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3535  000E42  0D02               	mullw	2
  3536  000E44  50F3               	movf	prodl,w,c
  3537  000E46  0100               	movlb	0	; () banked
  3538  000E48  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3539  000E4A  6ED9               	movwf	fsr2l,c
  3540  000E4C  50F4               	movf	prodh,w,c
  3541  000E4E  0100               	movlb	0	; () banked
  3542  000E50  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3543  000E52  6EDA               	movwf	fsr2h,c
  3544  000E54  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3545  000E58  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3546  000E5C  D087               	goto	l3361
  3547  000E5E                     l3339:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Movement.c: 199: return 2;
  3551  000E5E  0E02               	movlw	2
  3552                           
  3553                           ; BSR set to: 0
  3554  000E60  0012               	return	
  3555  000E62                     l229:
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3559  000E62  9ED5               	bcf	4053,7,c	;volatile
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3563  000E64  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3564  000E68  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3565  000E6C  50DF               	movf	indf2,w,c
  3566  000E6E  0100               	movlb	0	; () banked
  3567  000E70  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3568  000E72  0100               	movlb	0	; () banked
  3569  000E74  517D               	movf	??_ScanWithRange& (0+255),w,b
  3570  000E76  0D01               	mullw	1
  3571  000E78  50F3               	movf	prodl,w,c
  3572  000E7A  0100               	movlb	0	; () banked
  3573  000E7C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3574  000E7E  6ED9               	movwf	fsr2l,c
  3575  000E80  50F4               	movf	prodh,w,c
  3576  000E82  0100               	movlb	0	; () banked
  3577  000E84  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3578  000E86  6EDA               	movwf	fsr2h,c
  3579  000E88  0E01               	movlw	1
  3580  000E8A  6EDF               	movwf	indf2,c
  3581                           
  3582                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3583  000E8C  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3584  000E90  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3585  000E94  CFDE F07D          	movff	postinc2,??_ScanWithRange
  3586  000E98  CFDD F07E          	movff	postdec2,??_ScanWithRange+1
  3587  000E9C  0100               	movlb	0	; () banked
  3588  000E9E  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3589  000EA0  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3590  000EA2  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3591  000EA4  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3592  000EA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3593  000EAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3594  000EAE  50DF               	movf	indf2,w,c
  3595  000EB0  0100               	movlb	0	; () banked
  3596  000EB2  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3597  000EB4  0100               	movlb	0	; () banked
  3598  000EB6  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3599  000EB8  0D02               	mullw	2
  3600  000EBA  50F3               	movf	prodl,w,c
  3601  000EBC  0100               	movlb	0	; () banked
  3602  000EBE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3603  000EC0  6ED9               	movwf	fsr2l,c
  3604  000EC2  50F4               	movf	prodh,w,c
  3605  000EC4  0100               	movlb	0	; () banked
  3606  000EC6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3607  000EC8  6EDA               	movwf	fsr2h,c
  3608  000ECA  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3609  000ECE  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Movement.c: 207: *Move = *Move+1;
  3613  000ED2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3614  000ED6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3615  000EDA  50DF               	movf	indf2,w,c
  3616  000EDC  0100               	movlb	0	; () banked
  3617  000EDE  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3618  000EE0  0100               	movlb	0	; () banked
  3619  000EE2  297D               	incf	??_ScanWithRange& (0+255),w,b
  3620  000EE4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3621  000EE8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3622  000EEC  6EDF               	movwf	indf2,c
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;Movement.c: 208: stop(mL,mR);
  3626  000EEE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3627  000EF2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3628  000EF6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3629  000EFA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3630  000EFE  ECD9  F00B         	call	_stop	;wreg free
  3631                           
  3632                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3633  000F02  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3634  000F06  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3635  000F0A  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3636  000F0E  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3637  000F12  0E64               	movlw	100
  3638  000F14  0100               	movlb	0	; () banked
  3639  000F16  6F6B               	movwf	turnLeft@power& (0+255),b
  3640  000F18  ECFA  F00D         	call	_turnLeft	;wreg free
  3641                           
  3642                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3643  000F1C  0100               	movlb	0	; () banked
  3644  000F1E  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3645  000F20  EC36  F00E         	call	_delay_tenth_s
  3646                           
  3647                           ;Movement.c: 213: stop(mL,mR);
  3648  000F24  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3649  000F28  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3650  000F2C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3651  000F30  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3652  000F34  ECD9  F00B         	call	_stop	;wreg free
  3653                           
  3654                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3655  000F38  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3656  000F3C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3657  000F40  50DF               	movf	indf2,w,c
  3658  000F42  0100               	movlb	0	; () banked
  3659  000F44  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3660  000F46  0100               	movlb	0	; () banked
  3661  000F48  517D               	movf	??_ScanWithRange& (0+255),w,b
  3662  000F4A  0D01               	mullw	1
  3663  000F4C  50F3               	movf	prodl,w,c
  3664  000F4E  0100               	movlb	0	; () banked
  3665  000F50  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3666  000F52  6ED9               	movwf	fsr2l,c
  3667  000F54  50F4               	movf	prodh,w,c
  3668  000F56  0100               	movlb	0	; () banked
  3669  000F58  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3670  000F5A  6EDA               	movwf	fsr2h,c
  3671  000F5C  0E02               	movlw	2
  3672  000F5E  6EDF               	movwf	indf2,c
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3676  000F60  0100               	movlb	0	; () banked
  3677  000F62  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3678  000F64  0100               	movlb	0	; () banked
  3679  000F66  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3680  000F68  6B7E               	clrf	(??_ScanWithRange+1)& (0+255),b
  3681  000F6A  D762               	goto	L3
  3682  000F6C                     l3361:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;Movement.c: 216: *Move = *Move+1;
  3686  000F6C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3687  000F70  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3688  000F74  50DF               	movf	indf2,w,c
  3689  000F76  0100               	movlb	0	; () banked
  3690  000F78  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3691  000F7A  0100               	movlb	0	; () banked
  3692  000F7C  297D               	incf	??_ScanWithRange& (0+255),w,b
  3693  000F7E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3694  000F82  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3695  000F86  6EDF               	movwf	indf2,c
  3696  000F88  D76A               	goto	l3339
  3697  000F8A                     l3367:
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;Movement.c: 220: }
  3701                           ;Movement.c: 221: }
  3702                           ;Movement.c: 223: if (*RFID_Read==1) {
  3703  000F8A  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3704  000F8E  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3705  000F92  04DE               	decf	postinc2,w,c
  3706  000F94  A4D8               	btfss	status,2,c
  3707  000F96  D002               	goto	l3373
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;Movement.c: 224: return 2;
  3711  000F98  0E02               	movlw	2
  3712                           
  3713                           ; BSR set to: 0
  3714  000F9A  0012               	return	
  3715  000F9C                     l3373:
  3716                           
  3717                           ; BSR set to: 0
  3718  000F9C  0100               	movlb	0	; () banked
  3719  000F9E  4BA9               	infsnz	ScanWithRange@i& (0+255),f,b
  3720  000FA0  2BAA               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3721  000FA2                     l3375:
  3722                           
  3723                           ; BSR set to: 0
  3724  000FA2  0100               	movlb	0	; () banked
  3725  000FA4  51A9               	movf	ScanWithRange@i& (0+255),w,b
  3726  000FA6  0100               	movlb	0	; () banked
  3727  000FA8  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3728  000FAA  0100               	movlb	0	; () banked
  3729  000FAC  51AA               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3730  000FAE  0100               	movlb	0	; () banked
  3731  000FB0  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3732  000FB2  B0D8               	btfsc	status,0,c
  3733  000FB4  D63C               	goto	l3281
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;Movement.c: 225: }
  3737                           ;Movement.c: 226: }
  3738                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3739                           
  3740                           ; BSR set to: 0
  3741  000FB6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3742  000FBA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3743  000FBE  50DF               	movf	indf2,w,c
  3744  000FC0  0100               	movlb	0	; () banked
  3745  000FC2  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3746  000FC4  0100               	movlb	0	; () banked
  3747  000FC6  517D               	movf	??_ScanWithRange& (0+255),w,b
  3748  000FC8  0D01               	mullw	1
  3749  000FCA  50F3               	movf	prodl,w,c
  3750  000FCC  0100               	movlb	0	; () banked
  3751  000FCE  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3752  000FD0  6ED9               	movwf	fsr2l,c
  3753  000FD2  50F4               	movf	prodh,w,c
  3754  000FD4  0100               	movlb	0	; () banked
  3755  000FD6  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3756  000FD8  6EDA               	movwf	fsr2h,c
  3757  000FDA  0E02               	movlw	2
  3758  000FDC  6EDF               	movwf	indf2,c
  3759                           
  3760                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  3761  000FDE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3762  000FE2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3763  000FE6  50DF               	movf	indf2,w,c
  3764  000FE8  0100               	movlb	0	; () banked
  3765  000FEA  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3766  000FEC  0100               	movlb	0	; () banked
  3767  000FEE  517D               	movf	??_ScanWithRange& (0+255),w,b
  3768  000FF0  0D02               	mullw	2
  3769  000FF2  50F3               	movf	prodl,w,c
  3770  000FF4  0100               	movlb	0	; () banked
  3771  000FF6  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3772  000FF8  6ED9               	movwf	fsr2l,c
  3773  000FFA  50F4               	movf	prodh,w,c
  3774  000FFC  0100               	movlb	0	; () banked
  3775  000FFE  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3776  001000  6EDA               	movwf	fsr2h,c
  3777  001002  0EFE               	movlw	254
  3778  001004  6EDE               	movwf	postinc2,c
  3779  001006  0EFF               	movlw	255
  3780  001008  6EDD               	movwf	postdec2,c
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;Movement.c: 233: *Move = *Move+1;
  3784  00100A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3785  00100E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3786  001012  50DF               	movf	indf2,w,c
  3787  001014  0100               	movlb	0	; () banked
  3788  001016  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3789  001018  0100               	movlb	0	; () banked
  3790  00101A  297D               	incf	??_ScanWithRange& (0+255),w,b
  3791  00101C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3792  001020  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3793  001024  6EDF               	movwf	indf2,c
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;Movement.c: 234: turnRight(mL,mR, 100);
  3797  001026  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3798  00102A  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3799  00102E  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3800  001032  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3801  001036  0E64               	movlw	100
  3802  001038  0100               	movlb	0	; () banked
  3803  00103A  6F6B               	movwf	turnRight@power& (0+255),b
  3804  00103C  ECDB  F00D         	call	_turnRight	;wreg free
  3805                           
  3806                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  3807  001040  0100               	movlb	0	; () banked
  3808  001042  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3809  001044  EC36  F00E         	call	_delay_tenth_s
  3810                           
  3811                           ;Movement.c: 236: stop(mL,mR);
  3812  001048  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3813  00104C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3814  001050  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3815  001054  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3816  001058  ECD9  F00B         	call	_stop	;wreg free
  3817                           
  3818                           ;Movement.c: 237: return -1;
  3819  00105C  0EFF               	movlw	255
  3820  00105E  0012               	return	
  3821  001060                     __end_of_ScanWithRange:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           intcon	equ	0xFF2
  3827                           postinc0	equ	0xFEE
  3828                           wreg	equ	0xFE8
  3829                           indf1	equ	0xFE7
  3830                           plusw1	equ	0xFE3
  3831                           fsr1h	equ	0xFE2
  3832                           fsr1l	equ	0xFE1
  3833                           indf2	equ	0xFDF
  3834                           postinc2	equ	0xFDE
  3835                           postdec2	equ	0xFDD
  3836                           plusw2	equ	0xFDB
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _turnRight *****************
  3842 ;; Defined at:
  3843 ;;		line 103 in file "dc_motor.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3846 ;;		 -> main@mL(9), 
  3847 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3848 ;;		 -> main@mR(9), 
  3849 ;;  power           1   11[BANK0 ] unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;		None               void
  3854 ;; Registers used:
  3855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3861 ;;      Params:         0       5       0       0
  3862 ;;      Locals:         0       0       0       0
  3863 ;;      Temps:          0       0       0       0
  3864 ;;      Totals:         0       5       0       0
  3865 ;;Total ram usage:        5 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    6
  3868 ;; This function calls:
  3869 ;;		_fullSpeed
  3870 ;; This function is called by:
  3871 ;;		_ScanWithRange
  3872 ;;		_main
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text10
  3877  001BB6                     __ptext10:
  3878                           	opt stack 0
  3879  001BB6                     _turnRight:
  3880                           	opt stack 24
  3881                           
  3882                           ;dc_motor.c: 107: mL->direction=0;
  3883                           
  3884                           ;incstack = 0
  3885  001BB6  0100               	movlb	0	; () banked
  3886  001BB8  EE20 F001          	lfsr	2,1
  3887  001BBC  5167               	movf	turnRight@mL& (0+255),w,b
  3888  001BBE  26D9               	addwf	fsr2l,f,c
  3889  001BC0  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3890  001BC2  22DA               	addwfc	fsr2h,f,c
  3891  001BC4  0E00               	movlw	0
  3892  001BC6  6EDF               	movwf	indf2,c
  3893                           
  3894                           ;dc_motor.c: 108: mR->direction=1;
  3895  001BC8  0100               	movlb	0	; () banked
  3896  001BCA  EE20 F001          	lfsr	2,1
  3897  001BCE  5169               	movf	turnRight@mR& (0+255),w,b
  3898  001BD0  26D9               	addwf	fsr2l,f,c
  3899  001BD2  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3900  001BD4  22DA               	addwfc	fsr2h,f,c
  3901  001BD6  0E01               	movlw	1
  3902  001BD8  6EDF               	movwf	indf2,c
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3906  001BDA  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3907  001BDE  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3908  001BE2  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3909  001BE6  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3910  001BEA  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3911  001BEE  EC65  F00C         	call	_fullSpeed	;wreg free
  3912  001BF2  0012               	return		;funcret
  3913  001BF4                     __end_of_turnRight:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf1	equ	0xFE7
  3922                           plusw1	equ	0xFE3
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           plusw2	equ	0xFDB
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _turnLeft *****************
  3934 ;; Defined at:
  3935 ;;		line 92 in file "dc_motor.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3938 ;;		 -> main@mL(9), 
  3939 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3940 ;;		 -> main@mR(9), 
  3941 ;;  power           1   11[BANK0 ] unsigned char 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;		None               void
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3953 ;;      Params:         0       5       0       0
  3954 ;;      Locals:         0       0       0       0
  3955 ;;      Temps:          0       0       0       0
  3956 ;;      Totals:         0       5       0       0
  3957 ;;Total ram usage:        5 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    6
  3960 ;; This function calls:
  3961 ;;		_fullSpeed
  3962 ;; This function is called by:
  3963 ;;		_ScanWithRange
  3964 ;;		_main
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text11
  3969  001BF4                     __ptext11:
  3970                           	opt stack 0
  3971  001BF4                     _turnLeft:
  3972                           	opt stack 24
  3973                           
  3974                           ;dc_motor.c: 96: mL->direction=1;
  3975                           
  3976                           ;incstack = 0
  3977  001BF4  0100               	movlb	0	; () banked
  3978  001BF6  EE20 F001          	lfsr	2,1
  3979  001BFA  5167               	movf	turnLeft@mL& (0+255),w,b
  3980  001BFC  26D9               	addwf	fsr2l,f,c
  3981  001BFE  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3982  001C00  22DA               	addwfc	fsr2h,f,c
  3983  001C02  0E01               	movlw	1
  3984  001C04  6EDF               	movwf	indf2,c
  3985                           
  3986                           ;dc_motor.c: 97: mR->direction=0;
  3987  001C06  0100               	movlb	0	; () banked
  3988  001C08  EE20 F001          	lfsr	2,1
  3989  001C0C  5169               	movf	turnLeft@mR& (0+255),w,b
  3990  001C0E  26D9               	addwf	fsr2l,f,c
  3991  001C10  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3992  001C12  22DA               	addwfc	fsr2h,f,c
  3993  001C14  0E00               	movlw	0
  3994  001C16  6EDF               	movwf	indf2,c
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3998  001C18  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  3999  001C1C  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4000  001C20  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  4001  001C24  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4002  001C28  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  4003  001C2C  EC65  F00C         	call	_fullSpeed	;wreg free
  4004  001C30  0012               	return		;funcret
  4005  001C32                     __end_of_turnLeft:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           postinc0	equ	0xFEE
  4012                           wreg	equ	0xFE8
  4013                           indf1	equ	0xFE7
  4014                           plusw1	equ	0xFE3
  4015                           fsr1h	equ	0xFE2
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           plusw2	equ	0xFDB
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function _fullSpeed *****************
  4026 ;; Defined at:
  4027 ;;		line 113 in file "dc_motor.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4030 ;;		 -> main@mL(9), 
  4031 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4032 ;;		 -> main@mR(9), 
  4033 ;;  power           1    6[BANK0 ] unsigned char 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;		None               void
  4038 ;; Registers used:
  4039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4045 ;;      Params:         0       5       0       0
  4046 ;;      Locals:         0       0       0       0
  4047 ;;      Temps:          1       0       0       0
  4048 ;;      Totals:         1       5       0       0
  4049 ;;Total ram usage:        6 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    5
  4052 ;; This function calls:
  4053 ;;		_setMotorPWM
  4054 ;; This function is called by:
  4055 ;;		_turnLeft
  4056 ;;		_turnRight
  4057 ;;		_fullSpeedBack
  4058 ;;		_main
  4059 ;;		_fullSpeedForward
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text12
  4064  0018CA                     __ptext12:
  4065                           	opt stack 0
  4066  0018CA                     _fullSpeed:
  4067                           	opt stack 24
  4068                           
  4069                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4070                           
  4071                           ;incstack = 0
  4072  0018CA  D02C               	goto	l67
  4073  0018CC                     l3047:
  4074                           
  4075                           ;dc_motor.c: 117: if(mL->power<power){
  4076  0018CC  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4077  0018D0  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4078  0018D4  0100               	movlb	0	; () banked
  4079  0018D6  5166               	movf	fullSpeed@power& (0+255),w,b
  4080  0018D8  5CDE               	subwf	postinc2,w,c
  4081  0018DA  B0D8               	btfsc	status,0,c
  4082  0018DC  D005               	goto	l3051
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;dc_motor.c: 118: mL->power++;
  4086  0018DE  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4087  0018E2  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4088  0018E6  2ADF               	incf	indf2,f,c
  4089  0018E8                     l3051:
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;dc_motor.c: 119: }
  4093                           ;dc_motor.c: 120: if(mR->power<power){
  4094  0018E8  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4095  0018EC  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4096  0018F0  0100               	movlb	0	; () banked
  4097  0018F2  5166               	movf	fullSpeed@power& (0+255),w,b
  4098  0018F4  5CDE               	subwf	postinc2,w,c
  4099  0018F6  B0D8               	btfsc	status,0,c
  4100  0018F8  D005               	goto	l3055
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;dc_motor.c: 121: mR->power++;
  4104  0018FA  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4105  0018FE  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4106  001902  2ADF               	incf	indf2,f,c
  4107  001904                     l3055:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;dc_motor.c: 122: }
  4111                           ;dc_motor.c: 123: setMotorPWM(mL);
  4112  001904  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4113  001908  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4114  00190C  ECB3  F009         	call	_setMotorPWM	;wreg free
  4115                           
  4116                           ;dc_motor.c: 124: setMotorPWM(mR);
  4117  001910  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4118  001914  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4119  001918  ECB3  F009         	call	_setMotorPWM	;wreg free
  4120                           
  4121                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4122  00191C  0E21               	movlw	33
  4123  00191E                     u3217:
  4124  00191E  2EE8               	decfsz	wreg,f,c
  4125  001920  D7FE               	goto	u3217
  4126  001922  F000               	nop	
  4127  001924                     l67:
  4128  001924  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4129  001928  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4130  00192C  0100               	movlb	0	; () banked
  4131  00192E  5166               	movf	fullSpeed@power& (0+255),w,b
  4132  001930  5CDE               	subwf	postinc2,w,c
  4133  001932  A0D8               	btfss	status,0,c
  4134  001934  D7CB               	goto	l3047
  4135                           
  4136                           ; BSR set to: 0
  4137  001936  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4138  00193A  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4139  00193E  0100               	movlb	0	; () banked
  4140  001940  5166               	movf	fullSpeed@power& (0+255),w,b
  4141  001942  5CDE               	subwf	postinc2,w,c
  4142  001944  B0D8               	btfsc	status,0,c
  4143  001946  0012               	return	
  4144  001948  D7C1               	goto	l3047
  4145  00194A                     __end_of_fullSpeed:
  4146                           	opt stack 0
  4147                           tblptru	equ	0xFF8
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           indf1	equ	0xFE7
  4154                           plusw1	equ	0xFE3
  4155                           fsr1h	equ	0xFE2
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           plusw2	equ	0xFDB
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function _delay_tenth_s *****************
  4166 ;; Defined at:
  4167 ;;		line 32 in file "Movement.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  tenth_second    1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4172 ;;  i               2   37[COMRAM] unsigned int 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;		None               void
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4182 ;;      Params:         0       0       0       0
  4183 ;;      Locals:         3       0       0       0
  4184 ;;      Temps:          1       0       0       0
  4185 ;;      Totals:         4       0       0       0
  4186 ;;Total ram usage:        4 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    3
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_ScanWithRange
  4193 ;;		_main
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text13
  4198  001C6C                     __ptext13:
  4199                           	opt stack 0
  4200  001C6C                     _delay_tenth_s:
  4201                           	opt stack 27
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;incstack = 0
  4205                           ;delay_tenth_s@tenth_seconds stored from wreg
  4206  001C6C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4207                           
  4208                           ;Movement.c: 33: unsigned int i=0;
  4209  001C6E  0E00               	movlw	0
  4210  001C70  6E27               	movwf	delay_tenth_s@i+1,c
  4211  001C72  0E00               	movlw	0
  4212  001C74  6E26               	movwf	delay_tenth_s@i,c
  4213                           
  4214                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4215  001C76  0E00               	movlw	0
  4216  001C78  6E27               	movwf	delay_tenth_s@i+1,c
  4217  001C7A  0E01               	movlw	1
  4218  001C7C  6E26               	movwf	delay_tenth_s@i,c
  4219  001C7E  D009               	goto	l2295
  4220  001C80                     l2291:
  4221                           
  4222                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4223  001C80  0E82               	movlw	130
  4224  001C82  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4225  001C84  0EDE               	movlw	222
  4226  001C86                     u3227:
  4227  001C86  2EE8               	decfsz	wreg,f,c
  4228  001C88  D7FE               	goto	u3227
  4229  001C8A  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4230  001C8C  D7FC               	goto	u3227
  4231  001C8E  4A26               	infsnz	delay_tenth_s@i,f,c
  4232  001C90  2A27               	incf	delay_tenth_s@i+1,f,c
  4233  001C92                     l2295:
  4234  001C92  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4235  001C94  0D02               	mullw	2
  4236  001C96  5026               	movf	delay_tenth_s@i,w,c
  4237  001C98  5CF3               	subwf	prodl,w,c
  4238  001C9A  5027               	movf	delay_tenth_s@i+1,w,c
  4239  001C9C  58F4               	subwfb	prodh,w,c
  4240  001C9E  A0D8               	btfss	status,0,c
  4241  001CA0  0012               	return	
  4242  001CA2  D7EE               	goto	l2291
  4243  001CA4                     __end_of_delay_tenth_s:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           intcon	equ	0xFF2
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           indf1	equ	0xFE7
  4252                           plusw1	equ	0xFE3
  4253                           fsr1h	equ	0xFE2
  4254                           fsr1l	equ	0xFE1
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           plusw2	equ	0xFDB
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _ScanIR *****************
  4264 ;; Defined at:
  4265 ;;		line 44 in file "Movement.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4268 ;;		 -> main@mL(9), 
  4269 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4270 ;;		 -> main@mR(9), 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4273 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4274 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      unsigned char 
  4277 ;; Registers used:
  4278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4284 ;;      Params:         0       4       0       0
  4285 ;;      Locals:         0      46       0       0
  4286 ;;      Temps:          1       0       0       0
  4287 ;;      Totals:         1      50       0       0
  4288 ;;Total ram usage:       51 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    7
  4291 ;; This function calls:
  4292 ;;		_LCD_String
  4293 ;;		_SendLCD
  4294 ;;		_SetLine
  4295 ;;		_grabLeftIR
  4296 ;;		_grabRightIR
  4297 ;;		_sprintf
  4298 ;;		_stop
  4299 ;; This function is called by:
  4300 ;;		_main
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text14
  4305  0014A0                     __ptext14:
  4306                           	opt stack 0
  4307  0014A0                     _ScanIR:
  4308                           	opt stack 23
  4309                           
  4310                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4311                           
  4312                           ;incstack = 0
  4313  0014A0  C0BC  F09B         	movff	ScanIR@F3880,ScanIR@SensorResult
  4314  0014A4  C0BD  F09C         	movff	ScanIR@F3880+1,ScanIR@SensorResult+1
  4315  0014A8  C0BE  F09D         	movff	ScanIR@F3880+2,ScanIR@SensorResult+2
  4316  0014AC  C0BF  F09E         	movff	ScanIR@F3880+3,ScanIR@SensorResult+3
  4317                           
  4318                           ;Movement.c: 48: char buf[40];
  4319                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4320  0014B0  0E03               	movlw	3
  4321  0014B2  0100               	movlb	0	; () banked
  4322  0014B4  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4323  0014B6  0EE8               	movlw	232
  4324  0014B8  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4328  0014BA  ECDE  F00C         	call	_grabLeftIR	;wreg free
  4329  0014BE  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4330  0014C2  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4331                           
  4332                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4333  0014C6  ECA5  F00C         	call	_grabRightIR	;wreg free
  4334  0014CA  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4335  0014CE  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4336                           
  4337                           ;Movement.c: 60: CAP1BUFH=0;
  4338  0014D2  0E00               	movlw	0
  4339  0014D4  6E69               	movwf	3945,c	;volatile
  4340                           
  4341                           ;Movement.c: 61: CAP1BUFL=0;
  4342  0014D6  0E00               	movlw	0
  4343  0014D8  6E68               	movwf	3944,c	;volatile
  4344                           
  4345                           ;Movement.c: 62: CAP2BUFH=0;
  4346  0014DA  0E00               	movlw	0
  4347  0014DC  6E67               	movwf	3943,c	;volatile
  4348                           
  4349                           ;Movement.c: 63: CAP2BUFL=0;
  4350  0014DE  0E00               	movlw	0
  4351  0014E0  6E66               	movwf	3942,c	;volatile
  4352                           
  4353                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4354  0014E2  0E00               	movlw	0
  4355  0014E4  6E28               	movwf	SendLCD@type,c
  4356  0014E6  0E01               	movlw	1
  4357  0014E8  EC85  F000         	call	_SendLCD
  4358                           
  4359                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4360  0014EC  0E21               	movlw	33
  4361  0014EE                     u3237:
  4362  0014EE  2EE8               	decfsz	wreg,f,c
  4363  0014F0  D7FE               	goto	u3237
  4364  0014F2  F000               	nop	
  4365                           
  4366                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4367  0014F4  0E00               	movlw	0
  4368  0014F6  6E28               	movwf	SendLCD@type,c
  4369  0014F8  0E02               	movlw	2
  4370  0014FA  EC85  F000         	call	_SendLCD
  4371                           
  4372                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4373  0014FE  0E06               	movlw	6
  4374  001500  6E39               	movwf	??_ScanIR& (0+255),c
  4375  001502  0E30               	movlw	48
  4376  001504                     u3247:
  4377  001504  2EE8               	decfsz	wreg,f,c
  4378  001506  D7FE               	goto	u3247
  4379  001508  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4380  00150A  D7FC               	goto	u3247
  4381  00150C  D000               	nop2	
  4382                           
  4383                           ;Movement.c: 70: SetLine(1);
  4384  00150E  0E01               	movlw	1
  4385  001510  EC6D  F000         	call	_SetLine
  4386                           
  4387                           ;Movement.c: 71: LCD_String("     ScanIR");
  4388  001514  0E2D               	movlw	low STR_1
  4389  001516  6E2A               	movwf	LCD_String@string,c
  4390  001518  0E03               	movlw	high STR_1
  4391  00151A  6E2B               	movwf	LCD_String@string+1,c
  4392  00151C  EC17  F00D         	call	_LCD_String	;wreg free
  4393                           
  4394                           ;Movement.c: 72: SetLine(2);
  4395  001520  0E02               	movlw	2
  4396  001522  EC6D  F000         	call	_SetLine
  4397                           
  4398                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4399  001526  0E71               	movlw	low ScanIR@buf
  4400  001528  6E30               	movwf	sprintf@sp,c
  4401  00152A  0E00               	movlw	high ScanIR@buf
  4402  00152C  6E31               	movwf	sprintf@sp+1,c
  4403  00152E  0E0C               	movlw	low (STR_6+1)
  4404  001530  6E32               	movwf	sprintf@f,c
  4405  001532  0E03               	movlw	high (STR_6+1)
  4406  001534  6E33               	movwf	sprintf@f+1,c
  4407  001536  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4408  00153A  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4409  00153E  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4410  001542  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4411  001546  EC30  F008         	call	_sprintf	;wreg free
  4412                           
  4413                           ;Movement.c: 74: LCD_String(buf);
  4414  00154A  0E71               	movlw	low ScanIR@buf
  4415  00154C  6E2A               	movwf	LCD_String@string,c
  4416  00154E  0E00               	movlw	high ScanIR@buf
  4417  001550  6E2B               	movwf	LCD_String@string+1,c
  4418  001552  EC17  F00D         	call	_LCD_String	;wreg free
  4419                           
  4420                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4421                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4422  001556  0100               	movlb	0	; () banked
  4423  001558  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4424  00155A  0100               	movlb	0	; () banked
  4425  00155C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4426  00155E  0100               	movlb	0	; () banked
  4427  001560  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4428  001562  0100               	movlb	0	; () banked
  4429  001564  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4430  001566  B0D8               	btfsc	status,0,c
  4431  001568  D00C               	goto	l3247
  4432                           
  4433                           ; BSR set to: 0
  4434  00156A  0100               	movlb	0	; () banked
  4435  00156C  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4436  00156E  0100               	movlb	0	; () banked
  4437  001570  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4438  001572  0100               	movlb	0	; () banked
  4439  001574  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4440  001576  0100               	movlb	0	; () banked
  4441  001578  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4442  00157A  B0D8               	btfsc	status,0,c
  4443  00157C  D002               	goto	l3247
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;Movement.c: 80: return 2;
  4447  00157E  0E02               	movlw	2
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;Movement.c: 81: } else {
  4451                           
  4452                           ; BSR set to: 0
  4453  001580  0012               	return	
  4454  001582                     l3247:
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;Movement.c: 82: stop(mL,mR);
  4458  001582  C06D  F062         	movff	ScanIR@mL,stop@mL
  4459  001586  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4460  00158A  C06F  F064         	movff	ScanIR@mR,stop@mR
  4461  00158E  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4462  001592  ECD9  F00B         	call	_stop	;wreg free
  4463                           
  4464                           ;Movement.c: 83: return 0;
  4465  001596  0E00               	movlw	0
  4466  001598  0012               	return	
  4467  00159A                     __end_of_ScanIR:
  4468                           	opt stack 0
  4469                           tblptru	equ	0xFF8
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           indf1	equ	0xFE7
  4476                           plusw1	equ	0xFE3
  4477                           fsr1h	equ	0xFE2
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           plusw2	equ	0xFDB
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _stop *****************
  4488 ;; Defined at:
  4489 ;;		line 72 in file "dc_motor.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4492 ;;		 -> main@mL(9), 
  4493 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4494 ;;		 -> main@mR(9), 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;		None               void
  4499 ;; Registers used:
  4500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4506 ;;      Params:         0       4       0       0
  4507 ;;      Locals:         0       0       0       0
  4508 ;;      Temps:          0       0       0       0
  4509 ;;      Totals:         0       4       0       0
  4510 ;;Total ram usage:        4 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    5
  4513 ;; This function calls:
  4514 ;;		_setMotorPWM
  4515 ;; This function is called by:
  4516 ;;		_ScanIR
  4517 ;;		_ScanWithRange
  4518 ;;		_main
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text15
  4523  0017B2                     __ptext15:
  4524                           	opt stack 0
  4525  0017B2                     _stop:
  4526                           	opt stack 25
  4527                           
  4528                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4529                           
  4530                           ;incstack = 0
  4531  0017B2  D028               	goto	l3079
  4532  0017B4                     l3065:
  4533                           
  4534                           ;dc_motor.c: 76: if(mL->power>0){
  4535  0017B4  C062  FFD9         	movff	stop@mL,fsr2l
  4536  0017B8  C063  FFDA         	movff	stop@mL+1,fsr2h
  4537  0017BC  50DF               	movf	indf2,w,c
  4538  0017BE  B4D8               	btfsc	status,2,c
  4539  0017C0  D005               	goto	l3069
  4540                           
  4541                           ;dc_motor.c: 77: mL->power--;
  4542  0017C2  C062  FFD9         	movff	stop@mL,fsr2l
  4543  0017C6  C063  FFDA         	movff	stop@mL+1,fsr2h
  4544  0017CA  06DF               	decf	indf2,f,c
  4545  0017CC                     l3069:
  4546                           
  4547                           ;dc_motor.c: 78: }
  4548                           ;dc_motor.c: 79: if(mR->power>0){
  4549  0017CC  C064  FFD9         	movff	stop@mR,fsr2l
  4550  0017D0  C065  FFDA         	movff	stop@mR+1,fsr2h
  4551  0017D4  50DF               	movf	indf2,w,c
  4552  0017D6  B4D8               	btfsc	status,2,c
  4553  0017D8  D005               	goto	l3073
  4554                           
  4555                           ;dc_motor.c: 80: mR->power--;
  4556  0017DA  C064  FFD9         	movff	stop@mR,fsr2l
  4557  0017DE  C065  FFDA         	movff	stop@mR+1,fsr2h
  4558  0017E2  06DF               	decf	indf2,f,c
  4559  0017E4                     l3073:
  4560                           
  4561                           ;dc_motor.c: 81: }
  4562                           ;dc_motor.c: 82: setMotorPWM(mL);
  4563  0017E4  C062  F032         	movff	stop@mL,setMotorPWM@m
  4564  0017E8  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4565  0017EC  ECB3  F009         	call	_setMotorPWM	;wreg free
  4566                           
  4567                           ;dc_motor.c: 83: setMotorPWM(mR);
  4568  0017F0  C064  F032         	movff	stop@mR,setMotorPWM@m
  4569  0017F4  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4570  0017F8  ECB3  F009         	call	_setMotorPWM	;wreg free
  4571                           
  4572                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4573  0017FC  0E21               	movlw	33
  4574  0017FE                     u3257:
  4575  0017FE  2EE8               	decfsz	wreg,f,c
  4576  001800  D7FE               	goto	u3257
  4577  001802  F000               	nop	
  4578  001804                     l3079:
  4579  001804  C062  FFD9         	movff	stop@mL,fsr2l
  4580  001808  C063  FFDA         	movff	stop@mL+1,fsr2h
  4581  00180C  50DF               	movf	indf2,w,c
  4582  00180E  A4D8               	btfss	status,2,c
  4583  001810  D7D1               	goto	l3065
  4584  001812  C064  FFD9         	movff	stop@mR,fsr2l
  4585  001816  C065  FFDA         	movff	stop@mR+1,fsr2h
  4586  00181A  50DF               	movf	indf2,w,c
  4587  00181C  A4D8               	btfss	status,2,c
  4588  00181E  D7CA               	goto	l3065
  4589                           
  4590                           ;dc_motor.c: 85: }
  4591                           ;dc_motor.c: 86: mL->direction=1;
  4592  001820  0100               	movlb	0	; () banked
  4593  001822  EE20 F001          	lfsr	2,1
  4594  001826  5162               	movf	stop@mL& (0+255),w,b
  4595  001828  26D9               	addwf	fsr2l,f,c
  4596  00182A  5163               	movf	(stop@mL+1)& (0+255),w,b
  4597  00182C  22DA               	addwfc	fsr2h,f,c
  4598  00182E  0E01               	movlw	1
  4599  001830  6EDF               	movwf	indf2,c
  4600                           
  4601                           ;dc_motor.c: 87: mR->direction=1;
  4602  001832  0100               	movlb	0	; () banked
  4603  001834  EE20 F001          	lfsr	2,1
  4604  001838  5164               	movf	stop@mR& (0+255),w,b
  4605  00183A  26D9               	addwf	fsr2l,f,c
  4606  00183C  5165               	movf	(stop@mR+1)& (0+255),w,b
  4607  00183E  22DA               	addwfc	fsr2h,f,c
  4608  001840  0E01               	movlw	1
  4609  001842  6EDF               	movwf	indf2,c
  4610                           
  4611                           ; BSR set to: 0
  4612  001844  0012               	return		;funcret
  4613  001846                     __end_of_stop:
  4614                           	opt stack 0
  4615                           tblptru	equ	0xFF8
  4616                           prodh	equ	0xFF4
  4617                           prodl	equ	0xFF3
  4618                           intcon	equ	0xFF2
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           indf1	equ	0xFE7
  4622                           plusw1	equ	0xFE3
  4623                           fsr1h	equ	0xFE2
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           plusw2	equ	0xFDB
  4629                           fsr2h	equ	0xFDA
  4630                           fsr2l	equ	0xFD9
  4631                           status	equ	0xFD8
  4632                           
  4633 ;; *************** function _setMotorPWM *****************
  4634 ;; Defined at:
  4635 ;;		line 31 in file "dc_motor.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4638 ;;		 -> main@mR(9), main@mL(9), 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  PWMduty         2    0[BANK0 ] int 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4650 ;;      Params:         2       0       0       0
  4651 ;;      Locals:         0       2       0       0
  4652 ;;      Temps:          5       0       0       0
  4653 ;;      Totals:         7       2       0       0
  4654 ;;Total ram usage:        9 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    4
  4657 ;; This function calls:
  4658 ;;		___awdiv
  4659 ;;		___wmul
  4660 ;; This function is called by:
  4661 ;;		_stop
  4662 ;;		_fullSpeed
  4663 ;;		_setMotorFullSpeed
  4664 ;;		_stopMotor
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text16
  4669  001366                     __ptext16:
  4670                           	opt stack 0
  4671  001366                     _setMotorPWM:
  4672                           	opt stack 24
  4673                           
  4674                           ;dc_motor.c: 33: int PWMduty;
  4675                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;incstack = 0
  4679  001366  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4680  00136A  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4681  00136E  50DF               	movf	indf2,w,c
  4682  001370  6E34               	movwf	??_setMotorPWM& (0+255),c
  4683  001372  5034               	movf	??_setMotorPWM,w,c
  4684  001374  6E24               	movwf	___wmul@multiplier,c
  4685  001376  6A25               	clrf	___wmul@multiplier+1,c
  4686  001378  EE20 F007          	lfsr	2,7
  4687  00137C  5032               	movf	setMotorPWM@m,w,c
  4688  00137E  26D9               	addwf	fsr2l,f,c
  4689  001380  5033               	movf	setMotorPWM@m+1,w,c
  4690  001382  22DA               	addwfc	fsr2h,f,c
  4691  001384  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4692  001388  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4693  00138C  ECC5  F000         	call	___wmul	;wreg free
  4694  001390  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4695  001394  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4696  001398  0E00               	movlw	0
  4697  00139A  6E2D               	movwf	___awdiv@divisor+1,c
  4698  00139C  0E64               	movlw	100
  4699  00139E  6E2C               	movwf	___awdiv@divisor,c
  4700  0013A0  EC23  F00C         	call	___awdiv	;wreg free
  4701  0013A4  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4702  0013A8  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4703                           
  4704                           ;dc_motor.c: 37: if (m->direction)
  4705  0013AC  EE20 F001          	lfsr	2,1
  4706  0013B0  5032               	movf	setMotorPWM@m,w,c
  4707  0013B2  26D9               	addwf	fsr2l,f,c
  4708  0013B4  5033               	movf	setMotorPWM@m+1,w,c
  4709  0013B6  22DA               	addwfc	fsr2h,f,c
  4710  0013B8  50DF               	movf	indf2,w,c
  4711  0013BA  B4D8               	btfsc	status,2,c
  4712  0013BC  D02E               	goto	l3043
  4713                           
  4714                           ;dc_motor.c: 38: {
  4715                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4716  0013BE  EE20 F006          	lfsr	2,6
  4717  0013C2  5032               	movf	setMotorPWM@m,w,c
  4718  0013C4  26D9               	addwf	fsr2l,f,c
  4719  0013C6  5033               	movf	setMotorPWM@m+1,w,c
  4720  0013C8  22DA               	addwfc	fsr2h,f,c
  4721  0013CA  50DF               	movf	indf2,w,c
  4722  0013CC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4723  0013CE  0E01               	movlw	1
  4724  0013D0  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4725  0013D2  2A34               	incf	??_setMotorPWM,f,c
  4726  0013D4  D002               	goto	u2394
  4727  0013D6                     u2395:
  4728  0013D6  90D8               	bcf	status,0,c
  4729  0013D8  3635               	rlcf	??_setMotorPWM+1,f,c
  4730  0013DA                     u2394:
  4731  0013DA  2E34               	decfsz	??_setMotorPWM,f,c
  4732  0013DC  D7FC               	goto	u2395
  4733  0013DE  5035               	movf	??_setMotorPWM+1,w,c
  4734  0013E0  108A               	iorwf	3978,w,c	;volatile
  4735  0013E2  6E8A               	movwf	3978,c	;volatile
  4736                           
  4737                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4738  0013E4  EE20 F007          	lfsr	2,7
  4739  0013E8  5032               	movf	setMotorPWM@m,w,c
  4740  0013EA  26D9               	addwf	fsr2l,f,c
  4741  0013EC  5033               	movf	setMotorPWM@m+1,w,c
  4742  0013EE  22DA               	addwfc	fsr2h,f,c
  4743  0013F0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4744  0013F4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4745  0013F8  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4746  0013FC  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4747  001400  1E36               	comf	??_setMotorPWM+2,f,c
  4748  001402  1E37               	comf	??_setMotorPWM+3,f,c
  4749  001404  4A36               	infsnz	??_setMotorPWM+2,f,c
  4750  001406  2A37               	incf	??_setMotorPWM+3,f,c
  4751  001408  5034               	movf	??_setMotorPWM,w,c
  4752  00140A  2436               	addwf	??_setMotorPWM+2,w,c
  4753  00140C  0100               	movlb	0	; () banked
  4754  00140E  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4755  001410  5035               	movf	??_setMotorPWM+1,w,c
  4756  001412  2037               	addwfc	??_setMotorPWM+3,w,c
  4757  001414  0100               	movlb	0	; () banked
  4758  001416  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4759                           
  4760                           ;dc_motor.c: 41: }
  4761  001418  D014               	goto	l37
  4762  00141A                     l3043:
  4763                           
  4764                           ;dc_motor.c: 42: else
  4765                           ;dc_motor.c: 43: {
  4766                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4767  00141A  EE20 F006          	lfsr	2,6
  4768  00141E  5032               	movf	setMotorPWM@m,w,c
  4769  001420  26D9               	addwf	fsr2l,f,c
  4770  001422  5033               	movf	setMotorPWM@m+1,w,c
  4771  001424  22DA               	addwfc	fsr2h,f,c
  4772  001426  50DF               	movf	indf2,w,c
  4773  001428  6E34               	movwf	??_setMotorPWM& (0+255),c
  4774  00142A  0E01               	movlw	1
  4775  00142C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4776  00142E  2A34               	incf	??_setMotorPWM,f,c
  4777  001430  D002               	goto	u2404
  4778  001432                     u2405:
  4779  001432  90D8               	bcf	status,0,c
  4780  001434  3635               	rlcf	??_setMotorPWM+1,f,c
  4781  001436                     u2404:
  4782  001436  2E34               	decfsz	??_setMotorPWM,f,c
  4783  001438  D7FC               	goto	u2405
  4784  00143A  5035               	movf	??_setMotorPWM+1,w,c
  4785  00143C  0AFF               	xorlw	255
  4786  00143E  148A               	andwf	3978,w,c	;volatile
  4787  001440  6E8A               	movwf	3978,c	;volatile
  4788  001442                     l37:
  4789                           
  4790                           ;dc_motor.c: 45: }
  4791                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4792  001442  EE20 F002          	lfsr	2,2
  4793  001446  5032               	movf	setMotorPWM@m,w,c
  4794  001448  26D9               	addwf	fsr2l,f,c
  4795  00144A  5033               	movf	setMotorPWM@m+1,w,c
  4796  00144C  22DA               	addwfc	fsr2h,f,c
  4797  00144E  CFDE F034          	movff	postinc2,??_setMotorPWM
  4798  001452  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4799  001456  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4800  00145A  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4801  00145E  0100               	movlb	0	; () banked
  4802  001460  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4803  001462  46E8               	rlncf	wreg,f,c
  4804  001464  0BFC               	andlw	252
  4805  001466  6EDF               	movwf	indf2,c
  4806                           
  4807                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4808  001468  EE20 F004          	lfsr	2,4
  4809  00146C  5032               	movf	setMotorPWM@m,w,c
  4810  00146E  26D9               	addwf	fsr2l,f,c
  4811  001470  5033               	movf	setMotorPWM@m+1,w,c
  4812  001472  22DA               	addwfc	fsr2h,f,c
  4813  001474  CFDE F034          	movff	postinc2,??_setMotorPWM
  4814  001478  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4815  00147C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4816  001480  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4817  001484  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4818  001488  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4819  00148C  0E06               	movlw	6
  4820  00148E  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4821  001490                     u2415:
  4822  001490  3437               	rlcf	??_setMotorPWM+3,w,c
  4823  001492  3237               	rrcf	??_setMotorPWM+3,f,c
  4824  001494  3236               	rrcf	??_setMotorPWM+2,f,c
  4825  001496  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4826  001498  D7FB               	goto	u2415
  4827  00149A  5036               	movf	??_setMotorPWM+2,w,c
  4828  00149C  6EDF               	movwf	indf2,c
  4829                           
  4830                           ; BSR set to: 0
  4831  00149E  0012               	return		;funcret
  4832  0014A0                     __end_of_setMotorPWM:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           postinc0	equ	0xFEE
  4839                           wreg	equ	0xFE8
  4840                           indf1	equ	0xFE7
  4841                           plusw1	equ	0xFE3
  4842                           fsr1h	equ	0xFE2
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           postdec2	equ	0xFDD
  4847                           plusw2	equ	0xFDB
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function ___awdiv *****************
  4853 ;; Defined at:
  4854 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;  dividend        2   41[COMRAM] int 
  4857 ;;  divisor         2   43[COMRAM] int 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  quotient        2   47[COMRAM] int 
  4860 ;;  sign            1   46[COMRAM] unsigned char 
  4861 ;;  counter         1   45[COMRAM] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  2   41[COMRAM] int 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4871 ;;      Params:         4       0       0       0
  4872 ;;      Locals:         4       0       0       0
  4873 ;;      Temps:          0       0       0       0
  4874 ;;      Totals:         8       0       0       0
  4875 ;;Total ram usage:        8 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    3
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_setMotorPWM
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text17
  4886  001846                     __ptext17:
  4887                           	opt stack 0
  4888  001846                     ___awdiv:
  4889                           	opt stack 24
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;incstack = 0
  4893  001846  0E00               	movlw	0
  4894  001848  6E2F               	movwf	___awdiv@sign,c
  4895  00184A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4896  00184C  D006               	goto	l3001
  4897  00184E  6C2C               	negf	___awdiv@divisor,c
  4898  001850  1E2D               	comf	___awdiv@divisor+1,f,c
  4899  001852  B0D8               	btfsc	status,0,c
  4900  001854  2A2D               	incf	___awdiv@divisor+1,f,c
  4901  001856  0E01               	movlw	1
  4902  001858  6E2F               	movwf	___awdiv@sign,c
  4903  00185A                     l3001:
  4904  00185A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4905  00185C  D006               	goto	l3007
  4906  00185E  6C2A               	negf	___awdiv@dividend,c
  4907  001860  1E2B               	comf	___awdiv@dividend+1,f,c
  4908  001862  B0D8               	btfsc	status,0,c
  4909  001864  2A2B               	incf	___awdiv@dividend+1,f,c
  4910  001866  0E01               	movlw	1
  4911  001868  1A2F               	xorwf	___awdiv@sign,f,c
  4912  00186A                     l3007:
  4913  00186A  0E00               	movlw	0
  4914  00186C  6E31               	movwf	___awdiv@quotient+1,c
  4915  00186E  0E00               	movlw	0
  4916  001870  6E30               	movwf	___awdiv@quotient,c
  4917  001872  502C               	movf	___awdiv@divisor,w,c
  4918  001874  102D               	iorwf	___awdiv@divisor+1,w,c
  4919  001876  B4D8               	btfsc	status,2,c
  4920  001878  D01C               	goto	l3029
  4921  00187A  0E01               	movlw	1
  4922  00187C  6E2E               	movwf	___awdiv@counter,c
  4923  00187E  D004               	goto	l3015
  4924  001880                     l3013:
  4925  001880  90D8               	bcf	status,0,c
  4926  001882  362C               	rlcf	___awdiv@divisor,f,c
  4927  001884  362D               	rlcf	___awdiv@divisor+1,f,c
  4928  001886  2A2E               	incf	___awdiv@counter,f,c
  4929  001888                     l3015:
  4930  001888  AE2D               	btfss	___awdiv@divisor+1,7,c
  4931  00188A  D7FA               	goto	l3013
  4932  00188C                     l3017:
  4933  00188C  90D8               	bcf	status,0,c
  4934  00188E  3630               	rlcf	___awdiv@quotient,f,c
  4935  001890  3631               	rlcf	___awdiv@quotient+1,f,c
  4936  001892  502C               	movf	___awdiv@divisor,w,c
  4937  001894  5C2A               	subwf	___awdiv@dividend,w,c
  4938  001896  502D               	movf	___awdiv@divisor+1,w,c
  4939  001898  582B               	subwfb	___awdiv@dividend+1,w,c
  4940  00189A  A0D8               	btfss	status,0,c
  4941  00189C  D005               	goto	l3025
  4942  00189E  502C               	movf	___awdiv@divisor,w,c
  4943  0018A0  5E2A               	subwf	___awdiv@dividend,f,c
  4944  0018A2  502D               	movf	___awdiv@divisor+1,w,c
  4945  0018A4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4946  0018A6  8030               	bsf	___awdiv@quotient,0,c
  4947  0018A8                     l3025:
  4948  0018A8  90D8               	bcf	status,0,c
  4949  0018AA  322D               	rrcf	___awdiv@divisor+1,f,c
  4950  0018AC  322C               	rrcf	___awdiv@divisor,f,c
  4951  0018AE  2E2E               	decfsz	___awdiv@counter,f,c
  4952  0018B0  D7ED               	goto	l3017
  4953  0018B2                     l3029:
  4954  0018B2  502F               	movf	___awdiv@sign,w,c
  4955  0018B4  B4D8               	btfsc	status,2,c
  4956  0018B6  D004               	goto	l3033
  4957  0018B8  6C30               	negf	___awdiv@quotient,c
  4958  0018BA  1E31               	comf	___awdiv@quotient+1,f,c
  4959  0018BC  B0D8               	btfsc	status,0,c
  4960  0018BE  2A31               	incf	___awdiv@quotient+1,f,c
  4961  0018C0                     l3033:
  4962  0018C0  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4963  0018C4  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4964  0018C8  0012               	return	
  4965  0018CA                     __end_of___awdiv:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           intcon	equ	0xFF2
  4971                           postinc0	equ	0xFEE
  4972                           wreg	equ	0xFE8
  4973                           indf1	equ	0xFE7
  4974                           plusw1	equ	0xFE3
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           plusw2	equ	0xFDB
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _sprintf *****************
  4986 ;; Defined at:
  4987 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4990 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4991 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4992 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  tmpval          4    0        struct .
  4995 ;;  cp              3    0        PTR const unsigned char 
  4996 ;;  width           2   10[BANK0 ] int 
  4997 ;;  val             2    7[BANK0 ] unsigned int 
  4998 ;;  ap              2    4[BANK0 ] PTR void [1]
  4999 ;;		 -> ?_sprintf(2), 
  5000 ;;  len             2    0        unsigned int 
  5001 ;;  c               1   12[BANK0 ] char 
  5002 ;;  flag            1    9[BANK0 ] unsigned char 
  5003 ;;  prec            1    6[BANK0 ] char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  2   47[COMRAM] int 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5013 ;;      Params:         8       0       0       0
  5014 ;;      Locals:         0       9       0       0
  5015 ;;      Temps:          0       4       0       0
  5016 ;;      Totals:         8      13       0       0
  5017 ;;Total ram usage:       21 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    4
  5020 ;; This function calls:
  5021 ;;		___lwdiv
  5022 ;;		___lwmod
  5023 ;;		___wmul
  5024 ;;		_isdigit
  5025 ;; This function is called by:
  5026 ;;		_ScanIR
  5027 ;;		_ScanWithRange
  5028 ;;		_main
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text18
  5033  001060                     __ptext18:
  5034                           	opt stack 0
  5035  001060                     _sprintf:
  5036                           	opt stack 26
  5037                           
  5038                           ;doprnt.c: 494: va_list ap;
  5039                           ;doprnt.c: 499: signed char c;
  5040                           ;doprnt.c: 501: int width;
  5041                           ;doprnt.c: 506: signed char prec;
  5042                           ;doprnt.c: 508: unsigned char flag;
  5043                           ;doprnt.c: 523: union {
  5044                           ;doprnt.c: 524: unsigned long vd;
  5045                           ;doprnt.c: 525: double integ;
  5046                           ;doprnt.c: 526: } tmpval;
  5047                           ;doprnt.c: 528: unsigned int val;
  5048                           ;doprnt.c: 529: unsigned len;
  5049                           ;doprnt.c: 530: const char * cp;
  5050                           ;doprnt.c: 533: *ap = __va_start();
  5051                           
  5052                           ;incstack = 0
  5053  001060  0E34               	movlw	low (?_sprintf+4)
  5054  001062  0100               	movlb	0	; () banked
  5055  001064  6F64               	movwf	sprintf@ap& (0+255),b
  5056  001066  0E00               	movlw	high (?_sprintf+4)
  5057  001068  0100               	movlb	0	; () banked
  5058  00106A  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5059                           
  5060                           ;doprnt.c: 536: while(c = *f++) {
  5061  00106C  D168               	goto	l3201
  5062  00106E                     l3095:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;doprnt.c: 538: if(c != '%')
  5066  00106E  0E25               	movlw	37
  5067  001070  0100               	movlb	0	; () banked
  5068  001072  196C               	xorwf	sprintf@c& (0+255),w,b
  5069  001074  B4D8               	btfsc	status,2,c
  5070  001076  D009               	goto	l3101
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;doprnt.c: 540: {
  5074                           ;doprnt.c: 541: ((*sp++ = (c)));
  5075  001078  C030  FFD9         	movff	sprintf@sp,fsr2l
  5076  00107C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5077  001080  C06C  FFDF         	movff	sprintf@c,indf2
  5078                           
  5079                           ; BSR set to: 0
  5080  001084  4A30               	infsnz	sprintf@sp,f,c
  5081  001086  2A31               	incf	sprintf@sp+1,f,c
  5082                           
  5083                           ;doprnt.c: 542: continue;
  5084  001088  D15A               	goto	l3201
  5085  00108A                     l3101:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;doprnt.c: 543: }
  5089                           ;doprnt.c: 546: width = 0;
  5090  00108A  0E00               	movlw	0
  5091  00108C  0100               	movlb	0	; () banked
  5092  00108E  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5093  001090  0E00               	movlw	0
  5094  001092  6F6A               	movwf	sprintf@width& (0+255),b
  5095                           
  5096                           ;doprnt.c: 548: flag = 0;
  5097  001094  0E00               	movlw	0
  5098  001096  0100               	movlb	0	; () banked
  5099  001098  6F69               	movwf	sprintf@flag& (0+255),b
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;doprnt.c: 551: switch(*f) {
  5103                           
  5104                           ;doprnt.c: 550: for(;;) {
  5105  00109A  D004               	goto	l3107
  5106  00109C                     l3103:
  5107                           
  5108                           ;doprnt.c: 580: flag |= 0x04;
  5109  00109C  0100               	movlb	0	; () banked
  5110  00109E  8569               	bsf	sprintf@flag& (0+255),2,b
  5111                           
  5112                           ;doprnt.c: 581: f++;
  5113  0010A0  4A32               	infsnz	sprintf@f,f,c
  5114  0010A2  2A33               	incf	sprintf@f+1,f,c
  5115  0010A4                     l3107:
  5116  0010A4  C032  FFF6         	movff	sprintf@f,tblptrl
  5117  0010A8  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5118  0010AC                     	if	0	;tblptru may be non-zero
  5119  0010AC                     	endif
  5120  0010AC                     	if	0	;tblptru may be non-zero
  5121  0010AC                     	endif
  5122  0010AC  0008               	tblrd		*
  5123  0010AE  50F5               	movf	tablat,w,c
  5124                           
  5125                           ; Switch size 1, requested type "space"
  5126                           ; Number of cases is 1, Range of values is 48 to 48
  5127                           ; switch strategies available:
  5128                           ; Name         Instructions Cycles
  5129                           ; simple_byte            4     3 (average)
  5130                           ;	Chosen strategy is simple_byte
  5131  0010B0  0A30               	xorlw	48	; case 48
  5132  0010B2  B4D8               	btfsc	status,2,c
  5133  0010B4  D7F3               	goto	l3103
  5134                           
  5135                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5136                           
  5137                           ;doprnt.c: 586: }
  5138                           
  5139                           ;doprnt.c: 585: break;
  5140  0010B6  C032  FFF6         	movff	sprintf@f,tblptrl
  5141  0010BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5142  0010BE                     	if	0	;tblptru may be non-zero
  5143  0010BE                     	endif
  5144  0010BE                     	if	0	;tblptru may be non-zero
  5145  0010BE                     	endif
  5146  0010BE  0008               	tblrd		*
  5147  0010C0  50F5               	movf	tablat,w,c
  5148  0010C2  ECD8  F000         	call	_isdigit
  5149  0010C6  A0D8               	btfss	status,0,c
  5150  0010C8  D03E               	goto	l3123
  5151                           
  5152                           ;doprnt.c: 598: width = 0;
  5153  0010CA  0E00               	movlw	0
  5154  0010CC  0100               	movlb	0	; () banked
  5155  0010CE  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5156  0010D0  0E00               	movlw	0
  5157  0010D2  6F6A               	movwf	sprintf@width& (0+255),b
  5158  0010D4                     l3113:
  5159                           
  5160                           ;doprnt.c: 600: width *= 10;
  5161  0010D4  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5162  0010D8  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5163  0010DC  0E00               	movlw	0
  5164  0010DE  6E27               	movwf	___wmul@multiplicand+1,c
  5165  0010E0  0E0A               	movlw	10
  5166  0010E2  6E26               	movwf	___wmul@multiplicand,c
  5167  0010E4  ECC5  F000         	call	___wmul	;wreg free
  5168  0010E8  C024  F06A         	movff	?___wmul,sprintf@width
  5169  0010EC  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5170                           
  5171                           ;doprnt.c: 601: width += *f++ - '0';
  5172  0010F0  0ED0               	movlw	208
  5173  0010F2  0100               	movlb	0	; () banked
  5174  0010F4  6F60               	movwf	??_sprintf& (0+255),b
  5175  0010F6  0EFF               	movlw	255
  5176  0010F8  0100               	movlb	0	; () banked
  5177  0010FA  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5178  0010FC  C032  FFF6         	movff	sprintf@f,tblptrl
  5179  001100  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5180  001104                     	if	0	;tblptru may be non-zero
  5181  001104                     	endif
  5182  001104                     	if	0	;tblptru may be non-zero
  5183  001104                     	endif
  5184  001104  0008               	tblrd		*
  5185  001106  50F5               	movf	tablat,w,c
  5186  001108  0100               	movlb	0	; () banked
  5187  00110A  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5188  00110C  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5189  00110E  0100               	movlb	0	; () banked
  5190  001110  5160               	movf	??_sprintf& (0+255),w,b
  5191  001112  0100               	movlb	0	; () banked
  5192  001114  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5193  001116  0100               	movlb	0	; () banked
  5194  001118  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5195  00111A  0100               	movlb	0	; () banked
  5196  00111C  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5197  00111E  0100               	movlb	0	; () banked
  5198  001120  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5199  001122  0100               	movlb	0	; () banked
  5200  001124  276A               	addwf	sprintf@width& (0+255),f,b
  5201  001126  0100               	movlb	0	; () banked
  5202  001128  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5203  00112A  0100               	movlb	0	; () banked
  5204  00112C  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5205                           
  5206                           ; BSR set to: 0
  5207  00112E  4A32               	infsnz	sprintf@f,f,c
  5208  001130  2A33               	incf	sprintf@f+1,f,c
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5212  001132  C032  FFF6         	movff	sprintf@f,tblptrl
  5213  001136  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5214  00113A                     	if	0	;tblptru may be non-zero
  5215  00113A                     	endif
  5216  00113A                     	if	0	;tblptru may be non-zero
  5217  00113A                     	endif
  5218  00113A  0008               	tblrd		*
  5219  00113C  50F5               	movf	tablat,w,c
  5220  00113E  ECD8  F000         	call	_isdigit
  5221  001142  B0D8               	btfsc	status,0,c
  5222  001144  D7C7               	goto	l3113
  5223  001146                     l3123:
  5224  001146  C032  FFF6         	movff	sprintf@f,tblptrl
  5225  00114A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5226  00114E  4A32               	infsnz	sprintf@f,f,c
  5227  001150  2A33               	incf	sprintf@f+1,f,c
  5228  001152                     	if	0	;tblptru may be non-zero
  5229  001152                     	endif
  5230  001152                     	if	0	;tblptru may be non-zero
  5231  001152                     	endif
  5232  001152  0008               	tblrd		*
  5233  001154  CFF5 F06C          	movff	tablat,sprintf@c
  5234  001158  0100               	movlb	0	; () banked
  5235  00115A  516C               	movf	sprintf@c& (0+255),w,b
  5236                           
  5237                           ; Switch size 1, requested type "space"
  5238                           ; Number of cases is 3, Range of values is 0 to 105
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte           10     6 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  00115C  0A00               	xorlw	0	; case 0
  5244  00115E  B4D8               	btfsc	status,2,c
  5245  001160  D0FB               	goto	l3203
  5246  001162  0A64               	xorlw	100	; case 100
  5247  001164  B4D8               	btfsc	status,2,c
  5248  001166  D003               	goto	l3125
  5249  001168  0A0D               	xorlw	13	; case 105
  5250  00116A  A4D8               	btfss	status,2,c
  5251  00116C  D0E8               	goto	l3201
  5252  00116E                     l3125:
  5253                           
  5254                           ;doprnt.c: 1253: {
  5255                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5256  00116E  C064  FFD9         	movff	sprintf@ap,fsr2l
  5257  001172  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5258  001176  CFDE F067          	movff	postinc2,sprintf@val
  5259  00117A  CFDD F068          	movff	postdec2,sprintf@val+1
  5260  00117E  0E02               	movlw	2
  5261  001180  0100               	movlb	0	; () banked
  5262  001182  2764               	addwf	sprintf@ap& (0+255),f,b
  5263  001184  0E00               	movlw	0
  5264  001186  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 1261: if((int)val < 0) {
  5268  001188  0100               	movlb	0	; () banked
  5269  00118A  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5270  00118C  D008               	goto	l3135
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;doprnt.c: 1262: flag |= 0x03;
  5274  00118E  0E03               	movlw	3
  5275  001190  0100               	movlb	0	; () banked
  5276  001192  1369               	iorwf	sprintf@flag& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;doprnt.c: 1263: val = -val;
  5280  001194  0100               	movlb	0	; () banked
  5281  001196  6D67               	negf	sprintf@val& (0+255),b
  5282  001198  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5283  00119A  B0D8               	btfsc	status,0,c
  5284  00119C  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5285  00119E                     l3135:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;doprnt.c: 1264: }
  5289                           ;doprnt.c: 1266: }
  5290                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5291  00119E  0E01               	movlw	1
  5292  0011A0  0100               	movlb	0	; () banked
  5293  0011A2  6F6C               	movwf	sprintf@c& (0+255),b
  5294  0011A4                     l3137:
  5295                           
  5296                           ; BSR set to: 0
  5297  0011A4  0E05               	movlw	5
  5298  0011A6  0100               	movlb	0	; () banked
  5299  0011A8  196C               	xorwf	sprintf@c& (0+255),w,b
  5300  0011AA  B4D8               	btfsc	status,2,c
  5301  0011AC  D016               	goto	l3149
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;doprnt.c: 1306: if(val < dpowers[c])
  5305                           
  5306                           ; BSR set to: 0
  5307                           
  5308                           ; BSR set to: 0
  5309  0011AE  0100               	movlb	0	; () banked
  5310  0011B0  516C               	movf	sprintf@c& (0+255),w,b
  5311  0011B2  0D02               	mullw	2
  5312  0011B4  0E01               	movlw	low _dpowers
  5313  0011B6  24F3               	addwf	prodl,w,c
  5314  0011B8  6EF6               	movwf	tblptrl,c
  5315  0011BA  0E03               	movlw	high _dpowers
  5316  0011BC  20F4               	addwfc	prodh,w,c
  5317  0011BE  6EF7               	movwf	tblptrh,c
  5318  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  5319  0011C0                     	endif
  5320  0011C0  0009               	tblrd		*+
  5321  0011C2  50F5               	movf	tablat,w,c
  5322  0011C4  0100               	movlb	0	; () banked
  5323  0011C6  5D67               	subwf	sprintf@val& (0+255),w,b
  5324  0011C8  0009               	tblrd		*+
  5325  0011CA  50F5               	movf	tablat,w,c
  5326  0011CC  0100               	movlb	0	; () banked
  5327  0011CE  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5328  0011D0  A0D8               	btfss	status,0,c
  5329  0011D2  D003               	goto	l3149
  5330                           
  5331                           ; BSR set to: 0
  5332                           
  5333                           ; BSR set to: 0
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;doprnt.c: 1307: break;
  5337  0011D4  0100               	movlb	0	; () banked
  5338  0011D6  2B6C               	incf	sprintf@c& (0+255),f,b
  5339  0011D8  D7E5               	goto	l3137
  5340  0011DA                     l3149:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5344  0011DA  0100               	movlb	0	; () banked
  5345  0011DC  516A               	movf	sprintf@width& (0+255),w,b
  5346  0011DE  0100               	movlb	0	; () banked
  5347  0011E0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5348  0011E2  B4D8               	btfsc	status,2,c
  5349  0011E4  D00B               	goto	l3155
  5350                           
  5351                           ; BSR set to: 0
  5352  0011E6  C069  F060         	movff	sprintf@flag,??_sprintf
  5353  0011EA  0E03               	movlw	3
  5354  0011EC  0100               	movlb	0	; () banked
  5355  0011EE  1760               	andwf	??_sprintf& (0+255),f,b
  5356  0011F0  B4D8               	btfsc	status,2,c
  5357  0011F2  D004               	goto	l3155
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;doprnt.c: 1346: width--;
  5361  0011F4  0100               	movlb	0	; () banked
  5362  0011F6  076A               	decf	sprintf@width& (0+255),f,b
  5363  0011F8  A0D8               	btfss	status,0,c
  5364  0011FA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5365  0011FC                     l3155:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;doprnt.c: 1381: if(width > c)
  5369  0011FC  0E80               	movlw	128
  5370  0011FE  0100               	movlb	0	; () banked
  5371  001200  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5372  001202  0E7F               	movlw	127
  5373  001204  0100               	movlb	0	; () banked
  5374  001206  6F60               	movwf	??_sprintf& (0+255),b
  5375  001208  0100               	movlb	0	; () banked
  5376  00120A  516A               	movf	sprintf@width& (0+255),w,b
  5377  00120C  0100               	movlb	0	; () banked
  5378  00120E  5D6C               	subwf	sprintf@c& (0+255),w,b
  5379  001210  0100               	movlb	0	; () banked
  5380  001212  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5381  001214  0A80               	xorlw	128
  5382  001216  0100               	movlb	0	; () banked
  5383  001218  5960               	subwfb	??_sprintf& (0+255),w,b
  5384  00121A  B0D8               	btfsc	status,0,c
  5385  00121C  D00B               	goto	l3159
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;doprnt.c: 1382: width -= c;
  5389  00121E  0100               	movlb	0	; () banked
  5390  001220  516C               	movf	sprintf@c& (0+255),w,b
  5391  001222  0100               	movlb	0	; () banked
  5392  001224  5F6A               	subwf	sprintf@width& (0+255),f,b
  5393  001226  0E00               	movlw	0
  5394  001228  0100               	movlb	0	; () banked
  5395  00122A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5396  00122C  0EFF               	movlw	255
  5397  00122E  0100               	movlb	0	; () banked
  5398  001230  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5399  001232  D005               	goto	l3161
  5400  001234                     l3159:
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;doprnt.c: 1383: else
  5404                           ;doprnt.c: 1384: width = 0;
  5405  001234  0E00               	movlw	0
  5406  001236  0100               	movlb	0	; () banked
  5407  001238  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5408  00123A  0E00               	movlw	0
  5409  00123C  6F6A               	movwf	sprintf@width& (0+255),b
  5410  00123E                     l3161:
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;doprnt.c: 1387: if(flag & 0x04) {
  5414  00123E  0100               	movlb	0	; () banked
  5415  001240  A569               	btfss	sprintf@flag& (0+255),2,b
  5416  001242  D022               	goto	l3177
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1392: if(flag & 0x03)
  5420  001244  C069  F060         	movff	sprintf@flag,??_sprintf
  5421  001248  0E03               	movlw	3
  5422  00124A  0100               	movlb	0	; () banked
  5423  00124C  1760               	andwf	??_sprintf& (0+255),f,b
  5424  00124E  B4D8               	btfsc	status,2,c
  5425  001250  D008               	goto	l3169
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5429  001252  C030  FFD9         	movff	sprintf@sp,fsr2l
  5430  001256  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5431  00125A  0E2D               	movlw	45
  5432  00125C  6EDF               	movwf	indf2,c
  5433                           
  5434                           ; BSR set to: 0
  5435  00125E  4A30               	infsnz	sprintf@sp,f,c
  5436  001260  2A31               	incf	sprintf@sp+1,f,c
  5437  001262                     l3169:
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;doprnt.c: 1415: if(width)
  5441  001262  0100               	movlb	0	; () banked
  5442  001264  516A               	movf	sprintf@width& (0+255),w,b
  5443  001266  0100               	movlb	0	; () banked
  5444  001268  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5445  00126A  B4D8               	btfsc	status,2,c
  5446  00126C  D034               	goto	l3191
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5450                           
  5451                           ; BSR set to: 0
  5452                           
  5453                           ;doprnt.c: 1416: do
  5454  00126E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5455  001272  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5456  001276  0E30               	movlw	48
  5457  001278  6EDF               	movwf	indf2,c
  5458                           
  5459                           ; BSR set to: 0
  5460  00127A  4A30               	infsnz	sprintf@sp,f,c
  5461  00127C  2A31               	incf	sprintf@sp+1,f,c
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;doprnt.c: 1418: while(--width);
  5465  00127E  0100               	movlb	0	; () banked
  5466  001280  076A               	decf	sprintf@width& (0+255),f,b
  5467  001282  A0D8               	btfss	status,0,c
  5468  001284  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5469  001286  D7ED               	goto	l3169
  5470  001288                     l3177:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 1422: {
  5474                           ;doprnt.c: 1424: if(width
  5475                           ;doprnt.c: 1428: )
  5476  001288  0100               	movlb	0	; () banked
  5477  00128A  516A               	movf	sprintf@width& (0+255),w,b
  5478  00128C  0100               	movlb	0	; () banked
  5479  00128E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5480  001290  B4D8               	btfsc	status,2,c
  5481  001292  D012               	goto	l3185
  5482  001294                     l3179:
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5486  001294  C030  FFD9         	movff	sprintf@sp,fsr2l
  5487  001298  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5488  00129C  0E20               	movlw	32
  5489  00129E  6EDF               	movwf	indf2,c
  5490                           
  5491                           ; BSR set to: 0
  5492  0012A0  4A30               	infsnz	sprintf@sp,f,c
  5493  0012A2  2A31               	incf	sprintf@sp+1,f,c
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 1431: while(--width);
  5497  0012A4  0100               	movlb	0	; () banked
  5498  0012A6  076A               	decf	sprintf@width& (0+255),f,b
  5499  0012A8  A0D8               	btfss	status,0,c
  5500  0012AA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5501  0012AC  0100               	movlb	0	; () banked
  5502  0012AE  516A               	movf	sprintf@width& (0+255),w,b
  5503  0012B0  0100               	movlb	0	; () banked
  5504  0012B2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5505  0012B4  A4D8               	btfss	status,2,c
  5506  0012B6  D7EE               	goto	l3179
  5507  0012B8                     l3185:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;doprnt.c: 1438: if(flag & 0x03)
  5511  0012B8  C069  F060         	movff	sprintf@flag,??_sprintf
  5512  0012BC  0E03               	movlw	3
  5513  0012BE  0100               	movlb	0	; () banked
  5514  0012C0  1760               	andwf	??_sprintf& (0+255),f,b
  5515  0012C2  B4D8               	btfsc	status,2,c
  5516  0012C4  D008               	goto	l3191
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5520  0012C6  C030  FFD9         	movff	sprintf@sp,fsr2l
  5521  0012CA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5522  0012CE  0E2D               	movlw	45
  5523  0012D0  6EDF               	movwf	indf2,c
  5524                           
  5525                           ; BSR set to: 0
  5526  0012D2  4A30               	infsnz	sprintf@sp,f,c
  5527  0012D4  2A31               	incf	sprintf@sp+1,f,c
  5528  0012D6                     l3191:
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;doprnt.c: 1469: }
  5532                           ;doprnt.c: 1472: prec = c;
  5533  0012D6  C06C  F066         	movff	sprintf@c,sprintf@prec
  5534                           
  5535                           ;doprnt.c: 1474: while(prec--) {
  5536  0012DA  D02B               	goto	l3199
  5537  0012DC                     l3193:
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;doprnt.c: 1478: {
  5541                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5542  0012DC  0100               	movlb	0	; () banked
  5543  0012DE  5166               	movf	sprintf@prec& (0+255),w,b
  5544  0012E0  0D02               	mullw	2
  5545  0012E2  0E01               	movlw	low _dpowers
  5546  0012E4  24F3               	addwf	prodl,w,c
  5547  0012E6  6EF6               	movwf	tblptrl,c
  5548  0012E8  0E03               	movlw	high _dpowers
  5549  0012EA  20F4               	addwfc	prodh,w,c
  5550  0012EC  6EF7               	movwf	tblptrh,c
  5551  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  5552  0012EE                     	endif
  5553  0012EE  0009               	tblrd		*+
  5554  0012F0  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5555  0012F4  000A               	tblrd		*-
  5556  0012F6  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5557  0012FA  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5558  0012FE  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5559  001302  EC72  F00D         	call	___lwdiv	;wreg free
  5560  001306  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5561  00130A  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5562  00130E  0E00               	movlw	0
  5563  001310  6E2E               	movwf	___lwmod@divisor+1,c
  5564  001312  0E0A               	movlw	10
  5565  001314  6E2D               	movwf	___lwmod@divisor,c
  5566  001316  EC9B  F00D         	call	___lwmod	;wreg free
  5567  00131A  502B               	movf	?___lwmod,w,c
  5568  00131C  0F30               	addlw	48
  5569  00131E  0100               	movlb	0	; () banked
  5570  001320  6F6C               	movwf	sprintf@c& (0+255),b
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;doprnt.c: 1523: }
  5574                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5575  001322  C030  FFD9         	movff	sprintf@sp,fsr2l
  5576  001326  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5577  00132A  C06C  FFDF         	movff	sprintf@c,indf2
  5578                           
  5579                           ; BSR set to: 0
  5580  00132E  4A30               	infsnz	sprintf@sp,f,c
  5581  001330  2A31               	incf	sprintf@sp+1,f,c
  5582  001332                     l3199:
  5583                           
  5584                           ; BSR set to: 0
  5585  001332  0100               	movlb	0	; () banked
  5586  001334  0766               	decf	sprintf@prec& (0+255),f,b
  5587  001336  0100               	movlb	0	; () banked
  5588  001338  2966               	incf	sprintf@prec& (0+255),w,b
  5589  00133A  A4D8               	btfss	status,2,c
  5590  00133C  D7CF               	goto	l3193
  5591  00133E                     l3201:
  5592  00133E  C032  FFF6         	movff	sprintf@f,tblptrl
  5593  001342  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5594  001346  4A32               	infsnz	sprintf@f,f,c
  5595  001348  2A33               	incf	sprintf@f+1,f,c
  5596  00134A                     	if	0	;tblptru may be non-zero
  5597  00134A                     	endif
  5598  00134A                     	if	0	;tblptru may be non-zero
  5599  00134A                     	endif
  5600  00134A  0008               	tblrd		*
  5601  00134C  CFF5 F06C          	movff	tablat,sprintf@c
  5602  001350  0100               	movlb	0	; () banked
  5603  001352  516C               	movf	sprintf@c& (0+255),w,b
  5604  001354  A4D8               	btfss	status,2,c
  5605  001356  D68B               	goto	l3095
  5606  001358                     l3203:
  5607                           
  5608                           ;doprnt.c: 1538: *sp = 0;
  5609  001358  C030  FFD9         	movff	sprintf@sp,fsr2l
  5610  00135C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5611  001360  0E00               	movlw	0
  5612  001362  6EDF               	movwf	indf2,c
  5613  001364  0012               	return	
  5614  001366                     __end_of_sprintf:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           postinc0	equ	0xFEE
  5624                           wreg	equ	0xFE8
  5625                           indf1	equ	0xFE7
  5626                           plusw1	equ	0xFE3
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           plusw2	equ	0xFDB
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _isdigit *****************
  5638 ;; Defined at:
  5639 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  c               1    wreg     unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  c               1   37[COMRAM] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5653 ;;      Params:         0       0       0       0
  5654 ;;      Locals:         2       0       0       0
  5655 ;;      Temps:          1       0       0       0
  5656 ;;      Totals:         3       0       0       0
  5657 ;;Total ram usage:        3 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    3
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_sprintf
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text19
  5668  0001B0                     __ptext19:
  5669                           	opt stack 0
  5670  0001B0                     _isdigit:
  5671                           	opt stack 26
  5672                           
  5673                           ;incstack = 0
  5674                           ;isdigit@c stored from wreg
  5675  0001B0  6E26               	movwf	isdigit@c,c
  5676  0001B2  0E00               	movlw	0
  5677  0001B4  6E25               	movwf	_isdigit$2086,c
  5678  0001B6  0E3A               	movlw	58
  5679  0001B8  6026               	cpfslt	isdigit@c,c
  5680  0001BA  D005               	goto	l2165
  5681  0001BC  0E2F               	movlw	47
  5682  0001BE  6426               	cpfsgt	isdigit@c,c
  5683  0001C0  D002               	goto	l2165
  5684  0001C2  0E01               	movlw	1
  5685  0001C4  6E25               	movwf	_isdigit$2086,c
  5686  0001C6                     l2165:
  5687  0001C6  C025  F024         	movff	_isdigit$2086,??_isdigit
  5688  0001CA  3024               	rrcf	??_isdigit,w,c
  5689  0001CC  0012               	return	
  5690  0001CE                     __end_of_isdigit:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           plusw1	equ	0xFE3
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           plusw2	equ	0xFDB
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function ___wmul *****************
  5714 ;; Defined at:
  5715 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  multiplier      2   35[COMRAM] unsigned int 
  5718 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;  product         2   39[COMRAM] unsigned int 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  2   35[COMRAM] unsigned int 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, prodl, prodh
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5730 ;;      Params:         4       0       0       0
  5731 ;;      Locals:         2       0       0       0
  5732 ;;      Temps:          0       0       0       0
  5733 ;;      Totals:         6       0       0       0
  5734 ;;Total ram usage:        6 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    3
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_setMotorPWM
  5741 ;;		_sprintf
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text20
  5746  00018A                     __ptext20:
  5747                           	opt stack 0
  5748  00018A                     ___wmul:
  5749                           	opt stack 24
  5750                           
  5751                           ;incstack = 0
  5752  00018A  5024               	movf	___wmul@multiplier,w,c
  5753  00018C  0226               	mulwf	___wmul@multiplicand,c
  5754  00018E  CFF3 F028          	movff	prodl,___wmul@product
  5755  000192  CFF4 F029          	movff	prodh,___wmul@product+1
  5756  000196  5024               	movf	___wmul@multiplier,w,c
  5757  000198  0227               	mulwf	___wmul@multiplicand+1,c
  5758  00019A  50F3               	movf	prodl,w,c
  5759  00019C  2629               	addwf	___wmul@product+1,f,c
  5760  00019E  5025               	movf	___wmul@multiplier+1,w,c
  5761  0001A0  0226               	mulwf	___wmul@multiplicand,c
  5762  0001A2  50F3               	movf	prodl,w,c
  5763  0001A4  2629               	addwf	___wmul@product+1,f,c
  5764  0001A6  C028  F024         	movff	___wmul@product,?___wmul
  5765  0001AA  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5766  0001AE  0012               	return	
  5767  0001B0                     __end_of___wmul:
  5768                           	opt stack 0
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           plusw1	equ	0xFE3
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function ___lwmod *****************
  5791 ;; Defined at:
  5792 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  dividend        2   42[COMRAM] unsigned int 
  5795 ;;  divisor         2   44[COMRAM] unsigned int 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  counter         1   46[COMRAM] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2   42[COMRAM] unsigned int 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5807 ;;      Params:         4       0       0       0
  5808 ;;      Locals:         1       0       0       0
  5809 ;;      Temps:          0       0       0       0
  5810 ;;      Totals:         5       0       0       0
  5811 ;;Total ram usage:        5 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    3
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_sprintf
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           	psect	text21
  5822  001B36                     __ptext21:
  5823                           	opt stack 0
  5824  001B36                     ___lwmod:
  5825                           	opt stack 26
  5826                           
  5827                           ;incstack = 0
  5828  001B36  502D               	movf	___lwmod@divisor,w,c
  5829  001B38  102E               	iorwf	___lwmod@divisor+1,w,c
  5830  001B3A  B4D8               	btfsc	status,2,c
  5831  001B3C  D018               	goto	l910
  5832  001B3E  0E01               	movlw	1
  5833  001B40  6E2F               	movwf	___lwmod@counter,c
  5834  001B42  D004               	goto	l2197
  5835  001B44                     l2195:
  5836  001B44  90D8               	bcf	status,0,c
  5837  001B46  362D               	rlcf	___lwmod@divisor,f,c
  5838  001B48  362E               	rlcf	___lwmod@divisor+1,f,c
  5839  001B4A  2A2F               	incf	___lwmod@counter,f,c
  5840  001B4C                     l2197:
  5841  001B4C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5842  001B4E  D7FA               	goto	l2195
  5843  001B50                     l2199:
  5844  001B50  502D               	movf	___lwmod@divisor,w,c
  5845  001B52  5C2B               	subwf	___lwmod@dividend,w,c
  5846  001B54  502E               	movf	___lwmod@divisor+1,w,c
  5847  001B56  582C               	subwfb	___lwmod@dividend+1,w,c
  5848  001B58  A0D8               	btfss	status,0,c
  5849  001B5A  D004               	goto	l2203
  5850  001B5C  502D               	movf	___lwmod@divisor,w,c
  5851  001B5E  5E2B               	subwf	___lwmod@dividend,f,c
  5852  001B60  502E               	movf	___lwmod@divisor+1,w,c
  5853  001B62  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5854  001B64                     l2203:
  5855  001B64  90D8               	bcf	status,0,c
  5856  001B66  322E               	rrcf	___lwmod@divisor+1,f,c
  5857  001B68  322D               	rrcf	___lwmod@divisor,f,c
  5858  001B6A  2E2F               	decfsz	___lwmod@counter,f,c
  5859  001B6C  D7F1               	goto	l2199
  5860  001B6E                     l910:
  5861  001B6E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5862  001B72  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5863  001B76  0012               	return		;funcret
  5864  001B78                     __end_of___lwmod:
  5865                           	opt stack 0
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           indf1	equ	0xFE7
  5876                           plusw1	equ	0xFE3
  5877                           fsr1h	equ	0xFE2
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           postinc2	equ	0xFDE
  5881                           postdec2	equ	0xFDD
  5882                           plusw2	equ	0xFDB
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function ___lwdiv *****************
  5888 ;; Defined at:
  5889 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  dividend        2   35[COMRAM] unsigned int 
  5892 ;;  divisor         2   37[COMRAM] unsigned int 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  quotient        2   39[COMRAM] unsigned int 
  5895 ;;  counter         1   41[COMRAM] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  2   35[COMRAM] unsigned int 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5905 ;;      Params:         4       0       0       0
  5906 ;;      Locals:         3       0       0       0
  5907 ;;      Temps:          0       0       0       0
  5908 ;;      Totals:         7       0       0       0
  5909 ;;Total ram usage:        7 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    3
  5912 ;; This function calls:
  5913 ;;		Nothing
  5914 ;; This function is called by:
  5915 ;;		_sprintf
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text22
  5920  001AE4                     __ptext22:
  5921                           	opt stack 0
  5922  001AE4                     ___lwdiv:
  5923                           	opt stack 26
  5924                           
  5925                           ;incstack = 0
  5926  001AE4  0E00               	movlw	0
  5927  001AE6  6E29               	movwf	___lwdiv@quotient+1,c
  5928  001AE8  0E00               	movlw	0
  5929  001AEA  6E28               	movwf	___lwdiv@quotient,c
  5930  001AEC  5026               	movf	___lwdiv@divisor,w,c
  5931  001AEE  1027               	iorwf	___lwdiv@divisor+1,w,c
  5932  001AF0  B4D8               	btfsc	status,2,c
  5933  001AF2  D01C               	goto	l900
  5934  001AF4  0E01               	movlw	1
  5935  001AF6  6E2A               	movwf	___lwdiv@counter,c
  5936  001AF8  D004               	goto	l2177
  5937  001AFA                     l2175:
  5938  001AFA  90D8               	bcf	status,0,c
  5939  001AFC  3626               	rlcf	___lwdiv@divisor,f,c
  5940  001AFE  3627               	rlcf	___lwdiv@divisor+1,f,c
  5941  001B00  2A2A               	incf	___lwdiv@counter,f,c
  5942  001B02                     l2177:
  5943  001B02  AE27               	btfss	___lwdiv@divisor+1,7,c
  5944  001B04  D7FA               	goto	l2175
  5945  001B06                     l2179:
  5946  001B06  90D8               	bcf	status,0,c
  5947  001B08  3628               	rlcf	___lwdiv@quotient,f,c
  5948  001B0A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5949  001B0C  5026               	movf	___lwdiv@divisor,w,c
  5950  001B0E  5C24               	subwf	___lwdiv@dividend,w,c
  5951  001B10  5027               	movf	___lwdiv@divisor+1,w,c
  5952  001B12  5825               	subwfb	___lwdiv@dividend+1,w,c
  5953  001B14  A0D8               	btfss	status,0,c
  5954  001B16  D005               	goto	l2187
  5955  001B18  5026               	movf	___lwdiv@divisor,w,c
  5956  001B1A  5E24               	subwf	___lwdiv@dividend,f,c
  5957  001B1C  5027               	movf	___lwdiv@divisor+1,w,c
  5958  001B1E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5959  001B20  8028               	bsf	___lwdiv@quotient,0,c
  5960  001B22                     l2187:
  5961  001B22  90D8               	bcf	status,0,c
  5962  001B24  3227               	rrcf	___lwdiv@divisor+1,f,c
  5963  001B26  3226               	rrcf	___lwdiv@divisor,f,c
  5964  001B28  2E2A               	decfsz	___lwdiv@counter,f,c
  5965  001B2A  D7ED               	goto	l2179
  5966  001B2C                     l900:
  5967  001B2C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5968  001B30  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5969  001B34  0012               	return		;funcret
  5970  001B36                     __end_of___lwdiv:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           indf1	equ	0xFE7
  5982                           plusw1	equ	0xFE3
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           plusw2	equ	0xFDB
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _grabRightIR *****************
  5994 ;; Defined at:
  5995 ;;		line 74 in file "IR_Reading.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;		None
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6000 ;;  i               1   42[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  2   35[COMRAM] unsigned int 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6010 ;;      Params:         2       0       0       0
  6011 ;;      Locals:         3       0       0       0
  6012 ;;      Temps:          3       0       0       0
  6013 ;;      Totals:         8       0       0       0
  6014 ;;Total ram usage:        8 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    3
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_ScanIR
  6021 ;;		_ScanWithRange
  6022 ;;		_main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text23
  6027  00194A                     __ptext23:
  6028                           	opt stack 0
  6029  00194A                     _grabRightIR:
  6030                           	opt stack 27
  6031                           
  6032                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6033                           
  6034                           ;incstack = 0
  6035  00194A  0E00               	movlw	0
  6036  00194C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6037  00194E  0E00               	movlw	0
  6038  001950  6E29               	movwf	grabRightIR@IR_signal,c
  6039                           
  6040                           ;IR_Reading.c: 77: unsigned char i=0;
  6041  001952  0E00               	movlw	0
  6042  001954  6E2B               	movwf	grabRightIR@i,c
  6043                           
  6044                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6045  001956  0E00               	movlw	0
  6046  001958  6E2B               	movwf	grabRightIR@i,c
  6047  00195A                     l2239:
  6048  00195A  0E03               	movlw	3
  6049  00195C  642B               	cpfsgt	grabRightIR@i,c
  6050  00195E  D001               	goto	l2243
  6051  001960  D01E               	goto	l2249
  6052  001962                     l2243:
  6053                           
  6054                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6055  001962  5069               	movf	3945,w,c	;volatile
  6056  001964  6E26               	movwf	??_grabRightIR& (0+255),c
  6057  001966  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6058  001968  0E07               	movlw	7
  6059  00196A                     u1535:
  6060  00196A  90D8               	bcf	status,0,c
  6061  00196C  3626               	rlcf	??_grabRightIR,f,c
  6062  00196E  3627               	rlcf	??_grabRightIR+1,f,c
  6063  001970  2EE8               	decfsz	wreg,f,c
  6064  001972  D7FB               	goto	u1535
  6065  001974  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6066  001978  90D8               	bcf	status,0,c
  6067  00197A  3228               	rrcf	??_grabRightIR+2,f,c
  6068  00197C  5028               	movf	??_grabRightIR+2,w,c
  6069  00197E  1226               	iorwf	??_grabRightIR,f,c
  6070  001980  0E00               	movlw	0
  6071  001982  1227               	iorwf	??_grabRightIR+1,f,c
  6072  001984  5026               	movf	??_grabRightIR,w,c
  6073  001986  2629               	addwf	grabRightIR@IR_signal,f,c
  6074  001988  5027               	movf	??_grabRightIR+1,w,c
  6075  00198A  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6076                           
  6077                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6078  00198C  0E82               	movlw	130
  6079  00198E  6E26               	movwf	??_grabRightIR& (0+255),c
  6080  001990  0EDE               	movlw	222
  6081  001992                     u3267:
  6082  001992  2EE8               	decfsz	wreg,f,c
  6083  001994  D7FE               	goto	u3267
  6084  001996  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6085  001998  D7FC               	goto	u3267
  6086  00199A  2A2B               	incf	grabRightIR@i,f,c
  6087  00199C  D7DE               	goto	l2239
  6088  00199E                     l2249:
  6089                           
  6090                           ;IR_Reading.c: 83: }
  6091                           ;IR_Reading.c: 85: return IR_signal>>2;
  6092  00199E  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6093  0019A2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6094  0019A6  90D8               	bcf	status,0,c
  6095  0019A8  3227               	rrcf	??_grabRightIR+1,f,c
  6096  0019AA  3226               	rrcf	??_grabRightIR,f,c
  6097  0019AC  90D8               	bcf	status,0,c
  6098  0019AE  3227               	rrcf	??_grabRightIR+1,f,c
  6099  0019B0  3226               	rrcf	??_grabRightIR,f,c
  6100  0019B2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6101  0019B6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6102  0019BA  0012               	return	
  6103  0019BC                     __end_of_grabRightIR:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           indf1	equ	0xFE7
  6115                           plusw1	equ	0xFE3
  6116                           fsr1h	equ	0xFE2
  6117                           fsr1l	equ	0xFE1
  6118                           indf2	equ	0xFDF
  6119                           postinc2	equ	0xFDE
  6120                           postdec2	equ	0xFDD
  6121                           plusw2	equ	0xFDB
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _grabLeftIR *****************
  6127 ;; Defined at:
  6128 ;;		line 90 in file "IR_Reading.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6133 ;;  i               1   42[COMRAM] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  2   35[COMRAM] unsigned int 
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, status,0
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6143 ;;      Params:         2       0       0       0
  6144 ;;      Locals:         3       0       0       0
  6145 ;;      Temps:          3       0       0       0
  6146 ;;      Totals:         8       0       0       0
  6147 ;;Total ram usage:        8 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    3
  6150 ;; This function calls:
  6151 ;;		Nothing
  6152 ;; This function is called by:
  6153 ;;		_ScanIR
  6154 ;;		_ScanWithRange
  6155 ;;		_main
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text24
  6160  0019BC                     __ptext24:
  6161                           	opt stack 0
  6162  0019BC                     _grabLeftIR:
  6163                           	opt stack 27
  6164                           
  6165                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6166                           
  6167                           ;incstack = 0
  6168  0019BC  0E00               	movlw	0
  6169  0019BE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6170  0019C0  0E00               	movlw	0
  6171  0019C2  6E29               	movwf	grabLeftIR@IR_signal,c
  6172                           
  6173                           ;IR_Reading.c: 93: unsigned char i=0;
  6174  0019C4  0E00               	movlw	0
  6175  0019C6  6E2B               	movwf	grabLeftIR@i,c
  6176                           
  6177                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6178  0019C8  0E00               	movlw	0
  6179  0019CA  6E2B               	movwf	grabLeftIR@i,c
  6180  0019CC                     l2255:
  6181  0019CC  0E03               	movlw	3
  6182  0019CE  642B               	cpfsgt	grabLeftIR@i,c
  6183  0019D0  D001               	goto	l2259
  6184  0019D2  D01E               	goto	l2265
  6185  0019D4                     l2259:
  6186                           
  6187                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6188  0019D4  5067               	movf	3943,w,c	;volatile
  6189  0019D6  6E26               	movwf	??_grabLeftIR& (0+255),c
  6190  0019D8  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6191  0019DA  0E07               	movlw	7
  6192  0019DC                     u1565:
  6193  0019DC  90D8               	bcf	status,0,c
  6194  0019DE  3626               	rlcf	??_grabLeftIR,f,c
  6195  0019E0  3627               	rlcf	??_grabLeftIR+1,f,c
  6196  0019E2  2EE8               	decfsz	wreg,f,c
  6197  0019E4  D7FB               	goto	u1565
  6198  0019E6  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6199  0019EA  90D8               	bcf	status,0,c
  6200  0019EC  3228               	rrcf	??_grabLeftIR+2,f,c
  6201  0019EE  5028               	movf	??_grabLeftIR+2,w,c
  6202  0019F0  1226               	iorwf	??_grabLeftIR,f,c
  6203  0019F2  0E00               	movlw	0
  6204  0019F4  1227               	iorwf	??_grabLeftIR+1,f,c
  6205  0019F6  5026               	movf	??_grabLeftIR,w,c
  6206  0019F8  2629               	addwf	grabLeftIR@IR_signal,f,c
  6207  0019FA  5027               	movf	??_grabLeftIR+1,w,c
  6208  0019FC  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6209                           
  6210                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6211  0019FE  0E82               	movlw	130
  6212  001A00  6E26               	movwf	??_grabLeftIR& (0+255),c
  6213  001A02  0EDE               	movlw	222
  6214  001A04                     u3277:
  6215  001A04  2EE8               	decfsz	wreg,f,c
  6216  001A06  D7FE               	goto	u3277
  6217  001A08  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6218  001A0A  D7FC               	goto	u3277
  6219  001A0C  2A2B               	incf	grabLeftIR@i,f,c
  6220  001A0E  D7DE               	goto	l2255
  6221  001A10                     l2265:
  6222                           
  6223                           ;IR_Reading.c: 99: }
  6224                           ;IR_Reading.c: 101: return IR_signal>>2;
  6225  001A10  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6226  001A14  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6227  001A18  90D8               	bcf	status,0,c
  6228  001A1A  3227               	rrcf	??_grabLeftIR+1,f,c
  6229  001A1C  3226               	rrcf	??_grabLeftIR,f,c
  6230  001A1E  90D8               	bcf	status,0,c
  6231  001A20  3227               	rrcf	??_grabLeftIR+1,f,c
  6232  001A22  3226               	rrcf	??_grabLeftIR,f,c
  6233  001A24  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6234  001A28  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6235  001A2C  0012               	return	
  6236  001A2E                     __end_of_grabLeftIR:
  6237                           	opt stack 0
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           postinc0	equ	0xFEE
  6246                           wreg	equ	0xFE8
  6247                           indf1	equ	0xFE7
  6248                           plusw1	equ	0xFE3
  6249                           fsr1h	equ	0xFE2
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           plusw2	equ	0xFDB
  6255                           fsr2h	equ	0xFDA
  6256                           fsr2l	equ	0xFD9
  6257                           status	equ	0xFD8
  6258                           
  6259 ;; *************** function _SetLine *****************
  6260 ;; Defined at:
  6261 ;;		line 74 in file "LCD.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  line            1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  line            1   41[COMRAM] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;		None               void
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6275 ;;      Params:         0       0       0       0
  6276 ;;      Locals:         1       0       0       0
  6277 ;;      Temps:          0       0       0       0
  6278 ;;      Totals:         1       0       0       0
  6279 ;;Total ram usage:        1 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    6
  6282 ;; This function calls:
  6283 ;;		_SendLCD
  6284 ;; This function is called by:
  6285 ;;		_ScanIR
  6286 ;;		_ScanWithRange
  6287 ;;		_main
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text25
  6292  0000DA                     __ptext25:
  6293                           	opt stack 0
  6294  0000DA                     _SetLine:
  6295                           	opt stack 24
  6296                           
  6297                           ;incstack = 0
  6298                           ;SetLine@line stored from wreg
  6299  0000DA  6E2A               	movwf	SetLine@line,c
  6300                           
  6301                           ;LCD.c: 75: if (line==1) {
  6302  0000DC  042A               	decf	SetLine@line,w,c
  6303  0000DE  A4D8               	btfss	status,2,c
  6304  0000E0  D006               	goto	l2273
  6305                           
  6306                           ;LCD.c: 76: SendLCD(0x80,0);
  6307  0000E2  0E00               	movlw	0
  6308  0000E4  6E28               	movwf	SendLCD@type,c
  6309  0000E6  0E80               	movlw	128
  6310  0000E8  EC85  F000         	call	_SendLCD
  6311                           
  6312                           ;LCD.c: 77: } else if (line==2) {
  6313  0000EC  D009               	goto	l2277
  6314  0000EE                     l2273:
  6315  0000EE  0E02               	movlw	2
  6316  0000F0  182A               	xorwf	SetLine@line,w,c
  6317  0000F2  A4D8               	btfss	status,2,c
  6318  0000F4  D005               	goto	l2277
  6319                           
  6320                           ;LCD.c: 78: SendLCD(0xC0,0);
  6321  0000F6  0E00               	movlw	0
  6322  0000F8  6E28               	movwf	SendLCD@type,c
  6323  0000FA  0EC0               	movlw	192
  6324  0000FC  EC85  F000         	call	_SendLCD
  6325  000100                     l2277:
  6326                           
  6327                           ;LCD.c: 79: }
  6328                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6329  000100  0E21               	movlw	33
  6330  000102                     u3287:
  6331  000102  2EE8               	decfsz	wreg,f,c
  6332  000104  D7FE               	goto	u3287
  6333  000106  F000               	nop	
  6334  000108  0012               	return		;funcret
  6335  00010A                     __end_of_SetLine:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           tblptrh	equ	0xFF7
  6339                           tblptrl	equ	0xFF6
  6340                           tablat	equ	0xFF5
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           indf1	equ	0xFE7
  6347                           plusw1	equ	0xFE3
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           indf2	equ	0xFDF
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           plusw2	equ	0xFDB
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _LCD_String *****************
  6359 ;; Defined at:
  6360 ;;		line 83 in file "LCD.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  string          2   41[COMRAM] PTR unsigned char 
  6363 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6364 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6365 ;;		 -> STR_1(12), 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6377 ;;      Params:         2       0       0       0
  6378 ;;      Locals:         0       0       0       0
  6379 ;;      Temps:          0       0       0       0
  6380 ;;      Totals:         2       0       0       0
  6381 ;;Total ram usage:        2 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    6
  6384 ;; This function calls:
  6385 ;;		_SendLCD
  6386 ;; This function is called by:
  6387 ;;		_ScanIR
  6388 ;;		_ScanWithRange
  6389 ;;		_main
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text26
  6394  001A2E                     __ptext26:
  6395                           	opt stack 0
  6396  001A2E                     _LCD_String:
  6397                           	opt stack 23
  6398                           
  6399                           ;LCD.c: 85: while(*string != 0){
  6400                           
  6401                           ;incstack = 0
  6402  001A2E  D01A               	goto	l2287
  6403  001A30                     l2281:
  6404                           
  6405                           ;LCD.c: 88: SendLCD(*string++,1);
  6406  001A30  0E01               	movlw	1
  6407  001A32  6E28               	movwf	SendLCD@type,c
  6408  001A34  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6409  001A38  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6410  001A3C  6AF8               	clrf	tblptru,c
  6411  001A3E  0E02               	movlw	(high __ramtop+-1)
  6412  001A40  64F7               	cpfsgt	tblptrh,c
  6413  001A42  D003               	bra	u1607
  6414  001A44  0008               	tblrd		*
  6415  001A46  50F5               	movf	tablat,w,c
  6416  001A48  D005               	bra	u1600
  6417  001A4A                     u1607:
  6418  001A4A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6419  001A4E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6420  001A52  50EF               	movf	indf0,w,c
  6421  001A54                     u1600:
  6422  001A54  EC85  F000         	call	_SendLCD
  6423  001A58  4A2A               	infsnz	LCD_String@string,f,c
  6424  001A5A  2A2B               	incf	LCD_String@string+1,f,c
  6425                           
  6426                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6427  001A5C  0E21               	movlw	33
  6428  001A5E                     u3297:
  6429  001A5E  2EE8               	decfsz	wreg,f,c
  6430  001A60  D7FE               	goto	u3297
  6431  001A62  F000               	nop	
  6432  001A64                     l2287:
  6433  001A64  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6434  001A68  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6435  001A6C  6AF8               	clrf	tblptru,c
  6436  001A6E  0E02               	movlw	(high __ramtop+-1)
  6437  001A70  64F7               	cpfsgt	tblptrh,c
  6438  001A72  D003               	bra	u1617
  6439  001A74  0008               	tblrd		*
  6440  001A76  50F5               	movf	tablat,w,c
  6441  001A78  D005               	bra	u1610
  6442  001A7A                     u1617:
  6443  001A7A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6444  001A7E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6445  001A82  50EF               	movf	indf0,w,c
  6446  001A84                     u1610:
  6447  001A84  0900               	iorlw	0
  6448  001A86  B4D8               	btfsc	status,2,c
  6449  001A88  0012               	return	
  6450  001A8A  D7D2               	goto	l2281
  6451  001A8C                     __end_of_LCD_String:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon	equ	0xFF2
  6460                           indf0	equ	0xFEF
  6461                           postinc0	equ	0xFEE
  6462                           fsr0h	equ	0xFEA
  6463                           fsr0l	equ	0xFE9
  6464                           wreg	equ	0xFE8
  6465                           indf1	equ	0xFE7
  6466                           plusw1	equ	0xFE3
  6467                           fsr1h	equ	0xFE2
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           plusw2	equ	0xFDB
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _SendLCD *****************
  6478 ;; Defined at:
  6479 ;;		line 27 in file "LCD.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  Byte            1    wreg     unsigned char 
  6482 ;;  type            1   39[COMRAM] unsigned char 
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  Byte            1   40[COMRAM] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6494 ;;      Params:         1       0       0       0
  6495 ;;      Locals:         1       0       0       0
  6496 ;;      Temps:          0       0       0       0
  6497 ;;      Totals:         2       0       0       0
  6498 ;;Total ram usage:        2 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    5
  6501 ;; This function calls:
  6502 ;;		_LCDout
  6503 ;; This function is called by:
  6504 ;;		_initLCD
  6505 ;;		_SetLine
  6506 ;;		_LCD_String
  6507 ;;		_ScanIR
  6508 ;;		_ScanWithRange
  6509 ;;		_main
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text27
  6514  00010A                     __ptext27:
  6515                           	opt stack 0
  6516  00010A                     _SendLCD:
  6517                           	opt stack 24
  6518                           
  6519                           ;incstack = 0
  6520                           ;SendLCD@Byte stored from wreg
  6521  00010A  6E29               	movwf	SendLCD@Byte,c
  6522                           
  6523                           ;LCD.c: 30: LATAbits.LATA6=type;
  6524  00010C  B028               	btfsc	SendLCD@type,0,c
  6525  00010E  D002               	bra	u1395
  6526  000110  9C89               	bcf	3977,6,c	;volatile
  6527  000112  D001               	bra	u1396
  6528  000114                     u1395:
  6529  000114  8C89               	bsf	3977,6,c	;volatile
  6530  000116                     u1396:
  6531                           
  6532                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6533  000116  3829               	swapf	SendLCD@Byte,w,c
  6534  000118  0B0F               	andlw	15
  6535  00011A  0B0F               	andlw	15
  6536  00011C  ECCD  F00A         	call	_LCDout
  6537                           
  6538                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6539  000120  0E06               	movlw	6
  6540  000122                     u3307:
  6541  000122  2EE8               	decfsz	wreg,f,c
  6542  000124  D7FE               	goto	u3307
  6543  000126  D000               	nop2		;nop
  6544                           
  6545                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6546  000128  5029               	movf	SendLCD@Byte,w,c
  6547  00012A  0B0F               	andlw	15
  6548  00012C  ECCD  F00A         	call	_LCDout
  6549                           
  6550                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6551  000130  0E21               	movlw	33
  6552  000132                     u3317:
  6553  000132  2EE8               	decfsz	wreg,f,c
  6554  000134  D7FE               	goto	u3317
  6555  000136  F000               	nop	
  6556  000138  0012               	return		;funcret
  6557  00013A                     __end_of_SendLCD:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           indf0	equ	0xFEF
  6567                           postinc0	equ	0xFEE
  6568                           fsr0h	equ	0xFEA
  6569                           fsr0l	equ	0xFE9
  6570                           wreg	equ	0xFE8
  6571                           indf1	equ	0xFE7
  6572                           plusw1	equ	0xFE3
  6573                           fsr1h	equ	0xFE2
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           plusw2	equ	0xFDB
  6579                           fsr2h	equ	0xFDA
  6580                           fsr2l	equ	0xFD9
  6581                           status	equ	0xFD8
  6582                           
  6583 ;; *************** function _LCDout *****************
  6584 ;; Defined at:
  6585 ;;		line 14 in file "LCD.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;  number          1    wreg     unsigned char 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  number          1   38[COMRAM] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;		None               void
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6599 ;;      Params:         0       0       0       0
  6600 ;;      Locals:         1       0       0       0
  6601 ;;      Temps:          3       0       0       0
  6602 ;;      Totals:         4       0       0       0
  6603 ;;Total ram usage:        4 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    4
  6606 ;; This function calls:
  6607 ;;		_E_TOG
  6608 ;; This function is called by:
  6609 ;;		_SendLCD
  6610 ;;		_initLCD
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text28
  6615  00159A                     __ptext28:
  6616                           	opt stack 0
  6617  00159A                     _LCDout:
  6618                           	opt stack 24
  6619                           
  6620                           ;incstack = 0
  6621                           ;LCDout@number stored from wreg
  6622  00159A  6E27               	movwf	LCDout@number,c
  6623                           
  6624                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6625  00159C  5027               	movf	LCDout@number,w,c
  6626  00159E  6E24               	movwf	??_LCDout& (0+255),c
  6627  0015A0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6628  0015A2  0E07               	movlw	7
  6629  0015A4                     u1285:
  6630  0015A4  90D8               	bcf	status,0,c
  6631  0015A6  3624               	rlcf	??_LCDout,f,c
  6632  0015A8  3625               	rlcf	??_LCDout+1,f,c
  6633  0015AA  2EE8               	decfsz	wreg,f,c
  6634  0015AC  D7FB               	goto	u1285
  6635  0015AE  0E07               	movlw	7
  6636  0015B0  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6637  0015B2                     u1295:
  6638  0015B2  3425               	rlcf	??_LCDout+1,w,c
  6639  0015B4  3225               	rrcf	??_LCDout+1,f,c
  6640  0015B6  3224               	rrcf	??_LCDout,f,c
  6641  0015B8  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6642  0015BA  D7FB               	goto	u1295
  6643  0015BC  4624               	rlncf	??_LCDout,f,c
  6644  0015BE  508B               	movf	3979,w,c	;volatile
  6645  0015C0  1824               	xorwf	??_LCDout,w,c
  6646  0015C2  0BFD               	andlw	-3
  6647  0015C4  1824               	xorwf	??_LCDout,w,c
  6648  0015C6  6E8B               	movwf	3979,c	;volatile
  6649                           
  6650                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6651  0015C8  5027               	movf	LCDout@number,w,c
  6652  0015CA  6E24               	movwf	??_LCDout& (0+255),c
  6653  0015CC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6654  0015CE  0E06               	movlw	6
  6655  0015D0                     u1305:
  6656  0015D0  90D8               	bcf	status,0,c
  6657  0015D2  3624               	rlcf	??_LCDout,f,c
  6658  0015D4  3625               	rlcf	??_LCDout+1,f,c
  6659  0015D6  2EE8               	decfsz	wreg,f,c
  6660  0015D8  D7FB               	goto	u1305
  6661  0015DA  0E07               	movlw	7
  6662  0015DC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6663  0015DE                     u1315:
  6664  0015DE  3425               	rlcf	??_LCDout+1,w,c
  6665  0015E0  3225               	rrcf	??_LCDout+1,f,c
  6666  0015E2  3224               	rrcf	??_LCDout,f,c
  6667  0015E4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6668  0015E6  D7FB               	goto	u1315
  6669  0015E8  4624               	rlncf	??_LCDout,f,c
  6670  0015EA  4624               	rlncf	??_LCDout,f,c
  6671  0015EC  508B               	movf	3979,w,c	;volatile
  6672  0015EE  1824               	xorwf	??_LCDout,w,c
  6673  0015F0  0BFB               	andlw	-5
  6674  0015F2  1824               	xorwf	??_LCDout,w,c
  6675  0015F4  6E8B               	movwf	3979,c	;volatile
  6676                           
  6677                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6678  0015F6  5027               	movf	LCDout@number,w,c
  6679  0015F8  6E24               	movwf	??_LCDout& (0+255),c
  6680  0015FA  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6681  0015FC  0E05               	movlw	5
  6682  0015FE                     u1325:
  6683  0015FE  90D8               	bcf	status,0,c
  6684  001600  3624               	rlcf	??_LCDout,f,c
  6685  001602  3625               	rlcf	??_LCDout+1,f,c
  6686  001604  2EE8               	decfsz	wreg,f,c
  6687  001606  D7FB               	goto	u1325
  6688  001608  0E07               	movlw	7
  6689  00160A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6690  00160C                     u1335:
  6691  00160C  3425               	rlcf	??_LCDout+1,w,c
  6692  00160E  3225               	rrcf	??_LCDout+1,f,c
  6693  001610  3224               	rrcf	??_LCDout,f,c
  6694  001612  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6695  001614  D7FB               	goto	u1335
  6696  001616  508C               	movf	3980,w,c	;volatile
  6697  001618  1824               	xorwf	??_LCDout,w,c
  6698  00161A  0BFE               	andlw	-2
  6699  00161C  1824               	xorwf	??_LCDout,w,c
  6700  00161E  6E8C               	movwf	3980,c	;volatile
  6701                           
  6702                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6703  001620  5027               	movf	LCDout@number,w,c
  6704  001622  6E24               	movwf	??_LCDout& (0+255),c
  6705  001624  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6706  001626  3A24               	swapf	??_LCDout,f,c
  6707  001628  3A25               	swapf	??_LCDout+1,f,c
  6708  00162A  0EF0               	movlw	240
  6709  00162C  1625               	andwf	??_LCDout+1,f,c
  6710  00162E  5024               	movf	??_LCDout,w,c
  6711  001630  0B0F               	andlw	15
  6712  001632  1225               	iorwf	??_LCDout+1,f,c
  6713  001634  0EF0               	movlw	240
  6714  001636  1624               	andwf	??_LCDout,f,c
  6715  001638  0E07               	movlw	7
  6716  00163A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6717  00163C                     u1345:
  6718  00163C  3425               	rlcf	??_LCDout+1,w,c
  6719  00163E  3225               	rrcf	??_LCDout+1,f,c
  6720  001640  3224               	rrcf	??_LCDout,f,c
  6721  001642  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6722  001644  D7FB               	goto	u1345
  6723  001646  4624               	rlncf	??_LCDout,f,c
  6724  001648  508C               	movf	3980,w,c	;volatile
  6725  00164A  1824               	xorwf	??_LCDout,w,c
  6726  00164C  0BFD               	andlw	-3
  6727  00164E  1824               	xorwf	??_LCDout,w,c
  6728  001650  6E8C               	movwf	3980,c	;volatile
  6729                           
  6730                           ;LCD.c: 21: E_TOG();
  6731  001652  ECFF  F000         	call	_E_TOG	;wreg free
  6732                           
  6733                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6734  001656  0E03               	movlw	3
  6735  001658                     u3327:
  6736  001658  2EE8               	decfsz	wreg,f,c
  6737  00165A  D7FE               	goto	u3327
  6738  00165C  F000               	nop	
  6739  00165E  0012               	return		;funcret
  6740  001660                     __end_of_LCDout:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           indf0	equ	0xFEF
  6750                           postinc0	equ	0xFEE
  6751                           fsr0h	equ	0xFEA
  6752                           fsr0l	equ	0xFE9
  6753                           wreg	equ	0xFE8
  6754                           indf1	equ	0xFE7
  6755                           plusw1	equ	0xFE3
  6756                           fsr1h	equ	0xFE2
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           postinc2	equ	0xFDE
  6760                           postdec2	equ	0xFDD
  6761                           plusw2	equ	0xFDB
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766 ;; *************** function _E_TOG *****************
  6767 ;; Defined at:
  6768 ;;		line 5 in file "LCD.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;		None               void
  6775 ;; Registers used:
  6776 ;;		wreg
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6782 ;;      Params:         0       0       0       0
  6783 ;;      Locals:         0       0       0       0
  6784 ;;      Temps:          0       0       0       0
  6785 ;;      Totals:         0       0       0       0
  6786 ;;Total ram usage:        0 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    3
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_LCDout
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text29
  6797  0001FE                     __ptext29:
  6798                           	opt stack 0
  6799  0001FE                     _E_TOG:
  6800                           	opt stack 24
  6801                           
  6802                           ;LCD.c: 8: LATCbits.LATC0=1;
  6803                           
  6804                           ;incstack = 0
  6805  0001FE  808B               	bsf	3979,0,c	;volatile
  6806                           
  6807                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6808  000200  0E03               	movlw	3
  6809  000202                     u3337:
  6810  000202  2EE8               	decfsz	wreg,f,c
  6811  000204  D7FE               	goto	u3337
  6812  000206  F000               	nop	
  6813                           
  6814                           ;LCD.c: 10: LATCbits.LATC0=0;
  6815  000208  908B               	bcf	3979,0,c	;volatile
  6816  00020A  0012               	return		;funcret
  6817  00020C                     __end_of_E_TOG:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           indf0	equ	0xFEF
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           indf1	equ	0xFE7
  6832                           plusw1	equ	0xFE3
  6833                           fsr1h	equ	0xFE2
  6834                           fsr1l	equ	0xFE1
  6835                           indf2	equ	0xFDF
  6836                           postinc2	equ	0xFDE
  6837                           postdec2	equ	0xFDD
  6838                           plusw2	equ	0xFDB
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _InterruptHandlerLow *****************
  6844 ;; Defined at:
  6845 ;;		line 18 in file "main.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6859 ;;      Params:         0       0       0       0
  6860 ;;      Locals:         0       0       0       0
  6861 ;;      Temps:         17       0       0       0
  6862 ;;      Totals:        17       0       0       0
  6863 ;;Total ram usage:       17 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    2
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		Interrupt level 1
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	intcodelo
  6874  000018                     __pintcodelo:
  6875                           	opt stack 0
  6876  000018                     _InterruptHandlerLow:
  6877                           	opt stack 23
  6878                           
  6879                           ;incstack = 0
  6880  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6881  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6882  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6883  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6884  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6885  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6886  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6887  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6888  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6889  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6890  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6891  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6892  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6893  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6894  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6895  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6896  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6897  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6898                           
  6899                           ;main.c: 20: if (PIR1bits.RCIF) {
  6900  00005E  AA9E               	btfss	3998,5,c	;volatile
  6901  000060  D016               	goto	i1l374
  6902                           
  6903                           ;main.c: 21: ReceivedString[i]=RCREG;
  6904  000062  503A               	movf	_i,w,c	;volatile
  6905  000064  0D01               	mullw	1
  6906  000066  0EE6               	movlw	low _ReceivedString
  6907  000068  24F3               	addwf	prodl,w,c
  6908  00006A  6ED9               	movwf	fsr2l,c
  6909  00006C  0E01               	movlw	high _ReceivedString
  6910  00006E  20F4               	addwfc	prodh,w,c
  6911  000070  6EDA               	movwf	fsr2h,c
  6912  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6913                           
  6914                           ;main.c: 22: RFID_Read=1;
  6915  000076  0E01               	movlw	1
  6916  000078  0101               	movlb	1	; () banked
  6917  00007A  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  6918                           
  6919                           ; BSR set to: 1
  6920                           ;main.c: 23: if (i==15){
  6921  00007C  0E0F               	movlw	15
  6922  00007E  183A               	xorwf	_i,w,c	;volatile
  6923  000080  A4D8               	btfss	status,2,c
  6924  000082  D003               	goto	i1l2727
  6925                           
  6926                           ; BSR set to: 1
  6927                           ;main.c: 24: i=0;
  6928  000084  0E00               	movlw	0
  6929  000086  6E3A               	movwf	_i,c	;volatile
  6930                           
  6931                           ;main.c: 25: }else{
  6932  000088  D001               	goto	i1l2729
  6933  00008A                     i1l2727:
  6934                           
  6935                           ; BSR set to: 1
  6936                           ;main.c: 26: i++;
  6937  00008A  2A3A               	incf	_i,f,c	;volatile
  6938  00008C                     i1l2729:
  6939                           
  6940                           ; BSR set to: 1
  6941                           ;main.c: 27: }
  6942                           ;main.c: 28: PIR1bits.RCIF=0;
  6943  00008C  9A9E               	bcf	3998,5,c	;volatile
  6944  00008E                     i1l374:
  6945  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6946  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6947  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6948  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6949  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6950  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6951  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6952  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6953  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6954  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6955  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6956  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6957  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6958  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6959  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6960  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6961  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6962  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6963  0000D4  0010               	retfie	
  6964  0000D6                     __end_of_InterruptHandlerLow:
  6965                           	opt stack 0
  6966                           pclatu	equ	0xFFB
  6967                           pclath	equ	0xFFA
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           indf0	equ	0xFEF
  6976                           postinc0	equ	0xFEE
  6977                           fsr0h	equ	0xFEA
  6978                           fsr0l	equ	0xFE9
  6979                           wreg	equ	0xFE8
  6980                           indf1	equ	0xFE7
  6981                           plusw1	equ	0xFE3
  6982                           fsr1h	equ	0xFE2
  6983                           fsr1l	equ	0xFE1
  6984                           bsr	equ	0xFE0
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           plusw2	equ	0xFDB
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _InterruptHandlerHigh *****************
  6994 ;; Defined at:
  6995 ;;		line 34 in file "main.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;		None               void
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7009 ;;      Params:         0       0       0       0
  7010 ;;      Locals:         0       0       0       0
  7011 ;;      Temps:         14       0       0       0
  7012 ;;      Totals:        14       0       0       0
  7013 ;;Total ram usage:       14 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    1
  7016 ;; This function calls:
  7017 ;;		i2_delay_tenth_s
  7018 ;; This function is called by:
  7019 ;;		Interrupt level 2
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	intcode
  7024  000008                     __pintcode:
  7025                           	opt stack 0
  7026  000008                     _InterruptHandlerHigh:
  7027                           	opt stack 23
  7028                           
  7029                           ;incstack = 0
  7030  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7031  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7032  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7033  000012  EF8E  F00B         	goto	int_func
  7034                           pclatu	equ	0xFFB
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           indf0	equ	0xFEF
  7044                           postinc0	equ	0xFEE
  7045                           fsr0h	equ	0xFEA
  7046                           fsr0l	equ	0xFE9
  7047                           wreg	equ	0xFE8
  7048                           indf1	equ	0xFE7
  7049                           plusw1	equ	0xFE3
  7050                           fsr1h	equ	0xFE2
  7051                           fsr1l	equ	0xFE1
  7052                           bsr	equ	0xFE0
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           plusw2	equ	0xFDB
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061                           	psect	intcode_body
  7062  00171C                     __pintcode_body:
  7063                           	opt stack 23
  7064  00171C                     int_func:
  7065                           	opt stack 23
  7066  00171C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7067  001720  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7068  001724  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7069  001728  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7070  00172C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7071  001730  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7072  001734  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7073  001738  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7074  00173C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7075  001740  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7076  001744  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7077  001748  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7078                           
  7079                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7080  00174C  A2F2               	btfss	intcon,1,c	;volatile
  7081  00174E  D00D               	goto	i2l2745
  7082                           
  7083                           ;main.c: 36: if (mode==-1) {
  7084  001750  283B               	incf	_mode,w,c	;volatile
  7085  001752  A4D8               	btfss	status,2,c
  7086  001754  D003               	goto	i2l2737
  7087                           
  7088                           ;main.c: 38: mode=1;
  7089  001756  0E01               	movlw	1
  7090  001758  6E3B               	movwf	_mode,c	;volatile
  7091                           
  7092                           ;main.c: 39: } else if (mode==0) {
  7093  00175A  D003               	goto	i2l2741
  7094  00175C                     i2l2737:
  7095  00175C  503B               	movf	_mode,w,c	;volatile
  7096  00175E  A4D8               	btfss	status,2,c
  7097                           
  7098                           ;main.c: 43: mode=-1;
  7099                           
  7100                           ;main.c: 41: } else {
  7101  001760  683B               	setf	_mode,c	;volatile
  7102  001762                     i2l2741:
  7103                           
  7104                           ;main.c: 44: }
  7105                           ;main.c: 46: delay_tenth_s(2);
  7106  001762  0E02               	movlw	2
  7107  001764  EC52  F00E         	call	i2_delay_tenth_s
  7108                           
  7109                           ;main.c: 47: INTCONbits.INT0IF=0;
  7110  001768  92F2               	bcf	intcon,1,c	;volatile
  7111  00176A                     i2l2745:
  7112                           
  7113                           ;main.c: 48: }
  7114                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7115  00176A  A4F2               	btfss	intcon,2,c	;volatile
  7116  00176C  D004               	goto	i2l383
  7117                           
  7118                           ;main.c: 50: millis++;
  7119  00176E  0101               	movlb	1	; () banked
  7120  001770  4BF6               	infsnz	_millis& (0+255),f,b	;volatile
  7121  001772  2BF7               	incf	(_millis+1)& (0+255),f,b	;volatile
  7122                           
  7123                           ; BSR set to: 1
  7124                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7125  001774  94F2               	bcf	intcon,2,c	;volatile
  7126  001776                     i2l383:
  7127  001776  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7128  00177A  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7129  00177E  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7130  001782  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7131  001786  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7132  00178A  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7133  00178E  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7134  001792  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7135  001796  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7136  00179A  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7137  00179E  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7138  0017A2  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7139  0017A6  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7140  0017AA  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7141  0017AE  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7142  0017B0  0011               	retfie		f
  7143  0017B2                     __end_of_InterruptHandlerHigh:
  7144                           	opt stack 0
  7145                           pclatu	equ	0xFFB
  7146                           pclath	equ	0xFFA
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           intcon	equ	0xFF2
  7154                           indf0	equ	0xFEF
  7155                           postinc0	equ	0xFEE
  7156                           fsr0h	equ	0xFEA
  7157                           fsr0l	equ	0xFE9
  7158                           wreg	equ	0xFE8
  7159                           indf1	equ	0xFE7
  7160                           plusw1	equ	0xFE3
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           bsr	equ	0xFE0
  7164                           indf2	equ	0xFDF
  7165                           postinc2	equ	0xFDE
  7166                           postdec2	equ	0xFDD
  7167                           plusw2	equ	0xFDB
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function i2_delay_tenth_s *****************
  7173 ;; Defined at:
  7174 ;;		line 32 in file "Movement.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  tenth_second    1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7179 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;		None               void
  7182 ;; Registers used:
  7183 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7189 ;;      Params:         0       0       0       0
  7190 ;;      Locals:         3       0       0       0
  7191 ;;      Temps:          1       0       0       0
  7192 ;;      Totals:         4       0       0       0
  7193 ;;Total ram usage:        4 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_InterruptHandlerHigh
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text32
  7203  001CA4                     __ptext32:
  7204                           	opt stack 0
  7205  001CA4                     i2_delay_tenth_s:
  7206                           	opt stack 23
  7207                           
  7208                           ;incstack = 0
  7209                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7210  001CA4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7211                           
  7212                           ;Movement.c: 33: unsigned int i=0;
  7213  001CA6  0E00               	movlw	0
  7214  001CA8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7215  001CAA  0E00               	movlw	0
  7216  001CAC  6E03               	movwf	i2delay_tenth_s@i,c
  7217                           
  7218                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7219  001CAE  0E00               	movlw	0
  7220  001CB0  6E04               	movwf	i2delay_tenth_s@i+1,c
  7221  001CB2  0E01               	movlw	1
  7222  001CB4  6E03               	movwf	i2delay_tenth_s@i,c
  7223  001CB6  D009               	goto	i2l2697
  7224  001CB8                     i2l2693:
  7225                           
  7226                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7227  001CB8  0E82               	movlw	130
  7228  001CBA  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7229  001CBC  0EDE               	movlw	222
  7230  001CBE                     i2u334_47:
  7231  001CBE  2EE8               	decfsz	wreg,f,c
  7232  001CC0  D7FE               	goto	i2u334_47
  7233  001CC2  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7234  001CC4  D7FC               	goto	i2u334_47
  7235  001CC6  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7236  001CC8  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7237  001CCA                     i2l2697:
  7238  001CCA  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7239  001CCC  0D02               	mullw	2
  7240  001CCE  5003               	movf	i2delay_tenth_s@i,w,c
  7241  001CD0  5CF3               	subwf	prodl,w,c
  7242  001CD2  5004               	movf	i2delay_tenth_s@i+1,w,c
  7243  001CD4  58F4               	subwfb	prodh,w,c
  7244  001CD6  A0D8               	btfss	status,0,c
  7245  001CD8  0012               	return	
  7246  001CDA  D7EE               	goto	i2l2693
  7247  001CDC                     __end_ofi2_delay_tenth_s:
  7248                           	opt stack 0
  7249                           pclatu	equ	0xFFB
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           indf0	equ	0xFEF
  7259                           postinc0	equ	0xFEE
  7260                           fsr0h	equ	0xFEA
  7261                           fsr0l	equ	0xFE9
  7262                           wreg	equ	0xFE8
  7263                           indf1	equ	0xFE7
  7264                           plusw1	equ	0xFE3
  7265                           fsr1h	equ	0xFE2
  7266                           fsr1l	equ	0xFE1
  7267                           bsr	equ	0xFE0
  7268                           indf2	equ	0xFDF
  7269                           postinc2	equ	0xFDE
  7270                           postdec2	equ	0xFDD
  7271                           plusw2	equ	0xFDB
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           pclatu	equ	0xFFB
  7276                           pclath	equ	0xFFA
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           indf0	equ	0xFEF
  7285                           postinc0	equ	0xFEE
  7286                           fsr0h	equ	0xFEA
  7287                           fsr0l	equ	0xFE9
  7288                           wreg	equ	0xFE8
  7289                           indf1	equ	0xFE7
  7290                           plusw1	equ	0xFE3
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           bsr	equ	0xFE0
  7294                           indf2	equ	0xFDF
  7295                           postinc2	equ	0xFDE
  7296                           postdec2	equ	0xFDD
  7297                           plusw2	equ	0xFDB
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302                           	psect	rparam
  7303  0000                     pclatu	equ	0xFFB
  7304                           pclath	equ	0xFFA
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           intcon	equ	0xFF2
  7312                           indf0	equ	0xFEF
  7313                           postinc0	equ	0xFEE
  7314                           fsr0h	equ	0xFEA
  7315                           fsr0l	equ	0xFE9
  7316                           wreg	equ	0xFE8
  7317                           indf1	equ	0xFE7
  7318                           plusw1	equ	0xFE3
  7319                           fsr1h	equ	0xFE2
  7320                           fsr1l	equ	0xFE1
  7321                           bsr	equ	0xFE0
  7322                           indf2	equ	0xFDF
  7323                           postinc2	equ	0xFDE
  7324                           postdec2	equ	0xFDD
  7325                           plusw2	equ	0xFDB
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330                           	psect	temp
  7331  00003C                     btemp:
  7332                           	opt stack 0
  7333  00003C                     	ds	1
  7334  0000                     int$flags	set	btemp
  7335                           pclatu	equ	0xFFB
  7336                           pclath	equ	0xFFA
  7337                           tblptru	equ	0xFF8
  7338                           tblptrh	equ	0xFF7
  7339                           tblptrl	equ	0xFF6
  7340                           tablat	equ	0xFF5
  7341                           prodh	equ	0xFF4
  7342                           prodl	equ	0xFF3
  7343                           intcon	equ	0xFF2
  7344                           indf0	equ	0xFEF
  7345                           postinc0	equ	0xFEE
  7346                           fsr0h	equ	0xFEA
  7347                           fsr0l	equ	0xFE9
  7348                           wreg	equ	0xFE8
  7349                           indf1	equ	0xFE7
  7350                           plusw1	equ	0xFE3
  7351                           fsr1h	equ	0xFE2
  7352                           fsr1l	equ	0xFE1
  7353                           bsr	equ	0xFE0
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           plusw2	equ	0xFDB
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         108
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     92     100
    BANK1           256    151     249
    BANK2           239      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 50
		 -> main@MoveTime(BANK1[50]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 25
		 -> main@MoveType(BANK1[25]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               153   153      0   72520
                                             90 BANK0      2     2      0
                                              0 BANK1    151   151      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   25083
                                             13 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5402
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     97      F9       7       97.3%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5C      64       4       62.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     198       5        0.0%
DATA                 0      0     198      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 22:25:25 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 1442  
                                  l67 1924                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 0128                           ?_LCD_String 002A  
                                 l229 0E62                                   l433 09E6  
                                 l426 098A                                   l392 041C  
                                 l900 1B2C                                   l910 1B6E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 014B  
                        __CFG_LVP$OFF 000000                          main@MoveType 0132  
                                l3001 185A                                  l2203 1B64  
                                l3101 108A                                  l3013 1880  
                                l3103 109C                                  l3015 1888  
                                l3007 186A                                  l3113 10D4  
                                l3201 133E                                  l3033 18C0  
                                l3025 18A8                                  l3017 188C  
                                l2243 1962                                  l3203 1358  
                                l3123 1146                                  l3107 10A4  
                                l3043 141A                                  l3051 18E8  
                                l2165 01C6                                  l3125 116E  
                                l3029 18B2                                  l2255 19CC  
                                l2239 195A                                  l2175 1AFA  
                                l3135 119E                                  l3055 1904  
                                l3047 18CC                                  l2281 1A30  
                                l2273 00EE                                  l2265 1A10  
                                l2249 199E                                  l2177 1B02  
                                l3161 123E                                  l3137 11A4  
                                l3073 17E4                                  l3065 17B4  
                                l3313 0D14                                  l2259 19D4  
                                l2187 1B22                                  l2179 1B06  
                                l2195 1B44                                  l3155 11FC  
                                l2291 1C80                                  l2277 0100  
                                l2197 1B4C                                  l3149 11DA  
                                l3069 17CC                                  l3309 0CF0  
                                l2445 0178                                  l3501 0552  
                                l2287 1A64                                  l2199 1B50  
                                l3191 12D6                                  l3159 1234  
                                l3095 106E                                  l3079 1804  
                                l3247 1582                                  l2295 1C92  
                                l3327 0D84                                  l3193 12DC  
                                l3185 12B8                                  l3169 1262  
                                l3177 1288                                  l3361 0F6C  
                                l3329 0D9C                                  l3281 0C2E  
                                l3179 1294                                  l3339 0E5E  
                                l3603 08F2                                  l3523 0654  
                                l3373 0F9C                                  l3621 09EA  
                                l3533 06A4                                  l3445 0422  
                                l3199 1332                                  l3367 0F8A  
                                l3375 0FA2                                  l3615 0966  
                                l3543 070C                                  l3527 067E  
                                l3519 05E8                                  l3553 0756  
                                l3481 04CE                                  l3627 0A64  
                                l3619 09AE                                  l3555 075C  
                                l3547 0716                                  l3643 0AC8  
                                l3629 0A9E                                  l3637 0AAA  
                                l3565 0782                                  l3485 0500  
                                l3639 0AC6                                  l3559 0766  
                                l3567 0788                                  l3575 07F0  
                                l3593 087C                                  l3587 0858  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u3000 0942                                  u1305 15D0  
                                u1315 15DE                                  u1325 15FE  
                                _LATB 000F8A                                  u1335 160C  
                                u1600 1A54                                  u3040 0A28  
                                u1345 163C                                  u1610 1A84  
                                u3107 1688                                  u2404 1436  
                                u1285 15A4                                  u2405 1432  
                                u3117 1698                                  u1295 15B2  
                                u1607 1A4A                                  u1535 196A  
                                u2415 1490                                  u3207 0C7A  
                                u3127 16A6                                  u1617 1A7A  
                                u3217 191E                                  u3137 16B4  
                                u3307 0122                                  u1395 0114  
                                u3227 1C86                                  u3147 16C6  
                                u1396 0116                                  u3317 0132  
                                u1565 19DC                                  u3237 14EE  
                                u3157 16D8                                  u3077 047E  
                                u3327 1658                                  u3247 1504  
                                u3167 16EE                                  u3087 0496  
                                u3337 0202                                  u3257 17FE  
                                u3177 1702                                  u3097 1672  
                                u2801 0366                                  u2394 13DA  
                                u3267 1992                                  u2395 13D6  
                                u3187 1714                                  u2811 0378  
                                u2900 06EA                                  u3277 1A04  
                                u3197 0C62                                  u1845 0174  
                                u1846 0176                                  u2902 06EC  
                                u3287 0102                                  u3297 1A5E  
                                u1865 0186                                  u1866 0188  
                                u2890 06D6                                  u2892 06D8  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 017D                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  indf0 000FEF  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 17B2  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AD                          ___param_bank 000010  
                     i2_delay_tenth_s 1CA4                       __end_of_SendLCD 013A  
                     __end_of_SetLine 010A                    ScanWithRange@F3894 00C0  
                         ScanIR@F3880 00BC                                 ?_main 0001  
                     __end_of___awdiv 18CA                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1B36  
                     __end_of___lwmod 1B78                                 i1l374 008E  
                               i2l383 1776                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 01FE  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 171C                    ScanWithRange@loops 0071  
                     __end_of_dpowers 030B                       __end_of_isdigit 01CE  
                               main@i 0183                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 1366                __size_of_ScanWithRange 0576  
                      __CFG_MCLRE$OFF 000000                       __initialization 013A  
                        __end_of_main 0AEA                          __end_of_stop 1846  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 0099  
                __end_of_enableSensor 018A                   VerifySignal@hexByte 002C  
                              ??_main 00BA                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2727 008A                                i1l2729 008C  
                      __CFG_WDTEN$OFF 000000                                i2l2741 1762  
                              i2l2737 175C                                i2l2745 176A  
                              i2l2693 1CB8                                i2l2697 1CCA  
               __end_of_delay_tenth_s 1CA4                                _LCDout 159A  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AE  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1CDC                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 14A0  
                           ??_SetLine 002A                           fullSpeed@mL 0062  
                         fullSpeed@mR 0064                   ScanWithRange@millis 007B  
                              ___wmul 018A                             ??___awdiv 002E  
                    __end_of_initRFID 01EA                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 1CDC  
                __size_of_grabRightIR 0072                                _millis 01F6  
                              clear_0 0140                                clear_1 014C  
                    ___awdiv@quotient 0030                                main@mL 0185  
                              main@mR 018E                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0AEA  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00B1  
                    __end_of_turnLeft 1C32                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 0156                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 020C  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1B78  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002B                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 17AA           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00BC                            __pbssBANK1 0197  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 0080  
                  __end_of_LCD_String 1A8C                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 19BC  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 0164  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C6C  
              ScanWithRange@RFID_Read 0079                               _SendLCD 010A  
                             __Hparam 0000                               _SetLine 00DA  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1846                       __size_of___wmul 0026  
                             ___lwdiv 1AE4                               ___lwmod 1B36  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 013A                       ??_ScanWithRange 007D  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 01EA  
                             __ptext2 01CE                               __ptext3 1C32  
                             __ptext4 1660                               __ptext5 1CDC  
                             __ptext6 1B78                               __ptext7 0164  
                             __ptext8 1A8C                               __ptext9 0AEA  
                           _T0CONbits 000FD5                               _initLCD 1660  
                   __end_of_initTimer 01FE                               _dpowers 0301  
                   __end_of_fullSpeed 194A                               _isdigit 01B0  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 1060  
                      __pintcode_body 171C                  end_of_initialization 0156  
                      ScanWithRange@i 00A9                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 171C                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F8  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00B7  
                   __end_of_turnRight 1BF4                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 1660  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 159A  
                      _ReceivedString 01E6                        __end_of___wmul 01B0  
                   ScanWithRange@Move 0075                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1CFE                __size_of_delay_tenth_s 0038  
                 start_initialization 013A                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 003A                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 17B2                              ??_ScanIR 0039  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 19BC  
                        _initMotorPWM 1C32                           __pbssCOMRAM 003A  
                      fullSpeed@power 0066                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$2086 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1C6C  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                           __pintcode 0008                  __end_of_VerifySignal 1AE4  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 017E                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 01EA                             _fullSpeed 18CA  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u334_47 1CBE  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0197                             main@F3895 01C9  
                           main@F3898 01E2                           _grabRightIR 194A  
               ScanWithRange@LeftFlag 00AF                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 1060  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1BB6                            ?_fullSpeed 0062  
                    ScanWithRange@buf 0081                   __end_of_setMotorPWM 14A0  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1BB6  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1A2E  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1BB6                              __ptext11 1BF4  
                            __ptext20 018A                              __ptext12 18CA  
                            __ptext21 1B36                              __ptext13 1C6C  
                            __ptext22 1AE4                              __ptext14 14A0  
                            __ptext23 194A                              __ptext15 17B2  
                            __ptext32 1CA4                              __ptext24 19BC  
                            __ptext16 1366                              __ptext25 00DA  
                            __ptext17 1846                              __ptext26 1A2E  
                            __ptext18 1060                              __ptext27 010A  
                            __ptext19 01B0                              __ptext28 159A  
                            __ptext29 01FE                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 01CE  
           ScanWithRange@SensorResult 00B3                        turnRight@power 006B  
                       __size_of_main 079A                    main@DirectionFound 0182  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 0058                              int$flags 003C  
                            main@Move 0184                   _InterruptHandlerLow 0018  
                          _LCD_String 1A2E                              _turnLeft 1BF4  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002A                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         ??_fullSpeed 0039                           _setMotorPWM 1366  
                        _VerifySignal 1A8C                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AB  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
