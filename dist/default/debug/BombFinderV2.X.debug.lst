

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 22:13:49 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001906                     __pcinit:
   189                           	opt stack 0
   190  001906                     start_initialization:
   191                           	opt stack 0
   192  001906                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  001906  0101               	movlb	1
   197  001908  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  00190A  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  00190C  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  00190E  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  001910  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  001912  EE00  F0BE         	lfsr	0,__pbssBANK0
   205  001916  0E18               	movlw	24
   206  001918                     clear_0:
   207  001918  6AEE               	clrf	postinc0,c
   208  00191A  06E8               	decf	wreg,f,c
   209  00191C  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  00191E  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  001920  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  001922                     end_of_initialization:
   215                           	opt stack 0
   216  001922                     __end_of__initialization:
   217                           	opt stack 0
   218  001922  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  001924  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  001926  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001928  6EF8               	movwf	tblptru,c
   222  00192A  0100               	movlb	0
   223  00192C  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BE                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BE                     ScanIR@F3883:
   245                           	opt stack 0
   246  0000BE                     	ds	4
   247  0000C2                     ScanWithRange@F3894:
   248                           	opt stack 0
   249  0000C2                     	ds	4
   250  0000C6                     _ReceivedString:
   251                           	opt stack 0
   252  0000C6                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3897:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
   275                           
   276                           ; 100 bytes @ 0x0
   277  000200                     	ds	100
   278  000264                     main@mL:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x64
   282  000264                     	ds	9
   283  00026D                     main@mR:
   284                           	opt stack 0
   285                           
   286                           ; 9 bytes @ 0x6D
   287  00026D                     	ds	9
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 200 bytes @ 0x0
   299  000100                     	ds	200
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ScanIR@MoveType:
   416                           	opt stack 0
   417  000075                     ScanWithRange@RFID_Read:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x15
   421  000075                     	ds	2
   422  000077                     ??_ScanWithRange:
   423  000077                     ScanIR@buf:
   424                           	opt stack 0
   425                           
   426                           ; 40 bytes @ 0x17
   427  000077                     	ds	5
   428  00007C                     ScanWithRange@buf:
   429                           	opt stack 0
   430                           
   431                           ; 40 bytes @ 0x1C
   432  00007C                     	ds	35
   433  00009F                     ScanIR@DirectionMoveThreshold:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x3F
   437  00009F                     	ds	2
   438  0000A1                     ScanIR@SensorResult:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x41
   442  0000A1                     	ds	3
   443  0000A4                     ScanWithRange@n:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x44
   447  0000A4                     	ds	2
   448  0000A6                     ScanWithRange@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x46
   452  0000A6                     	ds	2
   453  0000A8                     ScanWithRange@DirectionFoundThreshold:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x48
   457  0000A8                     	ds	2
   458  0000AA                     ScanWithRange@power:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x4A
   462  0000AA                     	ds	1
   463  0000AB                     ScanWithRange@LeftFlag:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4B
   467  0000AB                     	ds	2
   468  0000AD                     ScanWithRange@TimeAboveThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4D
   472  0000AD                     	ds	1
   473  0000AE                     ScanWithRange@SensorResult:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x4E
   477  0000AE                     	ds	4
   478  0000B2                     ScanWithRange@RightFlag:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x52
   482  0000B2                     	ds	2
   483  0000B4                     ??_main:
   484                           
   485                           ; 0 bytes @ 0x54
   486  0000B4                     	ds	2
   487  0000B6                     main@ScanAngle:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x56
   491  0000B6                     	ds	1
   492  0000B7                     main@SensorResult:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x57
   496  0000B7                     	ds	4
   497  0000BB                     main@DirectionFound:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5B
   501  0000BB                     	ds	1
   502  0000BC                     main@Move:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x5C
   506  0000BC                     	ds	1
   507  0000BD                     main@i:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x5D
   511  0000BD                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516                           	psect	cstackCOMRAM
   517  000001                     __pcstackCOMRAM:
   518                           	opt stack 0
   519  000001                     ??i2_delay_tenth_s:
   520                           
   521                           ; 0 bytes @ 0x0
   522  000001                     	ds	1
   523  000002                     i2delay_tenth_s@tenth_seconds:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1
   527  000002                     	ds	1
   528  000003                     i2delay_tenth_s@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	2
   533  000005                     ??_InterruptHandlerHigh:
   534                           
   535                           ; 0 bytes @ 0x4
   536  000005                     	ds	14
   537  000013                     ??_InterruptHandlerLow:
   538                           
   539                           ; 0 bytes @ 0x12
   540  000013                     	ds	17
   541  000024                     ??_isdigit:
   542  000024                     ??_LCDout:
   543  000024                     ??_delay_tenth_s:
   544  000024                     ?_grabRightIR:
   545                           	opt stack 0
   546  000024                     ?_grabLeftIR:
   547                           	opt stack 0
   548  000024                     ?___wmul:
   549                           	opt stack 0
   550  000024                     ?___lwdiv:
   551                           	opt stack 0
   552  000024                     enableSensor@status:
   553                           	opt stack 0
   554  000024                     VerifySignal@Signal:
   555                           	opt stack 0
   556  000024                     ___wmul@multiplier:
   557                           	opt stack 0
   558  000024                     ___lwdiv@dividend:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x23
   562  000024                     	ds	1
   563  000025                     enableSensor@sensor:
   564                           	opt stack 0
   565  000025                     delay_tenth_s@tenth_seconds:
   566                           	opt stack 0
   567  000025                     _isdigit$1962:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x24
   571  000025                     	ds	1
   572  000026                     ??_grabRightIR:
   573  000026                     ??_grabLeftIR:
   574  000026                     ??_VerifySignal:
   575  000026                     isdigit@c:
   576                           	opt stack 0
   577  000026                     delay_tenth_s@i:
   578                           	opt stack 0
   579  000026                     ___wmul@multiplicand:
   580                           	opt stack 0
   581  000026                     ___lwdiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x25
   585  000026                     	ds	1
   586  000027                     LCDout@number:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x26
   590  000027                     	ds	1
   591  000028                     SendLCD@type:
   592                           	opt stack 0
   593  000028                     ___wmul@product:
   594                           	opt stack 0
   595  000028                     ___lwdiv@quotient:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x27
   599  000028                     	ds	1
   600  000029                     SendLCD@Byte:
   601                           	opt stack 0
   602  000029                     grabRightIR@IR_signal:
   603                           	opt stack 0
   604  000029                     grabLeftIR@IR_signal:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x28
   608  000029                     	ds	1
   609  00002A                     ??_initLCD:
   610  00002A                     ?___awdiv:
   611                           	opt stack 0
   612  00002A                     SetLine@line:
   613                           	opt stack 0
   614  00002A                     ___lwdiv@counter:
   615                           	opt stack 0
   616  00002A                     LCD_String@string:
   617                           	opt stack 0
   618  00002A                     ___awdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x29
   622  00002A                     	ds	1
   623  00002B                     ?___lwmod:
   624                           	opt stack 0
   625  00002B                     grabRightIR@i:
   626                           	opt stack 0
   627  00002B                     grabLeftIR@i:
   628                           	opt stack 0
   629  00002B                     ___lwmod@dividend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x2A
   633  00002B                     	ds	1
   634  00002C                     VerifySignal@hexByte:
   635                           	opt stack 0
   636  00002C                     ___awdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x2B
   640  00002C                     	ds	1
   641  00002D                     ___lwmod@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2C
   645  00002D                     	ds	1
   646  00002E                     VerifySignal@checksum:
   647                           	opt stack 0
   648  00002E                     ___awdiv@counter:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x2D
   652  00002E                     	ds	1
   653  00002F                     VerifySignal@i:
   654                           	opt stack 0
   655  00002F                     ___awdiv@sign:
   656                           	opt stack 0
   657  00002F                     ___lwmod@counter:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x2E
   661  00002F                     	ds	1
   662  000030                     ?_sprintf:
   663                           	opt stack 0
   664  000030                     sprintf@sp:
   665                           	opt stack 0
   666  000030                     ___awdiv@quotient:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2F
   670  000030                     	ds	2
   671  000032                     setMotorPWM@m:
   672                           	opt stack 0
   673  000032                     sprintf@f:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x31
   677  000032                     	ds	2
   678  000034                     ??_setMotorPWM:
   679                           
   680                           ; 0 bytes @ 0x33
   681  000034                     	ds	5
   682  000039                     ??_ScanIR:
   683                           
   684                           ; 0 bytes @ 0x38
   685  000039                     	ds	1
   686  00003A                     tblptru	equ	0xFF8
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           
   690                           ; 0 bytes @ 0x39
   691 ;;
   692 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   693 ;;
   694 ;; *************** function _main *****************
   695 ;; Defined at:
   696 ;;		line 51 in file "main.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  MoveTime      200    0[BANK1 ] int [100]
   701 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   702 ;;  buf            40  200[BANK1 ] unsigned char [40]
   703 ;;  Message        10  240[BANK1 ] unsigned char [10]
   704 ;;  mR              9  109[BANK2 ] struct DC_motor
   705 ;;  mL              9  100[BANK2 ] struct DC_motor
   706 ;;  SensorResult    4   87[BANK0 ] unsigned int [2]
   707 ;;  i               1   93[BANK0 ] unsigned char 
   708 ;;  Move            1   92[BANK0 ] unsigned char 
   709 ;;  DirectionFou    1   91[BANK0 ] char 
   710 ;;  ScanAngle       1   86[BANK0 ] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;		None               void
   713 ;; Registers used:
   714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   720 ;;      Params:         0       0       0       0
   721 ;;      Locals:         0       8     250     118
   722 ;;      Temps:          0       2       0       0
   723 ;;      Totals:         0      10     250     118
   724 ;;Total ram usage:      378 bytes
   725 ;; Hardware stack levels required when called:    8
   726 ;; This function calls:
   727 ;;		_LCD_String
   728 ;;		_ScanIR
   729 ;;		_ScanWithRange
   730 ;;		_SendLCD
   731 ;;		_SetLine
   732 ;;		_VerifySignal
   733 ;;		_delay_tenth_s
   734 ;;		_enableSensor
   735 ;;		_fullSpeedAhead
   736 ;;		_fullSpeedBack
   737 ;;		_grabLeftIR
   738 ;;		_grabRightIR
   739 ;;		_initIR
   740 ;;		_initLCD
   741 ;;		_initMotorPWM
   742 ;;		_initRFID
   743 ;;		_initTimer
   744 ;;		_sprintf
   745 ;;		_stop
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text0
   752  000350                     __ptext0:
   753                           	opt stack 0
   754  000350                     _main:
   755                           	opt stack 23
   756                           
   757                           ;main.c: 54: unsigned char Message[10];
   758                           ;main.c: 55: unsigned char i=0;
   759                           
   760                           ;incstack = 0
   761  000350  0E00               	movlw	0
   762  000352  0100               	movlb	0	; () banked
   763  000354  6FBD               	movwf	main@i& (0+255),b
   764                           
   765                           ;main.c: 56: signed char DirectionFound=0;
   766  000356  0E00               	movlw	0
   767  000358  0100               	movlb	0	; () banked
   768  00035A  6FBB               	movwf	main@DirectionFound& (0+255),b
   769                           
   770                           ;main.c: 57: int MoveTime[100];
   771                           ;main.c: 58: char MoveType[100];
   772                           ;main.c: 59: char Move=0;
   773  00035C  0E00               	movlw	0
   774  00035E  0100               	movlb	0	; () banked
   775  000360  6FBC               	movwf	main@Move& (0+255),b
   776                           
   777                           ; BSR set to: 0
   778                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   779  000362  C1FA  F0B7         	movff	main@F3897,main@SensorResult
   780  000366  C1FB  F0B8         	movff	main@F3897+1,main@SensorResult+1
   781  00036A  C1FC  F0B9         	movff	main@F3897+2,main@SensorResult+2
   782  00036E  C1FD  F0BA         	movff	main@F3897+3,main@SensorResult+3
   783                           
   784                           ;main.c: 61: char buf[40];
   785                           ;main.c: 63: unsigned char ScanAngle=60;
   786  000372  0E3C               	movlw	60
   787  000374  0100               	movlb	0	; () banked
   788  000376  6FB6               	movwf	main@ScanAngle& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 66: INTCONbits.GIEH=1;
   792  000378  8EF2               	bsf	intcon,7,c	;volatile
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 67: INTCONbits.GIEL=1;
   796  00037A  8CF2               	bsf	intcon,6,c	;volatile
   797                           
   798                           ; BSR set to: 0
   799                           ;main.c: 68: INTCONbits.PEIE=1;
   800  00037C  8CF2               	bsf	intcon,6,c	;volatile
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 69: RCONbits.IPEN=1;
   804  00037E  8ED0               	bsf	4048,7,c	;volatile
   805                           
   806                           ; BSR set to: 0
   807                           ;main.c: 72: IPR1bits.RCIP=0;
   808  000380  9A9F               	bcf	3999,5,c	;volatile
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 73: PIE1bits.RCIE=1;
   812  000382  8A9D               	bsf	3997,5,c	;volatile
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 76: TRISCbits.RC3=1;
   816  000384  8694               	bsf	3988,3,c	;volatile
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 77: INTCONbits.INT0IE=1;
   820  000386  88F2               	bsf	intcon,4,c	;volatile
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 80: PIR1bits.RC1IF=0;
   824  000388  9A9E               	bcf	3998,5,c	;volatile
   825                           
   826                           ; BSR set to: 0
   827                           ;main.c: 81: INTCONbits.INT0IF=0;
   828  00038A  92F2               	bcf	intcon,1,c	;volatile
   829                           
   830                           ;main.c: 84: struct DC_motor mL, mR;
   831                           ;main.c: 85: mL.power=0;
   832  00038C  0E00               	movlw	0
   833  00038E  0102               	movlb	2	; () banked
   834  000390  6F64               	movwf	main@mL& (0+255),b
   835                           
   836                           ;main.c: 86: mL.direction=1;
   837  000392  0E01               	movlw	1
   838  000394  0102               	movlb	2	; () banked
   839  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   840                           
   841                           ; BSR set to: 2
   842                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   843  000398  0E79               	movlw	121
   844  00039A  0102               	movlb	2	; () banked
   845  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   846  00039E  0E0F               	movlw	15
   847  0003A0  0102               	movlb	2	; () banked
   848  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   849                           
   850                           ; BSR set to: 2
   851                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   852  0003A4  0E78               	movlw	120
   853  0003A6  0102               	movlb	2	; () banked
   854  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   855  0003AA  0E0F               	movlw	15
   856  0003AC  0102               	movlb	2	; () banked
   857  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   858                           
   859                           ;main.c: 89: mL.dir_pin=0;
   860  0003B0  0E00               	movlw	0
   861  0003B2  0102               	movlb	2	; () banked
   862  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   863                           
   864                           ;main.c: 90: mL.PWMperiod=199;
   865  0003B6  0E00               	movlw	0
   866  0003B8  0102               	movlb	2	; () banked
   867  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   868  0003BC  0EC7               	movlw	199
   869  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   870                           
   871                           ;main.c: 92: mR.power=0;
   872  0003C0  0E00               	movlw	0
   873  0003C2  0102               	movlb	2	; () banked
   874  0003C4  6F6D               	movwf	main@mR& (0+255),b
   875                           
   876                           ;main.c: 93: mR.direction=1;
   877  0003C6  0E01               	movlw	1
   878  0003C8  0102               	movlb	2	; () banked
   879  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   880                           
   881                           ; BSR set to: 2
   882                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   883  0003CC  0E77               	movlw	119
   884  0003CE  0102               	movlb	2	; () banked
   885  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   886  0003D2  0E0F               	movlw	15
   887  0003D4  0102               	movlb	2	; () banked
   888  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   889                           
   890                           ; BSR set to: 2
   891                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   892  0003D8  0E76               	movlw	118
   893  0003DA  0102               	movlb	2	; () banked
   894  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   895  0003DE  0E0F               	movlw	15
   896  0003E0  0102               	movlb	2	; () banked
   897  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   898                           
   899                           ;main.c: 96: mR.dir_pin=2;
   900  0003E4  0E02               	movlw	2
   901  0003E6  0102               	movlb	2	; () banked
   902  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   903                           
   904                           ;main.c: 97: mR.PWMperiod=199;
   905  0003EA  0E00               	movlw	0
   906  0003EC  0102               	movlb	2	; () banked
   907  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   908  0003F0  0EC7               	movlw	199
   909  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   910                           
   911                           ;main.c: 99: OSCCON = 0x72;
   912  0003F4  0E72               	movlw	114
   913  0003F6  6ED3               	movwf	4051,c	;volatile
   914  0003F8                     l380:
   915  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   916  0003FA  D234               	goto	l3369
   917  0003FC  D7FD               	goto	l380
   918  0003FE                     l3211:
   919                           
   920                           ;main.c: 112: stop(&mL, &mR);
   921  0003FE  0E64               	movlw	low main@mL
   922  000400  0100               	movlb	0	; () banked
   923  000402  6F62               	movwf	stop@mL& (0+255),b
   924  000404  0E02               	movlw	high main@mL
   925  000406  0100               	movlb	0	; () banked
   926  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   927  00040A  0E6D               	movlw	low main@mR
   928  00040C  0100               	movlb	0	; () banked
   929  00040E  6F64               	movwf	stop@mR& (0+255),b
   930  000410  0E02               	movlw	high main@mR
   931  000412  0100               	movlb	0	; () banked
   932  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   933  000416  ECA9  F009         	call	_stop	;wreg free
   934                           
   935                           ;main.c: 113: RFID_Read=0;
   936  00041A  0E00               	movlw	0
   937  00041C  0101               	movlb	1	; () banked
   938  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   939                           
   940                           ; BSR set to: 1
   941                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   942  000420  ECF3  F00A         	call	_grabLeftIR	;wreg free
   943  000424  C024  F0B7         	movff	?_grabLeftIR,main@SensorResult
   944  000428  C025  F0B8         	movff	?_grabLeftIR+1,main@SensorResult+1
   945                           
   946                           ;main.c: 117: SensorResult[1]=grabRightIR();
   947  00042C  ECBA  F00A         	call	_grabRightIR	;wreg free
   948  000430  C024  F0B9         	movff	?_grabRightIR,main@SensorResult+2
   949  000434  C025  F0BA         	movff	?_grabRightIR+1,main@SensorResult+3
   950                           
   951                           ;main.c: 121: CAP1BUFH=0;
   952  000438  0E00               	movlw	0
   953  00043A  6E69               	movwf	3945,c	;volatile
   954                           
   955                           ;main.c: 122: CAP1BUFL=0;
   956  00043C  0E00               	movlw	0
   957  00043E  6E68               	movwf	3944,c	;volatile
   958                           
   959                           ;main.c: 123: CAP2BUFH=0;
   960  000440  0E00               	movlw	0
   961  000442  6E67               	movwf	3943,c	;volatile
   962                           
   963                           ;main.c: 124: CAP2BUFL=0;
   964  000444  0E00               	movlw	0
   965  000446  6E66               	movwf	3942,c	;volatile
   966                           
   967                           ;main.c: 127: SendLCD(0b00000001,0);
   968  000448  0E00               	movlw	0
   969  00044A  6E28               	movwf	SendLCD@type,c
   970  00044C  0E01               	movlw	1
   971  00044E  EC6B  F00C         	call	_SendLCD
   972                           
   973                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   974  000452  0E21               	movlw	33
   975  000454                     u2767:
   976  000454  2EE8               	decfsz	wreg,f,c
   977  000456  D7FE               	goto	u2767
   978  000458  F000               	nop	
   979                           
   980                           ;main.c: 129: SendLCD(0b00000010,0);
   981  00045A  0E00               	movlw	0
   982  00045C  6E28               	movwf	SendLCD@type,c
   983  00045E  0E02               	movlw	2
   984  000460  EC6B  F00C         	call	_SendLCD
   985                           
   986                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   987  000464  0E06               	movlw	6
   988  000466  0100               	movlb	0	; () banked
   989  000468  6FB4               	movwf	??_main& (0+255),b
   990  00046A  0E30               	movlw	48
   991  00046C                     u2777:
   992  00046C  2EE8               	decfsz	wreg,f,c
   993  00046E  D7FE               	goto	u2777
   994  000470  2FB4               	decfsz	??_main& (0+255),f,b
   995  000472  D7FC               	goto	u2777
   996  000474  D000               	nop2	
   997                           
   998                           ;main.c: 131: SetLine(1);
   999  000476  0E01               	movlw	1
  1000  000478  EC53  F00C         	call	_SetLine
  1001                           
  1002                           ;main.c: 132: LCD_String("      Inert Mode");
  1003  00047C  0E1C               	movlw	low STR_5
  1004  00047E  6E2A               	movwf	LCD_String@string,c
  1005  000480  0E03               	movlw	high STR_5
  1006  000482  6E2B               	movwf	LCD_String@string+1,c
  1007  000484  EC2C  F00B         	call	_LCD_String	;wreg free
  1008                           
  1009                           ;main.c: 133: SetLine(2);
  1010  000488  0E02               	movlw	2
  1011  00048A  EC53  F00C         	call	_SetLine
  1012                           
  1013                           ;main.c: 134: if (RFID_Read) {
  1014  00048E  0101               	movlb	1	; () banked
  1015  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1016  000492  B4D8               	btfsc	status,2,c
  1017  000494  D007               	goto	l3245
  1018                           
  1019                           ; BSR set to: 1
  1020                           ;main.c: 135: LCD_String(Message);
  1021  000496  0EF0               	movlw	low main@Message
  1022  000498  6E2A               	movwf	LCD_String@string,c
  1023  00049A  0E01               	movlw	high main@Message
  1024  00049C  6E2B               	movwf	LCD_String@string+1,c
  1025  00049E  EC2C  F00B         	call	_LCD_String	;wreg free
  1026                           
  1027                           ;main.c: 136: } else {
  1028  0004A2  D1E0               	goto	l3369
  1029  0004A4                     l3245:
  1030                           
  1031                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1032  0004A4  0EC8               	movlw	low main@buf
  1033  0004A6  6E30               	movwf	sprintf@sp,c
  1034  0004A8  0E01               	movlw	high main@buf
  1035  0004AA  6E31               	movwf	sprintf@sp+1,c
  1036  0004AC  0E0B               	movlw	low STR_6
  1037  0004AE  6E32               	movwf	sprintf@f,c
  1038  0004B0  0E03               	movlw	high STR_6
  1039  0004B2  6E33               	movwf	sprintf@f+1,c
  1040  0004B4  C0B7  F034         	movff	main@SensorResult,?_sprintf+4
  1041  0004B8  C0B8  F035         	movff	main@SensorResult+1,?_sprintf+5
  1042  0004BC  C0B9  F036         	movff	main@SensorResult+2,?_sprintf+6
  1043  0004C0  C0BA  F037         	movff	main@SensorResult+3,?_sprintf+7
  1044  0004C4  ECCE  F005         	call	_sprintf	;wreg free
  1045                           
  1046                           ;main.c: 138: LCD_String(buf);
  1047  0004C8  0EC8               	movlw	low main@buf
  1048  0004CA  6E2A               	movwf	LCD_String@string,c
  1049  0004CC  0E01               	movlw	high main@buf
  1050  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1051  0004D0  EC2C  F00B         	call	_LCD_String	;wreg free
  1052                           
  1053                           ;main.c: 139: }
  1054                           ;main.c: 142: break;
  1055  0004D4  D1C7               	goto	l3369
  1056  0004D6                     l3249:
  1057                           
  1058                           ;main.c: 147: initMotorPWM();
  1059  0004D6  EC3A  F00C         	call	_initMotorPWM	;wreg free
  1060                           
  1061                           ;main.c: 148: initTimer();
  1062  0004DA  ECEC  F00C         	call	_initTimer	;wreg free
  1063                           
  1064                           ;main.c: 149: initRFID();
  1065  0004DE  ECDE  F00C         	call	_initRFID	;wreg free
  1066                           
  1067                           ;main.c: 150: initLCD();
  1068  0004E2  EC4B  F009         	call	_initLCD	;wreg free
  1069                           
  1070                           ;main.c: 151: initIR();
  1071  0004E6  ECBE  F00C         	call	_initIR	;wreg free
  1072                           
  1073                           ;main.c: 153: enableSensor(0, 1);
  1074  0004EA  0E01               	movlw	1
  1075  0004EC  6E24               	movwf	enableSensor@status,c
  1076  0004EE  0E00               	movlw	0
  1077  0004F0  EC98  F00C         	call	_enableSensor
  1078                           
  1079                           ;main.c: 154: enableSensor(1, 1);
  1080  0004F4  0E01               	movlw	1
  1081  0004F6  6E24               	movwf	enableSensor@status,c
  1082  0004F8  0E01               	movlw	1
  1083  0004FA  EC98  F00C         	call	_enableSensor
  1084                           
  1085                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1086  0004FE  0E64               	movlw	low main@mL
  1087  000500  0100               	movlb	0	; () banked
  1088  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1089  000504  0E02               	movlw	high main@mL
  1090  000506  0100               	movlb	0	; () banked
  1091  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1092  00050A  0E6D               	movlw	low main@mR
  1093  00050C  0100               	movlb	0	; () banked
  1094  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1095  000510  0E02               	movlw	high main@mR
  1096  000512  0100               	movlb	0	; () banked
  1097  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1098  000516  0E64               	movlw	100
  1099  000518  0100               	movlb	0	; () banked
  1100  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1101  00051C  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1102                           
  1103                           ;main.c: 158: delay_tenth_s(1);
  1104  000520  0E01               	movlw	1
  1105  000522  EC02  F00C         	call	_delay_tenth_s
  1106  000526  D19D               	goto	l3365
  1107  000528                     l3269:
  1108                           
  1109                           ;main.c: 170: SetLine(1);
  1110  000528  0E01               	movlw	1
  1111  00052A  EC53  F00C         	call	_SetLine
  1112                           
  1113                           ;main.c: 171: LCD_String("Searching");
  1114  00052E  0E44               	movlw	low STR_7
  1115  000530  6E2A               	movwf	LCD_String@string,c
  1116  000532  0E03               	movlw	high STR_7
  1117  000534  6E2B               	movwf	LCD_String@string+1,c
  1118  000536  EC2C  F00B         	call	_LCD_String	;wreg free
  1119                           
  1120                           ;main.c: 173: if (DirectionFound==-1) {
  1121  00053A  0100               	movlb	0	; () banked
  1122  00053C  29BB               	incf	main@DirectionFound& (0+255),w,b
  1123  00053E  A4D8               	btfss	status,2,c
  1124  000540  D030               	goto	l3285
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1128  000542  0E64               	movlw	low main@mL
  1129  000544  0100               	movlb	0	; () banked
  1130  000546  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1131  000548  0E02               	movlw	high main@mL
  1132  00054A  0100               	movlb	0	; () banked
  1133  00054C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1134  00054E  0E6D               	movlw	low main@mR
  1135  000550  0100               	movlb	0	; () banked
  1136  000552  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1137  000554  0E02               	movlw	high main@mR
  1138  000556  0100               	movlb	0	; () banked
  1139  000558  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1140  00055A  0E64               	movlw	100
  1141  00055C  0100               	movlb	0	; () banked
  1142  00055E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1143  000560  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1144                           
  1145                           ;main.c: 179: delay_tenth_s(6);
  1146  000564  0E06               	movlw	6
  1147  000566  EC02  F00C         	call	_delay_tenth_s
  1148                           
  1149                           ;main.c: 180: stop(&mL,&mR);
  1150  00056A  0E64               	movlw	low main@mL
  1151  00056C  0100               	movlb	0	; () banked
  1152  00056E  6F62               	movwf	stop@mL& (0+255),b
  1153  000570  0E02               	movlw	high main@mL
  1154  000572  0100               	movlb	0	; () banked
  1155  000574  6F63               	movwf	(stop@mL+1)& (0+255),b
  1156  000576  0E6D               	movlw	low main@mR
  1157  000578  0100               	movlb	0	; () banked
  1158  00057A  6F64               	movwf	stop@mR& (0+255),b
  1159  00057C  0E02               	movlw	high main@mR
  1160  00057E  0100               	movlb	0	; () banked
  1161  000580  6F65               	movwf	(stop@mR+1)& (0+255),b
  1162  000582  ECA9  F009         	call	_stop	;wreg free
  1163                           
  1164                           ;main.c: 181: DirectionFound=0;
  1165  000586  0E00               	movlw	0
  1166  000588  0100               	movlb	0	; () banked
  1167  00058A  6FBB               	movwf	main@DirectionFound& (0+255),b
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 182: MoveType[Move]=0;
  1171  00058C  0100               	movlb	0	; () banked
  1172  00058E  51BC               	movf	main@Move& (0+255),w,b
  1173  000590  0D01               	mullw	1
  1174  000592  0E00               	movlw	low main@MoveType
  1175  000594  24F3               	addwf	prodl,w,c
  1176  000596  6ED9               	movwf	fsr2l,c
  1177  000598  0E02               	movlw	high main@MoveType
  1178  00059A  20F4               	addwfc	prodh,w,c
  1179  00059C  6EDA               	movwf	fsr2h,c
  1180  00059E  0E00               	movlw	0
  1181  0005A0  D02B               	goto	L1
  1182  0005A2                     l3285:
  1183                           
  1184                           ; BSR set to: 0
  1185  0005A2  0100               	movlb	0	; () banked
  1186  0005A4  51BB               	movf	main@DirectionFound& (0+255),w,b
  1187  0005A6  0100               	movlb	0	; () banked
  1188  0005A8  A4D8               	btfss	status,2,c
  1189  0005AA  D028               	goto	l3291
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1193                           ;main.c: 186: &MoveTime[Move], &RFID_Read);
  1194  0005AC  0E64               	movlw	low main@mL
  1195  0005AE  0100               	movlb	0	; () banked
  1196  0005B0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1197  0005B2  0E02               	movlw	high main@mL
  1198  0005B4  0100               	movlb	0	; () banked
  1199  0005B6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1200  0005B8  0E6D               	movlw	low main@mR
  1201  0005BA  0100               	movlb	0	; () banked
  1202  0005BC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1203  0005BE  0E02               	movlw	high main@mR
  1204  0005C0  0100               	movlb	0	; () banked
  1205  0005C2  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1206  0005C4  C0B6  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1207  0005C8  0100               	movlb	0	; () banked
  1208  0005CA  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1209  0005CC  0100               	movlb	0	; () banked
  1210  0005CE  51BC               	movf	main@Move& (0+255),w,b
  1211  0005D0  0D02               	mullw	2
  1212  0005D2  0E00               	movlw	low main@MoveTime
  1213  0005D4  24F3               	addwf	prodl,w,c
  1214  0005D6  0100               	movlb	0	; () banked
  1215  0005D8  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1216  0005DA  0E01               	movlw	high main@MoveTime
  1217  0005DC  20F4               	addwfc	prodh,w,c
  1218  0005DE  0100               	movlb	0	; () banked
  1219  0005E0  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1220  0005E2  0EFE               	movlw	low _RFID_Read
  1221  0005E4  0100               	movlb	0	; () banked
  1222  0005E6  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1223  0005E8  0E01               	movlw	high _RFID_Read
  1224  0005EA  0100               	movlb	0	; () banked
  1225  0005EC  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1226  0005EE  EC43  F004         	call	_ScanWithRange	;wreg free
  1227  0005F2  0100               	movlb	0	; () banked
  1228  0005F4  6FBB               	movwf	main@DirectionFound& (0+255),b
  1229  0005F6  D030               	goto	l3299
  1230  0005F8                     L1:
  1231  0005F8  6EDF               	movwf	indf2,c
  1232                           
  1233                           ;main.c: 188: } else if (DirectionFound==1) {
  1234  0005FA  D110               	goto	l3355
  1235  0005FC                     l3291:
  1236                           
  1237                           ; BSR set to: 0
  1238  0005FC  0100               	movlb	0	; () banked
  1239  0005FE  05BB               	decf	main@DirectionFound& (0+255),w,b
  1240  000600  A4D8               	btfss	status,2,c
  1241  000602  D023               	goto	l3295
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1245  000604  0E64               	movlw	low main@mL
  1246  000606  0100               	movlb	0	; () banked
  1247  000608  6F6D               	movwf	ScanIR@mL& (0+255),b
  1248  00060A  0E02               	movlw	high main@mL
  1249  00060C  0100               	movlb	0	; () banked
  1250  00060E  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1251  000610  0E6D               	movlw	low main@mR
  1252  000612  0100               	movlb	0	; () banked
  1253  000614  6F6F               	movwf	ScanIR@mR& (0+255),b
  1254  000616  0E02               	movlw	high main@mR
  1255  000618  0100               	movlb	0	; () banked
  1256  00061A  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1257  00061C  0EBC               	movlw	low main@Move
  1258  00061E  0100               	movlb	0	; () banked
  1259  000620  6F71               	movwf	ScanIR@Move& (0+255),b
  1260  000622  0E00               	movlw	high main@Move
  1261  000624  0100               	movlb	0	; () banked
  1262  000626  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1263  000628  0E00               	movlw	low main@MoveTime
  1264  00062A  0100               	movlb	0	; () banked
  1265  00062C  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1266  00062E  0E01               	movlw	high main@MoveTime
  1267  000630  0100               	movlb	0	; () banked
  1268  000632  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1269  000634  0E00               	movlw	low main@MoveType
  1270  000636  0100               	movlb	0	; () banked
  1271  000638  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1272  00063A  0E02               	movlw	high main@MoveType
  1273  00063C  0100               	movlb	0	; () banked
  1274  00063E  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1275  000640  EC6B  F008         	call	_ScanIR	;wreg free
  1276  000644  0100               	movlb	0	; () banked
  1277  000646  6FBB               	movwf	main@DirectionFound& (0+255),b
  1278                           
  1279                           ;main.c: 191: } else if (DirectionFound==2) {
  1280  000648  D0E9               	goto	l3355
  1281  00064A                     l3295:
  1282                           
  1283                           ; BSR set to: 0
  1284  00064A  0E02               	movlw	2
  1285  00064C  0100               	movlb	0	; () banked
  1286  00064E  19BB               	xorwf	main@DirectionFound& (0+255),w,b
  1287  000650  A4D8               	btfss	status,2,c
  1288  000652  D0E4               	goto	l3355
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 193: mode=2;
  1292  000654  0E02               	movlw	2
  1293  000656  6E3B               	movwf	_mode,c	;volatile
  1294  000658                     l3299:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 194: MoveType[Move]=1;
  1298  000658  0100               	movlb	0	; () banked
  1299  00065A  51BC               	movf	main@Move& (0+255),w,b
  1300  00065C  0D01               	mullw	1
  1301  00065E  0E00               	movlw	low main@MoveType
  1302  000660  24F3               	addwf	prodl,w,c
  1303  000662  6ED9               	movwf	fsr2l,c
  1304  000664  0E02               	movlw	high main@MoveType
  1305  000666  20F4               	addwfc	prodh,w,c
  1306  000668  6EDA               	movwf	fsr2h,c
  1307  00066A  0E01               	movlw	1
  1308  00066C  D7C5               	goto	L1
  1309  00066E                     l3303:
  1310                           
  1311                           ;main.c: 206: if (RFID_Read) {
  1312  00066E  0101               	movlb	1	; () banked
  1313  000670  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1314  000672  B4D8               	btfsc	status,2,c
  1315  000674  D0A2               	goto	l3345
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 207: stop(&mL, &mR);
  1319  000676  0E64               	movlw	low main@mL
  1320  000678  0100               	movlb	0	; () banked
  1321  00067A  6F62               	movwf	stop@mL& (0+255),b
  1322  00067C  0E02               	movlw	high main@mL
  1323  00067E  0100               	movlb	0	; () banked
  1324  000680  6F63               	movwf	(stop@mL+1)& (0+255),b
  1325  000682  0E6D               	movlw	low main@mR
  1326  000684  0100               	movlb	0	; () banked
  1327  000686  6F64               	movwf	stop@mR& (0+255),b
  1328  000688  0E02               	movlw	high main@mR
  1329  00068A  0100               	movlb	0	; () banked
  1330  00068C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1331  00068E  ECA9  F009         	call	_stop	;wreg free
  1332                           
  1333                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1334  000692  0E03               	movlw	3
  1335  000694  0100               	movlb	0	; () banked
  1336  000696  19D5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1337  000698  A4D8               	btfss	status,2,c
  1338  00069A  D002               	goto	u2680
  1339  00069C  0E01               	movlw	1
  1340  00069E  D001               	goto	u2682
  1341  0006A0                     u2680:
  1342  0006A0  0E00               	movlw	0
  1343  0006A2                     u2682:
  1344  0006A2  0100               	movlb	0	; () banked
  1345  0006A4  6FB4               	movwf	??_main& (0+255),b
  1346  0006A6  0E02               	movlw	2
  1347  0006A8  0100               	movlb	0	; () banked
  1348  0006AA  19C6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1349  0006AC  A4D8               	btfss	status,2,c
  1350  0006AE  D002               	goto	u2690
  1351  0006B0  0E01               	movlw	1
  1352  0006B2  D001               	goto	u2692
  1353  0006B4                     u2690:
  1354  0006B4  0E00               	movlw	0
  1355  0006B6                     u2692:
  1356  0006B6  0100               	movlb	0	; () banked
  1357  0006B8  15B4               	andwf	??_main& (0+255),w,b
  1358  0006BA  A0E8               	btfss	wreg,0,c
  1359  0006BC  D0D3               	goto	l3369
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1363  0006BE  0EC6               	movlw	low _ReceivedString
  1364  0006C0  6E24               	movwf	VerifySignal@Signal,c
  1365  0006C2  0E00               	movlw	high _ReceivedString
  1366  0006C4  6E25               	movwf	VerifySignal@Signal+1,c
  1367  0006C6  ECEE  F007         	call	_VerifySignal	;wreg free
  1368  0006CA  0900               	iorlw	0
  1369  0006CC  B4D8               	btfsc	status,2,c
  1370  0006CE  D041               	goto	l3337
  1371                           
  1372                           ;main.c: 211: for (i=0; i<10; i++){
  1373  0006D0  0E00               	movlw	0
  1374  0006D2  0100               	movlb	0	; () banked
  1375  0006D4  6FBD               	movwf	main@i& (0+255),b
  1376  0006D6                     l3313:
  1377                           
  1378                           ; BSR set to: 0
  1379  0006D6  0E09               	movlw	9
  1380  0006D8  0100               	movlb	0	; () banked
  1381  0006DA  65BD               	cpfsgt	main@i& (0+255),b
  1382  0006DC  D001               	goto	l3317
  1383  0006DE  D020               	goto	l3323
  1384  0006E0                     l3317:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1388  0006E0  0100               	movlb	0	; () banked
  1389  0006E2  51BD               	movf	main@i& (0+255),w,b
  1390  0006E4  0100               	movlb	0	; () banked
  1391  0006E6  6FB4               	movwf	??_main& (0+255),b
  1392  0006E8  6BB5               	clrf	(??_main+1)& (0+255),b
  1393  0006EA  0E01               	movlw	1
  1394  0006EC  0100               	movlb	0	; () banked
  1395  0006EE  27B4               	addwf	??_main& (0+255),f,b
  1396  0006F0  0E00               	movlw	0
  1397  0006F2  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1398  0006F4  0EC6               	movlw	low _ReceivedString
  1399  0006F6  0100               	movlb	0	; () banked
  1400  0006F8  25B4               	addwf	??_main& (0+255),w,b
  1401  0006FA  6ED9               	movwf	fsr2l,c
  1402  0006FC  0E00               	movlw	high _ReceivedString
  1403  0006FE  0100               	movlb	0	; () banked
  1404  000700  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1405  000702  6EDA               	movwf	fsr2h,c
  1406  000704  0100               	movlb	0	; () banked
  1407  000706  51BD               	movf	main@i& (0+255),w,b
  1408  000708  0D01               	mullw	1
  1409  00070A  0EF0               	movlw	low main@Message
  1410  00070C  24F3               	addwf	prodl,w,c
  1411  00070E  6EE1               	movwf	fsr1l,c
  1412  000710  0E01               	movlw	high main@Message
  1413  000712  20F4               	addwfc	prodh,w,c
  1414  000714  6EE2               	movwf	fsr1h,c
  1415  000716  CFDF FFE7          	movff	indf2,indf1
  1416                           
  1417                           ; BSR set to: 0
  1418  00071A  0100               	movlb	0	; () banked
  1419  00071C  2BBD               	incf	main@i& (0+255),f,b
  1420  00071E  D7DB               	goto	l3313
  1421  000720                     l3323:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 213: }
  1425                           ;main.c: 216: for (i=0; i<16; i++) {
  1426  000720  0E00               	movlw	0
  1427  000722  0100               	movlb	0	; () banked
  1428  000724  6FBD               	movwf	main@i& (0+255),b
  1429  000726                     l3325:
  1430                           
  1431                           ; BSR set to: 0
  1432  000726  0E0F               	movlw	15
  1433  000728  0100               	movlb	0	; () banked
  1434  00072A  65BD               	cpfsgt	main@i& (0+255),b
  1435  00072C  D001               	goto	l3329
  1436  00072E  D00E               	goto	l3335
  1437  000730                     l3329:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 217: ReceivedString[i]=0;
  1441  000730  0100               	movlb	0	; () banked
  1442  000732  51BD               	movf	main@i& (0+255),w,b
  1443  000734  0D01               	mullw	1
  1444  000736  0EC6               	movlw	low _ReceivedString
  1445  000738  24F3               	addwf	prodl,w,c
  1446  00073A  6ED9               	movwf	fsr2l,c
  1447  00073C  0E00               	movlw	high _ReceivedString
  1448  00073E  20F4               	addwfc	prodh,w,c
  1449  000740  6EDA               	movwf	fsr2h,c
  1450  000742  0E00               	movlw	0
  1451  000744  6EDF               	movwf	indf2,c
  1452                           
  1453                           ; BSR set to: 0
  1454  000746  0100               	movlb	0	; () banked
  1455  000748  2BBD               	incf	main@i& (0+255),f,b
  1456  00074A  D7ED               	goto	l3325
  1457  00074C                     l3335:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 218: }
  1461                           ;main.c: 219: mode=3;
  1462  00074C  0E03               	movlw	3
  1463  00074E  6E3B               	movwf	_mode,c	;volatile
  1464                           
  1465                           ;main.c: 221: } else {
  1466  000750  D089               	goto	l3369
  1467  000752                     l3337:
  1468                           
  1469                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1470  000752  0E64               	movlw	low main@mL
  1471  000754  0100               	movlb	0	; () banked
  1472  000756  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1473  000758  0E02               	movlw	high main@mL
  1474  00075A  0100               	movlb	0	; () banked
  1475  00075C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1476  00075E  0E6D               	movlw	low main@mR
  1477  000760  0100               	movlb	0	; () banked
  1478  000762  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1479  000764  0E02               	movlw	high main@mR
  1480  000766  0100               	movlb	0	; () banked
  1481  000768  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1482  00076A  0E64               	movlw	100
  1483  00076C  0100               	movlb	0	; () banked
  1484  00076E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1485  000770  ECA5  F00B         	call	_fullSpeedBack	;wreg free
  1486                           
  1487                           ;main.c: 223: delay_tenth_s(5);
  1488  000774  0E05               	movlw	5
  1489  000776  EC02  F00C         	call	_delay_tenth_s
  1490                           
  1491                           ;main.c: 224: stop(&mL,&mR);
  1492  00077A  0E64               	movlw	low main@mL
  1493  00077C  0100               	movlb	0	; () banked
  1494  00077E  6F62               	movwf	stop@mL& (0+255),b
  1495  000780  0E02               	movlw	high main@mL
  1496  000782  0100               	movlb	0	; () banked
  1497  000784  6F63               	movwf	(stop@mL+1)& (0+255),b
  1498  000786  0E6D               	movlw	low main@mR
  1499  000788  0100               	movlb	0	; () banked
  1500  00078A  6F64               	movwf	stop@mR& (0+255),b
  1501  00078C  0E02               	movlw	high main@mR
  1502  00078E  0100               	movlb	0	; () banked
  1503  000790  6F65               	movwf	(stop@mR+1)& (0+255),b
  1504  000792  ECA9  F009         	call	_stop	;wreg free
  1505                           
  1506                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1507  000796  0E64               	movlw	low main@mL
  1508  000798  0100               	movlb	0	; () banked
  1509  00079A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1510  00079C  0E02               	movlw	high main@mL
  1511  00079E  0100               	movlb	0	; () banked
  1512  0007A0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1513  0007A2  0E6D               	movlw	low main@mR
  1514  0007A4  0100               	movlb	0	; () banked
  1515  0007A6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1516  0007A8  0E02               	movlw	high main@mR
  1517  0007AA  0100               	movlb	0	; () banked
  1518  0007AC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1519  0007AE  0E64               	movlw	100
  1520  0007B0  0100               	movlb	0	; () banked
  1521  0007B2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1522  0007B4  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1523                           
  1524                           ;main.c: 226: }
  1525                           ;main.c: 227: }
  1526                           ;main.c: 228: } else {
  1527  0007B8  D055               	goto	l3369
  1528  0007BA                     l3345:
  1529                           
  1530                           ;main.c: 229: DirectionFound=1;
  1531  0007BA  0E01               	movlw	1
  1532  0007BC  0100               	movlb	0	; () banked
  1533  0007BE  6FBB               	movwf	main@DirectionFound& (0+255),b
  1534                           
  1535                           ;main.c: 230: mode=1;
  1536  0007C0  0E01               	movlw	1
  1537  0007C2  6E3B               	movwf	_mode,c	;volatile
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1541  0007C4  0E64               	movlw	low main@mL
  1542  0007C6  0100               	movlb	0	; () banked
  1543  0007C8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1544  0007CA  0E02               	movlw	high main@mL
  1545  0007CC  0100               	movlb	0	; () banked
  1546  0007CE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1547  0007D0  0E6D               	movlw	low main@mR
  1548  0007D2  0100               	movlb	0	; () banked
  1549  0007D4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1550  0007D6  0E02               	movlw	high main@mR
  1551  0007D8  0100               	movlb	0	; () banked
  1552  0007DA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1553  0007DC  0E64               	movlw	100
  1554  0007DE  0100               	movlb	0	; () banked
  1555  0007E0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1556  0007E2  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  1557                           
  1558                           ;main.c: 233: delay_tenth_s(5);
  1559  0007E6  0E05               	movlw	5
  1560  0007E8  EC02  F00C         	call	_delay_tenth_s
  1561                           
  1562                           ;main.c: 234: MoveType[Move] = 0;
  1563  0007EC  0100               	movlb	0	; () banked
  1564  0007EE  51BC               	movf	main@Move& (0+255),w,b
  1565  0007F0  0D01               	mullw	1
  1566  0007F2  0E00               	movlw	low main@MoveType
  1567  0007F4  24F3               	addwf	prodl,w,c
  1568  0007F6  6ED9               	movwf	fsr2l,c
  1569  0007F8  0E02               	movlw	high main@MoveType
  1570  0007FA  20F4               	addwfc	prodh,w,c
  1571  0007FC  6EDA               	movwf	fsr2h,c
  1572  0007FE  0E00               	movlw	0
  1573  000800  6EDF               	movwf	indf2,c
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 235: MoveTime[Move] = 5;
  1577  000802  0100               	movlb	0	; () banked
  1578  000804  51BC               	movf	main@Move& (0+255),w,b
  1579  000806  0D02               	mullw	2
  1580  000808  0E00               	movlw	low main@MoveTime
  1581  00080A  24F3               	addwf	prodl,w,c
  1582  00080C  6ED9               	movwf	fsr2l,c
  1583  00080E  0E01               	movlw	high main@MoveTime
  1584  000810  20F4               	addwfc	prodh,w,c
  1585  000812  6EDA               	movwf	fsr2h,c
  1586  000814  0E05               	movlw	5
  1587  000816  6EDE               	movwf	postinc2,c
  1588  000818  0E00               	movlw	0
  1589  00081A  6EDD               	movwf	postdec2,c
  1590  00081C                     l3355:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 236: Move++;
  1594  00081C  0100               	movlb	0	; () banked
  1595  00081E  2BBC               	incf	main@Move& (0+255),f,b
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 237: }
  1599                           ;main.c: 239: break;
  1600  000820  D021               	goto	l3369
  1601  000822                     l3357:
  1602                           
  1603                           ;main.c: 244: SetLine(1);
  1604  000822  0E01               	movlw	1
  1605  000824  EC53  F00C         	call	_SetLine
  1606                           
  1607                           ;main.c: 245: LCD_String(Message);
  1608  000828  0EF0               	movlw	low main@Message
  1609  00082A  6E2A               	movwf	LCD_String@string,c
  1610  00082C  0E01               	movlw	high main@Message
  1611  00082E  6E2B               	movwf	LCD_String@string+1,c
  1612  000830  EC2C  F00B         	call	_LCD_String	;wreg free
  1613                           
  1614                           ;main.c: 246: SetLine(2);
  1615  000834  0E02               	movlw	2
  1616  000836  EC53  F00C         	call	_SetLine
  1617                           
  1618                           ;main.c: 247: LCD_String("Going Home");
  1619  00083A  0E39               	movlw	low STR_8
  1620  00083C  6E2A               	movwf	LCD_String@string,c
  1621  00083E  0E03               	movlw	high STR_8
  1622  000840  6E2B               	movwf	LCD_String@string+1,c
  1623  000842  EC2C  F00B         	call	_LCD_String	;wreg free
  1624                           
  1625                           ;main.c: 248: stop(&mL,&mR);
  1626  000846  0E64               	movlw	low main@mL
  1627  000848  0100               	movlb	0	; () banked
  1628  00084A  6F62               	movwf	stop@mL& (0+255),b
  1629  00084C  0E02               	movlw	high main@mL
  1630  00084E  0100               	movlb	0	; () banked
  1631  000850  6F63               	movwf	(stop@mL+1)& (0+255),b
  1632  000852  0E6D               	movlw	low main@mR
  1633  000854  0100               	movlb	0	; () banked
  1634  000856  6F64               	movwf	stop@mR& (0+255),b
  1635  000858  0E02               	movlw	high main@mR
  1636  00085A  0100               	movlb	0	; () banked
  1637  00085C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1638  00085E  ECA9  F009         	call	_stop	;wreg free
  1639  000862                     l3365:
  1640                           
  1641                           ;main.c: 264: mode=-1;
  1642  000862  683B               	setf	_mode,c	;volatile
  1643  000864                     l3369:
  1644  000864  503B               	movf	_mode,w,c	;volatile
  1645                           
  1646                           ; Switch size 1, requested type "space"
  1647                           ; Number of cases is 5, Range of values is 0 to 255
  1648                           ; switch strategies available:
  1649                           ; Name         Instructions Cycles
  1650                           ; simple_byte           16     9 (average)
  1651                           ;	Chosen strategy is simple_byte
  1652  000866  0A00               	xorlw	0	; case 0
  1653  000868  B4D8               	btfsc	status,2,c
  1654  00086A  D635               	goto	l3249
  1655  00086C  0A01               	xorlw	1	; case 1
  1656  00086E  B4D8               	btfsc	status,2,c
  1657  000870  D65B               	goto	l3269
  1658  000872  0A03               	xorlw	3	; case 2
  1659  000874  B4D8               	btfsc	status,2,c
  1660  000876  D6FB               	goto	l3303
  1661  000878  0A01               	xorlw	1	; case 3
  1662  00087A  B4D8               	btfsc	status,2,c
  1663  00087C  D7D2               	goto	l3357
  1664  00087E  0AFC               	xorlw	252	; case 255
  1665  000880  B4D8               	btfsc	status,2,c
  1666  000882  D5BD               	goto	l3211
  1667  000884  D7EF               	goto	l3369
  1668  000886                     __end_of_main:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           intcon	equ	0xFF2
  1674                           postinc0	equ	0xFEE
  1675                           wreg	equ	0xFE8
  1676                           indf1	equ	0xFE7
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           postdec2	equ	0xFDD
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _initTimer *****************
  1687 ;; Defined at:
  1688 ;;		line 8 in file "Movement.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;		None               void
  1695 ;; Registers used:
  1696 ;;		None
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1702 ;;      Params:         0       0       0       0
  1703 ;;      Locals:         0       0       0       0
  1704 ;;      Temps:          0       0       0       0
  1705 ;;      Totals:         0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    3
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text1
  1717  0019D8                     __ptext1:
  1718                           	opt stack 0
  1719  0019D8                     _initTimer:
  1720                           	opt stack 27
  1721                           
  1722                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1723                           
  1724                           ;incstack = 0
  1725  0019D8  9ED5               	bcf	4053,7,c	;volatile
  1726                           
  1727                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1728  0019DA  9CD5               	bcf	4053,6,c	;volatile
  1729                           
  1730                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1731  0019DC  9AD5               	bcf	4053,5,c	;volatile
  1732                           
  1733                           ;Movement.c: 13: T0CONbits.PSA=0;
  1734  0019DE  96D5               	bcf	4053,3,c	;volatile
  1735                           
  1736                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1737  0019E0  80D5               	bsf	4053,0,c	;volatile
  1738  0019E2  82D5               	bsf	4053,1,c	;volatile
  1739  0019E4  84D5               	bsf	4053,2,c	;volatile
  1740                           
  1741                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1742  0019E6  9AF2               	bcf	intcon,5,c	;volatile
  1743  0019E8  0012               	return		;funcret
  1744  0019EA                     __end_of_initTimer:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           indf1	equ	0xFE7
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           indf2	equ	0xFDF
  1756                           postinc2	equ	0xFDE
  1757                           postdec2	equ	0xFDD
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _initRFID *****************
  1763 ;; Defined at:
  1764 ;;		line 5 in file "RFID_Reader.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;		None               void
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1778 ;;      Params:         0       0       0       0
  1779 ;;      Locals:         0       0       0       0
  1780 ;;      Temps:          0       0       0       0
  1781 ;;      Totals:         0       0       0       0
  1782 ;;Total ram usage:        0 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    3
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text2
  1793  0019BC                     __ptext2:
  1794                           	opt stack 0
  1795  0019BC                     _initRFID:
  1796                           	opt stack 27
  1797                           
  1798                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1799                           
  1800                           ;incstack = 0
  1801  0019BC  5094               	movf	3988,w,c	;volatile
  1802  0019BE  09C0               	iorlw	192
  1803  0019C0  6E94               	movwf	3988,c	;volatile
  1804                           
  1805                           ;RFID_Reader.c: 10: SPBRG=205;
  1806  0019C2  0ECD               	movlw	205
  1807  0019C4  6EAF               	movwf	4015,c	;volatile
  1808                           
  1809                           ;RFID_Reader.c: 11: SPBRGH=0;
  1810  0019C6  0E00               	movlw	0
  1811  0019C8  6EB0               	movwf	4016,c	;volatile
  1812                           
  1813                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1814  0019CA  86AA               	bsf	4010,3,c	;volatile
  1815                           
  1816                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1817  0019CC  84AC               	bsf	4012,2,c	;volatile
  1818                           
  1819                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1820  0019CE  88AB               	bsf	4011,4,c	;volatile
  1821                           
  1822                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1823  0019D0  8EAB               	bsf	4011,7,c	;volatile
  1824                           
  1825                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1826  0019D2  98AC               	bcf	4012,4,c	;volatile
  1827                           
  1828                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1829  0019D4  9CAB               	bcf	4011,6,c	;volatile
  1830  0019D6  0012               	return		;funcret
  1831  0019D8                     __end_of_initRFID:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           indf1	equ	0xFE7
  1840                           fsr1h	equ	0xFE2
  1841                           fsr1l	equ	0xFE1
  1842                           indf2	equ	0xFDF
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _initMotorPWM *****************
  1850 ;; Defined at:
  1851 ;;		line 4 in file "dc_motor.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, status,2
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       0       0       0
  1868 ;;      Totals:         0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    3
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text3
  1880  001874                     __ptext3:
  1881                           	opt stack 0
  1882  001874                     _initMotorPWM:
  1883                           	opt stack 27
  1884                           
  1885                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1886                           
  1887                           ;incstack = 0
  1888  001874  0E00               	movlw	0
  1889  001876  6E7F               	movwf	3967,c	;volatile
  1890                           
  1891                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1892  001878  0E80               	movlw	128
  1893  00187A  6E7E               	movwf	3966,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1896  00187C  0E6F               	movlw	111
  1897  00187E  6E6F               	movwf	3951,c	;volatile
  1898                           
  1899                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1900  001880  0E00               	movlw	0
  1901  001882  6E6E               	movwf	3950,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1904  001884  0EC7               	movlw	199
  1905  001886  6E7B               	movwf	3963,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1908  001888  0E00               	movlw	0
  1909  00188A  6E7A               	movwf	3962,c	;volatile
  1910                           
  1911                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1912  00188C  0E00               	movlw	0
  1913  00188E  6E79               	movwf	3961,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1916  001890  0E00               	movlw	0
  1917  001892  6E78               	movwf	3960,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1920  001894  0E00               	movlw	0
  1921  001896  6E77               	movwf	3959,c	;volatile
  1922                           
  1923                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1924  001898  0E00               	movlw	0
  1925  00189A  6E76               	movwf	3958,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1928  00189C  9093               	bcf	3987,0,c	;volatile
  1929                           
  1930                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1931  00189E  9293               	bcf	3987,1,c	;volatile
  1932                           
  1933                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1934  0018A0  9493               	bcf	3987,2,c	;volatile
  1935                           
  1936                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1937  0018A2  9693               	bcf	3987,3,c	;volatile
  1938  0018A4  0012               	return		;funcret
  1939  0018A6                     __end_of_initMotorPWM:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf1	equ	0xFE7
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _initLCD *****************
  1958 ;; Defined at:
  1959 ;;		line 38 in file "LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1973 ;;      Params:         0       0       0       0
  1974 ;;      Locals:         0       0       0       0
  1975 ;;      Temps:          1       0       0       0
  1976 ;;      Totals:         1       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_LCDout
  1982 ;;		_SendLCD
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  001296                     __ptext4:
  1990                           	opt stack 0
  1991  001296                     _initLCD:
  1992                           	opt stack 24
  1993                           
  1994                           ;LCD.c: 44: TRISAbits.RA6=0;
  1995                           
  1996                           ;incstack = 0
  1997  001296  9C92               	bcf	3986,6,c	;volatile
  1998                           
  1999                           ;LCD.c: 45: TRISCbits.RC0=0;
  2000  001298  9094               	bcf	3988,0,c	;volatile
  2001                           
  2002                           ;LCD.c: 46: TRISCbits.RC1=0;
  2003  00129A  9294               	bcf	3988,1,c	;volatile
  2004                           
  2005                           ;LCD.c: 47: TRISCbits.RC2=0;
  2006  00129C  9494               	bcf	3988,2,c	;volatile
  2007                           
  2008                           ;LCD.c: 48: TRISDbits.RD0=0;
  2009  00129E  9095               	bcf	3989,0,c	;volatile
  2010                           
  2011                           ;LCD.c: 49: TRISDbits.RD1=0;
  2012  0012A0  9295               	bcf	3989,1,c	;volatile
  2013                           
  2014                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2015  0012A2  0E27               	movlw	39
  2016  0012A4  6E2A               	movwf	??_initLCD& (0+255),c
  2017  0012A6  0EF5               	movlw	245
  2018  0012A8                     u2787:
  2019  0012A8  2EE8               	decfsz	wreg,f,c
  2020  0012AA  D7FE               	goto	u2787
  2021  0012AC  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2022  0012AE  D7FC               	goto	u2787
  2023  0012B0  F000               	nop	
  2024                           
  2025                           ;LCD.c: 52: LCDout(0b0011);
  2026  0012B2  0E03               	movlw	3
  2027  0012B4  ECE8  F008         	call	_LCDout
  2028                           
  2029                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2030  0012B8  0E0D               	movlw	13
  2031  0012BA  6E2A               	movwf	??_initLCD& (0+255),c
  2032  0012BC  0EFC               	movlw	252
  2033  0012BE                     u2797:
  2034  0012BE  2EE8               	decfsz	wreg,f,c
  2035  0012C0  D7FE               	goto	u2797
  2036  0012C2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2037  0012C4  D7FC               	goto	u2797
  2038                           
  2039                           ;LCD.c: 54: LCDout(0b0011);
  2040  0012C6  0E03               	movlw	3
  2041  0012C8  ECE8  F008         	call	_LCDout
  2042                           
  2043                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2044  0012CC  0E85               	movlw	133
  2045  0012CE                     u2807:
  2046  0012CE  2EE8               	decfsz	wreg,f,c
  2047  0012D0  D7FE               	goto	u2807
  2048  0012D2  F000               	nop	
  2049                           
  2050                           ;LCD.c: 56: LCDout(0b0011);
  2051  0012D4  0E03               	movlw	3
  2052  0012D6  ECE8  F008         	call	_LCDout
  2053                           
  2054                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2055  0012DA  0E21               	movlw	33
  2056  0012DC                     u2817:
  2057  0012DC  2EE8               	decfsz	wreg,f,c
  2058  0012DE  D7FE               	goto	u2817
  2059  0012E0  F000               	nop	
  2060                           
  2061                           ;LCD.c: 58: LCDout(0b0010);
  2062  0012E2  0E02               	movlw	2
  2063  0012E4  ECE8  F008         	call	_LCDout
  2064                           
  2065                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2066  0012E8  0E21               	movlw	33
  2067  0012EA                     u2827:
  2068  0012EA  2EE8               	decfsz	wreg,f,c
  2069  0012EC  D7FE               	goto	u2827
  2070  0012EE  F000               	nop	
  2071                           
  2072                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2073  0012F0  0E00               	movlw	0
  2074  0012F2  6E28               	movwf	SendLCD@type,c
  2075  0012F4  0E28               	movlw	40
  2076  0012F6  EC6B  F00C         	call	_SendLCD
  2077                           
  2078                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2079  0012FA  0E21               	movlw	33
  2080  0012FC                     u2837:
  2081  0012FC  2EE8               	decfsz	wreg,f,c
  2082  0012FE  D7FE               	goto	u2837
  2083  001300  F000               	nop	
  2084                           
  2085                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2086  001302  0E00               	movlw	0
  2087  001304  6E28               	movwf	SendLCD@type,c
  2088  001306  0E08               	movlw	8
  2089  001308  EC6B  F00C         	call	_SendLCD
  2090                           
  2091                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2092  00130C  0E21               	movlw	33
  2093  00130E                     u2847:
  2094  00130E  2EE8               	decfsz	wreg,f,c
  2095  001310  D7FE               	goto	u2847
  2096  001312  F000               	nop	
  2097                           
  2098                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2099  001314  0E00               	movlw	0
  2100  001316  6E28               	movwf	SendLCD@type,c
  2101  001318  0E01               	movlw	1
  2102  00131A  EC6B  F00C         	call	_SendLCD
  2103                           
  2104                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2105  00131E  0E0D               	movlw	13
  2106  001320  6E2A               	movwf	??_initLCD& (0+255),c
  2107  001322  0EFC               	movlw	252
  2108  001324                     u2857:
  2109  001324  2EE8               	decfsz	wreg,f,c
  2110  001326  D7FE               	goto	u2857
  2111  001328  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2112  00132A  D7FC               	goto	u2857
  2113                           
  2114                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2115  00132C  0E00               	movlw	0
  2116  00132E  6E28               	movwf	SendLCD@type,c
  2117  001330  0E06               	movlw	6
  2118  001332  EC6B  F00C         	call	_SendLCD
  2119                           
  2120                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2121  001336  0E21               	movlw	33
  2122  001338                     u2867:
  2123  001338  2EE8               	decfsz	wreg,f,c
  2124  00133A  D7FE               	goto	u2867
  2125  00133C  F000               	nop	
  2126                           
  2127                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2128  00133E  0E00               	movlw	0
  2129  001340  6E28               	movwf	SendLCD@type,c
  2130  001342  0E0C               	movlw	12
  2131  001344  EC6B  F00C         	call	_SendLCD
  2132                           
  2133                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2134  001348  0E21               	movlw	33
  2135  00134A                     u2877:
  2136  00134A  2EE8               	decfsz	wreg,f,c
  2137  00134C  D7FE               	goto	u2877
  2138  00134E  F000               	nop	
  2139  001350  0012               	return		;funcret
  2140  001352                     __end_of_initLCD:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           intcon	equ	0xFF2
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           indf1	equ	0xFE7
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function _initIR *****************
  2159 ;; Defined at:
  2160 ;;		line 30 in file "IR_Reading.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, status,2
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    3
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text5
  2189  00197C                     __ptext5:
  2190                           	opt stack 0
  2191  00197C                     _initIR:
  2192                           	opt stack 27
  2193                           
  2194                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2195                           
  2196                           ;incstack = 0
  2197  00197C  9489               	bcf	3977,2,c	;volatile
  2198                           
  2199                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2200  00197E  9689               	bcf	3977,3,c	;volatile
  2201                           
  2202                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2203  001980  8492               	bsf	3986,2,c	;volatile
  2204                           
  2205                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2206  001982  8692               	bsf	3986,3,c	;volatile
  2207                           
  2208                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2209  001984  94B8               	bcf	4024,2,c	;volatile
  2210                           
  2211                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2212  001986  96B8               	bcf	4024,3,c	;volatile
  2213                           
  2214                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2215  001988  9CB8               	bcf	4024,6,c	;volatile
  2216                           
  2217                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2218  00198A  9EB8               	bcf	4024,7,c	;volatile
  2219                           
  2220                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2221  00198C  0E06               	movlw	6
  2222  00198E  6E63               	movwf	3939,c	;volatile
  2223                           
  2224                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2225  001990  0E06               	movlw	6
  2226  001992  6E62               	movwf	3938,c	;volatile
  2227                           
  2228                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2229  001994  9096               	bcf	3990,0,c	;volatile
  2230                           
  2231                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2232  001996  9296               	bcf	3990,1,c	;volatile
  2233                           
  2234                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2235  001998  0E59               	movlw	89
  2236  00199A  6EB7               	movwf	4023,c	;volatile
  2237  00199C  0012               	return		;funcret
  2238  00199E                     __end_of_initIR:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           indf1	equ	0xFE7
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _fullSpeedBack *****************
  2257 ;; Defined at:
  2258 ;;		line 125 in file "dc_motor.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2261 ;;		 -> main@mL(9), 
  2262 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2263 ;;		 -> main@mR(9), 
  2264 ;;  power           1   11[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;		None
  2267 ;; Return value:  Size  Location     Type
  2268 ;;		None               void
  2269 ;; Registers used:
  2270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2276 ;;      Params:         0       5       0       0
  2277 ;;      Locals:         0       0       0       0
  2278 ;;      Temps:          0       0       0       0
  2279 ;;      Totals:         0       5       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    6
  2283 ;; This function calls:
  2284 ;;		_fullSpeedAhead
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text6
  2291  00174A                     __ptext6:
  2292                           	opt stack 0
  2293  00174A                     _fullSpeedBack:
  2294                           	opt stack 24
  2295                           
  2296                           ;dc_motor.c: 128: mL->direction=0;
  2297                           
  2298                           ;incstack = 0
  2299  00174A  0100               	movlb	0	; () banked
  2300  00174C  EE20 F001          	lfsr	2,1
  2301  001750  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2302  001752  26D9               	addwf	fsr2l,f,c
  2303  001754  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2304  001756  22DA               	addwfc	fsr2h,f,c
  2305  001758  0E00               	movlw	0
  2306  00175A  6EDF               	movwf	indf2,c
  2307                           
  2308                           ;dc_motor.c: 129: mR->direction=0;
  2309  00175C  0100               	movlb	0	; () banked
  2310  00175E  EE20 F001          	lfsr	2,1
  2311  001762  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2312  001764  26D9               	addwf	fsr2l,f,c
  2313  001766  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2314  001768  22DA               	addwfc	fsr2h,f,c
  2315  00176A  0E00               	movlw	0
  2316  00176C  6EDF               	movwf	indf2,c
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2320  00176E  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2321  001772  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2322  001776  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2323  00177A  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2324  00177E  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2325  001782  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  2326  001786  0012               	return		;funcret
  2327  001788                     __end_of_fullSpeedBack:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           intcon	equ	0xFF2
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           indf1	equ	0xFE7
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           indf2	equ	0xFDF
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _enableSensor *****************
  2346 ;; Defined at:
  2347 ;;		line 106 in file "IR_Reading.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  sensor          1    wreg     unsigned char 
  2350 ;;  status          1   35[COMRAM] unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  sensor          1   36[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2362 ;;      Params:         1       0       0       0
  2363 ;;      Locals:         1       0       0       0
  2364 ;;      Temps:          0       0       0       0
  2365 ;;      Totals:         2       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    3
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text7
  2377  001930                     __ptext7:
  2378                           	opt stack 0
  2379  001930                     _enableSensor:
  2380                           	opt stack 27
  2381                           
  2382                           ;incstack = 0
  2383                           ;enableSensor@sensor stored from wreg
  2384  001930  6E25               	movwf	enableSensor@sensor,c
  2385                           
  2386                           ;IR_Reading.c: 108: if (sensor==0){
  2387  001932  5025               	movf	enableSensor@sensor,w,c
  2388  001934  A4D8               	btfss	status,2,c
  2389  001936  D006               	goto	l2329
  2390                           
  2391                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2392  001938  B024               	btfsc	enableSensor@status,0,c
  2393  00193A  D002               	bra	u1755
  2394  00193C  908D               	bcf	3981,0,c	;volatile
  2395  00193E  D001               	bra	u1756
  2396  001940                     u1755:
  2397  001940  808D               	bsf	3981,0,c	;volatile
  2398  001942                     u1756:
  2399                           
  2400                           ;IR_Reading.c: 110: } else if (sensor==1){
  2401  001942  0012               	return	
  2402  001944                     l2329:
  2403  001944  0425               	decf	enableSensor@sensor,w,c
  2404  001946  A4D8               	btfss	status,2,c
  2405  001948  0012               	return	
  2406                           
  2407                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2408  00194A  B024               	btfsc	enableSensor@status,0,c
  2409  00194C  D002               	bra	u1775
  2410  00194E  928D               	bcf	3981,1,c	;volatile
  2411  001950  D001               	bra	u1776
  2412  001952                     u1775:
  2413  001952  828D               	bsf	3981,1,c	;volatile
  2414  001954                     u1776:
  2415  001954  0012               	return	
  2416  001956                     __end_of_enableSensor:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           indf1	equ	0xFE7
  2425                           fsr1h	equ	0xFE2
  2426                           fsr1l	equ	0xFE1
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _VerifySignal *****************
  2435 ;; Defined at:
  2436 ;;		line 55 in file "RFID_Reader.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2439 ;;		 -> ReceivedString(16), 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  hexByte         2   43[COMRAM] unsigned int 
  2442 ;;  i               1   46[COMRAM] unsigned char 
  2443 ;;  checksum        1   45[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      unsigned char 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2453 ;;      Params:         2       0       0       0
  2454 ;;      Locals:         4       0       0       0
  2455 ;;      Temps:          6       0       0       0
  2456 ;;      Totals:        12       0       0       0
  2457 ;;Total ram usage:       12 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    3
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text8
  2468  000FDC                     __ptext8:
  2469                           	opt stack 0
  2470  000FDC                     _VerifySignal:
  2471                           	opt stack 27
  2472                           
  2473                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2474                           
  2475                           ;incstack = 0
  2476  000FDC  0E00               	movlw	0
  2477  000FDE  6E2E               	movwf	VerifySignal@checksum,c
  2478                           
  2479                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2480  000FE0  0E00               	movlw	0
  2481  000FE2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2482  000FE4  0E00               	movlw	0
  2483  000FE6  6E2C               	movwf	VerifySignal@hexByte,c
  2484                           
  2485                           ;RFID_Reader.c: 58: unsigned char i=0;
  2486  000FE8  0E00               	movlw	0
  2487  000FEA  6E2F               	movwf	VerifySignal@i,c
  2488                           
  2489                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2490  000FEC  EE20 F004          	lfsr	2,4
  2491  000FF0  5024               	movf	VerifySignal@Signal,w,c
  2492  000FF2  26D9               	addwf	fsr2l,f,c
  2493  000FF4  5025               	movf	VerifySignal@Signal+1,w,c
  2494  000FF6  22DA               	addwfc	fsr2h,f,c
  2495  000FF8  50DF               	movf	indf2,w,c
  2496  000FFA  6E26               	movwf	??_VerifySignal& (0+255),c
  2497  000FFC  EE20 F003          	lfsr	2,3
  2498  001000  5024               	movf	VerifySignal@Signal,w,c
  2499  001002  26D9               	addwf	fsr2l,f,c
  2500  001004  5025               	movf	VerifySignal@Signal+1,w,c
  2501  001006  22DA               	addwfc	fsr2h,f,c
  2502  001008  50DF               	movf	indf2,w,c
  2503  00100A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2504  00100C  5027               	movf	??_VerifySignal+1,w,c
  2505  00100E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2506  001010  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2507  001012  5026               	movf	??_VerifySignal,w,c
  2508  001014  2428               	addwf	??_VerifySignal+2,w,c
  2509  001016  6E2C               	movwf	VerifySignal@hexByte,c
  2510  001018  0E00               	movlw	0
  2511  00101A  2029               	addwfc	??_VerifySignal+3,w,c
  2512  00101C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2513                           
  2514                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2515  00101E  EE20 F002          	lfsr	2,2
  2516  001022  5024               	movf	VerifySignal@Signal,w,c
  2517  001024  26D9               	addwf	fsr2l,f,c
  2518  001026  5025               	movf	VerifySignal@Signal+1,w,c
  2519  001028  22DA               	addwfc	fsr2h,f,c
  2520  00102A  50DF               	movf	indf2,w,c
  2521  00102C  182C               	xorwf	VerifySignal@hexByte,w,c
  2522  00102E  6E2E               	movwf	VerifySignal@checksum,c
  2523                           
  2524                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2525  001030  0E05               	movlw	5
  2526  001032  6E2F               	movwf	VerifySignal@i,c
  2527  001034                     l2529:
  2528  001034  0E09               	movlw	9
  2529  001036  642F               	cpfsgt	VerifySignal@i,c
  2530  001038  D001               	goto	l2533
  2531  00103A  D028               	goto	l2541
  2532  00103C                     l2533:
  2533                           
  2534                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2535  00103C  502F               	movf	VerifySignal@i,w,c
  2536  00103E  6E26               	movwf	??_VerifySignal& (0+255),c
  2537  001040  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2538  001042  0E01               	movlw	1
  2539  001044  2626               	addwf	??_VerifySignal,f,c
  2540  001046  0E00               	movlw	0
  2541  001048  2227               	addwfc	??_VerifySignal+1,f,c
  2542  00104A  5026               	movf	??_VerifySignal,w,c
  2543  00104C  2424               	addwf	VerifySignal@Signal,w,c
  2544  00104E  6ED9               	movwf	fsr2l,c
  2545  001050  5027               	movf	??_VerifySignal+1,w,c
  2546  001052  2025               	addwfc	VerifySignal@Signal+1,w,c
  2547  001054  6EDA               	movwf	fsr2h,c
  2548  001056  50DF               	movf	indf2,w,c
  2549  001058  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2550  00105A  502F               	movf	VerifySignal@i,w,c
  2551  00105C  0D01               	mullw	1
  2552  00105E  50F3               	movf	prodl,w,c
  2553  001060  2424               	addwf	VerifySignal@Signal,w,c
  2554  001062  6ED9               	movwf	fsr2l,c
  2555  001064  50F4               	movf	prodh,w,c
  2556  001066  2025               	addwfc	VerifySignal@Signal+1,w,c
  2557  001068  6EDA               	movwf	fsr2h,c
  2558  00106A  50DF               	movf	indf2,w,c
  2559  00106C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2560  00106E  5029               	movf	??_VerifySignal+3,w,c
  2561  001070  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2562  001072  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2563  001074  5028               	movf	??_VerifySignal+2,w,c
  2564  001076  242A               	addwf	??_VerifySignal+4,w,c
  2565  001078  6E2C               	movwf	VerifySignal@hexByte,c
  2566  00107A  0E00               	movlw	0
  2567  00107C  202B               	addwfc	??_VerifySignal+5,w,c
  2568  00107E  6E2D               	movwf	VerifySignal@hexByte+1,c
  2569                           
  2570                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2571  001080  502E               	movf	VerifySignal@checksum,w,c
  2572  001082  182C               	xorwf	VerifySignal@hexByte,w,c
  2573  001084  6E2E               	movwf	VerifySignal@checksum,c
  2574  001086  0E02               	movlw	2
  2575  001088  262F               	addwf	VerifySignal@i,f,c
  2576  00108A  D7D4               	goto	l2529
  2577  00108C                     l2541:
  2578                           
  2579                           ;RFID_Reader.c: 68: }
  2580                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2581  00108C  502E               	movf	VerifySignal@checksum,w,c
  2582  00108E  6E26               	movwf	??_VerifySignal& (0+255),c
  2583  001090  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2584  001092  EE20 F00B          	lfsr	2,11
  2585  001096  5024               	movf	VerifySignal@Signal,w,c
  2586  001098  26D9               	addwf	fsr2l,f,c
  2587  00109A  5025               	movf	VerifySignal@Signal+1,w,c
  2588  00109C  22DA               	addwfc	fsr2h,f,c
  2589  00109E  50DF               	movf	indf2,w,c
  2590  0010A0  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2591  0010A2  5028               	movf	??_VerifySignal+2,w,c
  2592  0010A4  6E2A               	movwf	(??_VerifySignal+4)& (0+255),c
  2593  0010A6  6A29               	clrf	(??_VerifySignal+3)& (0+255),c
  2594  0010A8  EE20 F00C          	lfsr	2,12
  2595  0010AC  5024               	movf	VerifySignal@Signal,w,c
  2596  0010AE  26D9               	addwf	fsr2l,f,c
  2597  0010B0  5025               	movf	VerifySignal@Signal+1,w,c
  2598  0010B2  22DA               	addwfc	fsr2h,f,c
  2599  0010B4  50DF               	movf	indf2,w,c
  2600  0010B6  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2601  0010B8  502B               	movf	??_VerifySignal+5,w,c
  2602  0010BA  2629               	addwf	??_VerifySignal+3,f,c
  2603  0010BC  0E00               	movlw	0
  2604  0010BE  222A               	addwfc	??_VerifySignal+4,f,c
  2605  0010C0  5026               	movf	??_VerifySignal,w,c
  2606  0010C2  1829               	xorwf	??_VerifySignal+3,w,c
  2607  0010C4  E106               	bnz	l2549
  2608  0010C6  5027               	movf	??_VerifySignal+1,w,c
  2609  0010C8  182A               	xorwf	??_VerifySignal+4,w,c
  2610  0010CA  A4D8               	btfss	status,2,c
  2611  0010CC  D002               	goto	l2549
  2612                           
  2613                           ;RFID_Reader.c: 71: return 1;
  2614  0010CE  0E01               	movlw	1
  2615                           
  2616                           ;RFID_Reader.c: 72: } else{
  2617  0010D0  0012               	return	
  2618  0010D2                     l2549:
  2619                           
  2620                           ;RFID_Reader.c: 73: return 0;
  2621  0010D2  0E00               	movlw	0
  2622  0010D4  0012               	return	
  2623  0010D6                     __end_of_VerifySignal:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           indf1	equ	0xFE7
  2632                           fsr1h	equ	0xFE2
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           postinc2	equ	0xFDE
  2636                           postdec2	equ	0xFDD
  2637                           fsr2h	equ	0xFDA
  2638                           fsr2l	equ	0xFD9
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _ScanWithRange *****************
  2642 ;; Defined at:
  2643 ;;		line 91 in file "Movement.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2646 ;;		 -> main@mL(9), 
  2647 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2648 ;;		 -> main@mR(9), 
  2649 ;;  milliseconds    2   17[BANK0 ] int 
  2650 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2651 ;;		 -> main@MoveTime(200), 
  2652 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2653 ;;		 -> RFID_Read(1), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  buf            40   28[BANK0 ] unsigned char [40]
  2656 ;;  SensorResult    4   78[BANK0 ] unsigned int [2]
  2657 ;;  RightFlag       2   82[BANK0 ] unsigned int 
  2658 ;;  LeftFlag        2   75[BANK0 ] unsigned int 
  2659 ;;  DirectionFou    2   72[BANK0 ] const unsigned int 
  2660 ;;  i               2   70[BANK0 ] unsigned int 
  2661 ;;  n               2   68[BANK0 ] unsigned int 
  2662 ;;  TimeAboveThr    1   77[BANK0 ] unsigned char 
  2663 ;;  power           1   74[BANK0 ] const unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      unsigned char 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2673 ;;      Params:         0      10       0       0
  2674 ;;      Locals:         0      56       0       0
  2675 ;;      Temps:          0       5       0       0
  2676 ;;      Totals:         0      71       0       0
  2677 ;;Total ram usage:       71 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    7
  2680 ;; This function calls:
  2681 ;;		_LCD_String
  2682 ;;		_SendLCD
  2683 ;;		_SetLine
  2684 ;;		_delay_tenth_s
  2685 ;;		_grabLeftIR
  2686 ;;		_grabRightIR
  2687 ;;		_sprintf
  2688 ;;		_stop
  2689 ;;		_turnLeft
  2690 ;;		_turnRight
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text9
  2697  000886                     __ptext9:
  2698                           	opt stack 0
  2699  000886                     _ScanWithRange:
  2700                           	opt stack 23
  2701                           
  2702                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2703                           
  2704                           ;incstack = 0
  2705  000886  C0C2  F0AE         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  2706  00088A  C0C3  F0AF         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  2707  00088E  C0C4  F0B0         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  2708  000892  C0C5  F0B1         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  2709                           
  2710                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2711  000896  0E00               	movlw	0
  2712  000898  0100               	movlb	0	; () banked
  2713  00089A  6FAC               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2714  00089C  0E00               	movlw	0
  2715  00089E  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2716                           
  2717                           ;Movement.c: 97: unsigned int RightFlag=0;
  2718  0008A0  0E00               	movlw	0
  2719  0008A2  0100               	movlb	0	; () banked
  2720  0008A4  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2721  0008A6  0E00               	movlw	0
  2722  0008A8  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2723                           
  2724                           ;Movement.c: 98: char buf[40];
  2725                           ;Movement.c: 99: unsigned int i=0;
  2726  0008AA  0E00               	movlw	0
  2727  0008AC  0100               	movlb	0	; () banked
  2728  0008AE  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2729  0008B0  0E00               	movlw	0
  2730  0008B2  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2731                           
  2732                           ;Movement.c: 100: unsigned int n=0;
  2733  0008B4  0E00               	movlw	0
  2734  0008B6  0100               	movlb	0	; () banked
  2735  0008B8  6FA5               	movwf	(ScanWithRange@n+1)& (0+255),b
  2736  0008BA  0E00               	movlw	0
  2737  0008BC  6FA4               	movwf	ScanWithRange@n& (0+255),b
  2738                           
  2739                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2740  0008BE  0E00               	movlw	0
  2741  0008C0  0100               	movlb	0	; () banked
  2742  0008C2  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2743                           
  2744                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2745  0008C4  0E0B               	movlw	11
  2746  0008C6  0100               	movlb	0	; () banked
  2747  0008C8  6FA9               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2748  0008CA  0EB8               	movlw	184
  2749  0008CC  6FA8               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2750                           
  2751                           ;Movement.c: 105: const unsigned char power=40;
  2752  0008CE  0E28               	movlw	40
  2753  0008D0  0100               	movlb	0	; () banked
  2754  0008D2  6FAA               	movwf	ScanWithRange@power& (0+255),b
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2758  0008D4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2759  0008D8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2760  0008DC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2761  0008E0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2762  0008E4  0E64               	movlw	100
  2763  0008E6  0100               	movlb	0	; () banked
  2764  0008E8  6F6B               	movwf	turnLeft@power& (0+255),b
  2765  0008EA  ECE3  F00B         	call	_turnLeft	;wreg free
  2766                           
  2767                           ;Movement.c: 115: delay_tenth_s(3);
  2768  0008EE  0E03               	movlw	3
  2769  0008F0  EC02  F00C         	call	_delay_tenth_s
  2770                           
  2771                           ;Movement.c: 116: stop(mL,mR);
  2772  0008F4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2773  0008F8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2774  0008FC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2775  000900  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2776  000904  ECA9  F009         	call	_stop	;wreg free
  2777                           
  2778                           ;Movement.c: 119: turnRight(mL,mR, power);
  2779  000908  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2780  00090C  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2781  000910  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2782  000914  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2783  000918  C0AA  F06B         	movff	ScanWithRange@power,turnRight@power
  2784  00091C  ECC4  F00B         	call	_turnRight	;wreg free
  2785                           
  2786                           ;Movement.c: 122: TMR0L = 0;
  2787  000920  0E00               	movlw	0
  2788  000922  6ED6               	movwf	4054,c	;volatile
  2789                           
  2790                           ;Movement.c: 123: TMR0H = 0;
  2791  000924  0E00               	movlw	0
  2792  000926  6ED7               	movwf	4055,c	;volatile
  2793                           
  2794                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2795  000928  8ED5               	bsf	4053,7,c	;volatile
  2796                           
  2797                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2798  00092A  0E00               	movlw	0
  2799  00092C  0100               	movlb	0	; () banked
  2800  00092E  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2801  000930  0E01               	movlw	1
  2802  000932  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2803  000934  D10D               	goto	l3151
  2804  000936                     l3083:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2808  000936  ECF3  F00A         	call	_grabLeftIR	;wreg free
  2809  00093A  C024  F0AE         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2810  00093E  C025  F0AF         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2811                           
  2812                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2813  000942  ECBA  F00A         	call	_grabRightIR	;wreg free
  2814  000946  C024  F0B0         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2815  00094A  C025  F0B1         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2816                           
  2817                           ;Movement.c: 134: CAP1BUFH=0;
  2818  00094E  0E00               	movlw	0
  2819  000950  6E69               	movwf	3945,c	;volatile
  2820                           
  2821                           ;Movement.c: 135: CAP1BUFL=0;
  2822  000952  0E00               	movlw	0
  2823  000954  6E68               	movwf	3944,c	;volatile
  2824                           
  2825                           ;Movement.c: 136: CAP2BUFH=0;
  2826  000956  0E00               	movlw	0
  2827  000958  6E67               	movwf	3943,c	;volatile
  2828                           
  2829                           ;Movement.c: 137: CAP2BUFL=0;
  2830  00095A  0E00               	movlw	0
  2831  00095C  6E66               	movwf	3942,c	;volatile
  2832                           
  2833                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2834  00095E  0E00               	movlw	0
  2835  000960  6E28               	movwf	SendLCD@type,c
  2836  000962  0E01               	movlw	1
  2837  000964  EC6B  F00C         	call	_SendLCD
  2838                           
  2839                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2840  000968  0E21               	movlw	33
  2841  00096A                     u2887:
  2842  00096A  2EE8               	decfsz	wreg,f,c
  2843  00096C  D7FE               	goto	u2887
  2844  00096E  F000               	nop	
  2845                           
  2846                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2847  000970  0E00               	movlw	0
  2848  000972  6E28               	movwf	SendLCD@type,c
  2849  000974  0E02               	movlw	2
  2850  000976  EC6B  F00C         	call	_SendLCD
  2851                           
  2852                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2853  00097A  0E06               	movlw	6
  2854  00097C  0100               	movlb	0	; () banked
  2855  00097E  6F77               	movwf	??_ScanWithRange& (0+255),b
  2856  000980  0E30               	movlw	48
  2857  000982                     u2897:
  2858  000982  2EE8               	decfsz	wreg,f,c
  2859  000984  D7FE               	goto	u2897
  2860  000986  2F77               	decfsz	??_ScanWithRange& (0+255),f,b
  2861  000988  D7FC               	goto	u2897
  2862  00098A  D000               	nop2	
  2863                           
  2864                           ;Movement.c: 145: SetLine(1);
  2865  00098C  0E01               	movlw	1
  2866  00098E  EC53  F00C         	call	_SetLine
  2867                           
  2868                           ;Movement.c: 146: LCD_String("     ScanIR");
  2869  000992  0E2D               	movlw	low STR_1
  2870  000994  6E2A               	movwf	LCD_String@string,c
  2871  000996  0E03               	movlw	high STR_1
  2872  000998  6E2B               	movwf	LCD_String@string+1,c
  2873  00099A  EC2C  F00B         	call	_LCD_String	;wreg free
  2874                           
  2875                           ;Movement.c: 147: SetLine(2);
  2876  00099E  0E02               	movlw	2
  2877  0009A0  EC53  F00C         	call	_SetLine
  2878                           
  2879                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2880  0009A4  0E7C               	movlw	low ScanWithRange@buf
  2881  0009A6  6E30               	movwf	sprintf@sp,c
  2882  0009A8  0E00               	movlw	high ScanWithRange@buf
  2883  0009AA  6E31               	movwf	sprintf@sp+1,c
  2884  0009AC  0E0C               	movlw	low (STR_6+1)
  2885  0009AE  6E32               	movwf	sprintf@f,c
  2886  0009B0  0E03               	movlw	high (STR_6+1)
  2887  0009B2  6E33               	movwf	sprintf@f+1,c
  2888  0009B4  C0AE  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2889  0009B8  C0AF  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2890  0009BC  C0B0  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2891  0009C0  C0B1  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2892  0009C4  ECCE  F005         	call	_sprintf	;wreg free
  2893                           
  2894                           ;Movement.c: 149: LCD_String(buf);
  2895  0009C8  0E7C               	movlw	low ScanWithRange@buf
  2896  0009CA  6E2A               	movwf	LCD_String@string,c
  2897  0009CC  0E00               	movlw	high ScanWithRange@buf
  2898  0009CE  6E2B               	movwf	LCD_String@string+1,c
  2899  0009D0  EC2C  F00B         	call	_LCD_String	;wreg free
  2900                           
  2901                           ;Movement.c: 151: if (SensorResult[1]>DirectionFoundThreshold) {
  2902  0009D4  0100               	movlb	0	; () banked
  2903  0009D6  51B0               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2904  0009D8  0100               	movlb	0	; () banked
  2905  0009DA  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2906  0009DC  0100               	movlb	0	; () banked
  2907  0009DE  51B1               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2908  0009E0  0100               	movlb	0	; () banked
  2909  0009E2  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2910  0009E4  B0D8               	btfsc	status,0,c
  2911  0009E6  D00E               	goto	l221
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;Movement.c: 152: RightFlag= (TMR0H<<8)+TMR0L;
  2915  0009E8  50D7               	movf	4055,w,c	;volatile
  2916  0009EA  0100               	movlb	0	; () banked
  2917  0009EC  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2918  0009EE  6B77               	clrf	??_ScanWithRange& (0+255),b
  2919  0009F0  50D6               	movf	4054,w,c	;volatile
  2920  0009F2  0100               	movlb	0	; () banked
  2921  0009F4  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2922  0009F6  0100               	movlb	0	; () banked
  2923  0009F8  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2924  0009FA  0E00               	movlw	0
  2925  0009FC  0100               	movlb	0	; () banked
  2926  0009FE  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2927  000A00  0100               	movlb	0	; () banked
  2928  000A02  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2929  000A04                     l221:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Movement.c: 153: }
  2933                           ;Movement.c: 155: if (SensorResult[0]>DirectionFoundThreshold) {
  2934  000A04  0100               	movlb	0	; () banked
  2935  000A06  51AE               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2936  000A08  0100               	movlb	0	; () banked
  2937  000A0A  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2938  000A0C  0100               	movlb	0	; () banked
  2939  000A0E  51AF               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2940  000A10  0100               	movlb	0	; () banked
  2941  000A12  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2942  000A14  B0D8               	btfsc	status,0,c
  2943  000A16  D00E               	goto	l222
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;Movement.c: 156: LeftFlag=(TMR0H<<8)+TMR0L;
  2947  000A18  50D7               	movf	4055,w,c	;volatile
  2948  000A1A  0100               	movlb	0	; () banked
  2949  000A1C  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  2950  000A1E  6B77               	clrf	??_ScanWithRange& (0+255),b
  2951  000A20  50D6               	movf	4054,w,c	;volatile
  2952  000A22  0100               	movlb	0	; () banked
  2953  000A24  2577               	addwf	??_ScanWithRange& (0+255),w,b
  2954  000A26  0100               	movlb	0	; () banked
  2955  000A28  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2956  000A2A  0E00               	movlw	0
  2957  000A2C  0100               	movlb	0	; () banked
  2958  000A2E  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2959  000A30  0100               	movlb	0	; () banked
  2960  000A32  6FAC               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2961  000A34                     l222:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;Movement.c: 157: }
  2965                           ;Movement.c: 164: if (LeftFlag>0) {
  2966  000A34  0100               	movlb	0	; () banked
  2967  000A36  51AB               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2968  000A38  0100               	movlb	0	; () banked
  2969  000A3A  11AC               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2970  000A3C  B4D8               	btfsc	status,2,c
  2971  000A3E  D07C               	goto	l3143
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Movement.c: 167: if (RightFlag>0) {
  2975  000A40  0100               	movlb	0	; () banked
  2976  000A42  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2977  000A44  0100               	movlb	0	; () banked
  2978  000A46  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2979  000A48  B4D8               	btfsc	status,2,c
  2980  000A4A  D06A               	goto	l224
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Movement.c: 168: TimeAboveThreshold = LeftFlag - RightFlag;
  2984  000A4C  0100               	movlb	0	; () banked
  2985  000A4E  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2986  000A50  0800               	sublw	0
  2987  000A52  0100               	movlb	0	; () banked
  2988  000A54  25AB               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2989  000A56  0100               	movlb	0	; () banked
  2990  000A58  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;Movement.c: 169: TMR0L = 0;
  2994  000A5A  0E00               	movlw	0
  2995  000A5C  6ED6               	movwf	4054,c	;volatile
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;Movement.c: 170: TMR0H = 0;
  2999  000A5E  0E00               	movlw	0
  3000  000A60  6ED7               	movwf	4055,c	;volatile
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;Movement.c: 171: stop(mL,mR);
  3004  000A62  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3005  000A66  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3006  000A6A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3007  000A6E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3008  000A72  ECA9  F009         	call	_stop	;wreg free
  3009                           
  3010                           ;Movement.c: 172: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3011  000A76  D00C               	goto	l3125
  3012  000A78                     l3123:
  3013                           
  3014                           ;Movement.c: 173: turnLeft(mL,mR, power);
  3015  000A78  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3016  000A7C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3017  000A80  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3018  000A84  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3019  000A88  C0AA  F06B         	movff	ScanWithRange@power,turnLeft@power
  3020  000A8C  ECE3  F00B         	call	_turnLeft	;wreg free
  3021  000A90                     l3125:
  3022  000A90  0100               	movlb	0	; () banked
  3023  000A92  90D8               	bcf	status,0,c
  3024  000A94  31AD               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3025  000A96  0100               	movlb	0	; () banked
  3026  000A98  6F77               	movwf	??_ScanWithRange& (0+255),b
  3027  000A9A  6B78               	clrf	(??_ScanWithRange+1)& (0+255),b
  3028  000A9C  50D6               	movf	4054,w,c	;volatile
  3029  000A9E  CFD7 F079          	movff	4055,??_ScanWithRange+2	;volatile
  3030  000AA2  0100               	movlb	0	; () banked
  3031  000AA4  6B7A               	clrf	(??_ScanWithRange+3)& (0+255),b
  3032  000AA6  C079  F07A         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3033  000AAA  0100               	movlb	0	; () banked
  3034  000AAC  6B79               	clrf	(??_ScanWithRange+2)& (0+255),b
  3035  000AAE  0100               	movlb	0	; () banked
  3036  000AB0  2779               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3037  000AB2  0E00               	movlw	0
  3038  000AB4  237A               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3039  000AB6  0100               	movlb	0	; () banked
  3040  000AB8  5177               	movf	??_ScanWithRange& (0+255),w,b
  3041  000ABA  0100               	movlb	0	; () banked
  3042  000ABC  5D79               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3043  000ABE  0100               	movlb	0	; () banked
  3044  000AC0  517A               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3045  000AC2  0A80               	xorlw	128
  3046  000AC4  0100               	movlb	0	; () banked
  3047  000AC6  6F7B               	movwf	(??_ScanWithRange+4)& (0+255),b
  3048  000AC8  0100               	movlb	0	; () banked
  3049  000ACA  5178               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3050  000ACC  0A80               	xorlw	128
  3051  000ACE  0100               	movlb	0	; () banked
  3052  000AD0  597B               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3053  000AD2  A0D8               	btfss	status,0,c
  3054  000AD4  D7D1               	goto	l3123
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Movement.c: 174: }
  3058                           ;Movement.c: 175: T0CONbits.TMR0ON=0;
  3059  000AD6  9ED5               	bcf	4053,7,c	;volatile
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;Movement.c: 176: stop(mL,mR);
  3063  000AD8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3064  000ADC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3065  000AE0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3066  000AE4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3067  000AE8  ECA9  F009         	call	_stop	;wreg free
  3068                           
  3069                           ;Movement.c: 178: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3070  000AEC  C0AD  F077         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3071  000AF0  0100               	movlb	0	; () banked
  3072  000AF2  90D8               	bcf	status,0,c
  3073  000AF4  3377               	rrcf	??_ScanWithRange& (0+255),f,b
  3074  000AF6  0100               	movlb	0	; () banked
  3075  000AF8  5177               	movf	??_ScanWithRange& (0+255),w,b
  3076  000AFA  0100               	movlb	0	; () banked
  3077  000AFC  25B2               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3078  000AFE  0100               	movlb	0	; () banked
  3079  000B00  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3080  000B02  0E00               	movlw	0
  3081  000B04  0100               	movlb	0	; () banked
  3082  000B06  21B3               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3083  000B08  0100               	movlb	0	; () banked
  3084  000B0A  6F79               	movwf	(??_ScanWithRange+2)& (0+255),b
  3085  000B0C  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3086  000B10  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3087  000B14  C078  FFDE         	movff	??_ScanWithRange+1,postinc2
  3088  000B18  C079  FFDD         	movff	??_ScanWithRange+2,postdec2
  3089  000B1C                     l3131:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;Movement.c: 179: return 2;
  3093  000B1C  0E02               	movlw	2
  3094                           
  3095                           ; BSR set to: 0
  3096  000B1E  0012               	return	
  3097  000B20                     l224:
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;Movement.c: 182: T0CONbits.TMR0ON=0;
  3101  000B20  9ED5               	bcf	4053,7,c	;volatile
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;Movement.c: 183: stop(mL,mR);
  3105  000B22  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3106  000B26  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3107  000B2A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3108  000B2E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3109  000B32  ECA9  F009         	call	_stop	;wreg free
  3110  000B36  D7F2               	goto	l3131
  3111  000B38                     l3143:
  3112                           
  3113                           ;Movement.c: 185: }
  3114                           ;Movement.c: 186: }
  3115                           ;Movement.c: 188: if (*RFID_Read==1) {
  3116  000B38  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3117  000B3C  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3118  000B40  04DE               	decf	postinc2,w,c
  3119  000B42  A4D8               	btfss	status,2,c
  3120  000B44  D002               	goto	l3149
  3121                           
  3122                           ;Movement.c: 189: return 2;
  3123  000B46  0E02               	movlw	2
  3124  000B48  0012               	return	
  3125  000B4A                     l3149:
  3126  000B4A  0100               	movlb	0	; () banked
  3127  000B4C  4BA6               	infsnz	ScanWithRange@i& (0+255),f,b
  3128  000B4E  2BA7               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3129  000B50                     l3151:
  3130                           
  3131                           ; BSR set to: 0
  3132  000B50  0100               	movlb	0	; () banked
  3133  000B52  51A6               	movf	ScanWithRange@i& (0+255),w,b
  3134  000B54  0100               	movlb	0	; () banked
  3135  000B56  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3136  000B58  0100               	movlb	0	; () banked
  3137  000B5A  51A7               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3138  000B5C  0100               	movlb	0	; () banked
  3139  000B5E  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3140  000B60  B0D8               	btfsc	status,0,c
  3141  000B62  D6E9               	goto	l3083
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;Movement.c: 190: }
  3145                           ;Movement.c: 191: }
  3146                           ;Movement.c: 194: turnRight(mL,mR, 100);
  3147                           
  3148                           ; BSR set to: 0
  3149  000B64  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3150  000B68  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3151  000B6C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3152  000B70  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3153  000B74  0E64               	movlw	100
  3154  000B76  0100               	movlb	0	; () banked
  3155  000B78  6F6B               	movwf	turnRight@power& (0+255),b
  3156  000B7A  ECC4  F00B         	call	_turnRight	;wreg free
  3157                           
  3158                           ;Movement.c: 195: delay_tenth_s(2);
  3159  000B7E  0E02               	movlw	2
  3160  000B80  EC02  F00C         	call	_delay_tenth_s
  3161                           
  3162                           ;Movement.c: 196: stop(mL,mR);
  3163  000B84  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3164  000B88  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3165  000B8C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3166  000B90  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3167  000B94  ECA9  F009         	call	_stop	;wreg free
  3168                           
  3169                           ;Movement.c: 197: return -1;
  3170  000B98  0EFF               	movlw	255
  3171  000B9A  0012               	return	
  3172  000B9C                     __end_of_ScanWithRange:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           intcon	equ	0xFF2
  3178                           postinc0	equ	0xFEE
  3179                           wreg	equ	0xFE8
  3180                           indf1	equ	0xFE7
  3181                           fsr1h	equ	0xFE2
  3182                           fsr1l	equ	0xFE1
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _turnRight *****************
  3191 ;; Defined at:
  3192 ;;		line 98 in file "dc_motor.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3195 ;;		 -> main@mL(9), 
  3196 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3197 ;;		 -> main@mR(9), 
  3198 ;;  power           1   11[BANK0 ] unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       5       0       0
  3211 ;;      Locals:         0       0       0       0
  3212 ;;      Temps:          0       0       0       0
  3213 ;;      Totals:         0       5       0       0
  3214 ;;Total ram usage:        5 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    6
  3217 ;; This function calls:
  3218 ;;		_fullSpeedAhead
  3219 ;; This function is called by:
  3220 ;;		_ScanWithRange
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text10
  3225  001788                     __ptext10:
  3226                           	opt stack 0
  3227  001788                     _turnRight:
  3228                           	opt stack 23
  3229                           
  3230                           ;dc_motor.c: 102: mL->direction=0;
  3231                           
  3232                           ;incstack = 0
  3233  001788  0100               	movlb	0	; () banked
  3234  00178A  EE20 F001          	lfsr	2,1
  3235  00178E  5167               	movf	turnRight@mL& (0+255),w,b
  3236  001790  26D9               	addwf	fsr2l,f,c
  3237  001792  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3238  001794  22DA               	addwfc	fsr2h,f,c
  3239  001796  0E00               	movlw	0
  3240  001798  6EDF               	movwf	indf2,c
  3241                           
  3242                           ;dc_motor.c: 103: mR->direction=1;
  3243  00179A  0100               	movlb	0	; () banked
  3244  00179C  EE20 F001          	lfsr	2,1
  3245  0017A0  5169               	movf	turnRight@mR& (0+255),w,b
  3246  0017A2  26D9               	addwf	fsr2l,f,c
  3247  0017A4  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3248  0017A6  22DA               	addwfc	fsr2h,f,c
  3249  0017A8  0E01               	movlw	1
  3250  0017AA  6EDF               	movwf	indf2,c
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3254  0017AC  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3255  0017B0  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3256  0017B4  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3257  0017B8  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3258  0017BC  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3259  0017C0  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  3260  0017C4  0012               	return		;funcret
  3261  0017C6                     __end_of_turnRight:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           intcon	equ	0xFF2
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           indf1	equ	0xFE7
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           indf2	equ	0xFDF
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _turnLeft *****************
  3280 ;; Defined at:
  3281 ;;		line 87 in file "dc_motor.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3284 ;;		 -> main@mL(9), 
  3285 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3286 ;;		 -> main@mR(9), 
  3287 ;;  power           1   11[BANK0 ] unsigned char 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;		None               void
  3292 ;; Registers used:
  3293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3299 ;;      Params:         0       5       0       0
  3300 ;;      Locals:         0       0       0       0
  3301 ;;      Temps:          0       0       0       0
  3302 ;;      Totals:         0       5       0       0
  3303 ;;Total ram usage:        5 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    6
  3306 ;; This function calls:
  3307 ;;		_fullSpeedAhead
  3308 ;; This function is called by:
  3309 ;;		_ScanWithRange
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text11
  3314  0017C6                     __ptext11:
  3315                           	opt stack 0
  3316  0017C6                     _turnLeft:
  3317                           	opt stack 23
  3318                           
  3319                           ;dc_motor.c: 91: mL->direction=1;
  3320                           
  3321                           ;incstack = 0
  3322  0017C6  0100               	movlb	0	; () banked
  3323  0017C8  EE20 F001          	lfsr	2,1
  3324  0017CC  5167               	movf	turnLeft@mL& (0+255),w,b
  3325  0017CE  26D9               	addwf	fsr2l,f,c
  3326  0017D0  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3327  0017D2  22DA               	addwfc	fsr2h,f,c
  3328  0017D4  0E01               	movlw	1
  3329  0017D6  6EDF               	movwf	indf2,c
  3330                           
  3331                           ;dc_motor.c: 92: mR->direction=0;
  3332  0017D8  0100               	movlb	0	; () banked
  3333  0017DA  EE20 F001          	lfsr	2,1
  3334  0017DE  5169               	movf	turnLeft@mR& (0+255),w,b
  3335  0017E0  26D9               	addwf	fsr2l,f,c
  3336  0017E2  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3337  0017E4  22DA               	addwfc	fsr2h,f,c
  3338  0017E6  0E00               	movlw	0
  3339  0017E8  6EDF               	movwf	indf2,c
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3343  0017EA  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3344  0017EE  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3345  0017F2  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3346  0017F6  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3347  0017FA  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3348  0017FE  EC7A  F00A         	call	_fullSpeedAhead	;wreg free
  3349  001802  0012               	return		;funcret
  3350  001804                     __end_of_turnLeft:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           indf1	equ	0xFE7
  3359                           fsr1h	equ	0xFE2
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _fullSpeedAhead *****************
  3369 ;; Defined at:
  3370 ;;		line 108 in file "dc_motor.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3373 ;;		 -> main@mL(9), 
  3374 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3375 ;;		 -> main@mR(9), 
  3376 ;;  power           1    6[BANK0 ] unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3388 ;;      Params:         0       5       0       0
  3389 ;;      Locals:         0       0       0       0
  3390 ;;      Temps:          1       0       0       0
  3391 ;;      Totals:         1       5       0       0
  3392 ;;Total ram usage:        6 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    5
  3395 ;; This function calls:
  3396 ;;		_setMotorPWM
  3397 ;; This function is called by:
  3398 ;;		_turnLeft
  3399 ;;		_turnRight
  3400 ;;		_fullSpeedBack
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text12
  3406  0014F4                     __ptext12:
  3407                           	opt stack 0
  3408  0014F4                     _fullSpeedAhead:
  3409                           	opt stack 24
  3410                           
  3411                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3412                           
  3413                           ;incstack = 0
  3414  0014F4  D02C               	goto	l65
  3415  0014F6                     l2857:
  3416                           
  3417                           ;dc_motor.c: 112: if(mL->power<power){
  3418  0014F6  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3419  0014FA  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3420  0014FE  0100               	movlb	0	; () banked
  3421  001500  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3422  001502  5CDE               	subwf	postinc2,w,c
  3423  001504  B0D8               	btfsc	status,0,c
  3424  001506  D005               	goto	l2861
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;dc_motor.c: 113: mL->power++;
  3428  001508  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3429  00150C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3430  001510  2ADF               	incf	indf2,f,c
  3431  001512                     l2861:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;dc_motor.c: 114: }
  3435                           ;dc_motor.c: 115: if(mR->power<power){
  3436  001512  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3437  001516  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3438  00151A  0100               	movlb	0	; () banked
  3439  00151C  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3440  00151E  5CDE               	subwf	postinc2,w,c
  3441  001520  B0D8               	btfsc	status,0,c
  3442  001522  D005               	goto	l2865
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;dc_motor.c: 116: mR->power++;
  3446  001524  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3447  001528  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3448  00152C  2ADF               	incf	indf2,f,c
  3449  00152E                     l2865:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;dc_motor.c: 117: }
  3453                           ;dc_motor.c: 118: setMotorPWM(mL);
  3454  00152E  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3455  001532  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3456  001536  EC51  F007         	call	_setMotorPWM	;wreg free
  3457                           
  3458                           ;dc_motor.c: 119: setMotorPWM(mR);
  3459  00153A  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3460  00153E  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3461  001542  EC51  F007         	call	_setMotorPWM	;wreg free
  3462                           
  3463                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3464  001546  0E21               	movlw	33
  3465  001548                     u2907:
  3466  001548  2EE8               	decfsz	wreg,f,c
  3467  00154A  D7FE               	goto	u2907
  3468  00154C  F000               	nop	
  3469  00154E                     l65:
  3470  00154E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3471  001552  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3472  001556  0100               	movlb	0	; () banked
  3473  001558  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3474  00155A  5CDE               	subwf	postinc2,w,c
  3475  00155C  A0D8               	btfss	status,0,c
  3476  00155E  D7CB               	goto	l2857
  3477                           
  3478                           ; BSR set to: 0
  3479  001560  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3480  001564  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3481  001568  0100               	movlb	0	; () banked
  3482  00156A  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3483  00156C  5CDE               	subwf	postinc2,w,c
  3484  00156E  B0D8               	btfsc	status,0,c
  3485  001570  0012               	return	
  3486  001572  D7C1               	goto	l2857
  3487  001574                     __end_of_fullSpeedAhead:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           indf1	equ	0xFE7
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _delay_tenth_s *****************
  3506 ;; Defined at:
  3507 ;;		line 32 in file "Movement.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  tenth_second    1    wreg     unsigned char 
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3512 ;;  i               2   37[COMRAM] unsigned int 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         3       0       0       0
  3524 ;;      Temps:          1       0       0       0
  3525 ;;      Totals:         4       0       0       0
  3526 ;;Total ram usage:        4 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_ScanWithRange
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text13
  3538  001804                     __ptext13:
  3539                           	opt stack 0
  3540  001804                     _delay_tenth_s:
  3541                           	opt stack 27
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;incstack = 0
  3545                           ;delay_tenth_s@tenth_seconds stored from wreg
  3546  001804  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3547                           
  3548                           ;Movement.c: 33: unsigned int i=0;
  3549  001806  0E00               	movlw	0
  3550  001808  6E27               	movwf	delay_tenth_s@i+1,c
  3551  00180A  0E00               	movlw	0
  3552  00180C  6E26               	movwf	delay_tenth_s@i,c
  3553                           
  3554                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3555  00180E  0E00               	movlw	0
  3556  001810  6E27               	movwf	delay_tenth_s@i+1,c
  3557  001812  0E01               	movlw	1
  3558  001814  6E26               	movwf	delay_tenth_s@i,c
  3559  001816  D009               	goto	l2187
  3560  001818                     l2183:
  3561                           
  3562                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3563  001818  0E82               	movlw	130
  3564  00181A  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3565  00181C  0EDE               	movlw	222
  3566  00181E                     u2917:
  3567  00181E  2EE8               	decfsz	wreg,f,c
  3568  001820  D7FE               	goto	u2917
  3569  001822  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3570  001824  D7FC               	goto	u2917
  3571  001826  4A26               	infsnz	delay_tenth_s@i,f,c
  3572  001828  2A27               	incf	delay_tenth_s@i+1,f,c
  3573  00182A                     l2187:
  3574  00182A  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3575  00182C  0D02               	mullw	2
  3576  00182E  5026               	movf	delay_tenth_s@i,w,c
  3577  001830  5CF3               	subwf	prodl,w,c
  3578  001832  5027               	movf	delay_tenth_s@i+1,w,c
  3579  001834  58F4               	subwfb	prodh,w,c
  3580  001836  A0D8               	btfss	status,0,c
  3581  001838  0012               	return	
  3582  00183A  D7EE               	goto	l2183
  3583  00183C                     __end_of_delay_tenth_s:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           indf1	equ	0xFE7
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _ScanIR *****************
  3602 ;; Defined at:
  3603 ;;		line 45 in file "Movement.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3606 ;;		 -> main@mL(9), 
  3607 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3608 ;;		 -> main@mR(9), 
  3609 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3610 ;;		 -> main@Move(1), 
  3611 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3612 ;;		 -> main@MoveTime(200), 
  3613 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3614 ;;		 -> main@MoveType(100), 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3617 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3618 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3628 ;;      Params:         0      10       0       0
  3629 ;;      Locals:         0      46       0       0
  3630 ;;      Temps:          1       0       0       0
  3631 ;;      Totals:         1      56       0       0
  3632 ;;Total ram usage:       57 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    7
  3635 ;; This function calls:
  3636 ;;		_LCD_String
  3637 ;;		_SendLCD
  3638 ;;		_SetLine
  3639 ;;		_grabLeftIR
  3640 ;;		_grabRightIR
  3641 ;;		_sprintf
  3642 ;;		_stop
  3643 ;; This function is called by:
  3644 ;;		_main
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text14
  3649  0010D6                     __ptext14:
  3650                           	opt stack 0
  3651  0010D6                     _ScanIR:
  3652                           	opt stack 23
  3653                           
  3654                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3655                           
  3656                           ;incstack = 0
  3657  0010D6  C0BE  F0A1         	movff	ScanIR@F3883,ScanIR@SensorResult
  3658  0010DA  C0BF  F0A2         	movff	ScanIR@F3883+1,ScanIR@SensorResult+1
  3659  0010DE  C0C0  F0A3         	movff	ScanIR@F3883+2,ScanIR@SensorResult+2
  3660  0010E2  C0C1  F0A4         	movff	ScanIR@F3883+3,ScanIR@SensorResult+3
  3661                           
  3662                           ;Movement.c: 50: char buf[40];
  3663                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3664  0010E6  0E09               	movlw	9
  3665  0010E8  0100               	movlb	0	; () banked
  3666  0010EA  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3667  0010EC  0EC4               	movlw	196
  3668  0010EE  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3672  0010F0  ECF3  F00A         	call	_grabLeftIR	;wreg free
  3673  0010F4  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3674  0010F8  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3675                           
  3676                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3677  0010FC  ECBA  F00A         	call	_grabRightIR	;wreg free
  3678  001100  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3679  001104  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3680                           
  3681                           ;Movement.c: 62: CAP1BUFH=0;
  3682  001108  0E00               	movlw	0
  3683  00110A  6E69               	movwf	3945,c	;volatile
  3684                           
  3685                           ;Movement.c: 63: CAP1BUFL=0;
  3686  00110C  0E00               	movlw	0
  3687  00110E  6E68               	movwf	3944,c	;volatile
  3688                           
  3689                           ;Movement.c: 64: CAP2BUFH=0;
  3690  001110  0E00               	movlw	0
  3691  001112  6E67               	movwf	3943,c	;volatile
  3692                           
  3693                           ;Movement.c: 65: CAP2BUFL=0;
  3694  001114  0E00               	movlw	0
  3695  001116  6E66               	movwf	3942,c	;volatile
  3696                           
  3697                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3698  001118  0E00               	movlw	0
  3699  00111A  6E28               	movwf	SendLCD@type,c
  3700  00111C  0E01               	movlw	1
  3701  00111E  EC6B  F00C         	call	_SendLCD
  3702                           
  3703                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3704  001122  0E21               	movlw	33
  3705  001124                     u2927:
  3706  001124  2EE8               	decfsz	wreg,f,c
  3707  001126  D7FE               	goto	u2927
  3708  001128  F000               	nop	
  3709                           
  3710                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3711  00112A  0E00               	movlw	0
  3712  00112C  6E28               	movwf	SendLCD@type,c
  3713  00112E  0E02               	movlw	2
  3714  001130  EC6B  F00C         	call	_SendLCD
  3715                           
  3716                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3717  001134  0E06               	movlw	6
  3718  001136  6E39               	movwf	??_ScanIR& (0+255),c
  3719  001138  0E30               	movlw	48
  3720  00113A                     u2937:
  3721  00113A  2EE8               	decfsz	wreg,f,c
  3722  00113C  D7FE               	goto	u2937
  3723  00113E  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3724  001140  D7FC               	goto	u2937
  3725  001142  D000               	nop2	
  3726                           
  3727                           ;Movement.c: 72: SetLine(1);
  3728  001144  0E01               	movlw	1
  3729  001146  EC53  F00C         	call	_SetLine
  3730                           
  3731                           ;Movement.c: 73: LCD_String("     ScanIR");
  3732  00114A  0E2D               	movlw	low STR_1
  3733  00114C  6E2A               	movwf	LCD_String@string,c
  3734  00114E  0E03               	movlw	high STR_1
  3735  001150  6E2B               	movwf	LCD_String@string+1,c
  3736  001152  EC2C  F00B         	call	_LCD_String	;wreg free
  3737                           
  3738                           ;Movement.c: 74: SetLine(2);
  3739  001156  0E02               	movlw	2
  3740  001158  EC53  F00C         	call	_SetLine
  3741                           
  3742                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3743  00115C  0E77               	movlw	low ScanIR@buf
  3744  00115E  6E30               	movwf	sprintf@sp,c
  3745  001160  0E00               	movlw	high ScanIR@buf
  3746  001162  6E31               	movwf	sprintf@sp+1,c
  3747  001164  0E0C               	movlw	low (STR_6+1)
  3748  001166  6E32               	movwf	sprintf@f,c
  3749  001168  0E03               	movlw	high (STR_6+1)
  3750  00116A  6E33               	movwf	sprintf@f+1,c
  3751  00116C  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3752  001170  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3753  001174  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3754  001178  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3755  00117C  ECCE  F005         	call	_sprintf	;wreg free
  3756                           
  3757                           ;Movement.c: 76: LCD_String(buf);
  3758  001180  0E77               	movlw	low ScanIR@buf
  3759  001182  6E2A               	movwf	LCD_String@string,c
  3760  001184  0E00               	movlw	high ScanIR@buf
  3761  001186  6E2B               	movwf	LCD_String@string+1,c
  3762  001188  EC2C  F00B         	call	_LCD_String	;wreg free
  3763                           
  3764                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3765                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3766  00118C  0100               	movlb	0	; () banked
  3767  00118E  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3768  001190  0100               	movlb	0	; () banked
  3769  001192  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3770  001194  0100               	movlb	0	; () banked
  3771  001196  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3772  001198  0100               	movlb	0	; () banked
  3773  00119A  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3774  00119C  B0D8               	btfsc	status,0,c
  3775  00119E  D00C               	goto	l3057
  3776                           
  3777                           ; BSR set to: 0
  3778  0011A0  0100               	movlb	0	; () banked
  3779  0011A2  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3780  0011A4  0100               	movlb	0	; () banked
  3781  0011A6  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3782  0011A8  0100               	movlb	0	; () banked
  3783  0011AA  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3784  0011AC  0100               	movlb	0	; () banked
  3785  0011AE  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3786  0011B0  B0D8               	btfsc	status,0,c
  3787  0011B2  D002               	goto	l3057
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Movement.c: 82: return 2;
  3791  0011B4  0E02               	movlw	2
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Movement.c: 83: } else {
  3795                           
  3796                           ; BSR set to: 0
  3797  0011B6  0012               	return	
  3798  0011B8                     l3057:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;Movement.c: 84: stop(mL,mR);
  3802  0011B8  C06D  F062         	movff	ScanIR@mL,stop@mL
  3803  0011BC  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3804  0011C0  C06F  F064         	movff	ScanIR@mR,stop@mR
  3805  0011C4  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3806  0011C8  ECA9  F009         	call	_stop	;wreg free
  3807                           
  3808                           ;Movement.c: 85: return 0;
  3809  0011CC  0E00               	movlw	0
  3810  0011CE  0012               	return	
  3811  0011D0                     __end_of_ScanIR:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           indf1	equ	0xFE7
  3820                           fsr1h	equ	0xFE2
  3821                           fsr1l	equ	0xFE1
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _stop *****************
  3830 ;; Defined at:
  3831 ;;		line 67 in file "dc_motor.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3834 ;;		 -> main@mL(9), 
  3835 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3836 ;;		 -> main@mR(9), 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3848 ;;      Params:         0       4       0       0
  3849 ;;      Locals:         0       0       0       0
  3850 ;;      Temps:          0       0       0       0
  3851 ;;      Totals:         0       4       0       0
  3852 ;;Total ram usage:        4 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    5
  3855 ;; This function calls:
  3856 ;;		_setMotorPWM
  3857 ;; This function is called by:
  3858 ;;		_ScanIR
  3859 ;;		_ScanWithRange
  3860 ;;		_main
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text15
  3865  001352                     __ptext15:
  3866                           	opt stack 0
  3867  001352                     _stop:
  3868                           	opt stack 25
  3869                           
  3870                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3871                           
  3872                           ;incstack = 0
  3873  001352  D028               	goto	l2889
  3874  001354                     l2875:
  3875                           
  3876                           ;dc_motor.c: 71: if(mL->power>0){
  3877  001354  C062  FFD9         	movff	stop@mL,fsr2l
  3878  001358  C063  FFDA         	movff	stop@mL+1,fsr2h
  3879  00135C  50DF               	movf	indf2,w,c
  3880  00135E  B4D8               	btfsc	status,2,c
  3881  001360  D005               	goto	l2879
  3882                           
  3883                           ;dc_motor.c: 72: mL->power--;
  3884  001362  C062  FFD9         	movff	stop@mL,fsr2l
  3885  001366  C063  FFDA         	movff	stop@mL+1,fsr2h
  3886  00136A  06DF               	decf	indf2,f,c
  3887  00136C                     l2879:
  3888                           
  3889                           ;dc_motor.c: 73: }
  3890                           ;dc_motor.c: 74: if(mR->power>0){
  3891  00136C  C064  FFD9         	movff	stop@mR,fsr2l
  3892  001370  C065  FFDA         	movff	stop@mR+1,fsr2h
  3893  001374  50DF               	movf	indf2,w,c
  3894  001376  B4D8               	btfsc	status,2,c
  3895  001378  D005               	goto	l2883
  3896                           
  3897                           ;dc_motor.c: 75: mR->power--;
  3898  00137A  C064  FFD9         	movff	stop@mR,fsr2l
  3899  00137E  C065  FFDA         	movff	stop@mR+1,fsr2h
  3900  001382  06DF               	decf	indf2,f,c
  3901  001384                     l2883:
  3902                           
  3903                           ;dc_motor.c: 76: }
  3904                           ;dc_motor.c: 77: setMotorPWM(mL);
  3905  001384  C062  F032         	movff	stop@mL,setMotorPWM@m
  3906  001388  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3907  00138C  EC51  F007         	call	_setMotorPWM	;wreg free
  3908                           
  3909                           ;dc_motor.c: 78: setMotorPWM(mR);
  3910  001390  C064  F032         	movff	stop@mR,setMotorPWM@m
  3911  001394  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3912  001398  EC51  F007         	call	_setMotorPWM	;wreg free
  3913                           
  3914                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3915  00139C  0E21               	movlw	33
  3916  00139E                     u2947:
  3917  00139E  2EE8               	decfsz	wreg,f,c
  3918  0013A0  D7FE               	goto	u2947
  3919  0013A2  F000               	nop	
  3920  0013A4                     l2889:
  3921  0013A4  C062  FFD9         	movff	stop@mL,fsr2l
  3922  0013A8  C063  FFDA         	movff	stop@mL+1,fsr2h
  3923  0013AC  50DF               	movf	indf2,w,c
  3924  0013AE  A4D8               	btfss	status,2,c
  3925  0013B0  D7D1               	goto	l2875
  3926  0013B2  C064  FFD9         	movff	stop@mR,fsr2l
  3927  0013B6  C065  FFDA         	movff	stop@mR+1,fsr2h
  3928  0013BA  50DF               	movf	indf2,w,c
  3929  0013BC  A4D8               	btfss	status,2,c
  3930  0013BE  D7CA               	goto	l2875
  3931                           
  3932                           ;dc_motor.c: 80: }
  3933                           ;dc_motor.c: 81: mL->direction=1;
  3934  0013C0  0100               	movlb	0	; () banked
  3935  0013C2  EE20 F001          	lfsr	2,1
  3936  0013C6  5162               	movf	stop@mL& (0+255),w,b
  3937  0013C8  26D9               	addwf	fsr2l,f,c
  3938  0013CA  5163               	movf	(stop@mL+1)& (0+255),w,b
  3939  0013CC  22DA               	addwfc	fsr2h,f,c
  3940  0013CE  0E01               	movlw	1
  3941  0013D0  6EDF               	movwf	indf2,c
  3942                           
  3943                           ;dc_motor.c: 82: mR->direction=1;
  3944  0013D2  0100               	movlb	0	; () banked
  3945  0013D4  EE20 F001          	lfsr	2,1
  3946  0013D8  5164               	movf	stop@mR& (0+255),w,b
  3947  0013DA  26D9               	addwf	fsr2l,f,c
  3948  0013DC  5165               	movf	(stop@mR+1)& (0+255),w,b
  3949  0013DE  22DA               	addwfc	fsr2h,f,c
  3950  0013E0  0E01               	movlw	1
  3951  0013E2  6EDF               	movwf	indf2,c
  3952                           
  3953                           ; BSR set to: 0
  3954  0013E4  0012               	return		;funcret
  3955  0013E6                     __end_of_stop:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf1	equ	0xFE7
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _setMotorPWM *****************
  3974 ;; Defined at:
  3975 ;;		line 26 in file "dc_motor.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3978 ;;		 -> main@mR(9), main@mL(9), 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  PWMduty         2    0[BANK0 ] int 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3990 ;;      Params:         2       0       0       0
  3991 ;;      Locals:         0       2       0       0
  3992 ;;      Temps:          5       0       0       0
  3993 ;;      Totals:         7       2       0       0
  3994 ;;Total ram usage:        9 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    4
  3997 ;; This function calls:
  3998 ;;		___awdiv
  3999 ;;		___wmul
  4000 ;; This function is called by:
  4001 ;;		_stop
  4002 ;;		_fullSpeedAhead
  4003 ;;		_setMotorFullSpeed
  4004 ;;		_stopMotor
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text16
  4009  000EA2                     __ptext16:
  4010                           	opt stack 0
  4011  000EA2                     _setMotorPWM:
  4012                           	opt stack 25
  4013                           
  4014                           ;dc_motor.c: 28: int PWMduty;
  4015                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;incstack = 0
  4019  000EA2  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4020  000EA6  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4021  000EAA  50DF               	movf	indf2,w,c
  4022  000EAC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4023  000EAE  5034               	movf	??_setMotorPWM,w,c
  4024  000EB0  6E24               	movwf	___wmul@multiplier,c
  4025  000EB2  6A25               	clrf	___wmul@multiplier+1,c
  4026  000EB4  EE20 F007          	lfsr	2,7
  4027  000EB8  5032               	movf	setMotorPWM@m,w,c
  4028  000EBA  26D9               	addwf	fsr2l,f,c
  4029  000EBC  5033               	movf	setMotorPWM@m+1,w,c
  4030  000EBE  22DA               	addwfc	fsr2h,f,c
  4031  000EC0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4032  000EC4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4033  000EC8  ECAB  F00C         	call	___wmul	;wreg free
  4034  000ECC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4035  000ED0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4036  000ED4  0E00               	movlw	0
  4037  000ED6  6E2D               	movwf	___awdiv@divisor+1,c
  4038  000ED8  0E64               	movlw	100
  4039  000EDA  6E2C               	movwf	___awdiv@divisor,c
  4040  000EDC  EC38  F00A         	call	___awdiv	;wreg free
  4041  000EE0  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4042  000EE4  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4043                           
  4044                           ;dc_motor.c: 32: if (m->direction)
  4045  000EE8  EE20 F001          	lfsr	2,1
  4046  000EEC  5032               	movf	setMotorPWM@m,w,c
  4047  000EEE  26D9               	addwf	fsr2l,f,c
  4048  000EF0  5033               	movf	setMotorPWM@m+1,w,c
  4049  000EF2  22DA               	addwfc	fsr2h,f,c
  4050  000EF4  50DF               	movf	indf2,w,c
  4051  000EF6  B4D8               	btfsc	status,2,c
  4052  000EF8  D02E               	goto	l2853
  4053                           
  4054                           ;dc_motor.c: 33: {
  4055                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4056  000EFA  EE20 F006          	lfsr	2,6
  4057  000EFE  5032               	movf	setMotorPWM@m,w,c
  4058  000F00  26D9               	addwf	fsr2l,f,c
  4059  000F02  5033               	movf	setMotorPWM@m+1,w,c
  4060  000F04  22DA               	addwfc	fsr2h,f,c
  4061  000F06  50DF               	movf	indf2,w,c
  4062  000F08  6E34               	movwf	??_setMotorPWM& (0+255),c
  4063  000F0A  0E01               	movlw	1
  4064  000F0C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4065  000F0E  2A34               	incf	??_setMotorPWM,f,c
  4066  000F10  D002               	goto	u2204
  4067  000F12                     u2205:
  4068  000F12  90D8               	bcf	status,0,c
  4069  000F14  3635               	rlcf	??_setMotorPWM+1,f,c
  4070  000F16                     u2204:
  4071  000F16  2E34               	decfsz	??_setMotorPWM,f,c
  4072  000F18  D7FC               	goto	u2205
  4073  000F1A  5035               	movf	??_setMotorPWM+1,w,c
  4074  000F1C  108A               	iorwf	3978,w,c	;volatile
  4075  000F1E  6E8A               	movwf	3978,c	;volatile
  4076                           
  4077                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4078  000F20  EE20 F007          	lfsr	2,7
  4079  000F24  5032               	movf	setMotorPWM@m,w,c
  4080  000F26  26D9               	addwf	fsr2l,f,c
  4081  000F28  5033               	movf	setMotorPWM@m+1,w,c
  4082  000F2A  22DA               	addwfc	fsr2h,f,c
  4083  000F2C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4084  000F30  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4085  000F34  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4086  000F38  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4087  000F3C  1E36               	comf	??_setMotorPWM+2,f,c
  4088  000F3E  1E37               	comf	??_setMotorPWM+3,f,c
  4089  000F40  4A36               	infsnz	??_setMotorPWM+2,f,c
  4090  000F42  2A37               	incf	??_setMotorPWM+3,f,c
  4091  000F44  5034               	movf	??_setMotorPWM,w,c
  4092  000F46  2436               	addwf	??_setMotorPWM+2,w,c
  4093  000F48  0100               	movlb	0	; () banked
  4094  000F4A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4095  000F4C  5035               	movf	??_setMotorPWM+1,w,c
  4096  000F4E  2037               	addwfc	??_setMotorPWM+3,w,c
  4097  000F50  0100               	movlb	0	; () banked
  4098  000F52  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4099                           
  4100                           ;dc_motor.c: 36: }
  4101  000F54  D014               	goto	l35
  4102  000F56                     l2853:
  4103                           
  4104                           ;dc_motor.c: 37: else
  4105                           ;dc_motor.c: 38: {
  4106                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4107  000F56  EE20 F006          	lfsr	2,6
  4108  000F5A  5032               	movf	setMotorPWM@m,w,c
  4109  000F5C  26D9               	addwf	fsr2l,f,c
  4110  000F5E  5033               	movf	setMotorPWM@m+1,w,c
  4111  000F60  22DA               	addwfc	fsr2h,f,c
  4112  000F62  50DF               	movf	indf2,w,c
  4113  000F64  6E34               	movwf	??_setMotorPWM& (0+255),c
  4114  000F66  0E01               	movlw	1
  4115  000F68  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4116  000F6A  2A34               	incf	??_setMotorPWM,f,c
  4117  000F6C  D002               	goto	u2214
  4118  000F6E                     u2215:
  4119  000F6E  90D8               	bcf	status,0,c
  4120  000F70  3635               	rlcf	??_setMotorPWM+1,f,c
  4121  000F72                     u2214:
  4122  000F72  2E34               	decfsz	??_setMotorPWM,f,c
  4123  000F74  D7FC               	goto	u2215
  4124  000F76  5035               	movf	??_setMotorPWM+1,w,c
  4125  000F78  0AFF               	xorlw	255
  4126  000F7A  148A               	andwf	3978,w,c	;volatile
  4127  000F7C  6E8A               	movwf	3978,c	;volatile
  4128  000F7E                     l35:
  4129                           
  4130                           ;dc_motor.c: 40: }
  4131                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4132  000F7E  EE20 F002          	lfsr	2,2
  4133  000F82  5032               	movf	setMotorPWM@m,w,c
  4134  000F84  26D9               	addwf	fsr2l,f,c
  4135  000F86  5033               	movf	setMotorPWM@m+1,w,c
  4136  000F88  22DA               	addwfc	fsr2h,f,c
  4137  000F8A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4138  000F8E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4139  000F92  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4140  000F96  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4141  000F9A  0100               	movlb	0	; () banked
  4142  000F9C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4143  000F9E  46E8               	rlncf	wreg,f,c
  4144  000FA0  0BFC               	andlw	252
  4145  000FA2  6EDF               	movwf	indf2,c
  4146                           
  4147                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4148  000FA4  EE20 F004          	lfsr	2,4
  4149  000FA8  5032               	movf	setMotorPWM@m,w,c
  4150  000FAA  26D9               	addwf	fsr2l,f,c
  4151  000FAC  5033               	movf	setMotorPWM@m+1,w,c
  4152  000FAE  22DA               	addwfc	fsr2h,f,c
  4153  000FB0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4154  000FB4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4155  000FB8  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4156  000FBC  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4157  000FC0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4158  000FC4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4159  000FC8  0E06               	movlw	6
  4160  000FCA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4161  000FCC                     u2225:
  4162  000FCC  3437               	rlcf	??_setMotorPWM+3,w,c
  4163  000FCE  3237               	rrcf	??_setMotorPWM+3,f,c
  4164  000FD0  3236               	rrcf	??_setMotorPWM+2,f,c
  4165  000FD2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4166  000FD4  D7FB               	goto	u2225
  4167  000FD6  5036               	movf	??_setMotorPWM+2,w,c
  4168  000FD8  6EDF               	movwf	indf2,c
  4169                           
  4170                           ; BSR set to: 0
  4171  000FDA  0012               	return		;funcret
  4172  000FDC                     __end_of_setMotorPWM:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf1	equ	0xFE7
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function ___awdiv *****************
  4191 ;; Defined at:
  4192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  dividend        2   41[COMRAM] int 
  4195 ;;  divisor         2   43[COMRAM] int 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  quotient        2   47[COMRAM] int 
  4198 ;;  sign            1   46[COMRAM] unsigned char 
  4199 ;;  counter         1   45[COMRAM] unsigned char 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  2   41[COMRAM] int 
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, status,0
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4209 ;;      Params:         4       0       0       0
  4210 ;;      Locals:         4       0       0       0
  4211 ;;      Temps:          0       0       0       0
  4212 ;;      Totals:         8       0       0       0
  4213 ;;Total ram usage:        8 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    3
  4216 ;; This function calls:
  4217 ;;		Nothing
  4218 ;; This function is called by:
  4219 ;;		_setMotorPWM
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text17
  4224  001470                     __ptext17:
  4225                           	opt stack 0
  4226  001470                     ___awdiv:
  4227                           	opt stack 25
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;incstack = 0
  4231  001470  0E00               	movlw	0
  4232  001472  6E2F               	movwf	___awdiv@sign,c
  4233  001474  AE2D               	btfss	___awdiv@divisor+1,7,c
  4234  001476  D006               	goto	l2811
  4235  001478  6C2C               	negf	___awdiv@divisor,c
  4236  00147A  1E2D               	comf	___awdiv@divisor+1,f,c
  4237  00147C  B0D8               	btfsc	status,0,c
  4238  00147E  2A2D               	incf	___awdiv@divisor+1,f,c
  4239  001480  0E01               	movlw	1
  4240  001482  6E2F               	movwf	___awdiv@sign,c
  4241  001484                     l2811:
  4242  001484  AE2B               	btfss	___awdiv@dividend+1,7,c
  4243  001486  D006               	goto	l2817
  4244  001488  6C2A               	negf	___awdiv@dividend,c
  4245  00148A  1E2B               	comf	___awdiv@dividend+1,f,c
  4246  00148C  B0D8               	btfsc	status,0,c
  4247  00148E  2A2B               	incf	___awdiv@dividend+1,f,c
  4248  001490  0E01               	movlw	1
  4249  001492  1A2F               	xorwf	___awdiv@sign,f,c
  4250  001494                     l2817:
  4251  001494  0E00               	movlw	0
  4252  001496  6E31               	movwf	___awdiv@quotient+1,c
  4253  001498  0E00               	movlw	0
  4254  00149A  6E30               	movwf	___awdiv@quotient,c
  4255  00149C  502C               	movf	___awdiv@divisor,w,c
  4256  00149E  102D               	iorwf	___awdiv@divisor+1,w,c
  4257  0014A0  B4D8               	btfsc	status,2,c
  4258  0014A2  D01C               	goto	l2839
  4259  0014A4  0E01               	movlw	1
  4260  0014A6  6E2E               	movwf	___awdiv@counter,c
  4261  0014A8  D004               	goto	l2825
  4262  0014AA                     l2823:
  4263  0014AA  90D8               	bcf	status,0,c
  4264  0014AC  362C               	rlcf	___awdiv@divisor,f,c
  4265  0014AE  362D               	rlcf	___awdiv@divisor+1,f,c
  4266  0014B0  2A2E               	incf	___awdiv@counter,f,c
  4267  0014B2                     l2825:
  4268  0014B2  AE2D               	btfss	___awdiv@divisor+1,7,c
  4269  0014B4  D7FA               	goto	l2823
  4270  0014B6                     l2827:
  4271  0014B6  90D8               	bcf	status,0,c
  4272  0014B8  3630               	rlcf	___awdiv@quotient,f,c
  4273  0014BA  3631               	rlcf	___awdiv@quotient+1,f,c
  4274  0014BC  502C               	movf	___awdiv@divisor,w,c
  4275  0014BE  5C2A               	subwf	___awdiv@dividend,w,c
  4276  0014C0  502D               	movf	___awdiv@divisor+1,w,c
  4277  0014C2  582B               	subwfb	___awdiv@dividend+1,w,c
  4278  0014C4  A0D8               	btfss	status,0,c
  4279  0014C6  D005               	goto	l2835
  4280  0014C8  502C               	movf	___awdiv@divisor,w,c
  4281  0014CA  5E2A               	subwf	___awdiv@dividend,f,c
  4282  0014CC  502D               	movf	___awdiv@divisor+1,w,c
  4283  0014CE  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4284  0014D0  8030               	bsf	___awdiv@quotient,0,c
  4285  0014D2                     l2835:
  4286  0014D2  90D8               	bcf	status,0,c
  4287  0014D4  322D               	rrcf	___awdiv@divisor+1,f,c
  4288  0014D6  322C               	rrcf	___awdiv@divisor,f,c
  4289  0014D8  2E2E               	decfsz	___awdiv@counter,f,c
  4290  0014DA  D7ED               	goto	l2827
  4291  0014DC                     l2839:
  4292  0014DC  502F               	movf	___awdiv@sign,w,c
  4293  0014DE  B4D8               	btfsc	status,2,c
  4294  0014E0  D004               	goto	l2843
  4295  0014E2  6C30               	negf	___awdiv@quotient,c
  4296  0014E4  1E31               	comf	___awdiv@quotient+1,f,c
  4297  0014E6  B0D8               	btfsc	status,0,c
  4298  0014E8  2A31               	incf	___awdiv@quotient+1,f,c
  4299  0014EA                     l2843:
  4300  0014EA  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4301  0014EE  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4302  0014F2  0012               	return	
  4303  0014F4                     __end_of___awdiv:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           intcon	equ	0xFF2
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           indf1	equ	0xFE7
  4312                           fsr1h	equ	0xFE2
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _sprintf *****************
  4322 ;; Defined at:
  4323 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4326 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4327 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4328 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  tmpval          4    0        struct .
  4331 ;;  cp              3    0        PTR const unsigned char 
  4332 ;;  width           2   10[BANK0 ] int 
  4333 ;;  val             2    7[BANK0 ] unsigned int 
  4334 ;;  ap              2    4[BANK0 ] PTR void [1]
  4335 ;;		 -> ?_sprintf(2), 
  4336 ;;  len             2    0        unsigned int 
  4337 ;;  c               1   12[BANK0 ] char 
  4338 ;;  flag            1    9[BANK0 ] unsigned char 
  4339 ;;  prec            1    6[BANK0 ] char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2   47[COMRAM] int 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4349 ;;      Params:         8       0       0       0
  4350 ;;      Locals:         0       9       0       0
  4351 ;;      Temps:          0       4       0       0
  4352 ;;      Totals:         8      13       0       0
  4353 ;;Total ram usage:       21 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    4
  4356 ;; This function calls:
  4357 ;;		___lwdiv
  4358 ;;		___lwmod
  4359 ;;		___wmul
  4360 ;;		_isdigit
  4361 ;; This function is called by:
  4362 ;;		_ScanIR
  4363 ;;		_ScanWithRange
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text18
  4369  000B9C                     __ptext18:
  4370                           	opt stack 0
  4371  000B9C                     _sprintf:
  4372                           	opt stack 26
  4373                           
  4374                           ;doprnt.c: 494: va_list ap;
  4375                           ;doprnt.c: 499: signed char c;
  4376                           ;doprnt.c: 501: int width;
  4377                           ;doprnt.c: 506: signed char prec;
  4378                           ;doprnt.c: 508: unsigned char flag;
  4379                           ;doprnt.c: 523: union {
  4380                           ;doprnt.c: 524: unsigned long vd;
  4381                           ;doprnt.c: 525: double integ;
  4382                           ;doprnt.c: 526: } tmpval;
  4383                           ;doprnt.c: 528: unsigned int val;
  4384                           ;doprnt.c: 529: unsigned len;
  4385                           ;doprnt.c: 530: const char * cp;
  4386                           ;doprnt.c: 533: *ap = __va_start();
  4387                           
  4388                           ;incstack = 0
  4389  000B9C  0E34               	movlw	low (?_sprintf+4)
  4390  000B9E  0100               	movlb	0	; () banked
  4391  000BA0  6F64               	movwf	sprintf@ap& (0+255),b
  4392  000BA2  0E00               	movlw	high (?_sprintf+4)
  4393  000BA4  0100               	movlb	0	; () banked
  4394  000BA6  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4395                           
  4396                           ;doprnt.c: 536: while(c = *f++) {
  4397  000BA8  D168               	goto	l3011
  4398  000BAA                     l2905:
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;doprnt.c: 538: if(c != '%')
  4402  000BAA  0E25               	movlw	37
  4403  000BAC  0100               	movlb	0	; () banked
  4404  000BAE  196C               	xorwf	sprintf@c& (0+255),w,b
  4405  000BB0  B4D8               	btfsc	status,2,c
  4406  000BB2  D009               	goto	l2911
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;doprnt.c: 540: {
  4410                           ;doprnt.c: 541: ((*sp++ = (c)));
  4411  000BB4  C030  FFD9         	movff	sprintf@sp,fsr2l
  4412  000BB8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4413  000BBC  C06C  FFDF         	movff	sprintf@c,indf2
  4414                           
  4415                           ; BSR set to: 0
  4416  000BC0  4A30               	infsnz	sprintf@sp,f,c
  4417  000BC2  2A31               	incf	sprintf@sp+1,f,c
  4418                           
  4419                           ;doprnt.c: 542: continue;
  4420  000BC4  D15A               	goto	l3011
  4421  000BC6                     l2911:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 543: }
  4425                           ;doprnt.c: 546: width = 0;
  4426  000BC6  0E00               	movlw	0
  4427  000BC8  0100               	movlb	0	; () banked
  4428  000BCA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4429  000BCC  0E00               	movlw	0
  4430  000BCE  6F6A               	movwf	sprintf@width& (0+255),b
  4431                           
  4432                           ;doprnt.c: 548: flag = 0;
  4433  000BD0  0E00               	movlw	0
  4434  000BD2  0100               	movlb	0	; () banked
  4435  000BD4  6F69               	movwf	sprintf@flag& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 551: switch(*f) {
  4439                           
  4440                           ;doprnt.c: 550: for(;;) {
  4441  000BD6  D004               	goto	l2917
  4442  000BD8                     l2913:
  4443                           
  4444                           ;doprnt.c: 580: flag |= 0x04;
  4445  000BD8  0100               	movlb	0	; () banked
  4446  000BDA  8569               	bsf	sprintf@flag& (0+255),2,b
  4447                           
  4448                           ;doprnt.c: 581: f++;
  4449  000BDC  4A32               	infsnz	sprintf@f,f,c
  4450  000BDE  2A33               	incf	sprintf@f+1,f,c
  4451  000BE0                     l2917:
  4452  000BE0  C032  FFF6         	movff	sprintf@f,tblptrl
  4453  000BE4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4454  000BE8                     	if	0	;tblptru may be non-zero
  4455  000BE8                     	endif
  4456  000BE8                     	if	0	;tblptru may be non-zero
  4457  000BE8                     	endif
  4458  000BE8  0008               	tblrd		*
  4459  000BEA  50F5               	movf	tablat,w,c
  4460                           
  4461                           ; Switch size 1, requested type "space"
  4462                           ; Number of cases is 1, Range of values is 48 to 48
  4463                           ; switch strategies available:
  4464                           ; Name         Instructions Cycles
  4465                           ; simple_byte            4     3 (average)
  4466                           ;	Chosen strategy is simple_byte
  4467  000BEC  0A30               	xorlw	48	; case 48
  4468  000BEE  B4D8               	btfsc	status,2,c
  4469  000BF0  D7F3               	goto	l2913
  4470                           
  4471                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4472                           
  4473                           ;doprnt.c: 586: }
  4474                           
  4475                           ;doprnt.c: 585: break;
  4476  000BF2  C032  FFF6         	movff	sprintf@f,tblptrl
  4477  000BF6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4478  000BFA                     	if	0	;tblptru may be non-zero
  4479  000BFA                     	endif
  4480  000BFA                     	if	0	;tblptru may be non-zero
  4481  000BFA                     	endif
  4482  000BFA  0008               	tblrd		*
  4483  000BFC  50F5               	movf	tablat,w,c
  4484  000BFE  ECCF  F00C         	call	_isdigit
  4485  000C02  A0D8               	btfss	status,0,c
  4486  000C04  D03E               	goto	l2933
  4487                           
  4488                           ;doprnt.c: 598: width = 0;
  4489  000C06  0E00               	movlw	0
  4490  000C08  0100               	movlb	0	; () banked
  4491  000C0A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4492  000C0C  0E00               	movlw	0
  4493  000C0E  6F6A               	movwf	sprintf@width& (0+255),b
  4494  000C10                     l2923:
  4495                           
  4496                           ;doprnt.c: 600: width *= 10;
  4497  000C10  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4498  000C14  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4499  000C18  0E00               	movlw	0
  4500  000C1A  6E27               	movwf	___wmul@multiplicand+1,c
  4501  000C1C  0E0A               	movlw	10
  4502  000C1E  6E26               	movwf	___wmul@multiplicand,c
  4503  000C20  ECAB  F00C         	call	___wmul	;wreg free
  4504  000C24  C024  F06A         	movff	?___wmul,sprintf@width
  4505  000C28  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4506                           
  4507                           ;doprnt.c: 601: width += *f++ - '0';
  4508  000C2C  0ED0               	movlw	208
  4509  000C2E  0100               	movlb	0	; () banked
  4510  000C30  6F60               	movwf	??_sprintf& (0+255),b
  4511  000C32  0EFF               	movlw	255
  4512  000C34  0100               	movlb	0	; () banked
  4513  000C36  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4514  000C38  C032  FFF6         	movff	sprintf@f,tblptrl
  4515  000C3C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4516  000C40                     	if	0	;tblptru may be non-zero
  4517  000C40                     	endif
  4518  000C40                     	if	0	;tblptru may be non-zero
  4519  000C40                     	endif
  4520  000C40  0008               	tblrd		*
  4521  000C42  50F5               	movf	tablat,w,c
  4522  000C44  0100               	movlb	0	; () banked
  4523  000C46  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4524  000C48  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4525  000C4A  0100               	movlb	0	; () banked
  4526  000C4C  5160               	movf	??_sprintf& (0+255),w,b
  4527  000C4E  0100               	movlb	0	; () banked
  4528  000C50  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4529  000C52  0100               	movlb	0	; () banked
  4530  000C54  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4531  000C56  0100               	movlb	0	; () banked
  4532  000C58  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4533  000C5A  0100               	movlb	0	; () banked
  4534  000C5C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4535  000C5E  0100               	movlb	0	; () banked
  4536  000C60  276A               	addwf	sprintf@width& (0+255),f,b
  4537  000C62  0100               	movlb	0	; () banked
  4538  000C64  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4539  000C66  0100               	movlb	0	; () banked
  4540  000C68  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4541                           
  4542                           ; BSR set to: 0
  4543  000C6A  4A32               	infsnz	sprintf@f,f,c
  4544  000C6C  2A33               	incf	sprintf@f+1,f,c
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4548  000C6E  C032  FFF6         	movff	sprintf@f,tblptrl
  4549  000C72  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4550  000C76                     	if	0	;tblptru may be non-zero
  4551  000C76                     	endif
  4552  000C76                     	if	0	;tblptru may be non-zero
  4553  000C76                     	endif
  4554  000C76  0008               	tblrd		*
  4555  000C78  50F5               	movf	tablat,w,c
  4556  000C7A  ECCF  F00C         	call	_isdigit
  4557  000C7E  B0D8               	btfsc	status,0,c
  4558  000C80  D7C7               	goto	l2923
  4559  000C82                     l2933:
  4560  000C82  C032  FFF6         	movff	sprintf@f,tblptrl
  4561  000C86  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4562  000C8A  4A32               	infsnz	sprintf@f,f,c
  4563  000C8C  2A33               	incf	sprintf@f+1,f,c
  4564  000C8E                     	if	0	;tblptru may be non-zero
  4565  000C8E                     	endif
  4566  000C8E                     	if	0	;tblptru may be non-zero
  4567  000C8E                     	endif
  4568  000C8E  0008               	tblrd		*
  4569  000C90  CFF5 F06C          	movff	tablat,sprintf@c
  4570  000C94  0100               	movlb	0	; () banked
  4571  000C96  516C               	movf	sprintf@c& (0+255),w,b
  4572                           
  4573                           ; Switch size 1, requested type "space"
  4574                           ; Number of cases is 3, Range of values is 0 to 105
  4575                           ; switch strategies available:
  4576                           ; Name         Instructions Cycles
  4577                           ; simple_byte           10     6 (average)
  4578                           ;	Chosen strategy is simple_byte
  4579  000C98  0A00               	xorlw	0	; case 0
  4580  000C9A  B4D8               	btfsc	status,2,c
  4581  000C9C  D0FB               	goto	l3013
  4582  000C9E  0A64               	xorlw	100	; case 100
  4583  000CA0  B4D8               	btfsc	status,2,c
  4584  000CA2  D003               	goto	l2935
  4585  000CA4  0A0D               	xorlw	13	; case 105
  4586  000CA6  A4D8               	btfss	status,2,c
  4587  000CA8  D0E8               	goto	l3011
  4588  000CAA                     l2935:
  4589                           
  4590                           ;doprnt.c: 1253: {
  4591                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4592  000CAA  C064  FFD9         	movff	sprintf@ap,fsr2l
  4593  000CAE  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4594  000CB2  CFDE F067          	movff	postinc2,sprintf@val
  4595  000CB6  CFDD F068          	movff	postdec2,sprintf@val+1
  4596  000CBA  0E02               	movlw	2
  4597  000CBC  0100               	movlb	0	; () banked
  4598  000CBE  2764               	addwf	sprintf@ap& (0+255),f,b
  4599  000CC0  0E00               	movlw	0
  4600  000CC2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1261: if((int)val < 0) {
  4604  000CC4  0100               	movlb	0	; () banked
  4605  000CC6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4606  000CC8  D008               	goto	l2945
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1262: flag |= 0x03;
  4610  000CCA  0E03               	movlw	3
  4611  000CCC  0100               	movlb	0	; () banked
  4612  000CCE  1369               	iorwf	sprintf@flag& (0+255),f,b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1263: val = -val;
  4616  000CD0  0100               	movlb	0	; () banked
  4617  000CD2  6D67               	negf	sprintf@val& (0+255),b
  4618  000CD4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4619  000CD6  B0D8               	btfsc	status,0,c
  4620  000CD8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4621  000CDA                     l2945:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 1264: }
  4625                           ;doprnt.c: 1266: }
  4626                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4627  000CDA  0E01               	movlw	1
  4628  000CDC  0100               	movlb	0	; () banked
  4629  000CDE  6F6C               	movwf	sprintf@c& (0+255),b
  4630  000CE0                     l2947:
  4631                           
  4632                           ; BSR set to: 0
  4633  000CE0  0E05               	movlw	5
  4634  000CE2  0100               	movlb	0	; () banked
  4635  000CE4  196C               	xorwf	sprintf@c& (0+255),w,b
  4636  000CE6  B4D8               	btfsc	status,2,c
  4637  000CE8  D016               	goto	l2959
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;doprnt.c: 1306: if(val < dpowers[c])
  4641                           
  4642                           ; BSR set to: 0
  4643                           
  4644                           ; BSR set to: 0
  4645  000CEA  0100               	movlb	0	; () banked
  4646  000CEC  516C               	movf	sprintf@c& (0+255),w,b
  4647  000CEE  0D02               	mullw	2
  4648  000CF0  0E01               	movlw	low _dpowers
  4649  000CF2  24F3               	addwf	prodl,w,c
  4650  000CF4  6EF6               	movwf	tblptrl,c
  4651  000CF6  0E03               	movlw	high _dpowers
  4652  000CF8  20F4               	addwfc	prodh,w,c
  4653  000CFA  6EF7               	movwf	tblptrh,c
  4654  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  4655  000CFC                     	endif
  4656  000CFC  0009               	tblrd		*+
  4657  000CFE  50F5               	movf	tablat,w,c
  4658  000D00  0100               	movlb	0	; () banked
  4659  000D02  5D67               	subwf	sprintf@val& (0+255),w,b
  4660  000D04  0009               	tblrd		*+
  4661  000D06  50F5               	movf	tablat,w,c
  4662  000D08  0100               	movlb	0	; () banked
  4663  000D0A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4664  000D0C  A0D8               	btfss	status,0,c
  4665  000D0E  D003               	goto	l2959
  4666                           
  4667                           ; BSR set to: 0
  4668                           
  4669                           ; BSR set to: 0
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1307: break;
  4673  000D10  0100               	movlb	0	; () banked
  4674  000D12  2B6C               	incf	sprintf@c& (0+255),f,b
  4675  000D14  D7E5               	goto	l2947
  4676  000D16                     l2959:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4680  000D16  0100               	movlb	0	; () banked
  4681  000D18  516A               	movf	sprintf@width& (0+255),w,b
  4682  000D1A  0100               	movlb	0	; () banked
  4683  000D1C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4684  000D1E  B4D8               	btfsc	status,2,c
  4685  000D20  D00B               	goto	l2965
  4686                           
  4687                           ; BSR set to: 0
  4688  000D22  C069  F060         	movff	sprintf@flag,??_sprintf
  4689  000D26  0E03               	movlw	3
  4690  000D28  0100               	movlb	0	; () banked
  4691  000D2A  1760               	andwf	??_sprintf& (0+255),f,b
  4692  000D2C  B4D8               	btfsc	status,2,c
  4693  000D2E  D004               	goto	l2965
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 1346: width--;
  4697  000D30  0100               	movlb	0	; () banked
  4698  000D32  076A               	decf	sprintf@width& (0+255),f,b
  4699  000D34  A0D8               	btfss	status,0,c
  4700  000D36  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4701  000D38                     l2965:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;doprnt.c: 1381: if(width > c)
  4705  000D38  0E80               	movlw	128
  4706  000D3A  0100               	movlb	0	; () banked
  4707  000D3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4708  000D3E  0E7F               	movlw	127
  4709  000D40  0100               	movlb	0	; () banked
  4710  000D42  6F60               	movwf	??_sprintf& (0+255),b
  4711  000D44  0100               	movlb	0	; () banked
  4712  000D46  516A               	movf	sprintf@width& (0+255),w,b
  4713  000D48  0100               	movlb	0	; () banked
  4714  000D4A  5D6C               	subwf	sprintf@c& (0+255),w,b
  4715  000D4C  0100               	movlb	0	; () banked
  4716  000D4E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4717  000D50  0A80               	xorlw	128
  4718  000D52  0100               	movlb	0	; () banked
  4719  000D54  5960               	subwfb	??_sprintf& (0+255),w,b
  4720  000D56  B0D8               	btfsc	status,0,c
  4721  000D58  D00B               	goto	l2969
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1382: width -= c;
  4725  000D5A  0100               	movlb	0	; () banked
  4726  000D5C  516C               	movf	sprintf@c& (0+255),w,b
  4727  000D5E  0100               	movlb	0	; () banked
  4728  000D60  5F6A               	subwf	sprintf@width& (0+255),f,b
  4729  000D62  0E00               	movlw	0
  4730  000D64  0100               	movlb	0	; () banked
  4731  000D66  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4732  000D68  0EFF               	movlw	255
  4733  000D6A  0100               	movlb	0	; () banked
  4734  000D6C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4735  000D6E  D005               	goto	l2971
  4736  000D70                     l2969:
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 1383: else
  4740                           ;doprnt.c: 1384: width = 0;
  4741  000D70  0E00               	movlw	0
  4742  000D72  0100               	movlb	0	; () banked
  4743  000D74  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4744  000D76  0E00               	movlw	0
  4745  000D78  6F6A               	movwf	sprintf@width& (0+255),b
  4746  000D7A                     l2971:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 1387: if(flag & 0x04) {
  4750  000D7A  0100               	movlb	0	; () banked
  4751  000D7C  A569               	btfss	sprintf@flag& (0+255),2,b
  4752  000D7E  D022               	goto	l2987
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 1392: if(flag & 0x03)
  4756  000D80  C069  F060         	movff	sprintf@flag,??_sprintf
  4757  000D84  0E03               	movlw	3
  4758  000D86  0100               	movlb	0	; () banked
  4759  000D88  1760               	andwf	??_sprintf& (0+255),f,b
  4760  000D8A  B4D8               	btfsc	status,2,c
  4761  000D8C  D008               	goto	l2979
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4765  000D8E  C030  FFD9         	movff	sprintf@sp,fsr2l
  4766  000D92  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4767  000D96  0E2D               	movlw	45
  4768  000D98  6EDF               	movwf	indf2,c
  4769                           
  4770                           ; BSR set to: 0
  4771  000D9A  4A30               	infsnz	sprintf@sp,f,c
  4772  000D9C  2A31               	incf	sprintf@sp+1,f,c
  4773  000D9E                     l2979:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1415: if(width)
  4777  000D9E  0100               	movlb	0	; () banked
  4778  000DA0  516A               	movf	sprintf@width& (0+255),w,b
  4779  000DA2  0100               	movlb	0	; () banked
  4780  000DA4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4781  000DA6  B4D8               	btfsc	status,2,c
  4782  000DA8  D034               	goto	l3001
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4786                           
  4787                           ; BSR set to: 0
  4788                           
  4789                           ;doprnt.c: 1416: do
  4790  000DAA  C030  FFD9         	movff	sprintf@sp,fsr2l
  4791  000DAE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4792  000DB2  0E30               	movlw	48
  4793  000DB4  6EDF               	movwf	indf2,c
  4794                           
  4795                           ; BSR set to: 0
  4796  000DB6  4A30               	infsnz	sprintf@sp,f,c
  4797  000DB8  2A31               	incf	sprintf@sp+1,f,c
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1418: while(--width);
  4801  000DBA  0100               	movlb	0	; () banked
  4802  000DBC  076A               	decf	sprintf@width& (0+255),f,b
  4803  000DBE  A0D8               	btfss	status,0,c
  4804  000DC0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4805  000DC2  D7ED               	goto	l2979
  4806  000DC4                     l2987:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1422: {
  4810                           ;doprnt.c: 1424: if(width
  4811                           ;doprnt.c: 1428: )
  4812  000DC4  0100               	movlb	0	; () banked
  4813  000DC6  516A               	movf	sprintf@width& (0+255),w,b
  4814  000DC8  0100               	movlb	0	; () banked
  4815  000DCA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4816  000DCC  B4D8               	btfsc	status,2,c
  4817  000DCE  D012               	goto	l2995
  4818  000DD0                     l2989:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4822  000DD0  C030  FFD9         	movff	sprintf@sp,fsr2l
  4823  000DD4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4824  000DD8  0E20               	movlw	32
  4825  000DDA  6EDF               	movwf	indf2,c
  4826                           
  4827                           ; BSR set to: 0
  4828  000DDC  4A30               	infsnz	sprintf@sp,f,c
  4829  000DDE  2A31               	incf	sprintf@sp+1,f,c
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 1431: while(--width);
  4833  000DE0  0100               	movlb	0	; () banked
  4834  000DE2  076A               	decf	sprintf@width& (0+255),f,b
  4835  000DE4  A0D8               	btfss	status,0,c
  4836  000DE6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4837  000DE8  0100               	movlb	0	; () banked
  4838  000DEA  516A               	movf	sprintf@width& (0+255),w,b
  4839  000DEC  0100               	movlb	0	; () banked
  4840  000DEE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4841  000DF0  A4D8               	btfss	status,2,c
  4842  000DF2  D7EE               	goto	l2989
  4843  000DF4                     l2995:
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;doprnt.c: 1438: if(flag & 0x03)
  4847  000DF4  C069  F060         	movff	sprintf@flag,??_sprintf
  4848  000DF8  0E03               	movlw	3
  4849  000DFA  0100               	movlb	0	; () banked
  4850  000DFC  1760               	andwf	??_sprintf& (0+255),f,b
  4851  000DFE  B4D8               	btfsc	status,2,c
  4852  000E00  D008               	goto	l3001
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4856  000E02  C030  FFD9         	movff	sprintf@sp,fsr2l
  4857  000E06  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4858  000E0A  0E2D               	movlw	45
  4859  000E0C  6EDF               	movwf	indf2,c
  4860                           
  4861                           ; BSR set to: 0
  4862  000E0E  4A30               	infsnz	sprintf@sp,f,c
  4863  000E10  2A31               	incf	sprintf@sp+1,f,c
  4864  000E12                     l3001:
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;doprnt.c: 1469: }
  4868                           ;doprnt.c: 1472: prec = c;
  4869  000E12  C06C  F066         	movff	sprintf@c,sprintf@prec
  4870                           
  4871                           ;doprnt.c: 1474: while(prec--) {
  4872  000E16  D02B               	goto	l3009
  4873  000E18                     l3003:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;doprnt.c: 1478: {
  4877                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4878  000E18  0100               	movlb	0	; () banked
  4879  000E1A  5166               	movf	sprintf@prec& (0+255),w,b
  4880  000E1C  0D02               	mullw	2
  4881  000E1E  0E01               	movlw	low _dpowers
  4882  000E20  24F3               	addwf	prodl,w,c
  4883  000E22  6EF6               	movwf	tblptrl,c
  4884  000E24  0E03               	movlw	high _dpowers
  4885  000E26  20F4               	addwfc	prodh,w,c
  4886  000E28  6EF7               	movwf	tblptrh,c
  4887  000E2A                     	if	0	;There are less than 3 active tblptr bytes
  4888  000E2A                     	endif
  4889  000E2A  0009               	tblrd		*+
  4890  000E2C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4891  000E30  000A               	tblrd		*-
  4892  000E32  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4893  000E36  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4894  000E3A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4895  000E3E  EC5B  F00B         	call	___lwdiv	;wreg free
  4896  000E42  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4897  000E46  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4898  000E4A  0E00               	movlw	0
  4899  000E4C  6E2E               	movwf	___lwmod@divisor+1,c
  4900  000E4E  0E0A               	movlw	10
  4901  000E50  6E2D               	movwf	___lwmod@divisor,c
  4902  000E52  EC84  F00B         	call	___lwmod	;wreg free
  4903  000E56  502B               	movf	?___lwmod,w,c
  4904  000E58  0F30               	addlw	48
  4905  000E5A  0100               	movlb	0	; () banked
  4906  000E5C  6F6C               	movwf	sprintf@c& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 1523: }
  4910                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4911  000E5E  C030  FFD9         	movff	sprintf@sp,fsr2l
  4912  000E62  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4913  000E66  C06C  FFDF         	movff	sprintf@c,indf2
  4914                           
  4915                           ; BSR set to: 0
  4916  000E6A  4A30               	infsnz	sprintf@sp,f,c
  4917  000E6C  2A31               	incf	sprintf@sp+1,f,c
  4918  000E6E                     l3009:
  4919                           
  4920                           ; BSR set to: 0
  4921  000E6E  0100               	movlb	0	; () banked
  4922  000E70  0766               	decf	sprintf@prec& (0+255),f,b
  4923  000E72  0100               	movlb	0	; () banked
  4924  000E74  2966               	incf	sprintf@prec& (0+255),w,b
  4925  000E76  A4D8               	btfss	status,2,c
  4926  000E78  D7CF               	goto	l3003
  4927  000E7A                     l3011:
  4928  000E7A  C032  FFF6         	movff	sprintf@f,tblptrl
  4929  000E7E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4930  000E82  4A32               	infsnz	sprintf@f,f,c
  4931  000E84  2A33               	incf	sprintf@f+1,f,c
  4932  000E86                     	if	0	;tblptru may be non-zero
  4933  000E86                     	endif
  4934  000E86                     	if	0	;tblptru may be non-zero
  4935  000E86                     	endif
  4936  000E86  0008               	tblrd		*
  4937  000E88  CFF5 F06C          	movff	tablat,sprintf@c
  4938  000E8C  0100               	movlb	0	; () banked
  4939  000E8E  516C               	movf	sprintf@c& (0+255),w,b
  4940  000E90  A4D8               	btfss	status,2,c
  4941  000E92  D68B               	goto	l2905
  4942  000E94                     l3013:
  4943                           
  4944                           ;doprnt.c: 1538: *sp = 0;
  4945  000E94  C030  FFD9         	movff	sprintf@sp,fsr2l
  4946  000E98  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4947  000E9C  0E00               	movlw	0
  4948  000E9E  6EDF               	movwf	indf2,c
  4949  000EA0  0012               	return	
  4950  000EA2                     __end_of_sprintf:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _isdigit *****************
  4972 ;; Defined at:
  4973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  c               1    wreg     unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  c               1   37[COMRAM] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4987 ;;      Params:         0       0       0       0
  4988 ;;      Locals:         2       0       0       0
  4989 ;;      Temps:          1       0       0       0
  4990 ;;      Totals:         3       0       0       0
  4991 ;;Total ram usage:        3 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    3
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_sprintf
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text19
  5002  00199E                     __ptext19:
  5003                           	opt stack 0
  5004  00199E                     _isdigit:
  5005                           	opt stack 26
  5006                           
  5007                           ;incstack = 0
  5008                           ;isdigit@c stored from wreg
  5009  00199E  6E26               	movwf	isdigit@c,c
  5010  0019A0  0E00               	movlw	0
  5011  0019A2  6E25               	movwf	_isdigit$1962,c
  5012  0019A4  0E3A               	movlw	58
  5013  0019A6  6026               	cpfslt	isdigit@c,c
  5014  0019A8  D005               	goto	l2057
  5015  0019AA  0E2F               	movlw	47
  5016  0019AC  6426               	cpfsgt	isdigit@c,c
  5017  0019AE  D002               	goto	l2057
  5018  0019B0  0E01               	movlw	1
  5019  0019B2  6E25               	movwf	_isdigit$1962,c
  5020  0019B4                     l2057:
  5021  0019B4  C025  F024         	movff	_isdigit$1962,??_isdigit
  5022  0019B8  3024               	rrcf	??_isdigit,w,c
  5023  0019BA  0012               	return	
  5024  0019BC                     __end_of_isdigit:
  5025                           	opt stack 0
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           intcon	equ	0xFF2
  5033                           postinc0	equ	0xFEE
  5034                           wreg	equ	0xFE8
  5035                           indf1	equ	0xFE7
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function ___wmul *****************
  5046 ;; Defined at:
  5047 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  multiplier      2   35[COMRAM] unsigned int 
  5050 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  product         2   39[COMRAM] unsigned int 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2   35[COMRAM] unsigned int 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0, prodl, prodh
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5062 ;;      Params:         4       0       0       0
  5063 ;;      Locals:         2       0       0       0
  5064 ;;      Temps:          0       0       0       0
  5065 ;;      Totals:         6       0       0       0
  5066 ;;Total ram usage:        6 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_setMotorPWM
  5073 ;;		_sprintf
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text20
  5078  001956                     __ptext20:
  5079                           	opt stack 0
  5080  001956                     ___wmul:
  5081                           	opt stack 25
  5082                           
  5083                           ;incstack = 0
  5084  001956  5024               	movf	___wmul@multiplier,w,c
  5085  001958  0226               	mulwf	___wmul@multiplicand,c
  5086  00195A  CFF3 F028          	movff	prodl,___wmul@product
  5087  00195E  CFF4 F029          	movff	prodh,___wmul@product+1
  5088  001962  5024               	movf	___wmul@multiplier,w,c
  5089  001964  0227               	mulwf	___wmul@multiplicand+1,c
  5090  001966  50F3               	movf	prodl,w,c
  5091  001968  2629               	addwf	___wmul@product+1,f,c
  5092  00196A  5025               	movf	___wmul@multiplier+1,w,c
  5093  00196C  0226               	mulwf	___wmul@multiplicand,c
  5094  00196E  50F3               	movf	prodl,w,c
  5095  001970  2629               	addwf	___wmul@product+1,f,c
  5096  001972  C028  F024         	movff	___wmul@product,?___wmul
  5097  001976  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5098  00197A  0012               	return	
  5099  00197C                     __end_of___wmul:
  5100                           	opt stack 0
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           indf1	equ	0xFE7
  5111                           fsr1h	equ	0xFE2
  5112                           fsr1l	equ	0xFE1
  5113                           indf2	equ	0xFDF
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function ___lwmod *****************
  5121 ;; Defined at:
  5122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  dividend        2   42[COMRAM] unsigned int 
  5125 ;;  divisor         2   44[COMRAM] unsigned int 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  counter         1   46[COMRAM] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  2   42[COMRAM] unsigned int 
  5130 ;; Registers used:
  5131 ;;		wreg, status,2, status,0
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5137 ;;      Params:         4       0       0       0
  5138 ;;      Locals:         1       0       0       0
  5139 ;;      Temps:          0       0       0       0
  5140 ;;      Totals:         5       0       0       0
  5141 ;;Total ram usage:        5 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    3
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_sprintf
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text21
  5152  001708                     __ptext21:
  5153                           	opt stack 0
  5154  001708                     ___lwmod:
  5155                           	opt stack 26
  5156                           
  5157                           ;incstack = 0
  5158  001708  502D               	movf	___lwmod@divisor,w,c
  5159  00170A  102E               	iorwf	___lwmod@divisor+1,w,c
  5160  00170C  B4D8               	btfsc	status,2,c
  5161  00170E  D018               	goto	l880
  5162  001710  0E01               	movlw	1
  5163  001712  6E2F               	movwf	___lwmod@counter,c
  5164  001714  D004               	goto	l2089
  5165  001716                     l2087:
  5166  001716  90D8               	bcf	status,0,c
  5167  001718  362D               	rlcf	___lwmod@divisor,f,c
  5168  00171A  362E               	rlcf	___lwmod@divisor+1,f,c
  5169  00171C  2A2F               	incf	___lwmod@counter,f,c
  5170  00171E                     l2089:
  5171  00171E  AE2E               	btfss	___lwmod@divisor+1,7,c
  5172  001720  D7FA               	goto	l2087
  5173  001722                     l2091:
  5174  001722  502D               	movf	___lwmod@divisor,w,c
  5175  001724  5C2B               	subwf	___lwmod@dividend,w,c
  5176  001726  502E               	movf	___lwmod@divisor+1,w,c
  5177  001728  582C               	subwfb	___lwmod@dividend+1,w,c
  5178  00172A  A0D8               	btfss	status,0,c
  5179  00172C  D004               	goto	l2095
  5180  00172E  502D               	movf	___lwmod@divisor,w,c
  5181  001730  5E2B               	subwf	___lwmod@dividend,f,c
  5182  001732  502E               	movf	___lwmod@divisor+1,w,c
  5183  001734  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5184  001736                     l2095:
  5185  001736  90D8               	bcf	status,0,c
  5186  001738  322E               	rrcf	___lwmod@divisor+1,f,c
  5187  00173A  322D               	rrcf	___lwmod@divisor,f,c
  5188  00173C  2E2F               	decfsz	___lwmod@counter,f,c
  5189  00173E  D7F1               	goto	l2091
  5190  001740                     l880:
  5191  001740  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5192  001744  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5193  001748  0012               	return		;funcret
  5194  00174A                     __end_of___lwmod:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           fsr1h	equ	0xFE2
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function ___lwdiv *****************
  5216 ;; Defined at:
  5217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  dividend        2   35[COMRAM] unsigned int 
  5220 ;;  divisor         2   37[COMRAM] unsigned int 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  quotient        2   39[COMRAM] unsigned int 
  5223 ;;  counter         1   41[COMRAM] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  2   35[COMRAM] unsigned int 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5233 ;;      Params:         4       0       0       0
  5234 ;;      Locals:         3       0       0       0
  5235 ;;      Temps:          0       0       0       0
  5236 ;;      Totals:         7       0       0       0
  5237 ;;Total ram usage:        7 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    3
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_sprintf
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text22
  5248  0016B6                     __ptext22:
  5249                           	opt stack 0
  5250  0016B6                     ___lwdiv:
  5251                           	opt stack 26
  5252                           
  5253                           ;incstack = 0
  5254  0016B6  0E00               	movlw	0
  5255  0016B8  6E29               	movwf	___lwdiv@quotient+1,c
  5256  0016BA  0E00               	movlw	0
  5257  0016BC  6E28               	movwf	___lwdiv@quotient,c
  5258  0016BE  5026               	movf	___lwdiv@divisor,w,c
  5259  0016C0  1027               	iorwf	___lwdiv@divisor+1,w,c
  5260  0016C2  B4D8               	btfsc	status,2,c
  5261  0016C4  D01C               	goto	l870
  5262  0016C6  0E01               	movlw	1
  5263  0016C8  6E2A               	movwf	___lwdiv@counter,c
  5264  0016CA  D004               	goto	l2069
  5265  0016CC                     l2067:
  5266  0016CC  90D8               	bcf	status,0,c
  5267  0016CE  3626               	rlcf	___lwdiv@divisor,f,c
  5268  0016D0  3627               	rlcf	___lwdiv@divisor+1,f,c
  5269  0016D2  2A2A               	incf	___lwdiv@counter,f,c
  5270  0016D4                     l2069:
  5271  0016D4  AE27               	btfss	___lwdiv@divisor+1,7,c
  5272  0016D6  D7FA               	goto	l2067
  5273  0016D8                     l2071:
  5274  0016D8  90D8               	bcf	status,0,c
  5275  0016DA  3628               	rlcf	___lwdiv@quotient,f,c
  5276  0016DC  3629               	rlcf	___lwdiv@quotient+1,f,c
  5277  0016DE  5026               	movf	___lwdiv@divisor,w,c
  5278  0016E0  5C24               	subwf	___lwdiv@dividend,w,c
  5279  0016E2  5027               	movf	___lwdiv@divisor+1,w,c
  5280  0016E4  5825               	subwfb	___lwdiv@dividend+1,w,c
  5281  0016E6  A0D8               	btfss	status,0,c
  5282  0016E8  D005               	goto	l2079
  5283  0016EA  5026               	movf	___lwdiv@divisor,w,c
  5284  0016EC  5E24               	subwf	___lwdiv@dividend,f,c
  5285  0016EE  5027               	movf	___lwdiv@divisor+1,w,c
  5286  0016F0  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5287  0016F2  8028               	bsf	___lwdiv@quotient,0,c
  5288  0016F4                     l2079:
  5289  0016F4  90D8               	bcf	status,0,c
  5290  0016F6  3227               	rrcf	___lwdiv@divisor+1,f,c
  5291  0016F8  3226               	rrcf	___lwdiv@divisor,f,c
  5292  0016FA  2E2A               	decfsz	___lwdiv@counter,f,c
  5293  0016FC  D7ED               	goto	l2071
  5294  0016FE                     l870:
  5295  0016FE  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5296  001702  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5297  001706  0012               	return		;funcret
  5298  001708                     __end_of___lwdiv:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           indf1	equ	0xFE7
  5310                           fsr1h	equ	0xFE2
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _grabRightIR *****************
  5320 ;; Defined at:
  5321 ;;		line 74 in file "IR_Reading.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5326 ;;  i               1   42[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  2   35[COMRAM] unsigned int 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5336 ;;      Params:         2       0       0       0
  5337 ;;      Locals:         3       0       0       0
  5338 ;;      Temps:          3       0       0       0
  5339 ;;      Totals:         8       0       0       0
  5340 ;;Total ram usage:        8 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    3
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_ScanIR
  5347 ;;		_ScanWithRange
  5348 ;;		_main
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  001574                     __ptext23:
  5354                           	opt stack 0
  5355  001574                     _grabRightIR:
  5356                           	opt stack 27
  5357                           
  5358                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5359                           
  5360                           ;incstack = 0
  5361  001574  0E00               	movlw	0
  5362  001576  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5363  001578  0E00               	movlw	0
  5364  00157A  6E29               	movwf	grabRightIR@IR_signal,c
  5365                           
  5366                           ;IR_Reading.c: 77: unsigned char i=0;
  5367  00157C  0E00               	movlw	0
  5368  00157E  6E2B               	movwf	grabRightIR@i,c
  5369                           
  5370                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5371  001580  0E00               	movlw	0
  5372  001582  6E2B               	movwf	grabRightIR@i,c
  5373  001584                     l2131:
  5374  001584  0E03               	movlw	3
  5375  001586  642B               	cpfsgt	grabRightIR@i,c
  5376  001588  D001               	goto	l2135
  5377  00158A  D01E               	goto	l2141
  5378  00158C                     l2135:
  5379                           
  5380                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5381  00158C  5069               	movf	3945,w,c	;volatile
  5382  00158E  6E26               	movwf	??_grabRightIR& (0+255),c
  5383  001590  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5384  001592  0E07               	movlw	7
  5385  001594                     u1445:
  5386  001594  90D8               	bcf	status,0,c
  5387  001596  3626               	rlcf	??_grabRightIR,f,c
  5388  001598  3627               	rlcf	??_grabRightIR+1,f,c
  5389  00159A  2EE8               	decfsz	wreg,f,c
  5390  00159C  D7FB               	goto	u1445
  5391  00159E  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5392  0015A2  90D8               	bcf	status,0,c
  5393  0015A4  3228               	rrcf	??_grabRightIR+2,f,c
  5394  0015A6  5028               	movf	??_grabRightIR+2,w,c
  5395  0015A8  1226               	iorwf	??_grabRightIR,f,c
  5396  0015AA  0E00               	movlw	0
  5397  0015AC  1227               	iorwf	??_grabRightIR+1,f,c
  5398  0015AE  5026               	movf	??_grabRightIR,w,c
  5399  0015B0  2629               	addwf	grabRightIR@IR_signal,f,c
  5400  0015B2  5027               	movf	??_grabRightIR+1,w,c
  5401  0015B4  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5402                           
  5403                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5404  0015B6  0E82               	movlw	130
  5405  0015B8  6E26               	movwf	??_grabRightIR& (0+255),c
  5406  0015BA  0EDE               	movlw	222
  5407  0015BC                     u2957:
  5408  0015BC  2EE8               	decfsz	wreg,f,c
  5409  0015BE  D7FE               	goto	u2957
  5410  0015C0  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5411  0015C2  D7FC               	goto	u2957
  5412  0015C4  2A2B               	incf	grabRightIR@i,f,c
  5413  0015C6  D7DE               	goto	l2131
  5414  0015C8                     l2141:
  5415                           
  5416                           ;IR_Reading.c: 83: }
  5417                           ;IR_Reading.c: 85: return IR_signal>>2;
  5418  0015C8  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5419  0015CC  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5420  0015D0  90D8               	bcf	status,0,c
  5421  0015D2  3227               	rrcf	??_grabRightIR+1,f,c
  5422  0015D4  3226               	rrcf	??_grabRightIR,f,c
  5423  0015D6  90D8               	bcf	status,0,c
  5424  0015D8  3227               	rrcf	??_grabRightIR+1,f,c
  5425  0015DA  3226               	rrcf	??_grabRightIR,f,c
  5426  0015DC  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5427  0015E0  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5428  0015E4  0012               	return	
  5429  0015E6                     __end_of_grabRightIR:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           indf1	equ	0xFE7
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _grabLeftIR *****************
  5451 ;; Defined at:
  5452 ;;		line 90 in file "IR_Reading.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5457 ;;  i               1   42[COMRAM] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  2   35[COMRAM] unsigned int 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5467 ;;      Params:         2       0       0       0
  5468 ;;      Locals:         3       0       0       0
  5469 ;;      Temps:          3       0       0       0
  5470 ;;      Totals:         8       0       0       0
  5471 ;;Total ram usage:        8 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    3
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_ScanIR
  5478 ;;		_ScanWithRange
  5479 ;;		_main
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text24
  5484  0015E6                     __ptext24:
  5485                           	opt stack 0
  5486  0015E6                     _grabLeftIR:
  5487                           	opt stack 27
  5488                           
  5489                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5490                           
  5491                           ;incstack = 0
  5492  0015E6  0E00               	movlw	0
  5493  0015E8  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5494  0015EA  0E00               	movlw	0
  5495  0015EC  6E29               	movwf	grabLeftIR@IR_signal,c
  5496                           
  5497                           ;IR_Reading.c: 93: unsigned char i=0;
  5498  0015EE  0E00               	movlw	0
  5499  0015F0  6E2B               	movwf	grabLeftIR@i,c
  5500                           
  5501                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5502  0015F2  0E00               	movlw	0
  5503  0015F4  6E2B               	movwf	grabLeftIR@i,c
  5504  0015F6                     l2147:
  5505  0015F6  0E03               	movlw	3
  5506  0015F8  642B               	cpfsgt	grabLeftIR@i,c
  5507  0015FA  D001               	goto	l2151
  5508  0015FC  D01E               	goto	l2157
  5509  0015FE                     l2151:
  5510                           
  5511                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5512  0015FE  5067               	movf	3943,w,c	;volatile
  5513  001600  6E26               	movwf	??_grabLeftIR& (0+255),c
  5514  001602  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5515  001604  0E07               	movlw	7
  5516  001606                     u1475:
  5517  001606  90D8               	bcf	status,0,c
  5518  001608  3626               	rlcf	??_grabLeftIR,f,c
  5519  00160A  3627               	rlcf	??_grabLeftIR+1,f,c
  5520  00160C  2EE8               	decfsz	wreg,f,c
  5521  00160E  D7FB               	goto	u1475
  5522  001610  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5523  001614  90D8               	bcf	status,0,c
  5524  001616  3228               	rrcf	??_grabLeftIR+2,f,c
  5525  001618  5028               	movf	??_grabLeftIR+2,w,c
  5526  00161A  1226               	iorwf	??_grabLeftIR,f,c
  5527  00161C  0E00               	movlw	0
  5528  00161E  1227               	iorwf	??_grabLeftIR+1,f,c
  5529  001620  5026               	movf	??_grabLeftIR,w,c
  5530  001622  2629               	addwf	grabLeftIR@IR_signal,f,c
  5531  001624  5027               	movf	??_grabLeftIR+1,w,c
  5532  001626  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5533                           
  5534                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5535  001628  0E82               	movlw	130
  5536  00162A  6E26               	movwf	??_grabLeftIR& (0+255),c
  5537  00162C  0EDE               	movlw	222
  5538  00162E                     u2967:
  5539  00162E  2EE8               	decfsz	wreg,f,c
  5540  001630  D7FE               	goto	u2967
  5541  001632  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5542  001634  D7FC               	goto	u2967
  5543  001636  2A2B               	incf	grabLeftIR@i,f,c
  5544  001638  D7DE               	goto	l2147
  5545  00163A                     l2157:
  5546                           
  5547                           ;IR_Reading.c: 99: }
  5548                           ;IR_Reading.c: 101: return IR_signal>>2;
  5549  00163A  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5550  00163E  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5551  001642  90D8               	bcf	status,0,c
  5552  001644  3227               	rrcf	??_grabLeftIR+1,f,c
  5553  001646  3226               	rrcf	??_grabLeftIR,f,c
  5554  001648  90D8               	bcf	status,0,c
  5555  00164A  3227               	rrcf	??_grabLeftIR+1,f,c
  5556  00164C  3226               	rrcf	??_grabLeftIR,f,c
  5557  00164E  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5558  001652  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5559  001656  0012               	return	
  5560  001658                     __end_of_grabLeftIR:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf1	equ	0xFE7
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function _SetLine *****************
  5582 ;; Defined at:
  5583 ;;		line 74 in file "LCD.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  line            1    wreg     unsigned char 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  line            1   41[COMRAM] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;		None               void
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5597 ;;      Params:         0       0       0       0
  5598 ;;      Locals:         1       0       0       0
  5599 ;;      Temps:          0       0       0       0
  5600 ;;      Totals:         1       0       0       0
  5601 ;;Total ram usage:        1 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    6
  5604 ;; This function calls:
  5605 ;;		_SendLCD
  5606 ;; This function is called by:
  5607 ;;		_ScanIR
  5608 ;;		_ScanWithRange
  5609 ;;		_main
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text25
  5614  0018A6                     __ptext25:
  5615                           	opt stack 0
  5616  0018A6                     _SetLine:
  5617                           	opt stack 24
  5618                           
  5619                           ;incstack = 0
  5620                           ;SetLine@line stored from wreg
  5621  0018A6  6E2A               	movwf	SetLine@line,c
  5622                           
  5623                           ;LCD.c: 75: if (line==1) {
  5624  0018A8  042A               	decf	SetLine@line,w,c
  5625  0018AA  A4D8               	btfss	status,2,c
  5626  0018AC  D006               	goto	l2165
  5627                           
  5628                           ;LCD.c: 76: SendLCD(0x80,0);
  5629  0018AE  0E00               	movlw	0
  5630  0018B0  6E28               	movwf	SendLCD@type,c
  5631  0018B2  0E80               	movlw	128
  5632  0018B4  EC6B  F00C         	call	_SendLCD
  5633                           
  5634                           ;LCD.c: 77: } else if (line==2) {
  5635  0018B8  D009               	goto	l2169
  5636  0018BA                     l2165:
  5637  0018BA  0E02               	movlw	2
  5638  0018BC  182A               	xorwf	SetLine@line,w,c
  5639  0018BE  A4D8               	btfss	status,2,c
  5640  0018C0  D005               	goto	l2169
  5641                           
  5642                           ;LCD.c: 78: SendLCD(0xC0,0);
  5643  0018C2  0E00               	movlw	0
  5644  0018C4  6E28               	movwf	SendLCD@type,c
  5645  0018C6  0EC0               	movlw	192
  5646  0018C8  EC6B  F00C         	call	_SendLCD
  5647  0018CC                     l2169:
  5648                           
  5649                           ;LCD.c: 79: }
  5650                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5651  0018CC  0E21               	movlw	33
  5652  0018CE                     u2977:
  5653  0018CE  2EE8               	decfsz	wreg,f,c
  5654  0018D0  D7FE               	goto	u2977
  5655  0018D2  F000               	nop	
  5656  0018D4  0012               	return		;funcret
  5657  0018D6                     __end_of_SetLine:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf1	equ	0xFE7
  5669                           fsr1h	equ	0xFE2
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _LCD_String *****************
  5679 ;; Defined at:
  5680 ;;		line 83 in file "LCD.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  string          2   41[COMRAM] PTR unsigned char 
  5683 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5684 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5685 ;;		 -> STR_1(12), 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5697 ;;      Params:         2       0       0       0
  5698 ;;      Locals:         0       0       0       0
  5699 ;;      Temps:          0       0       0       0
  5700 ;;      Totals:         2       0       0       0
  5701 ;;Total ram usage:        2 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    6
  5704 ;; This function calls:
  5705 ;;		_SendLCD
  5706 ;; This function is called by:
  5707 ;;		_ScanIR
  5708 ;;		_ScanWithRange
  5709 ;;		_main
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text26
  5714  001658                     __ptext26:
  5715                           	opt stack 0
  5716  001658                     _LCD_String:
  5717                           	opt stack 23
  5718                           
  5719                           ;LCD.c: 85: while(*string != 0){
  5720                           
  5721                           ;incstack = 0
  5722  001658  D01A               	goto	l2179
  5723  00165A                     l2173:
  5724                           
  5725                           ;LCD.c: 88: SendLCD(*string++,1);
  5726  00165A  0E01               	movlw	1
  5727  00165C  6E28               	movwf	SendLCD@type,c
  5728  00165E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5729  001662  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5730  001666  6AF8               	clrf	tblptru,c
  5731  001668  0E02               	movlw	(high __ramtop+-1)
  5732  00166A  64F7               	cpfsgt	tblptrh,c
  5733  00166C  D003               	bra	u1517
  5734  00166E  0008               	tblrd		*
  5735  001670  50F5               	movf	tablat,w,c
  5736  001672  D005               	bra	u1510
  5737  001674                     u1517:
  5738  001674  CFF6 FFE1          	movff	tblptrl,fsr1l
  5739  001678  CFF7 FFE2          	movff	tblptrh,fsr1h
  5740  00167C  50E7               	movf	indf1,w,c
  5741  00167E                     u1510:
  5742  00167E  EC6B  F00C         	call	_SendLCD
  5743  001682  4A2A               	infsnz	LCD_String@string,f,c
  5744  001684  2A2B               	incf	LCD_String@string+1,f,c
  5745                           
  5746                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5747  001686  0E21               	movlw	33
  5748  001688                     u2987:
  5749  001688  2EE8               	decfsz	wreg,f,c
  5750  00168A  D7FE               	goto	u2987
  5751  00168C  F000               	nop	
  5752  00168E                     l2179:
  5753  00168E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5754  001692  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5755  001696  6AF8               	clrf	tblptru,c
  5756  001698  0E02               	movlw	(high __ramtop+-1)
  5757  00169A  64F7               	cpfsgt	tblptrh,c
  5758  00169C  D003               	bra	u1527
  5759  00169E  0008               	tblrd		*
  5760  0016A0  50F5               	movf	tablat,w,c
  5761  0016A2  D005               	bra	u1520
  5762  0016A4                     u1527:
  5763  0016A4  CFF6 FFE1          	movff	tblptrl,fsr1l
  5764  0016A8  CFF7 FFE2          	movff	tblptrh,fsr1h
  5765  0016AC  50E7               	movf	indf1,w,c
  5766  0016AE                     u1520:
  5767  0016AE  0900               	iorlw	0
  5768  0016B0  B4D8               	btfsc	status,2,c
  5769  0016B2  0012               	return	
  5770  0016B4  D7D2               	goto	l2173
  5771  0016B6                     __end_of_LCD_String:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _SendLCD *****************
  5793 ;; Defined at:
  5794 ;;		line 27 in file "LCD.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  Byte            1    wreg     unsigned char 
  5797 ;;  type            1   39[COMRAM] unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  Byte            1   40[COMRAM] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;		None               void
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5809 ;;      Params:         1       0       0       0
  5810 ;;      Locals:         1       0       0       0
  5811 ;;      Temps:          0       0       0       0
  5812 ;;      Totals:         2       0       0       0
  5813 ;;Total ram usage:        2 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		_LCDout
  5818 ;; This function is called by:
  5819 ;;		_initLCD
  5820 ;;		_SetLine
  5821 ;;		_LCD_String
  5822 ;;		_ScanIR
  5823 ;;		_ScanWithRange
  5824 ;;		_main
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text27
  5829  0018D6                     __ptext27:
  5830                           	opt stack 0
  5831  0018D6                     _SendLCD:
  5832                           	opt stack 24
  5833                           
  5834                           ;incstack = 0
  5835                           ;SendLCD@Byte stored from wreg
  5836  0018D6  6E29               	movwf	SendLCD@Byte,c
  5837                           
  5838                           ;LCD.c: 30: LATAbits.LATA6=type;
  5839  0018D8  B028               	btfsc	SendLCD@type,0,c
  5840  0018DA  D002               	bra	u1305
  5841  0018DC  9C89               	bcf	3977,6,c	;volatile
  5842  0018DE  D001               	bra	u1306
  5843  0018E0                     u1305:
  5844  0018E0  8C89               	bsf	3977,6,c	;volatile
  5845  0018E2                     u1306:
  5846                           
  5847                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5848  0018E2  3829               	swapf	SendLCD@Byte,w,c
  5849  0018E4  0B0F               	andlw	15
  5850  0018E6  0B0F               	andlw	15
  5851  0018E8  ECE8  F008         	call	_LCDout
  5852                           
  5853                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5854  0018EC  0E06               	movlw	6
  5855  0018EE                     u2997:
  5856  0018EE  2EE8               	decfsz	wreg,f,c
  5857  0018F0  D7FE               	goto	u2997
  5858  0018F2  D000               	nop2		;nop
  5859                           
  5860                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5861  0018F4  5029               	movf	SendLCD@Byte,w,c
  5862  0018F6  0B0F               	andlw	15
  5863  0018F8  ECE8  F008         	call	_LCDout
  5864                           
  5865                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5866  0018FC  0E21               	movlw	33
  5867  0018FE                     u3007:
  5868  0018FE  2EE8               	decfsz	wreg,f,c
  5869  001900  D7FE               	goto	u3007
  5870  001902  F000               	nop	
  5871  001904  0012               	return		;funcret
  5872  001906                     __end_of_SendLCD:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           indf1	equ	0xFE7
  5884                           fsr1h	equ	0xFE2
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _LCDout *****************
  5894 ;; Defined at:
  5895 ;;		line 14 in file "LCD.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  number          1    wreg     unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  number          1   38[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5909 ;;      Params:         0       0       0       0
  5910 ;;      Locals:         1       0       0       0
  5911 ;;      Temps:          3       0       0       0
  5912 ;;      Totals:         4       0       0       0
  5913 ;;Total ram usage:        4 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    4
  5916 ;; This function calls:
  5917 ;;		_E_TOG
  5918 ;; This function is called by:
  5919 ;;		_SendLCD
  5920 ;;		_initLCD
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text28
  5925  0011D0                     __ptext28:
  5926                           	opt stack 0
  5927  0011D0                     _LCDout:
  5928                           	opt stack 24
  5929                           
  5930                           ;incstack = 0
  5931                           ;LCDout@number stored from wreg
  5932  0011D0  6E27               	movwf	LCDout@number,c
  5933                           
  5934                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5935  0011D2  5027               	movf	LCDout@number,w,c
  5936  0011D4  6E24               	movwf	??_LCDout& (0+255),c
  5937  0011D6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5938  0011D8  0E07               	movlw	7
  5939  0011DA                     u1195:
  5940  0011DA  90D8               	bcf	status,0,c
  5941  0011DC  3624               	rlcf	??_LCDout,f,c
  5942  0011DE  3625               	rlcf	??_LCDout+1,f,c
  5943  0011E0  2EE8               	decfsz	wreg,f,c
  5944  0011E2  D7FB               	goto	u1195
  5945  0011E4  0E07               	movlw	7
  5946  0011E6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5947  0011E8                     u1205:
  5948  0011E8  3425               	rlcf	??_LCDout+1,w,c
  5949  0011EA  3225               	rrcf	??_LCDout+1,f,c
  5950  0011EC  3224               	rrcf	??_LCDout,f,c
  5951  0011EE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5952  0011F0  D7FB               	goto	u1205
  5953  0011F2  4624               	rlncf	??_LCDout,f,c
  5954  0011F4  508B               	movf	3979,w,c	;volatile
  5955  0011F6  1824               	xorwf	??_LCDout,w,c
  5956  0011F8  0BFD               	andlw	-3
  5957  0011FA  1824               	xorwf	??_LCDout,w,c
  5958  0011FC  6E8B               	movwf	3979,c	;volatile
  5959                           
  5960                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5961  0011FE  5027               	movf	LCDout@number,w,c
  5962  001200  6E24               	movwf	??_LCDout& (0+255),c
  5963  001202  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5964  001204  0E06               	movlw	6
  5965  001206                     u1215:
  5966  001206  90D8               	bcf	status,0,c
  5967  001208  3624               	rlcf	??_LCDout,f,c
  5968  00120A  3625               	rlcf	??_LCDout+1,f,c
  5969  00120C  2EE8               	decfsz	wreg,f,c
  5970  00120E  D7FB               	goto	u1215
  5971  001210  0E07               	movlw	7
  5972  001212  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5973  001214                     u1225:
  5974  001214  3425               	rlcf	??_LCDout+1,w,c
  5975  001216  3225               	rrcf	??_LCDout+1,f,c
  5976  001218  3224               	rrcf	??_LCDout,f,c
  5977  00121A  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5978  00121C  D7FB               	goto	u1225
  5979  00121E  4624               	rlncf	??_LCDout,f,c
  5980  001220  4624               	rlncf	??_LCDout,f,c
  5981  001222  508B               	movf	3979,w,c	;volatile
  5982  001224  1824               	xorwf	??_LCDout,w,c
  5983  001226  0BFB               	andlw	-5
  5984  001228  1824               	xorwf	??_LCDout,w,c
  5985  00122A  6E8B               	movwf	3979,c	;volatile
  5986                           
  5987                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5988  00122C  5027               	movf	LCDout@number,w,c
  5989  00122E  6E24               	movwf	??_LCDout& (0+255),c
  5990  001230  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5991  001232  0E05               	movlw	5
  5992  001234                     u1235:
  5993  001234  90D8               	bcf	status,0,c
  5994  001236  3624               	rlcf	??_LCDout,f,c
  5995  001238  3625               	rlcf	??_LCDout+1,f,c
  5996  00123A  2EE8               	decfsz	wreg,f,c
  5997  00123C  D7FB               	goto	u1235
  5998  00123E  0E07               	movlw	7
  5999  001240  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6000  001242                     u1245:
  6001  001242  3425               	rlcf	??_LCDout+1,w,c
  6002  001244  3225               	rrcf	??_LCDout+1,f,c
  6003  001246  3224               	rrcf	??_LCDout,f,c
  6004  001248  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6005  00124A  D7FB               	goto	u1245
  6006  00124C  508C               	movf	3980,w,c	;volatile
  6007  00124E  1824               	xorwf	??_LCDout,w,c
  6008  001250  0BFE               	andlw	-2
  6009  001252  1824               	xorwf	??_LCDout,w,c
  6010  001254  6E8C               	movwf	3980,c	;volatile
  6011                           
  6012                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6013  001256  5027               	movf	LCDout@number,w,c
  6014  001258  6E24               	movwf	??_LCDout& (0+255),c
  6015  00125A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6016  00125C  3A24               	swapf	??_LCDout,f,c
  6017  00125E  3A25               	swapf	??_LCDout+1,f,c
  6018  001260  0EF0               	movlw	240
  6019  001262  1625               	andwf	??_LCDout+1,f,c
  6020  001264  5024               	movf	??_LCDout,w,c
  6021  001266  0B0F               	andlw	15
  6022  001268  1225               	iorwf	??_LCDout+1,f,c
  6023  00126A  0EF0               	movlw	240
  6024  00126C  1624               	andwf	??_LCDout,f,c
  6025  00126E  0E07               	movlw	7
  6026  001270  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6027  001272                     u1255:
  6028  001272  3425               	rlcf	??_LCDout+1,w,c
  6029  001274  3225               	rrcf	??_LCDout+1,f,c
  6030  001276  3224               	rrcf	??_LCDout,f,c
  6031  001278  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6032  00127A  D7FB               	goto	u1255
  6033  00127C  4624               	rlncf	??_LCDout,f,c
  6034  00127E  508C               	movf	3980,w,c	;volatile
  6035  001280  1824               	xorwf	??_LCDout,w,c
  6036  001282  0BFD               	andlw	-3
  6037  001284  1824               	xorwf	??_LCDout,w,c
  6038  001286  6E8C               	movwf	3980,c	;volatile
  6039                           
  6040                           ;LCD.c: 21: E_TOG();
  6041  001288  ECF5  F00C         	call	_E_TOG	;wreg free
  6042                           
  6043                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6044  00128C  0E03               	movlw	3
  6045  00128E                     u3017:
  6046  00128E  2EE8               	decfsz	wreg,f,c
  6047  001290  D7FE               	goto	u3017
  6048  001292  F000               	nop	
  6049  001294  0012               	return		;funcret
  6050  001296                     __end_of_LCDout:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           intcon	equ	0xFF2
  6059                           postinc0	equ	0xFEE
  6060                           wreg	equ	0xFE8
  6061                           indf1	equ	0xFE7
  6062                           fsr1h	equ	0xFE2
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _E_TOG *****************
  6072 ;; Defined at:
  6073 ;;		line 5 in file "LCD.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;		None               void
  6080 ;; Registers used:
  6081 ;;		wreg
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6087 ;;      Params:         0       0       0       0
  6088 ;;      Locals:         0       0       0       0
  6089 ;;      Temps:          0       0       0       0
  6090 ;;      Totals:         0       0       0       0
  6091 ;;Total ram usage:        0 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    3
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_LCDout
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           	psect	text29
  6102  0019EA                     __ptext29:
  6103                           	opt stack 0
  6104  0019EA                     _E_TOG:
  6105                           	opt stack 24
  6106                           
  6107                           ;LCD.c: 8: LATCbits.LATC0=1;
  6108                           
  6109                           ;incstack = 0
  6110  0019EA  808B               	bsf	3979,0,c	;volatile
  6111                           
  6112                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6113  0019EC  0E03               	movlw	3
  6114  0019EE                     u3027:
  6115  0019EE  2EE8               	decfsz	wreg,f,c
  6116  0019F0  D7FE               	goto	u3027
  6117  0019F2  F000               	nop	
  6118                           
  6119                           ;LCD.c: 10: LATCbits.LATC0=0;
  6120  0019F4  908B               	bcf	3979,0,c	;volatile
  6121  0019F6  0012               	return		;funcret
  6122  0019F8                     __end_of_E_TOG:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           indf1	equ	0xFE7
  6134                           fsr1h	equ	0xFE2
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           postdec2	equ	0xFDD
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143 ;; *************** function _InterruptHandlerLow *****************
  6144 ;; Defined at:
  6145 ;;		line 18 in file "main.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;		None
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6159 ;;      Params:         0       0       0       0
  6160 ;;      Locals:         0       0       0       0
  6161 ;;      Temps:         17       0       0       0
  6162 ;;      Totals:        17       0       0       0
  6163 ;;Total ram usage:       17 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    2
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		Interrupt level 1
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	intcodelo
  6174  000018                     __pintcodelo:
  6175                           	opt stack 0
  6176  000018                     _InterruptHandlerLow:
  6177                           	opt stack 23
  6178                           
  6179                           ;incstack = 0
  6180  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6181  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6182  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6183  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6184  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6185  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6186  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6187  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6188  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6189  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6190  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6191  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6192  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6193  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6194  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6195  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6196  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6197  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6198                           
  6199                           ;main.c: 20: if (PIR1bits.RCIF) {
  6200  00005E  AA9E               	btfss	3998,5,c	;volatile
  6201  000060  D016               	goto	i1l367
  6202                           
  6203                           ;main.c: 21: ReceivedString[i]=RCREG;
  6204  000062  503A               	movf	_i,w,c	;volatile
  6205  000064  0D01               	mullw	1
  6206  000066  0EC6               	movlw	low _ReceivedString
  6207  000068  24F3               	addwf	prodl,w,c
  6208  00006A  6ED9               	movwf	fsr2l,c
  6209  00006C  0E00               	movlw	high _ReceivedString
  6210  00006E  20F4               	addwfc	prodh,w,c
  6211  000070  6EDA               	movwf	fsr2h,c
  6212  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6213                           
  6214                           ;main.c: 22: RFID_Read=1;
  6215  000076  0E01               	movlw	1
  6216  000078  0101               	movlb	1	; () banked
  6217  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6218                           
  6219                           ; BSR set to: 1
  6220                           ;main.c: 23: if (i==15){
  6221  00007C  0E0F               	movlw	15
  6222  00007E  183A               	xorwf	_i,w,c	;volatile
  6223  000080  A4D8               	btfss	status,2,c
  6224  000082  D003               	goto	i1l2587
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;main.c: 24: i=0;
  6228  000084  0E00               	movlw	0
  6229  000086  6E3A               	movwf	_i,c	;volatile
  6230                           
  6231                           ;main.c: 25: }else{
  6232  000088  D001               	goto	i1l2589
  6233  00008A                     i1l2587:
  6234                           
  6235                           ; BSR set to: 1
  6236                           ;main.c: 26: i++;
  6237  00008A  2A3A               	incf	_i,f,c	;volatile
  6238  00008C                     i1l2589:
  6239                           
  6240                           ; BSR set to: 1
  6241                           ;main.c: 27: }
  6242                           ;main.c: 28: PIR1bits.RCIF=0;
  6243  00008C  9A9E               	bcf	3998,5,c	;volatile
  6244  00008E                     i1l367:
  6245  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6246  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6247  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6248  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6249  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6250  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6251  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6252  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6253  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6254  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6255  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6256  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6257  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6258  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6259  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6260  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6261  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6262  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6263  0000D4  0010               	retfie	
  6264  0000D6                     __end_of_InterruptHandlerLow:
  6265                           	opt stack 0
  6266                           pclatu	equ	0xFFB
  6267                           pclath	equ	0xFFA
  6268                           tblptru	equ	0xFF8
  6269                           tblptrh	equ	0xFF7
  6270                           tblptrl	equ	0xFF6
  6271                           tablat	equ	0xFF5
  6272                           prodh	equ	0xFF4
  6273                           prodl	equ	0xFF3
  6274                           intcon	equ	0xFF2
  6275                           postinc0	equ	0xFEE
  6276                           fsr0h	equ	0xFEA
  6277                           fsr0l	equ	0xFE9
  6278                           wreg	equ	0xFE8
  6279                           indf1	equ	0xFE7
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           bsr	equ	0xFE0
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _InterruptHandlerHigh *****************
  6291 ;; Defined at:
  6292 ;;		line 34 in file "main.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;		None
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;		None               void
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6306 ;;      Params:         0       0       0       0
  6307 ;;      Locals:         0       0       0       0
  6308 ;;      Temps:         14       0       0       0
  6309 ;;      Totals:        14       0       0       0
  6310 ;;Total ram usage:       14 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    1
  6313 ;; This function calls:
  6314 ;;		i2_delay_tenth_s
  6315 ;; This function is called by:
  6316 ;;		Interrupt level 2
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	intcode
  6321  000008                     __pintcode:
  6322                           	opt stack 0
  6323  000008                     _InterruptHandlerHigh:
  6324                           	opt stack 23
  6325                           
  6326                           ;incstack = 0
  6327  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6328  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6329  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6330  000012  EFF3  F009         	goto	int_func
  6331                           pclatu	equ	0xFFB
  6332                           pclath	equ	0xFFA
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           indf1	equ	0xFE7
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           bsr	equ	0xFE0
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355                           	psect	intcode_body
  6356  0013E6                     __pintcode_body:
  6357                           	opt stack 23
  6358  0013E6                     int_func:
  6359                           	opt stack 23
  6360  0013E6  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6361  0013EA  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6362  0013EE  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6363  0013F2  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6364  0013F6  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6365  0013FA  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6366  0013FE  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6367  001402  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6368  001406  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6369  00140A  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6370  00140E  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6371  001412  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6372                           
  6373                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6374  001416  A2F2               	btfss	intcon,1,c	;volatile
  6375  001418  D00D               	goto	i2l375
  6376                           
  6377                           ;main.c: 36: if (mode==-1) {
  6378  00141A  283B               	incf	_mode,w,c	;volatile
  6379  00141C  A4D8               	btfss	status,2,c
  6380  00141E  D003               	goto	i2l2597
  6381                           
  6382                           ;main.c: 38: mode=1;
  6383  001420  0E01               	movlw	1
  6384  001422  6E3B               	movwf	_mode,c	;volatile
  6385                           
  6386                           ;main.c: 39: } else if (mode==0) {
  6387  001424  D003               	goto	i2l2601
  6388  001426                     i2l2597:
  6389  001426  503B               	movf	_mode,w,c	;volatile
  6390  001428  A4D8               	btfss	status,2,c
  6391                           
  6392                           ;main.c: 43: mode=-1;
  6393                           
  6394                           ;main.c: 41: } else {
  6395  00142A  683B               	setf	_mode,c	;volatile
  6396  00142C                     i2l2601:
  6397                           
  6398                           ;main.c: 44: }
  6399                           ;main.c: 46: delay_tenth_s(2);
  6400  00142C  0E02               	movlw	2
  6401  00142E  EC1E  F00C         	call	i2_delay_tenth_s
  6402                           
  6403                           ;main.c: 47: INTCONbits.INT0IF=0;
  6404  001432  92F2               	bcf	intcon,1,c	;volatile
  6405  001434                     i2l375:
  6406  001434  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6407  001438  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6408  00143C  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6409  001440  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6410  001444  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6411  001448  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6412  00144C  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6413  001450  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6414  001454  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6415  001458  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6416  00145C  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6417  001460  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6418  001464  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6419  001468  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6420  00146C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6421  00146E  0011               	retfie		f
  6422  001470                     __end_of_InterruptHandlerHigh:
  6423                           	opt stack 0
  6424                           pclatu	equ	0xFFB
  6425                           pclath	equ	0xFFA
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           fsr0h	equ	0xFEA
  6435                           fsr0l	equ	0xFE9
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           bsr	equ	0xFE0
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function i2_delay_tenth_s *****************
  6449 ;; Defined at:
  6450 ;;		line 32 in file "Movement.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  tenth_second    1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6455 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;		None               void
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6465 ;;      Params:         0       0       0       0
  6466 ;;      Locals:         3       0       0       0
  6467 ;;      Temps:          1       0       0       0
  6468 ;;      Totals:         4       0       0       0
  6469 ;;Total ram usage:        4 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_InterruptHandlerHigh
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text32
  6479  00183C                     __ptext32:
  6480                           	opt stack 0
  6481  00183C                     i2_delay_tenth_s:
  6482                           	opt stack 23
  6483                           
  6484                           ;incstack = 0
  6485                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6486  00183C  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6487                           
  6488                           ;Movement.c: 33: unsigned int i=0;
  6489  00183E  0E00               	movlw	0
  6490  001840  6E04               	movwf	i2delay_tenth_s@i+1,c
  6491  001842  0E00               	movlw	0
  6492  001844  6E03               	movwf	i2delay_tenth_s@i,c
  6493                           
  6494                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6495  001846  0E00               	movlw	0
  6496  001848  6E04               	movwf	i2delay_tenth_s@i+1,c
  6497  00184A  0E01               	movlw	1
  6498  00184C  6E03               	movwf	i2delay_tenth_s@i,c
  6499  00184E  D009               	goto	i2l2559
  6500  001850                     i2l2555:
  6501                           
  6502                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6503  001850  0E82               	movlw	130
  6504  001852  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6505  001854  0EDE               	movlw	222
  6506  001856                     i2u303_47:
  6507  001856  2EE8               	decfsz	wreg,f,c
  6508  001858  D7FE               	goto	i2u303_47
  6509  00185A  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6510  00185C  D7FC               	goto	i2u303_47
  6511  00185E  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6512  001860  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6513  001862                     i2l2559:
  6514  001862  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6515  001864  0D02               	mullw	2
  6516  001866  5003               	movf	i2delay_tenth_s@i,w,c
  6517  001868  5CF3               	subwf	prodl,w,c
  6518  00186A  5004               	movf	i2delay_tenth_s@i+1,w,c
  6519  00186C  58F4               	subwfb	prodh,w,c
  6520  00186E  A0D8               	btfss	status,0,c
  6521  001870  0012               	return	
  6522  001872  D7EE               	goto	i2l2555
  6523  001874                     __end_ofi2_delay_tenth_s:
  6524                           	opt stack 0
  6525                           pclatu	equ	0xFFB
  6526                           pclath	equ	0xFFA
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           postinc0	equ	0xFEE
  6535                           fsr0h	equ	0xFEA
  6536                           fsr0l	equ	0xFE9
  6537                           wreg	equ	0xFE8
  6538                           indf1	equ	0xFE7
  6539                           fsr1h	equ	0xFE2
  6540                           fsr1l	equ	0xFE1
  6541                           bsr	equ	0xFE0
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           pclatu	equ	0xFFB
  6549                           pclath	equ	0xFFA
  6550                           tblptru	equ	0xFF8
  6551                           tblptrh	equ	0xFF7
  6552                           tblptrl	equ	0xFF6
  6553                           tablat	equ	0xFF5
  6554                           prodh	equ	0xFF4
  6555                           prodl	equ	0xFF3
  6556                           intcon	equ	0xFF2
  6557                           postinc0	equ	0xFEE
  6558                           fsr0h	equ	0xFEA
  6559                           fsr0l	equ	0xFE9
  6560                           wreg	equ	0xFE8
  6561                           indf1	equ	0xFE7
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           bsr	equ	0xFE0
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572                           	psect	rparam
  6573  0000                     pclatu	equ	0xFFB
  6574                           pclath	equ	0xFFA
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           postinc0	equ	0xFEE
  6583                           fsr0h	equ	0xFEA
  6584                           fsr0l	equ	0xFE9
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           bsr	equ	0xFE0
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597                           	psect	temp
  6598  00003C                     btemp:
  6599                           	opt stack 0
  6600  00003C                     	ds	1
  6601  0000                     int$flags	set	btemp
  6602                           pclatu	equ	0xFFB
  6603                           pclath	equ	0xFFA
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           intcon	equ	0xFF2
  6611                           postinc0	equ	0xFEE
  6612                           fsr0h	equ	0xFEA
  6613                           fsr0l	equ	0xFE9
  6614                           wreg	equ	0xFE8
  6615                           indf1	equ	0xFE7
  6616                           fsr1h	equ	0xFE2
  6617                           fsr1l	equ	0xFE1
  6618                           bsr	equ	0xFE0
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     94     118
    BANK1           256    250     255
    BANK2           239    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   56429
                                             84 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     403
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       71    61     10   21560
                                             13 BANK0     71    61     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF     76      76       9       49.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5E      76       4       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226       5        0.0%
DATA                 0      0     226      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 22:13:49 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F7E  
                                  l65 154E                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A04                                   l222 0A34  
                                 l224 0B20                                   l380 03F8  
                                 l870 16FE                                   l880 1740  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3001 0E12                                  l2131 1584  
                                l3003 0E18                                  l3011 0E7A  
                                l2141 15C8                                  l3013 0E94  
                                l2151 15FE                                  l2135 158C  
                                l2071 16D8                                  l2057 19B4  
                                l3009 0E6E                                  l2147 15F6  
                                l2067 16CC                                  l2091 1722  
                                l3131 0B1C                                  l3123 0A78  
                                l3211 03FE                                  l2173 165A  
                                l2165 18BA                                  l2157 163A  
                                l2069 16D4                                  l3125 0A90  
                                l2079 16F4                                  l2095 1736  
                                l2087 1716                                  l2183 1818  
                                l3143 0B38                                  l3151 0B50  
                                l3303 066E                                  l2169 18CC  
                                l2089 171E                                  l3057 11B8  
                                l2329 1944                                  l3313 06D6  
                                l2179 168E                                  l2187 182A  
                                l3083 0936                                  l3323 0720  
                                l3149 0B4A                                  l2541 108C  
                                l2533 103C                                  l3325 0726  
                                l3317 06E0                                  l3245 04A4  
                                l3335 074C                                  l2529 1034  
                                l3329 0730                                  l3337 0752  
                                l3345 07BA                                  l3249 04D6  
                                l2811 1484                                  l3355 081C  
                                l3291 05FC                                  l2549 10D2  
                                l3365 0862                                  l3357 0822  
                                l3285 05A2                                  l3269 0528  
                                l2911 0BC6                                  l2823 14AA  
                                l3295 064A                                  l2913 0BD8  
                                l2905 0BAA                                  l2825 14B2  
                                l2817 1494                                  l3369 0864  
                                l2923 0C10                                  l2843 14EA  
                                l2835 14D2                                  l2827 14B6  
                                l3299 0658                                  l2933 0C82  
                                l2917 0BE0                                  l2853 0F56  
                                l2861 1512                                  l2935 0CAA  
                                l2839 14DC                                  l2945 0CDA  
                                l2865 152E                                  l2857 14F6  
                                l2971 0D7A                                  l2947 0CE0  
                                l2883 1384                                  l2875 1354  
                                l2965 0D38                                  l2959 0D16  
                                l2879 136C                                  l2969 0D70  
                                l2889 13A4                                  l2995 0DF4  
                                l2979 0D9E                                  l2987 0DC4  
                                l2989 0DD0                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 11E8  
                                u1215 1206                                  u1225 1214  
                                u1305 18E0                                  u1306 18E2  
                                u1235 1234                                  u2204 0F16  
                                u1245 1242                                  u2205 0F12  
                                u1510 167E                                  u2214 0F72  
                                _LATB 000F8A                                  u1255 1272  
                                u3007 18FE                                  u2215 0F6E  
                                u1520 16AE                                  u3017 128E  
                                u2225 0FCC                                  u3027 19EE  
                                u1195 11DA                                  u1517 1674  
                                u1445 1594                                  u1527 16A4  
                                u1475 1606                                  u1755 1940  
                                u1756 1942                                  u1775 1952  
                                u2807 12CE                                  u1776 1954  
                                u2680 06A0                                  u2817 12DC  
                                u2690 06B4                                  u2682 06A2  
                                u2907 1548                                  u2827 12EA  
                                u2692 06B6                                  u2917 181E  
                                u2837 12FC                                  u2927 1124  
                                u2847 130E                                  u2767 0454  
                                u2937 113A                                  u2857 1324  
                                u2777 046C                                  u2947 139E  
                                u2867 1338                                  u2787 12A8  
                                u2957 15BC                                  u2877 134A  
                                u2797 12BE                                  u2967 162E  
                                u2887 096A                                  u2977 18CE  
                                u2897 0982                                  u2987 1688  
                                u2997 18EE                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B6                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1352                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 183C  
                     __end_of_SendLCD 1906                       __end_of_SetLine 18D6  
                  ScanWithRange@F3894 00C2                           ScanIR@F3883 00BE  
                               ?_main 0001                       __end_of___awdiv 14F4  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1708                       __end_of___lwmod 174A  
                               i1l367 008E                                 i2l375 1434  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 19EA                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1352                    ScanWithRange@power 00AA  
                     __end_of_dpowers 030B                       __end_of_isdigit 19BC  
                               main@i 00BD                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0EA2                __size_of_ScanWithRange 0316  
                      __CFG_MCLRE$OFF 000000                       __initialization 1906  
                        __end_of_main 0886                          __end_of_stop 13E6  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 1956                   VerifySignal@hexByte 002C  
                              ??_main 00B4                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2587 008A                                i1l2589 008C  
                              i2l2601 142C                        __CFG_WDTEN$OFF 000000  
                              i2l2555 1850                                i2l2559 1862  
                              i2l2597 1426                 __end_of_delay_tenth_s 183C  
                              _LCDout 11D0                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1874                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 10D6  
                           ??_SetLine 002A                                ___wmul 1956  
                           ??___awdiv 002E                      __end_of_initRFID 19D8  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 197C                  __size_of_grabRightIR 0072  
                              clear_0 1918                      ___awdiv@quotient 0030  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0886                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AD                      __end_of_turnLeft 1804  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1922  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 19F8                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 174A                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002E  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 1468  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BE  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 16B6                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15E6                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 1930                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 18A6                ScanWithRange@RFID_Read 0075  
                             _SendLCD 18D6                               __Hparam 0000  
                             _SetLine 18A6                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1470  
                     __size_of___wmul 0026                               ___lwdiv 16B6  
                             ___lwmod 1708                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1906  
                     ??_ScanWithRange 0077                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 19D8                               __ptext2 19BC  
                             __ptext3 1874                               __ptext4 1296  
                             __ptext5 197C                               __ptext6 174A  
                             __ptext7 1930                               __ptext8 0FDC  
                             __ptext9 0886                             _T0CONbits 000FD5  
                             _initLCD 1296                     __end_of_initTimer 19EA  
                             _dpowers 0301                               _isdigit 199E  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0B9C  
                      __pintcode_body 13E6                  end_of_initialization 1922  
                      ScanWithRange@i 00A6                        ScanWithRange@n 00A4  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 13E6  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 17C6                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B2                        __end_of_LCDout 1296  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 11D0                        _fullSpeedAhead 14F4  
                      _ReceivedString 00C6                        __end_of___wmul 197C  
                         _BAUDCONbits 000FAA                        __end_of_initIR 199E  
              __size_of_delay_tenth_s 0038                   start_initialization 1906  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1470  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 1574  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 15E6  
                        _initMotorPWM 1874                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1962 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1804  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 10D6                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B7  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 19D8  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u303_47 1856                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3897 01FA  
                         _grabRightIR 1574                 ScanWithRange@LeftFlag 00AB  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0B9C  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1788                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007C  
                 __end_of_setMotorPWM 0FDC                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1788                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1658                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1788  
                            __ptext11 17C6                              __ptext20 1956  
                            __ptext12 14F4                              __ptext21 1708  
                            __ptext13 1804                              __ptext22 16B6  
                            __ptext14 10D6                              __ptext23 1574  
                            __ptext15 1352                              __ptext32 183C  
                            __ptext24 15E6                              __ptext16 0EA2  
                            __ptext25 18A6                              __ptext17 1470  
                            __ptext26 1658                              __ptext18 0B9C  
                            __ptext27 18D6                              __ptext19 199E  
                            __ptext28 11D0                              __ptext29 19EA  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 19BC             ScanWithRange@SensorResult 00AE  
                      turnRight@power 006B                         __size_of_main 0536  
                  main@DirectionFound 00BB                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00FA  
                            int$flags 003C                              main@Move 00BC  
                 _InterruptHandlerLow 0018                            _LCD_String 1658  
                            _turnLeft 17C6                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0EA2  
                        _VerifySignal 0FDC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A8                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
