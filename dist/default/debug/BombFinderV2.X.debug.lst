

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 20 13:35:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4331 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	smallconst
    89  000300                     __psmallconst:
    90                           	opt stack 0
    91  000300  00                 	db	0
    92  000301                     _dpowers:
    93                           	opt stack 0
    94  000301  0001               	dw	1
    95  000303  000A               	dw	10
    96  000305  0064               	dw	100
    97  000307  03E8               	dw	1000
    98  000309  2710               	dw	10000
    99  00030B                     __end_of_dpowers:
   100                           	opt stack 0
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISDbits	set	3989
   103  0000                     _TRISCbits	set	3988
   104  0000                     _LATDbits	set	3980
   105  0000                     _LATCbits	set	3979
   106  0000                     _LATEbits	set	3981
   107  0000                     _CAP2BUFL	set	3942
   108  0000                     _CAP2BUFH	set	3943
   109  0000                     _CAP1BUFL	set	3944
   110  0000                     _CAP1BUFH	set	3945
   111  0000                     _TRISEbits	set	3990
   112  0000                     _CAP2CON	set	3938
   113  0000                     _CAP1CON	set	3939
   114  0000                     _TRISAbits	set	3986
   115  0000                     _LATAbits	set	3977
   116  0000                     _LATB	set	3978
   117  0000                     _LATBbits	set	3978
   118  0000                     _TRISBbits	set	3987
   119  0000                     _PTPERH	set	3962
   120  0000                     _PTPERL	set	3963
   121  0000                     _PWMCON1	set	3950
   122  0000                     _PWMCON0	set	3951
   123  0000                     _PTCON1	set	3966
   124  0000                     _PTCON0	set	3967
   125  0000                     _PDC1H	set	3958
   126  0000                     _PDC1L	set	3959
   127  0000                     _PDC0H	set	3960
   128  0000                     _PDC0L	set	3961
   129  0000                     _OSCCONbits	set	4051
   130  0000                     _OSCCON	set	4051
   131  0000                     _PIE1bits	set	3997
   132  0000                     _IPR1bits	set	3999
   133  0000                     _RCONbits	set	4048
   134  0000                     _RCREG	set	4014
   135  0000                     _PIR1bits	set	3998
   136  0000                     _RCSTAbits	set	4011
   137  0000                     _TXSTAbits	set	4012
   138  0000                     _BAUDCONbits	set	4010
   139  0000                     _SPBRGH	set	4016
   140  0000                     _SPBRG	set	4015
   141  0000                     _T5CON	set	4023
   142  0000                     _ANSEL0bits	set	4024
   143  0000                     _TMR0H	set	4055
   144  0000                     _TMR0L	set	4054
   145  0000                     _T0CONbits	set	4053
   146  0000                     _INTCONbits	set	4082
   147  00030B                     STR_6:
   148  00030B  20                 	db	32
   149  00030C  20                 	db	32
   150  00030D  20                 	db	32
   151  00030E  20                 	db	32
   152  00030F  20                 	db	32
   153  000310  20                 	db	32
   154  000311  25                 	db	37
   155  000312  30                 	db	48	;'0'
   156  000313  34                 	db	52	;'4'
   157  000314  64                 	db	100	;'d'
   158  000315  2C                 	db	44
   159  000316  20                 	db	32
   160  000317  25                 	db	37
   161  000318  30                 	db	48	;'0'
   162  000319  34                 	db	52	;'4'
   163  00031A  64                 	db	100	;'d'
   164  00031B  00                 	db	0
   165  00031C                     STR_5:
   166  00031C  20                 	db	32
   167  00031D  20                 	db	32
   168  00031E  20                 	db	32
   169  00031F  20                 	db	32
   170  000320  20                 	db	32
   171  000321  20                 	db	32
   172  000322  49                 	db	73	;'I'
   173  000323  6E                 	db	110	;'n'
   174  000324  65                 	db	101	;'e'
   175  000325  72                 	db	114	;'r'
   176  000326  74                 	db	116	;'t'
   177  000327  20                 	db	32
   178  000328  4D                 	db	77	;'M'
   179  000329  6F                 	db	111	;'o'
   180  00032A  64                 	db	100	;'d'
   181  00032B  65                 	db	101	;'e'
   182  00032C  00                 	db	0
   183  00032D                     STR_1:
   184  00032D  20                 	db	32
   185  00032E  20                 	db	32
   186  00032F  20                 	db	32
   187  000330  20                 	db	32
   188  000331  20                 	db	32
   189  000332  53                 	db	83	;'S'
   190  000333  63                 	db	99	;'c'
   191  000334  61                 	db	97	;'a'
   192  000335  6E                 	db	110	;'n'
   193  000336  49                 	db	73	;'I'
   194  000337  52                 	db	82	;'R'
   195  000338  00                 	db	0
   196  000339                     STR_8:
   197  000339  47                 	db	71	;'G'
   198  00033A  6F                 	db	111	;'o'
   199  00033B  69                 	db	105	;'i'
   200  00033C  6E                 	db	110	;'n'
   201  00033D  67                 	db	103	;'g'
   202  00033E  20                 	db	32
   203  00033F  48                 	db	72	;'H'
   204  000340  6F                 	db	111	;'o'
   205  000341  6D                 	db	109	;'m'
   206  000342  65                 	db	101	;'e'
   207  000343  00                 	db	0
   208  000344                     STR_7:
   209  000344  53                 	db	83	;'S'
   210  000345  65                 	db	101	;'e'
   211  000346  61                 	db	97	;'a'
   212  000347  72                 	db	114	;'r'
   213  000348  63                 	db	99	;'c'
   214  000349  68                 	db	104	;'h'
   215  00034A  69                 	db	105	;'i'
   216  00034B  6E                 	db	110	;'n'
   217  00034C  67                 	db	103	;'g'
   218  00034D  00                 	db	0
   219  0000                     
   220                           ; #config settings
   221  00034E  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  001C4C                     __pcinit:
   225                           	opt stack 0
   226  001C4C                     start_initialization:
   227                           	opt stack 0
   228  001C4C                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Clear objects allocated to BANK1 (23 bytes)
   232  001C4C  EE01  F0E3         	lfsr	0,__pbssBANK1
   233  001C50  0E17               	movlw	23
   234  001C52                     clear_0:
   235  001C52  6AEE               	clrf	postinc0,c
   236  001C54  06E8               	decf	wreg,f,c
   237  001C56  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to BANK2 (150 bytes)
   240  001C58  EE02  F000         	lfsr	0,__pbssBANK2
   241  001C5C  0E96               	movlw	150
   242  001C5E                     clear_1:
   243  001C5E  6AEE               	clrf	postinc0,c
   244  001C60  06E8               	decf	wreg,f,c
   245  001C62  E1FD               	bnz	clear_1
   246                           
   247                           ; Clear objects allocated to BANK0 (8 bytes)
   248  001C64  EE00  F0CB         	lfsr	0,__pbssBANK0
   249  001C68  0E08               	movlw	8
   250  001C6A                     clear_2:
   251  001C6A  6AEE               	clrf	postinc0,c
   252  001C6C  06E8               	decf	wreg,f,c
   253  001C6E  E1FD               	bnz	clear_2
   254                           
   255                           ; Clear objects allocated to COMRAM (2 bytes)
   256  001C70  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   257  001C72  6A32               	clrf	__pbssCOMRAM& (0+255),c
   258  001C74                     end_of_initialization:
   259                           	opt stack 0
   260  001C74                     __end_of__initialization:
   261                           	opt stack 0
   262  001C74  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   263  001C76  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   264  001C78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   265  001C7A  6EF8               	movwf	tblptru,c
   266  001C7C  0100               	movlb	0
   267  001C7E  EFA8  F001         	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssCOMRAM
   273  000032                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000032                     _mode:
   276                           	opt stack 0
   277  000032                     	ds	1
   278  000033                     _i:
   279                           	opt stack 0
   280  000033                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	bssBANK0
   286  0000CB                     __pbssBANK0:
   287                           	opt stack 0
   288  0000CB                     ScanWithRange@F3555:
   289                           	opt stack 0
   290  0000CB                     	ds	4
   291  0000CF                     ScanIR@F3541:
   292                           	opt stack 0
   293  0000CF                     	ds	4
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssBANK1
   299  0001E3                     __pbssBANK1:
   300                           	opt stack 0
   301  0001E3                     main@F3557:
   302                           	opt stack 0
   303  0001E3                     	ds	4
   304  0001E7                     _ReceivedString:
   305                           	opt stack 0
   306  0001E7                     	ds	16
   307  0001F7                     _millis:
   308                           	opt stack 0
   309  0001F7                     	ds	2
   310  0001F9                     _RFID_Read:
   311                           	opt stack 0
   312  0001F9                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317                           	psect	bssBANK2
   318  000200                     __pbssBANK2:
   319                           	opt stack 0
   320  000200                     main@F3552:
   321                           	opt stack 0
   322  000200                     	ds	100
   323  000264                     main@F3554:
   324                           	opt stack 0
   325  000264                     	ds	50
   326                           tblptru	equ	0xFF8
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	cstackBANK1
   331  000100                     __pcstackBANK1:
   332                           	opt stack 0
   333  000100                     main@buf:
   334                           	opt stack 0
   335                           
   336                           ; 40 bytes @ 0x0
   337  000100                     	ds	40
   338  000128                     main@MoveType:
   339                           	opt stack 0
   340                           
   341                           ; 50 bytes @ 0x28
   342  000128                     	ds	50
   343  00015A                     main@MoveTime:
   344                           	opt stack 0
   345                           
   346                           ; 100 bytes @ 0x5A
   347  00015A                     	ds	100
   348  0001BE                     main@Message:
   349                           	opt stack 0
   350                           
   351                           ; 10 bytes @ 0xBE
   352  0001BE                     	ds	10
   353  0001C8                     main@ScanAngle:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0xC8
   357  0001C8                     	ds	1
   358  0001C9                     main@SensorResult:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0xC9
   362  0001C9                     	ds	4
   363  0001CD                     main@MotorPower:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xCD
   367  0001CD                     	ds	1
   368  0001CE                     main@DirectionFound:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0xCE
   372  0001CE                     	ds	1
   373  0001CF                     main@i:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0xCF
   377  0001CF                     	ds	1
   378  0001D0                     main@Move:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0xD0
   382  0001D0                     	ds	1
   383  0001D1                     main@mL:
   384                           	opt stack 0
   385                           
   386                           ; 9 bytes @ 0xD1
   387  0001D1                     	ds	9
   388  0001DA                     main@mR:
   389                           	opt stack 0
   390                           
   391                           ; 9 bytes @ 0xDA
   392  0001DA                     	ds	9
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	cstackBANK0
   398  000060                     __pcstackBANK0:
   399                           	opt stack 0
   400  000060                     ??_initLCD:
   401  000060                     ?___awdiv:
   402                           	opt stack 0
   403  000060                     SetLine@line:
   404                           	opt stack 0
   405  000060                     ___lwdiv@counter:
   406                           	opt stack 0
   407  000060                     grabRightIR@IR_signal:
   408                           	opt stack 0
   409  000060                     grabLeftIR@IR_signal:
   410                           	opt stack 0
   411  000060                     LCD_String@string:
   412                           	opt stack 0
   413  000060                     ___awdiv@dividend:
   414                           	opt stack 0
   415  000060                     memset@p:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419  000060                     	ds	1
   420  000061                     ___lwdiv@quotient:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x1
   424  000061                     	ds	1
   425  000062                     grabRightIR@i:
   426                           	opt stack 0
   427  000062                     grabLeftIR@i:
   428                           	opt stack 0
   429  000062                     VerifySignal@RecievedString:
   430                           	opt stack 0
   431  000062                     ___awdiv@divisor:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2
   435  000062                     	ds	1
   436  000063                     ?___lwmod:
   437                           	opt stack 0
   438  000063                     ___lwmod@dividend:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x3
   442  000063                     	ds	1
   443  000064                     ??_VerifySignal:
   444  000064                     ___awdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x4
   448  000064                     	ds	1
   449  000065                     ___awdiv@sign:
   450                           	opt stack 0
   451  000065                     ___lwmod@divisor:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x5
   455  000065                     	ds	1
   456  000066                     ___awdiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x6
   460  000066                     	ds	1
   461  000067                     ?_sprintf:
   462                           	opt stack 0
   463  000067                     sprintf@sp:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x7
   467  000067                     	ds	1
   468  000068                     setMotorPWM@m:
   469                           	opt stack 0
   470  000068                     VerifySignal@translatedASCII:
   471                           	opt stack 0
   472                           
   473                           ; 12 bytes @ 0x8
   474  000068                     	ds	1
   475  000069                     sprintf@f:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x9
   479  000069                     	ds	1
   480  00006A                     ??_setMotorPWM:
   481                           
   482                           ; 1 bytes @ 0xA
   483  00006A                     	ds	5
   484  00006F                     ??_sprintf:
   485  00006F                     setMotorPWM@PWMduty:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xF
   489  00006F                     	ds	2
   490  000071                     stop@mL:
   491                           	opt stack 0
   492  000071                     fullSpeed@mL:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x11
   496  000071                     	ds	2
   497  000073                     stop@mR:
   498                           	opt stack 0
   499  000073                     fullSpeed@mR:
   500                           	opt stack 0
   501  000073                     sprintf@ap:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x13
   505  000073                     	ds	1
   506  000074                     VerifySignal@xorOutput:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x14
   510  000074                     	ds	1
   511  000075                     fullSpeed@power:
   512                           	opt stack 0
   513  000075                     VerifySignal@ASCIICheckSum:
   514                           	opt stack 0
   515  000075                     sprintf@prec:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x15
   519  000075                     	ds	1
   520  000076                     VerifySignal@i:
   521                           	opt stack 0
   522  000076                     sprintf@val:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x16
   526  000076                     	ds	1
   527  000077                     turnLeft@mL:
   528                           	opt stack 0
   529  000077                     turnRight@mL:
   530                           	opt stack 0
   531  000077                     fullSpeedBack@mL:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x17
   535  000077                     	ds	1
   536  000078                     sprintf@flag:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x18
   540  000078                     	ds	1
   541  000079                     turnLeft@mR:
   542                           	opt stack 0
   543  000079                     turnRight@mR:
   544                           	opt stack 0
   545  000079                     fullSpeedBack@mR:
   546                           	opt stack 0
   547  000079                     sprintf@width:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x19
   551  000079                     	ds	2
   552  00007B                     turnLeft@power:
   553                           	opt stack 0
   554  00007B                     turnRight@power:
   555                           	opt stack 0
   556  00007B                     fullSpeedBack@power:
   557                           	opt stack 0
   558  00007B                     sprintf@c:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1B
   562  00007B                     	ds	1
   563  00007C                     ScanIR@mL:
   564                           	opt stack 0
   565  00007C                     ScanWithRange@mL:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x1C
   569  00007C                     	ds	2
   570  00007E                     ScanIR@mR:
   571                           	opt stack 0
   572  00007E                     ScanWithRange@mR:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x1E
   576  00007E                     	ds	2
   577  000080                     ??_ScanIR:
   578  000080                     ScanWithRange@loops:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x20
   582  000080                     	ds	1
   583  000081                     ScanIR@buf:
   584                           	opt stack 0
   585                           
   586                           ; 40 bytes @ 0x21
   587  000081                     	ds	1
   588  000082                     ScanWithRange@MoveTime:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x22
   592  000082                     	ds	2
   593  000084                     ScanWithRange@Move:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x24
   597  000084                     	ds	2
   598  000086                     ScanWithRange@MoveType:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x26
   602  000086                     	ds	2
   603  000088                     ScanWithRange@RFID_Read:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x28
   607  000088                     	ds	2
   608  00008A                     ScanWithRange@millis:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x2A
   612  00008A                     	ds	2
   613  00008C                     ??_ScanWithRange:
   614                           
   615                           ; 1 bytes @ 0x2C
   616  00008C                     	ds	4
   617  000090                     ScanWithRange@buf:
   618                           	opt stack 0
   619                           
   620                           ; 40 bytes @ 0x30
   621  000090                     	ds	25
   622  0000A9                     ScanIR@DirectionMoveThreshold:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x49
   626  0000A9                     	ds	2
   627  0000AB                     ScanIR@SensorResult:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x4B
   631  0000AB                     	ds	13
   632  0000B8                     ScanWithRange@i:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x58
   636  0000B8                     	ds	2
   637  0000BA                     ScanWithRange@DirectionFoundThreshold:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x5A
   641  0000BA                     	ds	2
   642  0000BC                     ScanWithRange@MotorPower:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x5C
   646  0000BC                     	ds	1
   647  0000BD                     ScanWithRange@MiniLeftFlick:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x5D
   651  0000BD                     	ds	1
   652  0000BE                     ScanWithRange@LeftFlag:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x5E
   656  0000BE                     	ds	2
   657  0000C0                     ScanWithRange@TimeAboveThreshold:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x60
   661  0000C0                     	ds	2
   662  0000C2                     ScanWithRange@SensorResult:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x62
   666  0000C2                     	ds	4
   667  0000C6                     ScanWithRange@LeftFlick:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x66
   671  0000C6                     	ds	1
   672  0000C7                     ScanWithRange@RightFlag:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x67
   676  0000C7                     	ds	2
   677  0000C9                     ??_main:
   678                           
   679                           ; 1 bytes @ 0x69
   680  0000C9                     	ds	2
   681                           tblptru	equ	0xFF8
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           
   685                           	psect	cstackCOMRAM
   686  000001                     __pcstackCOMRAM:
   687                           	opt stack 0
   688  000001                     ??i2_delay_tenth_s:
   689                           
   690                           ; 1 bytes @ 0x0
   691  000001                     	ds	1
   692  000002                     i2delay_tenth_s@tenth_seconds:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x1
   696  000002                     	ds	1
   697  000003                     i2delay_tenth_s@i:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x2
   701  000003                     	ds	2
   702  000005                     ??_InterruptHandlerHigh:
   703                           
   704                           ; 1 bytes @ 0x4
   705  000005                     	ds	18
   706  000017                     ??_InterruptHandlerLow:
   707                           
   708                           ; 1 bytes @ 0x16
   709  000017                     	ds	21
   710  00002C                     ??_isdigit:
   711  00002C                     ??_LCDout:
   712  00002C                     ??_delay_tenth_s:
   713  00002C                     ?_grabRightIR:
   714                           	opt stack 0
   715  00002C                     ?_grabLeftIR:
   716                           	opt stack 0
   717  00002C                     ?___wmul:
   718                           	opt stack 0
   719  00002C                     ?___lwdiv:
   720                           	opt stack 0
   721  00002C                     enableSensor@status:
   722                           	opt stack 0
   723  00002C                     ___wmul@multiplier:
   724                           	opt stack 0
   725  00002C                     ___lwdiv@dividend:
   726                           	opt stack 0
   727  00002C                     memset@p1:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x2B
   731  00002C                     	ds	1
   732  00002D                     enableSensor@sensor:
   733                           	opt stack 0
   734  00002D                     delay_tenth_s@tenth_seconds:
   735                           	opt stack 0
   736  00002D                     _isdigit$1781:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2C
   740  00002D                     	ds	1
   741  00002E                     ??_grabRightIR:
   742  00002E                     ??_grabLeftIR:
   743  00002E                     isdigit@c:
   744                           	opt stack 0
   745  00002E                     delay_tenth_s@i:
   746                           	opt stack 0
   747  00002E                     ___wmul@multiplicand:
   748                           	opt stack 0
   749  00002E                     ___lwdiv@divisor:
   750                           	opt stack 0
   751  00002E                     memset@c:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x2D
   755  00002E                     	ds	1
   756  00002F                     LCDout@number:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x2E
   760  00002F                     	ds	1
   761  000030                     SendLCD@type:
   762                           	opt stack 0
   763  000030                     ___lwmod@counter:
   764                           	opt stack 0
   765  000030                     ___wmul@product:
   766                           	opt stack 0
   767  000030                     memset@n:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x2F
   771  000030                     	ds	1
   772  000031                     SendLCD@Byte:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x30
   776  000031                     	ds	1
   777  000032                     tblptru	equ	0xFF8
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           
   781                           ; 1 bytes @ 0x31
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 55 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  MoveTime      100   90[BANK1 ] int [50]
   792 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   793 ;;  buf            40    0[BANK1 ] unsigned char [40]
   794 ;;  Message        10  190[BANK1 ] unsigned char [10]
   795 ;;  mR              9  218[BANK1 ] struct DC_motor
   796 ;;  mL              9  209[BANK1 ] struct DC_motor
   797 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   798 ;;  Move            1  208[BANK1 ] char 
   799 ;;  i               1  207[BANK1 ] unsigned char 
   800 ;;  DirectionFou    1  206[BANK1 ] char 
   801 ;;  MotorPower      1  205[BANK1 ] const unsigned char 
   802 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   812 ;;      Params:         0       0       0       0
   813 ;;      Locals:         0       0     227       0
   814 ;;      Temps:          0       2       0       0
   815 ;;      Totals:         0       2     227       0
   816 ;;Total ram usage:      229 bytes
   817 ;; Hardware stack levels required when called:    8
   818 ;; This function calls:
   819 ;;		_LCD_String
   820 ;;		_ScanIR
   821 ;;		_ScanWithRange
   822 ;;		_SendLCD
   823 ;;		_SetLine
   824 ;;		_VerifySignal
   825 ;;		_delay_tenth_s
   826 ;;		_enableSensor
   827 ;;		_fullSpeed
   828 ;;		_fullSpeedBack
   829 ;;		_grabLeftIR
   830 ;;		_grabRightIR
   831 ;;		_initIR
   832 ;;		_initLCD
   833 ;;		_initMotorPWM
   834 ;;		_initRFID
   835 ;;		_initTimer
   836 ;;		_sprintf
   837 ;;		_stop
   838 ;;		_turnLeft
   839 ;;		_turnRight
   840 ;; This function is called by:
   841 ;;		Startup code after reset
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text0
   846  000350                     __ptext0:
   847                           	opt stack 0
   848  000350                     _main:
   849                           	opt stack 23
   850                           
   851                           ;main.c: 58: unsigned char Message[10];
   852                           ;main.c: 59: unsigned char i=0;
   853                           
   854                           ;incstack = 0
   855  000350  0E00               	movlw	0
   856  000352  0101               	movlb	1	; () banked
   857  000354  6FCF               	movwf	main@i& (0+255),b
   858                           
   859                           ;main.c: 60: signed char DirectionFound=0;
   860  000356  0E00               	movlw	0
   861  000358  6FCE               	movwf	main@DirectionFound& (0+255),b
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 61: signed int MoveTime[50] = { 0 };
   865  00035A  EE22  F000         	lfsr	2,main@F3552
   866  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   867  000362  0E63               	movlw	99
   868  000364                     u3241:
   869  000364  CFDB FFE3          	movff	plusw2,plusw1
   870  000368  06E8               	decf	wreg,f,c
   871  00036A  E2FC               	bc	u3241
   872                           
   873                           ; BSR set to: 1
   874                           ;main.c: 65: unsigned char MoveType[50] = { 0 };
   875  00036C  EE22  F064         	lfsr	2,main@F3554
   876  000370  EE11  F028         	lfsr	1,main@MoveType
   877  000374  0E31               	movlw	49
   878  000376                     u3251:
   879  000376  CFDB FFE3          	movff	plusw2,plusw1
   880  00037A  06E8               	decf	wreg,f,c
   881  00037C  E2FC               	bc	u3251
   882                           
   883                           ;main.c: 68: signed char Move=0;
   884  00037E  0E00               	movlw	0
   885  000380  6FD0               	movwf	main@Move& (0+255),b
   886                           
   887                           ; BSR set to: 1
   888                           ;main.c: 69: unsigned int SensorResult[2]={0,0};
   889  000382  C1E3  F1C9         	movff	main@F3557,main@SensorResult
   890  000386  C1E4  F1CA         	movff	main@F3557+1,main@SensorResult+1
   891  00038A  C1E5  F1CB         	movff	main@F3557+2,main@SensorResult+2
   892  00038E  C1E6  F1CC         	movff	main@F3557+3,main@SensorResult+3
   893                           
   894                           ;main.c: 70: char buf[40];
   895                           ;main.c: 72: unsigned char ScanAngle=60;
   896  000392  0E3C               	movlw	60
   897  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   898                           
   899                           ;main.c: 79: const unsigned char MotorPower=40;
   900  000396  0E28               	movlw	40
   901  000398  6FCD               	movwf	main@MotorPower& (0+255),b
   902                           
   903                           ; BSR set to: 1
   904                           ;main.c: 83: INTCONbits.GIEH=1;
   905  00039A  8EF2               	bsf	intcon,7,c	;volatile
   906                           
   907                           ; BSR set to: 1
   908                           ;main.c: 84: INTCONbits.GIEL=1;
   909  00039C  8CF2               	bsf	intcon,6,c	;volatile
   910                           
   911                           ; BSR set to: 1
   912                           ;main.c: 85: INTCONbits.PEIE=1;
   913  00039E  8CF2               	bsf	intcon,6,c	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;main.c: 86: RCONbits.IPEN=1;
   917  0003A0  8ED0               	bsf	4048,7,c	;volatile
   918                           
   919                           ; BSR set to: 1
   920                           ;main.c: 89: IPR1bits.RCIP=0;
   921  0003A2  9A9F               	bcf	3999,5,c	;volatile
   922                           
   923                           ; BSR set to: 1
   924                           ;main.c: 90: PIE1bits.RCIE=1;
   925  0003A4  8A9D               	bsf	3997,5,c	;volatile
   926                           
   927                           ; BSR set to: 1
   928                           ;main.c: 93: TRISCbits.RC3=1;
   929  0003A6  8694               	bsf	3988,3,c	;volatile
   930                           
   931                           ; BSR set to: 1
   932                           ;main.c: 94: INTCONbits.INT0IE=1;
   933  0003A8  88F2               	bsf	intcon,4,c	;volatile
   934                           
   935                           ; BSR set to: 1
   936                           ;main.c: 97: PIR1bits.RC1IF=0;
   937  0003AA  9A9E               	bcf	3998,5,c	;volatile
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 98: INTCONbits.INT0IF=0;
   941  0003AC  92F2               	bcf	intcon,1,c	;volatile
   942                           
   943                           ;main.c: 101: struct DC_motor mL, mR;
   944                           ;main.c: 102: mL.power=0;
   945  0003AE  0E00               	movlw	0
   946  0003B0  6FD1               	movwf	main@mL& (0+255),b
   947                           
   948                           ;main.c: 103: mL.direction=1;
   949  0003B2  0E01               	movlw	1
   950  0003B4  6FD2               	movwf	(main@mL+1)& (0+255),b
   951                           
   952                           ; BSR set to: 1
   953                           ;main.c: 104: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   954  0003B6  0E79               	movlw	121
   955  0003B8  6FD3               	movwf	(main@mL+2)& (0+255),b
   956  0003BA  0E0F               	movlw	15
   957  0003BC  6FD4               	movwf	(main@mL+3)& (0+255),b
   958                           
   959                           ; BSR set to: 1
   960                           ;main.c: 105: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   961  0003BE  0E78               	movlw	120
   962  0003C0  6FD5               	movwf	(main@mL+4)& (0+255),b
   963  0003C2  0E0F               	movlw	15
   964  0003C4  6FD6               	movwf	(main@mL+5)& (0+255),b
   965                           
   966                           ;main.c: 106: mL.dir_pin=0;
   967  0003C6  0E00               	movlw	0
   968  0003C8  6FD7               	movwf	(main@mL+6)& (0+255),b
   969                           
   970                           ;main.c: 107: mL.PWMperiod=199;
   971  0003CA  0E00               	movlw	0
   972  0003CC  6FD9               	movwf	(main@mL+8)& (0+255),b
   973  0003CE  0EC7               	movlw	199
   974  0003D0  6FD8               	movwf	(main@mL+7)& (0+255),b
   975                           
   976                           ;main.c: 109: mR.power=0;
   977  0003D2  0E00               	movlw	0
   978  0003D4  6FDA               	movwf	main@mR& (0+255),b
   979                           
   980                           ;main.c: 110: mR.direction=1;
   981  0003D6  0E01               	movlw	1
   982  0003D8  6FDB               	movwf	(main@mR+1)& (0+255),b
   983                           
   984                           ; BSR set to: 1
   985                           ;main.c: 111: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   986  0003DA  0E77               	movlw	119
   987  0003DC  6FDC               	movwf	(main@mR+2)& (0+255),b
   988  0003DE  0E0F               	movlw	15
   989  0003E0  6FDD               	movwf	(main@mR+3)& (0+255),b
   990                           
   991                           ; BSR set to: 1
   992                           ;main.c: 112: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   993  0003E2  0E76               	movlw	118
   994  0003E4  6FDE               	movwf	(main@mR+4)& (0+255),b
   995  0003E6  0E0F               	movlw	15
   996  0003E8  6FDF               	movwf	(main@mR+5)& (0+255),b
   997                           
   998                           ;main.c: 113: mR.dir_pin=2;
   999  0003EA  0E02               	movlw	2
  1000  0003EC  6FE0               	movwf	(main@mR+6)& (0+255),b
  1001                           
  1002                           ;main.c: 114: mR.PWMperiod=199;
  1003  0003EE  0E00               	movlw	0
  1004  0003F0  6FE2               	movwf	(main@mR+8)& (0+255),b
  1005  0003F2  0EC7               	movlw	199
  1006  0003F4  6FE1               	movwf	(main@mR+7)& (0+255),b
  1007                           
  1008                           ;main.c: 116: OSCCON = 0b1110010;
  1009  0003F6  0E72               	movlw	114
  1010  0003F8  6ED3               	movwf	4051,c	;volatile
  1011  0003FA                     
  1012                           ; BSR set to: 1
  1013  0003FA  B4D3               	btfsc	4051,2,c	;volatile
  1014  0003FC  D300               	goto	l3899
  1015  0003FE  D7FD               	goto	l401
  1016  000400                     
  1017                           ;main.c: 128: stop(&mL, &mR);
  1018  000400  0ED1               	movlw	low main@mL
  1019  000402  0100               	movlb	0	; () banked
  1020  000404  6F71               	movwf	stop@mL& (0+255),b
  1021  000406  0E01               	movlw	high main@mL
  1022  000408  6F72               	movwf	(stop@mL+1)& (0+255),b
  1023  00040A  0EDA               	movlw	low main@mR
  1024  00040C  6F73               	movwf	stop@mR& (0+255),b
  1025  00040E  0E01               	movlw	high main@mR
  1026  000410  6F74               	movwf	(stop@mR+1)& (0+255),b
  1027  000412  ECBB  F00B         	call	_stop	;wreg free
  1028                           
  1029                           ;main.c: 131: RFID_Read=0;
  1030  000416  0E00               	movlw	0
  1031  000418  0101               	movlb	1	; () banked
  1032  00041A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  1033                           
  1034                           ; BSR set to: 1
  1035                           ;main.c: 132: Move=0;
  1036  00041C  0E00               	movlw	0
  1037  00041E  6FD0               	movwf	main@Move& (0+255),b
  1038                           
  1039                           ; BSR set to: 1
  1040                           ;main.c: 135: SensorResult[0]=grabLeftIR();
  1041  000420  ECC0  F00C         	call	_grabLeftIR	;wreg free
  1042  000424  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1043  000428  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1044                           
  1045                           ;main.c: 136: SensorResult[1]=grabRightIR();
  1046  00042C  EC85  F00C         	call	_grabRightIR	;wreg free
  1047  000430  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1048  000434  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1049                           
  1050                           ;main.c: 140: CAP1BUFH=0;
  1051  000438  0E00               	movlw	0
  1052  00043A  6E69               	movwf	3945,c	;volatile
  1053                           
  1054                           ;main.c: 141: CAP1BUFL=0;
  1055  00043C  0E00               	movlw	0
  1056  00043E  6E68               	movwf	3944,c	;volatile
  1057                           
  1058                           ;main.c: 142: CAP2BUFH=0;
  1059  000440  0E00               	movlw	0
  1060  000442  6E67               	movwf	3943,c	;volatile
  1061                           
  1062                           ;main.c: 143: CAP2BUFL=0;
  1063  000444  0E00               	movlw	0
  1064  000446  6E66               	movwf	3942,c	;volatile
  1065                           
  1066                           ;main.c: 146: SendLCD(0b00000001,0);
  1067  000448  0E00               	movlw	0
  1068  00044A  6E30               	movwf	SendLCD@type,c
  1069  00044C  0E01               	movlw	1
  1070  00044E  EC5C  F00E         	call	_SendLCD
  1071                           
  1072                           ;main.c: 147: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1073  000452  0E21               	movlw	33
  1074  000454                     u3527:
  1075  000454  2EE8               	decfsz	wreg,f,c
  1076  000456  D7FE               	bra	u3527
  1077  000458  F000               	nop	
  1078                           
  1079                           ;main.c: 148: SendLCD(0b00000010,0);
  1080  00045A  0E00               	movlw	0
  1081  00045C  6E30               	movwf	SendLCD@type,c
  1082  00045E  0E02               	movlw	2
  1083  000460  EC5C  F00E         	call	_SendLCD
  1084                           
  1085                           ;main.c: 149: _delay((unsigned long)((2)*(8000000/4000.0)));
  1086  000464  0E06               	movlw	6
  1087  000466  0100               	movlb	0	; () banked
  1088  000468  6FC9               	movwf	??_main& (0+255),b
  1089  00046A  0E30               	movlw	48
  1090  00046C                     u3537:
  1091  00046C  2EE8               	decfsz	wreg,f,c
  1092  00046E  D7FE               	bra	u3537
  1093  000470  2FC9               	decfsz	??_main& (0+255),f,b
  1094  000472  D7FC               	bra	u3537
  1095  000474  F000               	nop	
  1096                           
  1097                           ;main.c: 150: SetLine(1);
  1098  000476  0E01               	movlw	1
  1099  000478  EC41  F00E         	call	_SetLine
  1100                           
  1101                           ;main.c: 151: if (Message[0]==0) {
  1102  00047C  0101               	movlb	1	; () banked
  1103  00047E  51BE               	movf	main@Message& (0+255),w,b
  1104  000480  A4D8               	btfss	status,2,c
  1105  000482  D008               	goto	l406
  1106                           
  1107                           ; BSR set to: 1
  1108                           ;main.c: 152: LCD_String("      Inert Mode");
  1109  000484  0E1C               	movlw	low STR_5
  1110  000486  0100               	movlb	0	; () banked
  1111  000488  6F60               	movwf	LCD_String@string& (0+255),b
  1112  00048A  0E03               	movlw	high STR_5
  1113  00048C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1114  00048E  ECFB  F00C         	call	_LCD_String	;wreg free
  1115                           
  1116                           ;main.c: 153: } else {
  1117  000492  D007               	goto	l407
  1118  000494                     l406:
  1119                           
  1120                           ;main.c: 154: LCD_String(Message);
  1121  000494  0EBE               	movlw	low main@Message
  1122  000496  0100               	movlb	0	; () banked
  1123  000498  6F60               	movwf	LCD_String@string& (0+255),b
  1124  00049A  0E01               	movlw	high main@Message
  1125  00049C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1126  00049E  ECFB  F00C         	call	_LCD_String	;wreg free
  1127  0004A2                     l407:
  1128                           
  1129                           ;main.c: 155: }
  1130                           ;main.c: 156: SetLine(2);
  1131  0004A2  0E02               	movlw	2
  1132  0004A4  EC41  F00E         	call	_SetLine
  1133                           
  1134                           ;main.c: 157: if (RFID_Read) {
  1135  0004A8  0101               	movlb	1	; () banked
  1136  0004AA  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1137  0004AC  B4D8               	btfsc	status,2,c
  1138  0004AE  D008               	goto	l408
  1139                           
  1140                           ; BSR set to: 1
  1141                           ;main.c: 158: LCD_String(Message);
  1142  0004B0  0EBE               	movlw	low main@Message
  1143  0004B2  0100               	movlb	0	; () banked
  1144  0004B4  6F60               	movwf	LCD_String@string& (0+255),b
  1145  0004B6  0E01               	movlw	high main@Message
  1146  0004B8  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1147  0004BA  ECFB  F00C         	call	_LCD_String	;wreg free
  1148                           
  1149                           ;main.c: 159: } else {
  1150  0004BE  D29F               	goto	l3899
  1151  0004C0                     l408:
  1152                           
  1153                           ;main.c: 160: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1154  0004C0  0E00               	movlw	low main@buf
  1155  0004C2  0100               	movlb	0	; () banked
  1156  0004C4  6F67               	movwf	sprintf@sp& (0+255),b
  1157  0004C6  0E01               	movlw	high main@buf
  1158  0004C8  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1159  0004CA  0E0B               	movlw	low STR_6
  1160  0004CC  6F69               	movwf	sprintf@f& (0+255),b
  1161  0004CE  0E03               	movlw	high STR_6
  1162  0004D0  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1163  0004D2  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1164  0004D6  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1165  0004DA  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1166  0004DE  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1167  0004E2  EC8F  F007         	call	_sprintf	;wreg free
  1168                           
  1169                           ;main.c: 161: LCD_String(buf);
  1170  0004E6  0E00               	movlw	low main@buf
  1171  0004E8  0100               	movlb	0	; () banked
  1172  0004EA  6F60               	movwf	LCD_String@string& (0+255),b
  1173  0004EC  0E01               	movlw	high main@buf
  1174  0004EE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1175  0004F0  ECFB  F00C         	call	_LCD_String	;wreg free
  1176                           
  1177                           ;main.c: 162: }
  1178                           ;main.c: 164: break;
  1179  0004F4  D284               	goto	l3899
  1180  0004F6                     
  1181                           ;main.c: 168: initMotorPWM();
  1182  0004F6  ECD1  F00D         	call	_initMotorPWM	;wreg free
  1183                           
  1184                           ;main.c: 169: initTimer();
  1185  0004FA  EC74  F00E         	call	_initTimer	;wreg free
  1186                           
  1187                           ;main.c: 170: initRFID();
  1188  0004FE  ECDA  F000         	call	_initRFID	;wreg free
  1189                           
  1190                           ;main.c: 171: initLCD();
  1191  000502  ECFA  F00A         	call	_initLCD	;wreg free
  1192                           
  1193                           ;main.c: 172: initIR();
  1194  000506  ECBA  F000         	call	_initIR	;wreg free
  1195                           
  1196                           ;main.c: 174: enableSensor(0, 1);
  1197  00050A  0E01               	movlw	1
  1198  00050C  6E2C               	movwf	enableSensor@status,c
  1199  00050E  0E00               	movlw	0
  1200  000510  EC94  F000         	call	_enableSensor
  1201                           
  1202                           ;main.c: 175: enableSensor(1, 1);
  1203  000514  0E01               	movlw	1
  1204  000516  6E2C               	movwf	enableSensor@status,c
  1205  000518  0E01               	movlw	1
  1206  00051A  EC94  F000         	call	_enableSensor
  1207                           
  1208                           ;main.c: 178: fullSpeed(&mL, &mR, 100);
  1209  00051E  0ED1               	movlw	low main@mL
  1210  000520  0100               	movlb	0	; () banked
  1211  000522  6F71               	movwf	fullSpeed@mL& (0+255),b
  1212  000524  0E01               	movlw	high main@mL
  1213  000526  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1214  000528  0EDA               	movlw	low main@mR
  1215  00052A  6F73               	movwf	fullSpeed@mR& (0+255),b
  1216  00052C  0E01               	movlw	high main@mR
  1217  00052E  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1218  000530  0E64               	movlw	100
  1219  000532  6F75               	movwf	fullSpeed@power& (0+255),b
  1220  000534  EC47  F00C         	call	_fullSpeed	;wreg free
  1221                           
  1222                           ;main.c: 179: delay_tenth_s(1);
  1223  000538  0E01               	movlw	1
  1224  00053A  ECEE  F00D         	call	_delay_tenth_s
  1225  00053E  D25E               	goto	l3897
  1226  000540                     
  1227                           ;main.c: 187: SetLine(1);
  1228  000540  0E01               	movlw	1
  1229  000542  EC41  F00E         	call	_SetLine
  1230                           
  1231                           ;main.c: 188: LCD_String("Searching");
  1232  000546  0E44               	movlw	low STR_7
  1233  000548  0100               	movlb	0	; () banked
  1234  00054A  6F60               	movwf	LCD_String@string& (0+255),b
  1235  00054C  0E03               	movlw	high STR_7
  1236  00054E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1237  000550  ECFB  F00C         	call	_LCD_String	;wreg free
  1238                           
  1239                           ;main.c: 190: if (DirectionFound==-1) {
  1240  000554  0101               	movlb	1	; () banked
  1241  000556  29CE               	incf	main@DirectionFound& (0+255),w,b
  1242  000558  A4D8               	btfss	status,2,c
  1243  00055A  D034               	goto	l413
  1244                           
  1245                           ; BSR set to: 1
  1246                           ;main.c: 195: MoveType[Move]=0;
  1247  00055C  51D0               	movf	main@Move& (0+255),w,b
  1248  00055E  0D01               	mullw	1
  1249  000560  0E28               	movlw	low main@MoveType
  1250  000562  24F3               	addwf	prodl,w,c
  1251  000564  6ED9               	movwf	fsr2l,c
  1252  000566  0E01               	movlw	high main@MoveType
  1253  000568  20F4               	addwfc	prodh,w,c
  1254  00056A  6EDA               	movwf	fsr2h,c
  1255  00056C  0E00               	movlw	0
  1256  00056E  6EDF               	movwf	indf2,c
  1257                           
  1258                           ;main.c: 196: MoveTime[Move]=6;
  1259  000570  51D0               	movf	main@Move& (0+255),w,b
  1260  000572  0D02               	mullw	2
  1261  000574  0E5A               	movlw	low main@MoveTime
  1262  000576  24F3               	addwf	prodl,w,c
  1263  000578  6ED9               	movwf	fsr2l,c
  1264  00057A  0E01               	movlw	high main@MoveTime
  1265  00057C  20F4               	addwfc	prodh,w,c
  1266  00057E  6EDA               	movwf	fsr2h,c
  1267  000580  0E06               	movlw	6
  1268  000582  6EDE               	movwf	postinc2,c
  1269  000584  0E00               	movlw	0
  1270  000586  6EDD               	movwf	postdec2,c
  1271                           
  1272                           ; BSR set to: 1
  1273                           ;main.c: 197: Move++;
  1274  000588  2BD0               	incf	main@Move& (0+255),f,b
  1275                           
  1276                           ; BSR set to: 1
  1277                           ;main.c: 198: fullSpeed(&mL, &mR, 100);
  1278  00058A  0ED1               	movlw	low main@mL
  1279  00058C  0100               	movlb	0	; () banked
  1280  00058E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1281  000590  0E01               	movlw	high main@mL
  1282  000592  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1283  000594  0EDA               	movlw	low main@mR
  1284  000596  6F73               	movwf	fullSpeed@mR& (0+255),b
  1285  000598  0E01               	movlw	high main@mR
  1286  00059A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1287  00059C  0E64               	movlw	100
  1288  00059E  6F75               	movwf	fullSpeed@power& (0+255),b
  1289  0005A0  EC47  F00C         	call	_fullSpeed	;wreg free
  1290                           
  1291                           ;main.c: 199: delay_tenth_s(6);
  1292  0005A4  0E06               	movlw	6
  1293  0005A6  ECEE  F00D         	call	_delay_tenth_s
  1294                           
  1295                           ;main.c: 200: stop(&mL,&mR);
  1296  0005AA  0ED1               	movlw	low main@mL
  1297  0005AC  0100               	movlb	0	; () banked
  1298  0005AE  6F71               	movwf	stop@mL& (0+255),b
  1299  0005B0  0E01               	movlw	high main@mL
  1300  0005B2  6F72               	movwf	(stop@mL+1)& (0+255),b
  1301  0005B4  0EDA               	movlw	low main@mR
  1302  0005B6  6F73               	movwf	stop@mR& (0+255),b
  1303  0005B8  0E01               	movlw	high main@mR
  1304  0005BA  6F74               	movwf	(stop@mR+1)& (0+255),b
  1305  0005BC  ECBB  F00B         	call	_stop	;wreg free
  1306                           
  1307                           ;main.c: 201: DirectionFound=0;
  1308  0005C0  0E00               	movlw	0
  1309  0005C2  D034               	goto	L2
  1310  0005C4                     l413:
  1311                           
  1312                           ; BSR set to: 1
  1313                           
  1314                           ; BSR set to: 1
  1315  0005C4  51CE               	movf	main@DirectionFound& (0+255),w,b
  1316  0005C6  A4D8               	btfss	status,2,c
  1317  0005C8  D023               	goto	l415
  1318                           
  1319                           ; BSR set to: 1
  1320                           ;main.c: 204: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1321                           ;main.c: 205: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1322  0005CA  0ED1               	movlw	low main@mL
  1323  0005CC  0100               	movlb	0	; () banked
  1324  0005CE  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1325  0005D0  0E01               	movlw	high main@mL
  1326  0005D2  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1327  0005D4  0EDA               	movlw	low main@mR
  1328  0005D6  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1329  0005D8  0E01               	movlw	high main@mR
  1330  0005DA  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1331  0005DC  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1332  0005E0  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1333  0005E2  0E5A               	movlw	low main@MoveTime
  1334  0005E4  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1335  0005E6  0E01               	movlw	high main@MoveTime
  1336  0005E8  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1337  0005EA  0ED0               	movlw	low main@Move
  1338  0005EC  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1339  0005EE  0E01               	movlw	high main@Move
  1340  0005F0  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1341  0005F2  0E28               	movlw	low main@MoveType
  1342  0005F4  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1343  0005F6  0E01               	movlw	high main@MoveType
  1344  0005F8  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1345  0005FA  0EF9               	movlw	low _RFID_Read
  1346  0005FC  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1347  0005FE  0E01               	movlw	high _RFID_Read
  1348  000600  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1349  000602  0EF7               	movlw	low _millis
  1350  000604  6F8A               	movwf	ScanWithRange@millis& (0+255),b
  1351  000606  0E01               	movlw	high _millis
  1352  000608  6F8B               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1353  00060A  EC10  F005         	call	_ScanWithRange	;wreg free
  1354  00060E  D00E               	goto	L2
  1355  000610                     l415:
  1356                           
  1357                           ; BSR set to: 1
  1358                           
  1359                           ; BSR set to: 1
  1360  000610  05CE               	decf	main@DirectionFound& (0+255),w,b
  1361  000612  A4D8               	btfss	status,2,c
  1362  000614  D00E               	goto	l417
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;main.c: 208: DirectionFound=ScanIR(&mL, &mR);
  1366  000616  0ED1               	movlw	low main@mL
  1367  000618  0100               	movlb	0	; () banked
  1368  00061A  6F7C               	movwf	ScanIR@mL& (0+255),b
  1369  00061C  0E01               	movlw	high main@mL
  1370  00061E  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1371  000620  0EDA               	movlw	low main@mR
  1372  000622  6F7E               	movwf	ScanIR@mR& (0+255),b
  1373  000624  0E01               	movlw	high main@mR
  1374  000626  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1375  000628  EC1D  F00A         	call	_ScanIR	;wreg free
  1376  00062C                     L2:
  1377  00062C  0101               	movlb	1	; () banked
  1378  00062E  6FCE               	movwf	main@DirectionFound& (0+255),b
  1379                           
  1380                           ;main.c: 209: } else if (DirectionFound==2) {
  1381  000630  D1E6               	goto	l3899
  1382  000632                     l417:
  1383                           
  1384                           ; BSR set to: 1
  1385                           
  1386                           ; BSR set to: 1
  1387  000632  0E02               	movlw	2
  1388  000634  19CE               	xorwf	main@DirectionFound& (0+255),w,b
  1389  000636  A4D8               	btfss	status,2,c
  1390  000638  D1E2               	goto	l3899
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main.c: 211: mode=2;
  1394  00063A  0E02               	movlw	2
  1395  00063C  6E32               	movwf	_mode,c	;volatile
  1396                           
  1397                           ; BSR set to: 1
  1398                           ;main.c: 212: MoveType[Move]=1;
  1399  00063E  51D0               	movf	main@Move& (0+255),w,b
  1400  000640  0D01               	mullw	1
  1401  000642  0E28               	movlw	low main@MoveType
  1402  000644  24F3               	addwf	prodl,w,c
  1403  000646  6ED9               	movwf	fsr2l,c
  1404  000648  0E01               	movlw	high main@MoveType
  1405  00064A  20F4               	addwfc	prodh,w,c
  1406  00064C  6EDA               	movwf	fsr2h,c
  1407  00064E  0E01               	movlw	1
  1408  000650  6EDF               	movwf	indf2,c
  1409                           
  1410                           ; BSR set to: 1
  1411                           ;main.c: 213: }
  1412                           ;main.c: 215: break;
  1413                           
  1414                           ; BSR set to: 1
  1415                           
  1416                           ; BSR set to: 1
  1417                           
  1418                           ; BSR set to: 1
  1419  000652  D1D5               	goto	l3899
  1420  000654                     
  1421                           ;main.c: 222: if (RFID_Read) {
  1422                           
  1423                           ; BSR set to: 1
  1424  000654  0101               	movlb	1	; () banked
  1425  000656  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1426  000658  B4D8               	btfsc	status,2,c
  1427  00065A  D08A               	goto	l421
  1428                           
  1429                           ; BSR set to: 1
  1430                           ;main.c: 223: stop(&mL, &mR);
  1431  00065C  0ED1               	movlw	low main@mL
  1432  00065E  0100               	movlb	0	; () banked
  1433  000660  6F71               	movwf	stop@mL& (0+255),b
  1434  000662  0E01               	movlw	high main@mL
  1435  000664  6F72               	movwf	(stop@mL+1)& (0+255),b
  1436  000666  0EDA               	movlw	low main@mR
  1437  000668  6F73               	movwf	stop@mR& (0+255),b
  1438  00066A  0E01               	movlw	high main@mR
  1439  00066C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1440  00066E  ECBB  F00B         	call	_stop	;wreg free
  1441                           
  1442                           ;main.c: 224: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1443  000672  0E03               	movlw	3
  1444  000674  0101               	movlb	1	; () banked
  1445  000676  19F6               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1446  000678  A4D8               	btfss	status,2,c
  1447  00067A  D002               	goto	u3340
  1448  00067C  0E01               	movlw	1
  1449  00067E  D001               	goto	u3342
  1450  000680                     u3340:
  1451  000680  0E00               	movlw	0
  1452  000682                     u3342:
  1453  000682  0100               	movlb	0	; () banked
  1454  000684  6FC9               	movwf	??_main& (0+255),b
  1455  000686  0E02               	movlw	2
  1456  000688  0101               	movlb	1	; () banked
  1457  00068A  19E7               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1458  00068C  A4D8               	btfss	status,2,c
  1459  00068E  D002               	goto	u3350
  1460  000690  0E01               	movlw	1
  1461  000692  D001               	goto	u3352
  1462  000694                     u3350:
  1463  000694  0E00               	movlw	0
  1464  000696                     u3352:
  1465  000696  0100               	movlb	0	; () banked
  1466  000698  15C9               	andwf	??_main& (0+255),w,b
  1467  00069A  A0E8               	btfss	wreg,0,c
  1468  00069C  D1B0               	goto	l3899
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 225: if (VerifySignal(&ReceivedString)){
  1472  00069E  0EE7               	movlw	low _ReceivedString
  1473  0006A0  6F62               	movwf	VerifySignal@RecievedString& (0+255),b
  1474  0006A2  0E01               	movlw	high _ReceivedString
  1475  0006A4  6F63               	movwf	(VerifySignal@RecievedString+1)& (0+255),b
  1476  0006A6  ECDF  F008         	call	_VerifySignal	;wreg free
  1477  0006AA  0900               	iorlw	0
  1478  0006AC  B4D8               	btfsc	status,2,c
  1479  0006AE  D037               	goto	l423
  1480                           
  1481                           ;main.c: 227: for (i=0; i<10; i++){
  1482  0006B0  0E00               	movlw	0
  1483  0006B2  0101               	movlb	1	; () banked
  1484  0006B4  6FCF               	movwf	main@i& (0+255),b
  1485  0006B6                     l3801:
  1486                           
  1487                           ; BSR set to: 1
  1488  0006B6  0E09               	movlw	9
  1489  0006B8  65CF               	cpfsgt	main@i& (0+255),b
  1490  0006BA  D001               	goto	l424
  1491  0006BC  D01B               	goto	u3390
  1492  0006BE                     l424:
  1493                           
  1494                           ; BSR set to: 1
  1495                           ;main.c: 228: Message[i] = ReceivedString[i+1];
  1496                           
  1497                           ; BSR set to: 1
  1498  0006BE  51CF               	movf	main@i& (0+255),w,b
  1499  0006C0  0100               	movlb	0	; () banked
  1500  0006C2  6FC9               	movwf	??_main& (0+255),b
  1501  0006C4  6BCA               	clrf	(??_main+1)& (0+255),b
  1502  0006C6  0E01               	movlw	1
  1503  0006C8  27C9               	addwf	??_main& (0+255),f,b
  1504  0006CA  0E00               	movlw	0
  1505  0006CC  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1506  0006CE  0EE7               	movlw	low _ReceivedString
  1507  0006D0  25C9               	addwf	??_main& (0+255),w,b
  1508  0006D2  6ED9               	movwf	fsr2l,c
  1509  0006D4  0E01               	movlw	high _ReceivedString
  1510  0006D6  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1511  0006D8  6EDA               	movwf	fsr2h,c
  1512  0006DA  0101               	movlb	1	; () banked
  1513  0006DC  51CF               	movf	main@i& (0+255),w,b
  1514  0006DE  0D01               	mullw	1
  1515  0006E0  0EBE               	movlw	low main@Message
  1516  0006E2  24F3               	addwf	prodl,w,c
  1517  0006E4  6EE1               	movwf	fsr1l,c
  1518  0006E6  0E01               	movlw	high main@Message
  1519  0006E8  20F4               	addwfc	prodh,w,c
  1520  0006EA  6EE2               	movwf	fsr1h,c
  1521  0006EC  CFDF FFE7          	movff	indf2,indf1
  1522                           
  1523                           ; BSR set to: 1
  1524  0006F0  2BCF               	incf	main@i& (0+255),f,b
  1525  0006F2  D7E1               	goto	l3801
  1526  0006F4                     u3390:
  1527                           
  1528                           ; BSR set to: 1
  1529                           ;main.c: 229: }
  1530                           ;main.c: 232: for (i=0; i<16; i++) {
  1531                           
  1532                           ; BSR set to: 1
  1533  0006F4  0E00               	movlw	0
  1534  0006F6  6FCF               	movwf	main@i& (0+255),b
  1535  0006F8                     l3813:
  1536                           
  1537                           ; BSR set to: 1
  1538  0006F8  0E0F               	movlw	15
  1539  0006FA  65CF               	cpfsgt	main@i& (0+255),b
  1540  0006FC  D001               	goto	l426
  1541  0006FE  D00C               	goto	u3410
  1542  000700                     l426:
  1543                           
  1544                           ; BSR set to: 1
  1545                           ;main.c: 233: ReceivedString[i]=0;
  1546                           
  1547                           ; BSR set to: 1
  1548  000700  51CF               	movf	main@i& (0+255),w,b
  1549  000702  0D01               	mullw	1
  1550  000704  0EE7               	movlw	low _ReceivedString
  1551  000706  24F3               	addwf	prodl,w,c
  1552  000708  6ED9               	movwf	fsr2l,c
  1553  00070A  0E01               	movlw	high _ReceivedString
  1554  00070C  20F4               	addwfc	prodh,w,c
  1555  00070E  6EDA               	movwf	fsr2h,c
  1556  000710  0E00               	movlw	0
  1557  000712  6EDF               	movwf	indf2,c
  1558                           
  1559                           ; BSR set to: 1
  1560  000714  2BCF               	incf	main@i& (0+255),f,b
  1561  000716  D7F0               	goto	l3813
  1562  000718                     u3410:
  1563                           
  1564                           ; BSR set to: 1
  1565                           ;main.c: 234: }
  1566                           ;main.c: 235: mode=3;
  1567                           
  1568                           ; BSR set to: 1
  1569  000718  0E03               	movlw	3
  1570  00071A  6E32               	movwf	_mode,c	;volatile
  1571                           
  1572                           ;main.c: 237: } else {
  1573  00071C  D170               	goto	l3899
  1574  00071E                     l423:
  1575                           
  1576                           ;main.c: 238: fullSpeedBack(&mL,&mR, 100);
  1577                           
  1578                           ; BSR set to: 1
  1579  00071E  0ED1               	movlw	low main@mL
  1580  000720  0100               	movlb	0	; () banked
  1581  000722  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1582  000724  0E01               	movlw	high main@mL
  1583  000726  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1584  000728  0EDA               	movlw	low main@mR
  1585  00072A  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1586  00072C  0E01               	movlw	high main@mR
  1587  00072E  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1588  000730  0E64               	movlw	100
  1589  000732  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1590  000734  EC77  F00D         	call	_fullSpeedBack	;wreg free
  1591                           
  1592                           ;main.c: 239: delay_tenth_s(5);
  1593  000738  0E05               	movlw	5
  1594  00073A  ECEE  F00D         	call	_delay_tenth_s
  1595                           
  1596                           ;main.c: 240: stop(&mL,&mR);
  1597  00073E  0ED1               	movlw	low main@mL
  1598  000740  0100               	movlb	0	; () banked
  1599  000742  6F71               	movwf	stop@mL& (0+255),b
  1600  000744  0E01               	movlw	high main@mL
  1601  000746  6F72               	movwf	(stop@mL+1)& (0+255),b
  1602  000748  0EDA               	movlw	low main@mR
  1603  00074A  6F73               	movwf	stop@mR& (0+255),b
  1604  00074C  0E01               	movlw	high main@mR
  1605  00074E  6F74               	movwf	(stop@mR+1)& (0+255),b
  1606  000750  ECBB  F00B         	call	_stop	;wreg free
  1607                           
  1608                           ;main.c: 241: fullSpeed(&mL,&mR, 100);
  1609  000754  0ED1               	movlw	low main@mL
  1610  000756  0100               	movlb	0	; () banked
  1611  000758  6F71               	movwf	fullSpeed@mL& (0+255),b
  1612  00075A  0E01               	movlw	high main@mL
  1613  00075C  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1614  00075E  0EDA               	movlw	low main@mR
  1615  000760  6F73               	movwf	fullSpeed@mR& (0+255),b
  1616  000762  0E01               	movlw	high main@mR
  1617  000764  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1618  000766  0E64               	movlw	100
  1619  000768  6F75               	movwf	fullSpeed@power& (0+255),b
  1620  00076A  EC47  F00C         	call	_fullSpeed	;wreg free
  1621                           
  1622                           ;main.c: 242: }
  1623                           ;main.c: 243: }
  1624                           ;main.c: 244: } else {
  1625  00076E  D147               	goto	l3899
  1626  000770                     l421:
  1627                           
  1628                           ;main.c: 245: DirectionFound=1;
  1629  000770  0E01               	movlw	1
  1630  000772  0101               	movlb	1	; () banked
  1631  000774  6FCE               	movwf	main@DirectionFound& (0+255),b
  1632                           
  1633                           ;main.c: 246: mode=1;
  1634  000776  0E01               	movlw	1
  1635  000778  6E32               	movwf	_mode,c	;volatile
  1636                           
  1637                           ; BSR set to: 1
  1638                           ;main.c: 248: fullSpeed(&mL,&mR, 100);
  1639  00077A  0ED1               	movlw	low main@mL
  1640  00077C  0100               	movlb	0	; () banked
  1641  00077E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1642  000780  0E01               	movlw	high main@mL
  1643  000782  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1644  000784  0EDA               	movlw	low main@mR
  1645  000786  6F73               	movwf	fullSpeed@mR& (0+255),b
  1646  000788  0E01               	movlw	high main@mR
  1647  00078A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1648  00078C  0E64               	movlw	100
  1649  00078E  6F75               	movwf	fullSpeed@power& (0+255),b
  1650  000790  EC47  F00C         	call	_fullSpeed	;wreg free
  1651                           
  1652                           ;main.c: 249: delay_tenth_s(1);
  1653  000794  0E01               	movlw	1
  1654  000796  ECEE  F00D         	call	_delay_tenth_s
  1655                           
  1656                           ;main.c: 250: MoveType[Move] = 0;
  1657  00079A  0101               	movlb	1	; () banked
  1658  00079C  51D0               	movf	main@Move& (0+255),w,b
  1659  00079E  0D01               	mullw	1
  1660  0007A0  0E28               	movlw	low main@MoveType
  1661  0007A2  24F3               	addwf	prodl,w,c
  1662  0007A4  6ED9               	movwf	fsr2l,c
  1663  0007A6  0E01               	movlw	high main@MoveType
  1664  0007A8  20F4               	addwfc	prodh,w,c
  1665  0007AA  6EDA               	movwf	fsr2h,c
  1666  0007AC  0E00               	movlw	0
  1667  0007AE  6EDF               	movwf	indf2,c
  1668                           
  1669                           ; BSR set to: 1
  1670                           ;main.c: 251: MoveTime[Move] = 5;
  1671  0007B0  51D0               	movf	main@Move& (0+255),w,b
  1672  0007B2  0D02               	mullw	2
  1673  0007B4  0E5A               	movlw	low main@MoveTime
  1674  0007B6  24F3               	addwf	prodl,w,c
  1675  0007B8  6ED9               	movwf	fsr2l,c
  1676  0007BA  0E01               	movlw	high main@MoveTime
  1677  0007BC  20F4               	addwfc	prodh,w,c
  1678  0007BE  6EDA               	movwf	fsr2h,c
  1679  0007C0  0E05               	movlw	5
  1680  0007C2  6EDE               	movwf	postinc2,c
  1681  0007C4  0E00               	movlw	0
  1682  0007C6  6EDD               	movwf	postdec2,c
  1683                           
  1684                           ; BSR set to: 1
  1685                           ;main.c: 252: Move++;
  1686  0007C8  2BD0               	incf	main@Move& (0+255),f,b
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;main.c: 253: }
  1690                           ;main.c: 255: break;
  1691  0007CA  D119               	goto	l3899
  1692  0007CC                     
  1693                           ;main.c: 260: SetLine(1);
  1694                           
  1695                           ; BSR set to: 1
  1696  0007CC  0E01               	movlw	1
  1697  0007CE  EC41  F00E         	call	_SetLine
  1698                           
  1699                           ;main.c: 261: LCD_String(Message);
  1700  0007D2  0EBE               	movlw	low main@Message
  1701  0007D4  0100               	movlb	0	; () banked
  1702  0007D6  6F60               	movwf	LCD_String@string& (0+255),b
  1703  0007D8  0E01               	movlw	high main@Message
  1704  0007DA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1705  0007DC  ECFB  F00C         	call	_LCD_String	;wreg free
  1706                           
  1707                           ;main.c: 262: SetLine(2);
  1708  0007E0  0E02               	movlw	2
  1709  0007E2  EC41  F00E         	call	_SetLine
  1710                           
  1711                           ;main.c: 263: LCD_String("Going Home");
  1712  0007E6  0E39               	movlw	low STR_8
  1713  0007E8  0100               	movlb	0	; () banked
  1714  0007EA  6F60               	movwf	LCD_String@string& (0+255),b
  1715  0007EC  0E03               	movlw	high STR_8
  1716  0007EE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1717  0007F0  ECFB  F00C         	call	_LCD_String	;wreg free
  1718  0007F4  0101               	movlb	1	; () banked
  1719  0007F6  BFD0               	btfsc	main@Move& (0+255),7,b
  1720  0007F8  D0F6               	goto	u3510
  1721                           
  1722                           ; BSR set to: 1
  1723                           ;main.c: 266: stop(&mL,&mR);
  1724                           
  1725                           ; BSR set to: 1
  1726                           
  1727                           ; BSR set to: 1
  1728  0007FA  0ED1               	movlw	low main@mL
  1729  0007FC  0100               	movlb	0	; () banked
  1730  0007FE  6F71               	movwf	stop@mL& (0+255),b
  1731  000800  0E01               	movlw	high main@mL
  1732  000802  6F72               	movwf	(stop@mL+1)& (0+255),b
  1733  000804  0EDA               	movlw	low main@mR
  1734  000806  6F73               	movwf	stop@mR& (0+255),b
  1735  000808  0E01               	movlw	high main@mR
  1736  00080A  6F74               	movwf	(stop@mR+1)& (0+255),b
  1737  00080C  ECBB  F00B         	call	_stop	;wreg free
  1738                           
  1739                           ;main.c: 267: if (MoveType[Move]==0) {
  1740  000810  0101               	movlb	1	; () banked
  1741  000812  51D0               	movf	main@Move& (0+255),w,b
  1742  000814  0D01               	mullw	1
  1743  000816  0E28               	movlw	low main@MoveType
  1744  000818  24F3               	addwf	prodl,w,c
  1745  00081A  6ED9               	movwf	fsr2l,c
  1746  00081C  0E01               	movlw	high main@MoveType
  1747  00081E  20F4               	addwfc	prodh,w,c
  1748  000820  6EDA               	movwf	fsr2h,c
  1749  000822  50DF               	movf	indf2,w,c
  1750  000824  A4D8               	btfss	status,2,c
  1751  000826  D01A               	goto	l433
  1752                           
  1753                           ; BSR set to: 1
  1754                           ;main.c: 268: fullSpeedBack(&mL,&mR,100);
  1755  000828  0ED1               	movlw	low main@mL
  1756  00082A  0100               	movlb	0	; () banked
  1757  00082C  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1758  00082E  0E01               	movlw	high main@mL
  1759  000830  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1760  000832  0EDA               	movlw	low main@mR
  1761  000834  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1762  000836  0E01               	movlw	high main@mR
  1763  000838  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1764  00083A  0E64               	movlw	100
  1765  00083C  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1766  00083E  EC77  F00D         	call	_fullSpeedBack	;wreg free
  1767                           
  1768                           ;main.c: 269: delay_tenth_s(MoveTime[Move]);
  1769  000842  0101               	movlb	1	; () banked
  1770  000844  51D0               	movf	main@Move& (0+255),w,b
  1771  000846  0D02               	mullw	2
  1772  000848  0E5A               	movlw	low main@MoveTime
  1773  00084A  24F3               	addwf	prodl,w,c
  1774  00084C  6ED9               	movwf	fsr2l,c
  1775  00084E  0E01               	movlw	high main@MoveTime
  1776  000850  20F4               	addwfc	prodh,w,c
  1777  000852  6EDA               	movwf	fsr2h,c
  1778  000854  50DF               	movf	indf2,w,c
  1779  000856  ECEE  F00D         	call	_delay_tenth_s
  1780                           
  1781                           ;main.c: 270: } else if (MoveType[Move]==1) {
  1782  00085A  D0BF               	goto	l447
  1783  00085C                     l433:
  1784  00085C  0101               	movlb	1	; () banked
  1785  00085E  51D0               	movf	main@Move& (0+255),w,b
  1786  000860  0D01               	mullw	1
  1787  000862  0E28               	movlw	low main@MoveType
  1788  000864  24F3               	addwf	prodl,w,c
  1789  000866  6ED9               	movwf	fsr2l,c
  1790  000868  0E01               	movlw	high main@MoveType
  1791  00086A  20F4               	addwfc	prodh,w,c
  1792  00086C  6EDA               	movwf	fsr2h,c
  1793  00086E  04DE               	decf	postinc2,w,c
  1794  000870  A4D8               	btfss	status,2,c
  1795  000872  D063               	goto	l435
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 271: T0CONbits.TMR0ON=0;
  1799  000874  9ED5               	bcf	4053,7,c	;volatile
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 272: TMR0L = 0;
  1803  000876  0E00               	movlw	0
  1804  000878  6ED6               	movwf	4054,c	;volatile
  1805                           
  1806                           ;main.c: 273: TMR0H = 0;
  1807  00087A  0E00               	movlw	0
  1808  00087C  6ED7               	movwf	4055,c	;volatile
  1809                           
  1810                           ;main.c: 274: millis = 0;
  1811  00087E  0E00               	movlw	0
  1812  000880  6FF8               	movwf	(_millis+1)& (0+255),b	;volatile
  1813  000882  0E00               	movlw	0
  1814  000884  6FF7               	movwf	_millis& (0+255),b	;volatile
  1815                           
  1816                           ; BSR set to: 1
  1817                           ;main.c: 275: if (MoveTime[Move]>0) {
  1818  000886  51D0               	movf	main@Move& (0+255),w,b
  1819  000888  0D02               	mullw	2
  1820  00088A  0E5A               	movlw	low main@MoveTime
  1821  00088C  24F3               	addwf	prodl,w,c
  1822  00088E  6ED9               	movwf	fsr2l,c
  1823  000890  0E01               	movlw	high main@MoveTime
  1824  000892  20F4               	addwfc	prodh,w,c
  1825  000894  6EDA               	movwf	fsr2h,c
  1826  000896  0E01               	movlw	1
  1827  000898  BEDB               	btfsc	plusw2,7,c
  1828  00089A  D024               	goto	l436
  1829  00089C  0E01               	movlw	1
  1830  00089E  50DB               	movf	plusw2,w,c
  1831  0008A0  E103               	bnz	u3450
  1832  0008A2  04DE               	decf	postinc2,w,c
  1833  0008A4  A0D8               	btfss	status,0,c
  1834  0008A6  D01E               	goto	l436
  1835  0008A8                     u3450:
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;main.c: 276: T0CONbits.TMR0ON=1;
  1839  0008A8  8ED5               	bsf	4053,7,c	;volatile
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 277: turnRight(&mL,&mR,MotorPower);
  1843  0008AA  0ED1               	movlw	low main@mL
  1844  0008AC  0100               	movlb	0	; () banked
  1845  0008AE  6F77               	movwf	turnRight@mL& (0+255),b
  1846  0008B0  0E01               	movlw	high main@mL
  1847  0008B2  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1848  0008B4  0EDA               	movlw	low main@mR
  1849  0008B6  6F79               	movwf	turnRight@mR& (0+255),b
  1850  0008B8  0E01               	movlw	high main@mR
  1851  0008BA  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1852  0008BC  C1CD  F07B         	movff	main@MotorPower,turnRight@power
  1853  0008C0  EC95  F00D         	call	_turnRight	;wreg free
  1854  0008C4  0101               	movlb	1	; () banked
  1855  0008C6  51D0               	movf	main@Move& (0+255),w,b
  1856  0008C8  0D02               	mullw	2
  1857  0008CA  0E5A               	movlw	low main@MoveTime
  1858  0008CC  24F3               	addwf	prodl,w,c
  1859  0008CE  6ED9               	movwf	fsr2l,c
  1860  0008D0  0E01               	movlw	high main@MoveTime
  1861  0008D2  20F4               	addwfc	prodh,w,c
  1862  0008D4  6EDA               	movwf	fsr2h,c
  1863  0008D6  50DE               	movf	postinc2,w,c
  1864  0008D8  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1865  0008DA  50DE               	movf	postinc2,w,c
  1866  0008DC  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1867  0008DE  A0D8               	btfss	status,0,c
  1868  0008E0  D7F1               	goto	l438
  1869  0008E2  D029               	goto	u3470
  1870  0008E4                     l436:
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;main.c: 282: T0CONbits.TMR0ON=1;
  1874  0008E4  8ED5               	bsf	4053,7,c	;volatile
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;main.c: 283: turnLeft(&mL,&mR,MotorPower);
  1878  0008E6  0ED1               	movlw	low main@mL
  1879  0008E8  0100               	movlb	0	; () banked
  1880  0008EA  6F77               	movwf	turnLeft@mL& (0+255),b
  1881  0008EC  0E01               	movlw	high main@mL
  1882  0008EE  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1883  0008F0  0EDA               	movlw	low main@mR
  1884  0008F2  6F79               	movwf	turnLeft@mR& (0+255),b
  1885  0008F4  0E01               	movlw	high main@mR
  1886  0008F6  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1887  0008F8  C1CD  F07B         	movff	main@MotorPower,turnLeft@power
  1888  0008FC  ECB3  F00D         	call	_turnLeft	;wreg free
  1889  000900  0101               	movlb	1	; () banked
  1890  000902  51D0               	movf	main@Move& (0+255),w,b
  1891  000904  0D02               	mullw	2
  1892  000906  0E5A               	movlw	low main@MoveTime
  1893  000908  24F3               	addwf	prodl,w,c
  1894  00090A  6ED9               	movwf	fsr2l,c
  1895  00090C  0E01               	movlw	high main@MoveTime
  1896  00090E  20F4               	addwfc	prodh,w,c
  1897  000910  6EDA               	movwf	fsr2h,c
  1898  000912  CFDE F0C9          	movff	postinc2,??_main
  1899  000916  CFDD F0CA          	movff	postdec2,??_main+1
  1900  00091A  0100               	movlb	0	; () banked
  1901  00091C  1FC9               	comf	??_main& (0+255),f,b
  1902  00091E  1FCA               	comf	(??_main+1)& (0+255),f,b
  1903  000920  4BC9               	infsnz	??_main& (0+255),f,b
  1904  000922  2BCA               	incf	(??_main+1)& (0+255),f,b
  1905  000924  51C9               	movf	??_main& (0+255),w,b
  1906  000926  0101               	movlb	1	; () banked
  1907  000928  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1908  00092A  0100               	movlb	0	; () banked
  1909  00092C  51CA               	movf	(??_main+1)& (0+255),w,b
  1910  00092E  0101               	movlb	1	; () banked
  1911  000930  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1912  000932  A0D8               	btfss	status,0,c
  1913  000934  D7E5               	goto	l442
  1914  000936                     u3470:
  1915                           
  1916                           ; BSR set to: 1
  1917                           ;main.c: 286: T0CONbits.TMR0ON=0;
  1918  000936  9ED5               	bcf	4053,7,c	;volatile
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;main.c: 287: }
  1922                           ;main.c: 288: } else if (MoveType[Move]==2) {
  1923  000938  D050               	goto	l447
  1924  00093A                     l435:
  1925                           
  1926                           ; BSR set to: 1
  1927                           
  1928                           ; BSR set to: 1
  1929  00093A  51D0               	movf	main@Move& (0+255),w,b
  1930  00093C  0D01               	mullw	1
  1931  00093E  0E28               	movlw	low main@MoveType
  1932  000940  24F3               	addwf	prodl,w,c
  1933  000942  6ED9               	movwf	fsr2l,c
  1934  000944  0E01               	movlw	high main@MoveType
  1935  000946  20F4               	addwfc	prodh,w,c
  1936  000948  6EDA               	movwf	fsr2h,c
  1937  00094A  0E02               	movlw	2
  1938  00094C  18DE               	xorwf	postinc2,w,c
  1939  00094E  A4D8               	btfss	status,2,c
  1940  000950  D044               	goto	l447
  1941                           
  1942                           ; BSR set to: 1
  1943                           ;main.c: 289: if (MoveTime[Move]>0) {
  1944  000952  51D0               	movf	main@Move& (0+255),w,b
  1945  000954  0D02               	mullw	2
  1946  000956  0E5A               	movlw	low main@MoveTime
  1947  000958  24F3               	addwf	prodl,w,c
  1948  00095A  6ED9               	movwf	fsr2l,c
  1949  00095C  0E01               	movlw	high main@MoveTime
  1950  00095E  20F4               	addwfc	prodh,w,c
  1951  000960  6EDA               	movwf	fsr2h,c
  1952  000962  0E01               	movlw	1
  1953  000964  BEDB               	btfsc	plusw2,7,c
  1954  000966  D020               	goto	l446
  1955  000968  0E01               	movlw	1
  1956  00096A  50DB               	movf	plusw2,w,c
  1957  00096C  E103               	bnz	u3490
  1958  00096E  04DE               	decf	postinc2,w,c
  1959  000970  A0D8               	btfss	status,0,c
  1960  000972  D01A               	goto	l446
  1961  000974                     u3490:
  1962                           
  1963                           ; BSR set to: 1
  1964                           ;main.c: 290: turnRight(&mL,&mR,78);
  1965  000974  0ED1               	movlw	low main@mL
  1966  000976  0100               	movlb	0	; () banked
  1967  000978  6F77               	movwf	turnRight@mL& (0+255),b
  1968  00097A  0E01               	movlw	high main@mL
  1969  00097C  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1970  00097E  0EDA               	movlw	low main@mR
  1971  000980  6F79               	movwf	turnRight@mR& (0+255),b
  1972  000982  0E01               	movlw	high main@mR
  1973  000984  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1974  000986  0E4E               	movlw	78
  1975  000988  6F7B               	movwf	turnRight@power& (0+255),b
  1976  00098A  EC95  F00D         	call	_turnRight	;wreg free
  1977                           
  1978                           ;main.c: 292: delay_tenth_s(MoveTime[Move]);
  1979  00098E  0101               	movlb	1	; () banked
  1980  000990  51D0               	movf	main@Move& (0+255),w,b
  1981  000992  0D02               	mullw	2
  1982  000994  0E5A               	movlw	low main@MoveTime
  1983  000996  24F3               	addwf	prodl,w,c
  1984  000998  6ED9               	movwf	fsr2l,c
  1985  00099A  0E01               	movlw	high main@MoveTime
  1986  00099C  20F4               	addwfc	prodh,w,c
  1987  00099E  6EDA               	movwf	fsr2h,c
  1988  0009A0  50DF               	movf	indf2,w,c
  1989  0009A2  ECEE  F00D         	call	_delay_tenth_s
  1990                           
  1991                           ;main.c: 293: } else {
  1992  0009A6  D019               	goto	l447
  1993  0009A8                     l446:
  1994                           
  1995                           ;main.c: 294: turnLeft(&mL,&mR,100);
  1996  0009A8  0ED1               	movlw	low main@mL
  1997  0009AA  0100               	movlb	0	; () banked
  1998  0009AC  6F77               	movwf	turnLeft@mL& (0+255),b
  1999  0009AE  0E01               	movlw	high main@mL
  2000  0009B0  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  2001  0009B2  0EDA               	movlw	low main@mR
  2002  0009B4  6F79               	movwf	turnLeft@mR& (0+255),b
  2003  0009B6  0E01               	movlw	high main@mR
  2004  0009B8  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  2005  0009BA  0E64               	movlw	100
  2006  0009BC  6F7B               	movwf	turnLeft@power& (0+255),b
  2007  0009BE  ECB3  F00D         	call	_turnLeft	;wreg free
  2008                           
  2009                           ;main.c: 295: delay_tenth_s(MoveTime[Move]);
  2010  0009C2  0101               	movlb	1	; () banked
  2011  0009C4  51D0               	movf	main@Move& (0+255),w,b
  2012  0009C6  0D02               	mullw	2
  2013  0009C8  0E5A               	movlw	low main@MoveTime
  2014  0009CA  24F3               	addwf	prodl,w,c
  2015  0009CC  6ED9               	movwf	fsr2l,c
  2016  0009CE  0E01               	movlw	high main@MoveTime
  2017  0009D0  20F4               	addwfc	prodh,w,c
  2018  0009D2  6EDA               	movwf	fsr2h,c
  2019  0009D4  50DF               	movf	indf2,w,c
  2020  0009D6  ECEE  F00D         	call	_delay_tenth_s
  2021  0009DA                     l447:
  2022                           
  2023                           ;main.c: 296: }
  2024                           ;main.c: 297: }
  2025                           ;main.c: 298: if (mode==-1) {
  2026  0009DA  2832               	incf	_mode,w,c	;volatile
  2027  0009DC  B4D8               	btfsc	status,2,c
  2028  0009DE  D003               	goto	u3510
  2029                           
  2030                           ;main.c: 299: break;
  2031  0009E0  0101               	movlb	1	; () banked
  2032  0009E2  07D0               	decf	main@Move& (0+255),f,b
  2033  0009E4  D708               	goto	L3
  2034  0009E6                     u3510:
  2035                           
  2036                           ;main.c: 300: }
  2037                           ;main.c: 301: }
  2038                           ;main.c: 302: stop(&mL,&mR);
  2039                           
  2040                           ; BSR set to: 1
  2041  0009E6  0ED1               	movlw	low main@mL
  2042  0009E8  0100               	movlb	0	; () banked
  2043  0009EA  6F71               	movwf	stop@mL& (0+255),b
  2044  0009EC  0E01               	movlw	high main@mL
  2045  0009EE  6F72               	movwf	(stop@mL+1)& (0+255),b
  2046  0009F0  0EDA               	movlw	low main@mR
  2047  0009F2  6F73               	movwf	stop@mR& (0+255),b
  2048  0009F4  0E01               	movlw	high main@mR
  2049  0009F6  6F74               	movwf	(stop@mR+1)& (0+255),b
  2050  0009F8  ECBB  F00B         	call	_stop	;wreg free
  2051  0009FC                     l3897:
  2052                           
  2053                           ;main.c: 303: mode=-1;
  2054  0009FC  6832               	setf	_mode,c	;volatile
  2055  0009FE                     l3899:
  2056                           
  2057                           ;main.c: 306: }
  2058  0009FE  5032               	movf	_mode,w,c	;volatile
  2059                           
  2060                           ; Switch size 1, requested type "space"
  2061                           ; Number of cases is 5, Range of values is 0 to 255
  2062                           ; switch strategies available:
  2063                           ; Name         Instructions Cycles
  2064                           ; simple_byte           16     9 (average)
  2065                           ;	Chosen strategy is simple_byte
  2066  000A00  0A00               	xorlw	0	; case 0
  2067  000A02  B4D8               	btfsc	status,2,c
  2068  000A04  D578               	goto	l411
  2069  000A06  0A01               	xorlw	1	; case 1
  2070  000A08  B4D8               	btfsc	status,2,c
  2071  000A0A  D59A               	goto	l412
  2072  000A0C  0A03               	xorlw	3	; case 2
  2073  000A0E  B4D8               	btfsc	status,2,c
  2074  000A10  D621               	goto	l420
  2075  000A12  0A01               	xorlw	1	; case 3
  2076  000A14  B4D8               	btfsc	status,2,c
  2077  000A16  D6DA               	goto	l430
  2078  000A18  0AFC               	xorlw	252	; case 255
  2079  000A1A  B4D8               	btfsc	status,2,c
  2080  000A1C  D4F1               	goto	l405
  2081  000A1E  D7EF               	goto	l3899
  2082  000A20                     __end_of_main:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           indf1	equ	0xFE7
  2091                           plusw1	equ	0xFE3
  2092                           fsr1h	equ	0xFE2
  2093                           fsr1l	equ	0xFE1
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           postdec2	equ	0xFDD
  2097                           plusw2	equ	0xFDB
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _initTimer *****************
  2103 ;; Defined at:
  2104 ;;		line 8 in file "Movement.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2118 ;;      Params:         0       0       0       0
  2119 ;;      Locals:         0       0       0       0
  2120 ;;      Temps:          0       0       0       0
  2121 ;;      Totals:         0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    3
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text1
  2133  001CE8                     __ptext1:
  2134                           	opt stack 0
  2135  001CE8                     _initTimer:
  2136                           	opt stack 27
  2137                           
  2138                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2139                           
  2140                           ;incstack = 0
  2141  001CE8  9ED5               	bcf	4053,7,c	;volatile
  2142                           
  2143                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2144  001CEA  8CD5               	bsf	4053,6,c	;volatile
  2145                           
  2146                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2147  001CEC  9AD5               	bcf	4053,5,c	;volatile
  2148                           
  2149                           ;Movement.c: 13: T0CONbits.PSA=0;
  2150  001CEE  96D5               	bcf	4053,3,c	;volatile
  2151                           
  2152                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2153  001CF0  50D5               	movf	4053,w,c	;volatile
  2154  001CF2  0BF8               	andlw	-8
  2155  001CF4  0902               	iorlw	2
  2156  001CF6  6ED5               	movwf	4053,c	;volatile
  2157                           
  2158                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2159  001CF8  8AF2               	bsf	intcon,5,c	;volatile
  2160  001CFA  0012               	return		;funcret
  2161  001CFC                     __end_of_initTimer:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           indf1	equ	0xFE7
  2170                           plusw1	equ	0xFE3
  2171                           fsr1h	equ	0xFE2
  2172                           fsr1l	equ	0xFE1
  2173                           indf2	equ	0xFDF
  2174                           postinc2	equ	0xFDE
  2175                           postdec2	equ	0xFDD
  2176                           plusw2	equ	0xFDB
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _initRFID *****************
  2182 ;; Defined at:
  2183 ;;		line 7 in file "RFID_Reader.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2197 ;;      Params:         0       0       0       0
  2198 ;;      Locals:         0       0       0       0
  2199 ;;      Temps:          0       0       0       0
  2200 ;;      Totals:         0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    3
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text2
  2212  0001B4                     __ptext2:
  2213                           	opt stack 0
  2214  0001B4                     _initRFID:
  2215                           	opt stack 27
  2216                           
  2217                           ;RFID_Reader.c: 8: TRISC = TRISC | 0b11000000;
  2218                           
  2219                           ;incstack = 0
  2220  0001B4  5094               	movf	3988,w,c	;volatile
  2221  0001B6  09C0               	iorlw	192
  2222  0001B8  6E94               	movwf	3988,c	;volatile
  2223                           
  2224                           ;RFID_Reader.c: 12: SPBRG=205;
  2225  0001BA  0ECD               	movlw	205
  2226  0001BC  6EAF               	movwf	4015,c	;volatile
  2227                           
  2228                           ;RFID_Reader.c: 13: SPBRGH=0;
  2229  0001BE  0E00               	movlw	0
  2230  0001C0  6EB0               	movwf	4016,c	;volatile
  2231                           
  2232                           ;RFID_Reader.c: 14: BAUDCONbits.BRG16=1;
  2233  0001C2  86AA               	bsf	4010,3,c	;volatile
  2234                           
  2235                           ;RFID_Reader.c: 15: TXSTAbits.BRGH=1;
  2236  0001C4  84AC               	bsf	4012,2,c	;volatile
  2237                           
  2238                           ;RFID_Reader.c: 16: RCSTAbits.CREN=1;
  2239  0001C6  88AB               	bsf	4011,4,c	;volatile
  2240                           
  2241                           ;RFID_Reader.c: 17: RCSTAbits.SPEN=1;
  2242  0001C8  8EAB               	bsf	4011,7,c	;volatile
  2243                           
  2244                           ;RFID_Reader.c: 18: TXSTAbits.SYNC=0;
  2245  0001CA  98AC               	bcf	4012,4,c	;volatile
  2246                           
  2247                           ;RFID_Reader.c: 19: RCSTAbits.RX9=0;
  2248  0001CC  9CAB               	bcf	4011,6,c	;volatile
  2249  0001CE  0012               	return		;funcret
  2250  0001D0                     __end_of_initRFID:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           intcon	equ	0xFF2
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           indf1	equ	0xFE7
  2259                           plusw1	equ	0xFE3
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           indf2	equ	0xFDF
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           plusw2	equ	0xFDB
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _initMotorPWM *****************
  2271 ;; Defined at:
  2272 ;;		line 4 in file "dc_motor.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2286 ;;      Params:         0       0       0       0
  2287 ;;      Locals:         0       0       0       0
  2288 ;;      Temps:          0       0       0       0
  2289 ;;      Totals:         0       0       0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    3
  2293 ;; This function calls:
  2294 ;;		Nothing
  2295 ;; This function is called by:
  2296 ;;		_main
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text3
  2301  001BA2                     __ptext3:
  2302                           	opt stack 0
  2303  001BA2                     _initMotorPWM:
  2304                           	opt stack 27
  2305                           
  2306                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2307                           
  2308                           ;incstack = 0
  2309  001BA2  0E00               	movlw	0
  2310  001BA4  6E7F               	movwf	3967,c	;volatile
  2311                           
  2312                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2313  001BA6  0E80               	movlw	128
  2314  001BA8  6E7E               	movwf	3966,c	;volatile
  2315                           
  2316                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2317  001BAA  0E6F               	movlw	111
  2318  001BAC  6E6F               	movwf	3951,c	;volatile
  2319                           
  2320                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2321  001BAE  0E00               	movlw	0
  2322  001BB0  6E6E               	movwf	3950,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2325  001BB2  0EC7               	movlw	199
  2326  001BB4  6E7B               	movwf	3963,c	;volatile
  2327                           
  2328                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2329  001BB6  0E00               	movlw	0
  2330  001BB8  6E7A               	movwf	3962,c	;volatile
  2331                           
  2332                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2333  001BBA  0E00               	movlw	0
  2334  001BBC  6E79               	movwf	3961,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2337  001BBE  0E00               	movlw	0
  2338  001BC0  6E78               	movwf	3960,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2341  001BC2  0E00               	movlw	0
  2342  001BC4  6E77               	movwf	3959,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2345  001BC6  0E00               	movlw	0
  2346  001BC8  6E76               	movwf	3958,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2349  001BCA  9093               	bcf	3987,0,c	;volatile
  2350                           
  2351                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2352  001BCC  9293               	bcf	3987,1,c	;volatile
  2353                           
  2354                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2355  001BCE  9493               	bcf	3987,2,c	;volatile
  2356                           
  2357                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2358  001BD0  9693               	bcf	3987,3,c	;volatile
  2359                           
  2360                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2361  001BD2  908A               	bcf	3978,0,c	;volatile
  2362                           
  2363                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2364  001BD4  928A               	bcf	3978,1,c	;volatile
  2365                           
  2366                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2367  001BD6  948A               	bcf	3978,2,c	;volatile
  2368                           
  2369                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2370  001BD8  968A               	bcf	3978,3,c	;volatile
  2371  001BDA  0012               	return		;funcret
  2372  001BDC                     __end_of_initMotorPWM:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           intcon	equ	0xFF2
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           indf1	equ	0xFE7
  2381                           plusw1	equ	0xFE3
  2382                           fsr1h	equ	0xFE2
  2383                           fsr1l	equ	0xFE1
  2384                           indf2	equ	0xFDF
  2385                           postinc2	equ	0xFDE
  2386                           postdec2	equ	0xFDD
  2387                           plusw2	equ	0xFDB
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _initLCD *****************
  2393 ;; Defined at:
  2394 ;;		line 38 in file "LCD.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2408 ;;      Params:         0       0       0       0
  2409 ;;      Locals:         0       0       0       0
  2410 ;;      Temps:          0       1       0       0
  2411 ;;      Totals:         0       1       0       0
  2412 ;;Total ram usage:        1 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    6
  2415 ;; This function calls:
  2416 ;;		_LCDout
  2417 ;;		_SendLCD
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text4
  2424  0015F4                     __ptext4:
  2425                           	opt stack 0
  2426  0015F4                     _initLCD:
  2427                           	opt stack 24
  2428                           
  2429                           ;LCD.c: 44: TRISAbits.RA6=0;
  2430                           
  2431                           ;incstack = 0
  2432  0015F4  9C92               	bcf	3986,6,c	;volatile
  2433                           
  2434                           ;LCD.c: 45: TRISCbits.RC0=0;
  2435  0015F6  9094               	bcf	3988,0,c	;volatile
  2436                           
  2437                           ;LCD.c: 46: TRISCbits.RC1=0;
  2438  0015F8  9294               	bcf	3988,1,c	;volatile
  2439                           
  2440                           ;LCD.c: 47: TRISCbits.RC2=0;
  2441  0015FA  9494               	bcf	3988,2,c	;volatile
  2442                           
  2443                           ;LCD.c: 48: TRISDbits.RD0=0;
  2444  0015FC  9095               	bcf	3989,0,c	;volatile
  2445                           
  2446                           ;LCD.c: 49: TRISDbits.RD1=0;
  2447  0015FE  9295               	bcf	3989,1,c	;volatile
  2448                           
  2449                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2450  001600  0E27               	movlw	39
  2451  001602  0100               	movlb	0	; () banked
  2452  001604  6F60               	movwf	??_initLCD& (0+255),b
  2453  001606  0EF5               	movlw	245
  2454  001608                     u3547:
  2455  001608  2EE8               	decfsz	wreg,f,c
  2456  00160A  D7FE               	bra	u3547
  2457  00160C  2F60               	decfsz	??_initLCD& (0+255),f,b
  2458  00160E  D7FC               	bra	u3547
  2459                           
  2460                           ;LCD.c: 52: LCDout(0b0011);
  2461  001610  0E03               	movlw	3
  2462  001612  EC97  F00A         	call	_LCDout
  2463                           
  2464                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2465  001616  0E0D               	movlw	13
  2466  001618  0100               	movlb	0	; () banked
  2467  00161A  6F60               	movwf	??_initLCD& (0+255),b
  2468  00161C  0EFB               	movlw	251
  2469  00161E                     u3557:
  2470  00161E  2EE8               	decfsz	wreg,f,c
  2471  001620  D7FE               	bra	u3557
  2472  001622  2F60               	decfsz	??_initLCD& (0+255),f,b
  2473  001624  D7FC               	bra	u3557
  2474  001626  D000               	nop2	
  2475                           
  2476                           ;LCD.c: 54: LCDout(0b0011);
  2477  001628  0E03               	movlw	3
  2478  00162A  EC97  F00A         	call	_LCDout
  2479                           
  2480                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2481  00162E  0E85               	movlw	133
  2482  001630                     u3567:
  2483  001630  2EE8               	decfsz	wreg,f,c
  2484  001632  D7FE               	bra	u3567
  2485  001634  F000               	nop	
  2486                           
  2487                           ;LCD.c: 56: LCDout(0b0011);
  2488  001636  0E03               	movlw	3
  2489  001638  EC97  F00A         	call	_LCDout
  2490                           
  2491                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2492  00163C  0E21               	movlw	33
  2493  00163E                     u3577:
  2494  00163E  2EE8               	decfsz	wreg,f,c
  2495  001640  D7FE               	bra	u3577
  2496  001642  F000               	nop	
  2497                           
  2498                           ;LCD.c: 58: LCDout(0b0010);
  2499  001644  0E02               	movlw	2
  2500  001646  EC97  F00A         	call	_LCDout
  2501                           
  2502                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2503  00164A  0E21               	movlw	33
  2504  00164C                     u3587:
  2505  00164C  2EE8               	decfsz	wreg,f,c
  2506  00164E  D7FE               	bra	u3587
  2507  001650  F000               	nop	
  2508                           
  2509                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2510  001652  0E00               	movlw	0
  2511  001654  6E30               	movwf	SendLCD@type,c
  2512  001656  0E28               	movlw	40
  2513  001658  EC5C  F00E         	call	_SendLCD
  2514                           
  2515                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2516  00165C  0E21               	movlw	33
  2517  00165E                     u3597:
  2518  00165E  2EE8               	decfsz	wreg,f,c
  2519  001660  D7FE               	bra	u3597
  2520  001662  F000               	nop	
  2521                           
  2522                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2523  001664  0E00               	movlw	0
  2524  001666  6E30               	movwf	SendLCD@type,c
  2525  001668  0E08               	movlw	8
  2526  00166A  EC5C  F00E         	call	_SendLCD
  2527                           
  2528                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2529  00166E  0E21               	movlw	33
  2530  001670                     u3607:
  2531  001670  2EE8               	decfsz	wreg,f,c
  2532  001672  D7FE               	bra	u3607
  2533  001674  F000               	nop	
  2534                           
  2535                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2536  001676  0E00               	movlw	0
  2537  001678  6E30               	movwf	SendLCD@type,c
  2538  00167A  0E01               	movlw	1
  2539  00167C  EC5C  F00E         	call	_SendLCD
  2540                           
  2541                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2542  001680  0E0D               	movlw	13
  2543  001682  0100               	movlb	0	; () banked
  2544  001684  6F60               	movwf	??_initLCD& (0+255),b
  2545  001686  0EFB               	movlw	251
  2546  001688                     u3617:
  2547  001688  2EE8               	decfsz	wreg,f,c
  2548  00168A  D7FE               	bra	u3617
  2549  00168C  2F60               	decfsz	??_initLCD& (0+255),f,b
  2550  00168E  D7FC               	bra	u3617
  2551  001690  D000               	nop2	
  2552                           
  2553                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2554  001692  0E00               	movlw	0
  2555  001694  6E30               	movwf	SendLCD@type,c
  2556  001696  0E06               	movlw	6
  2557  001698  EC5C  F00E         	call	_SendLCD
  2558                           
  2559                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2560  00169C  0E21               	movlw	33
  2561  00169E                     u3627:
  2562  00169E  2EE8               	decfsz	wreg,f,c
  2563  0016A0  D7FE               	bra	u3627
  2564  0016A2  F000               	nop	
  2565                           
  2566                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2567  0016A4  0E00               	movlw	0
  2568  0016A6  6E30               	movwf	SendLCD@type,c
  2569  0016A8  0E0C               	movlw	12
  2570  0016AA  EC5C  F00E         	call	_SendLCD
  2571                           
  2572                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2573  0016AE  0E21               	movlw	33
  2574  0016B0                     u3637:
  2575  0016B0  2EE8               	decfsz	wreg,f,c
  2576  0016B2  D7FE               	bra	u3637
  2577  0016B4  F000               	nop	
  2578  0016B6  0012               	return		;funcret
  2579  0016B8                     __end_of_initLCD:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           prodh	equ	0xFF4
  2583                           prodl	equ	0xFF3
  2584                           intcon	equ	0xFF2
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           indf1	equ	0xFE7
  2588                           plusw1	equ	0xFE3
  2589                           fsr1h	equ	0xFE2
  2590                           fsr1l	equ	0xFE1
  2591                           indf2	equ	0xFDF
  2592                           postinc2	equ	0xFDE
  2593                           postdec2	equ	0xFDD
  2594                           plusw2	equ	0xFDB
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function _initIR *****************
  2600 ;; Defined at:
  2601 ;;		line 30 in file "IR_Reading.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2615 ;;      Params:         0       0       0       0
  2616 ;;      Locals:         0       0       0       0
  2617 ;;      Temps:          0       0       0       0
  2618 ;;      Totals:         0       0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_main
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text5
  2630  000174                     __ptext5:
  2631                           	opt stack 0
  2632  000174                     _initIR:
  2633                           	opt stack 27
  2634                           
  2635                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2636                           
  2637                           ;incstack = 0
  2638  000174  9489               	bcf	3977,2,c	;volatile
  2639                           
  2640                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2641  000176  9689               	bcf	3977,3,c	;volatile
  2642                           
  2643                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2644  000178  8492               	bsf	3986,2,c	;volatile
  2645                           
  2646                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2647  00017A  8692               	bsf	3986,3,c	;volatile
  2648                           
  2649                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2650  00017C  94B8               	bcf	4024,2,c	;volatile
  2651                           
  2652                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2653  00017E  96B8               	bcf	4024,3,c	;volatile
  2654                           
  2655                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2656  000180  9CB8               	bcf	4024,6,c	;volatile
  2657                           
  2658                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2659  000182  9EB8               	bcf	4024,7,c	;volatile
  2660                           
  2661                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2662  000184  0E06               	movlw	6
  2663  000186  6E63               	movwf	3939,c	;volatile
  2664                           
  2665                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2666  000188  0E06               	movlw	6
  2667  00018A  6E62               	movwf	3938,c	;volatile
  2668                           
  2669                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2670  00018C  9096               	bcf	3990,0,c	;volatile
  2671                           
  2672                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2673  00018E  9296               	bcf	3990,1,c	;volatile
  2674                           
  2675                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2676  000190  0E59               	movlw	89
  2677  000192  6EB7               	movwf	4023,c	;volatile
  2678  000194  0012               	return		;funcret
  2679  000196                     __end_of_initIR:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon	equ	0xFF2
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           indf1	equ	0xFE7
  2688                           plusw1	equ	0xFE3
  2689                           fsr1h	equ	0xFE2
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           plusw2	equ	0xFDB
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _fullSpeedBack *****************
  2700 ;; Defined at:
  2701 ;;		line 138 in file "dc_motor.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2704 ;;		 -> main@mL(9), 
  2705 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2706 ;;		 -> main@mR(9), 
  2707 ;;  power           1   27[BANK0 ] unsigned char 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2719 ;;      Params:         0       5       0       0
  2720 ;;      Locals:         0       0       0       0
  2721 ;;      Temps:          0       0       0       0
  2722 ;;      Totals:         0       5       0       0
  2723 ;;Total ram usage:        5 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    6
  2726 ;; This function calls:
  2727 ;;		_fullSpeed
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text6
  2734  001AEE                     __ptext6:
  2735                           	opt stack 0
  2736  001AEE                     _fullSpeedBack:
  2737                           	opt stack 24
  2738                           
  2739                           ;dc_motor.c: 141: mL->direction=0;
  2740                           
  2741                           ;incstack = 0
  2742  001AEE  0100               	movlb	0	; () banked
  2743  001AF0  EE20 F001          	lfsr	2,1
  2744  001AF4  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2745  001AF6  26D9               	addwf	fsr2l,f,c
  2746  001AF8  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2747  001AFA  22DA               	addwfc	fsr2h,f,c
  2748  001AFC  0E00               	movlw	0
  2749  001AFE  6EDF               	movwf	indf2,c
  2750                           
  2751                           ;dc_motor.c: 142: mR->direction=0;
  2752  001B00  EE20 F001          	lfsr	2,1
  2753  001B04  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2754  001B06  26D9               	addwf	fsr2l,f,c
  2755  001B08  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2756  001B0A  22DA               	addwfc	fsr2h,f,c
  2757  001B0C  0E00               	movlw	0
  2758  001B0E  6EDF               	movwf	indf2,c
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2762  001B10  C077  F071         	movff	fullSpeedBack@mL,fullSpeed@mL
  2763  001B14  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2764  001B18  C079  F073         	movff	fullSpeedBack@mR,fullSpeed@mR
  2765  001B1C  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2766  001B20  C07B  F075         	movff	fullSpeedBack@power,fullSpeed@power
  2767  001B24  EC47  F00C         	call	_fullSpeed	;wreg free
  2768  001B28  0012               	return		;funcret
  2769  001B2A                     __end_of_fullSpeedBack:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           indf1	equ	0xFE7
  2778                           plusw1	equ	0xFE3
  2779                           fsr1h	equ	0xFE2
  2780                           fsr1l	equ	0xFE1
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           plusw2	equ	0xFDB
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _enableSensor *****************
  2790 ;; Defined at:
  2791 ;;		line 106 in file "IR_Reading.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  sensor          1    wreg     unsigned char 
  2794 ;;  status          1   43[COMRAM] unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  sensor          1   44[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2806 ;;      Params:         1       0       0       0
  2807 ;;      Locals:         1       0       0       0
  2808 ;;      Temps:          0       0       0       0
  2809 ;;      Totals:         2       0       0       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    3
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text7
  2821  000128                     __ptext7:
  2822                           	opt stack 0
  2823  000128                     _enableSensor:
  2824                           	opt stack 27
  2825                           
  2826                           ;incstack = 0
  2827                           ;enableSensor@sensor stored from wreg
  2828  000128  6E2D               	movwf	enableSensor@sensor,c
  2829                           
  2830                           ;IR_Reading.c: 108: if (sensor==0){
  2831  00012A  502D               	movf	enableSensor@sensor,w,c
  2832  00012C  A4D8               	btfss	status,2,c
  2833  00012E  D006               	goto	l120
  2834                           
  2835                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2836  000130  B02C               	btfsc	enableSensor@status,0,c
  2837  000132  D002               	bra	u1945
  2838  000134  908D               	bcf	3981,0,c	;volatile
  2839  000136  D001               	bra	u1946
  2840  000138                     u1945:
  2841  000138  808D               	bsf	3981,0,c	;volatile
  2842  00013A                     u1946:
  2843                           
  2844                           ;IR_Reading.c: 110: } else if (sensor==1){
  2845  00013A  0012               	return	
  2846  00013C                     l120:
  2847  00013C  042D               	decf	enableSensor@sensor,w,c
  2848  00013E  A4D8               	btfss	status,2,c
  2849  000140  0012               	return	
  2850                           
  2851                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2852  000142  B02C               	btfsc	enableSensor@status,0,c
  2853  000144  D002               	bra	u1965
  2854  000146  928D               	bcf	3981,1,c	;volatile
  2855  000148  D001               	bra	u1966
  2856  00014A                     u1965:
  2857  00014A  828D               	bsf	3981,1,c	;volatile
  2858  00014C                     u1966:
  2859  00014C  0012               	return	
  2860  00014E                     __end_of_enableSensor:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           prodh	equ	0xFF4
  2864                           prodl	equ	0xFF3
  2865                           intcon	equ	0xFF2
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           indf1	equ	0xFE7
  2869                           plusw1	equ	0xFE3
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           plusw2	equ	0xFDB
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _VerifySignal *****************
  2881 ;; Defined at:
  2882 ;;		line 39 in file "RFID_Reader.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  RecievedStri    2    2[BANK0 ] PTR unsigned char 
  2885 ;;		 -> ReceivedString(16), 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  translatedAS   12    8[BANK0 ] unsigned char [12]
  2888 ;;  i               1   22[BANK0 ] unsigned char 
  2889 ;;  ASCIICheckSu    1   21[BANK0 ] unsigned char 
  2890 ;;  xorOutput       1   20[BANK0 ] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      unsigned char 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2900 ;;      Params:         0       2       0       0
  2901 ;;      Locals:         0      15       0       0
  2902 ;;      Temps:          0       4       0       0
  2903 ;;      Totals:         0      21       0       0
  2904 ;;Total ram usage:       21 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    4
  2907 ;; This function calls:
  2908 ;;		_memset
  2909 ;; This function is called by:
  2910 ;;		_main
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text8
  2915  0011BE                     __ptext8:
  2916                           	opt stack 0
  2917  0011BE                     _VerifySignal:
  2918                           	opt stack 26
  2919                           
  2920                           ;RFID_Reader.c: 40: unsigned char i=0;
  2921                           
  2922                           ;incstack = 0
  2923  0011BE  0E00               	movlw	0
  2924  0011C0  0100               	movlb	0	; () banked
  2925  0011C2  6F76               	movwf	VerifySignal@i& (0+255),b
  2926                           
  2927                           ;RFID_Reader.c: 41: unsigned char xorOutput=0;
  2928  0011C4  0E00               	movlw	0
  2929  0011C6  6F74               	movwf	VerifySignal@xorOutput& (0+255),b
  2930                           
  2931                           ;RFID_Reader.c: 42: unsigned char translatedASCII[12];
  2932                           ;RFID_Reader.c: 43: unsigned char ASCIICheckSum=0;
  2933  0011C8  0E00               	movlw	0
  2934  0011CA  6F75               	movwf	VerifySignal@ASCIICheckSum& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;RFID_Reader.c: 44: memset(translatedASCII,0,12);
  2938  0011CC  0E68               	movlw	low VerifySignal@translatedASCII
  2939  0011CE  6E2C               	movwf	memset@p1,c
  2940  0011D0  0E00               	movlw	high VerifySignal@translatedASCII
  2941  0011D2  6E2D               	movwf	memset@p1+1,c
  2942  0011D4  0E00               	movlw	0
  2943  0011D6  6E2F               	movwf	memset@c+1,c
  2944  0011D8  0E00               	movlw	0
  2945  0011DA  6E2E               	movwf	memset@c,c
  2946  0011DC  0E00               	movlw	0
  2947  0011DE  6E31               	movwf	memset@n+1,c
  2948  0011E0  0E0C               	movlw	12
  2949  0011E2  6E30               	movwf	memset@n,c
  2950  0011E4  EC7D  F000         	call	_memset	;wreg free
  2951                           
  2952                           ;RFID_Reader.c: 46: for(i=0;i<12;i++){
  2953  0011E8  0E00               	movlw	0
  2954  0011EA  0100               	movlb	0	; () banked
  2955  0011EC  6F76               	movwf	VerifySignal@i& (0+255),b
  2956  0011EE                     l3599:
  2957                           
  2958                           ; BSR set to: 0
  2959  0011EE  0E0B               	movlw	11
  2960  0011F0  6576               	cpfsgt	VerifySignal@i& (0+255),b
  2961  0011F2  D001               	goto	l266
  2962  0011F4  D04B               	goto	u3180
  2963  0011F6                     l266:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;RFID_Reader.c: 47: if(RecievedString[i]>'F'){
  2967                           
  2968                           ; BSR set to: 0
  2969  0011F6  5176               	movf	VerifySignal@i& (0+255),w,b
  2970  0011F8  0D01               	mullw	1
  2971  0011FA  50F3               	movf	prodl,w,c
  2972  0011FC  2562               	addwf	VerifySignal@RecievedString& (0+255),w,b
  2973  0011FE  6ED9               	movwf	fsr2l,c
  2974  001200  50F4               	movf	prodh,w,c
  2975  001202  2163               	addwfc	(VerifySignal@RecievedString+1)& (0+255),w,b
  2976  001204  6EDA               	movwf	fsr2h,c
  2977  001206  0E46               	movlw	70
  2978  001208  64DF               	cpfsgt	indf2,c
  2979  00120A  D002               	goto	l268
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;RFID_Reader.c: 48: return 0;
  2983  00120C  0E00               	movlw	0
  2984                           
  2985                           ; BSR set to: 0
  2986  00120E  0012               	return	
  2987  001210                     l268:
  2988                           
  2989                           ; BSR set to: 0
  2990                           
  2991                           ; BSR set to: 0
  2992  001210  5176               	movf	VerifySignal@i& (0+255),w,b
  2993  001212  0D01               	mullw	1
  2994  001214  50F3               	movf	prodl,w,c
  2995  001216  2562               	addwf	VerifySignal@RecievedString& (0+255),w,b
  2996  001218  6ED9               	movwf	fsr2l,c
  2997  00121A  50F4               	movf	prodh,w,c
  2998  00121C  2163               	addwfc	(VerifySignal@RecievedString+1)& (0+255),w,b
  2999  00121E  6EDA               	movwf	fsr2h,c
  3000  001220  0E40               	movlw	64
  3001  001222  64DF               	cpfsgt	indf2,c
  3002  001224  D013               	goto	l271
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;RFID_Reader.c: 50: translatedASCII[i]=RecievedString[i]-'A'+10;
  3006  001226  5176               	movf	VerifySignal@i& (0+255),w,b
  3007  001228  0D01               	mullw	1
  3008  00122A  0E68               	movlw	low VerifySignal@translatedASCII
  3009  00122C  24F3               	addwf	prodl,w,c
  3010  00122E  6ED9               	movwf	fsr2l,c
  3011  001230  0E00               	movlw	high VerifySignal@translatedASCII
  3012  001232  20F4               	addwfc	prodh,w,c
  3013  001234  6EDA               	movwf	fsr2h,c
  3014  001236  5176               	movf	VerifySignal@i& (0+255),w,b
  3015  001238  0D01               	mullw	1
  3016  00123A  50F3               	movf	prodl,w,c
  3017  00123C  2562               	addwf	VerifySignal@RecievedString& (0+255),w,b
  3018  00123E  6EE1               	movwf	fsr1l,c
  3019  001240  50F4               	movf	prodh,w,c
  3020  001242  2163               	addwfc	(VerifySignal@RecievedString+1)& (0+255),w,b
  3021  001244  6EE2               	movwf	fsr1h,c
  3022  001246  50E7               	movf	indf1,w,c
  3023  001248  0FC9               	addlw	201
  3024  00124A  D01D               	goto	L4
  3025  00124C                     l271:
  3026                           
  3027                           ; BSR set to: 0
  3028                           
  3029                           ; BSR set to: 0
  3030  00124C  5176               	movf	VerifySignal@i& (0+255),w,b
  3031  00124E  0D01               	mullw	1
  3032  001250  50F3               	movf	prodl,w,c
  3033  001252  2562               	addwf	VerifySignal@RecievedString& (0+255),w,b
  3034  001254  6ED9               	movwf	fsr2l,c
  3035  001256  50F4               	movf	prodh,w,c
  3036  001258  2163               	addwfc	(VerifySignal@RecievedString+1)& (0+255),w,b
  3037  00125A  6EDA               	movwf	fsr2h,c
  3038  00125C  0E2F               	movlw	47
  3039  00125E  64DF               	cpfsgt	indf2,c
  3040  001260  D013               	goto	l273
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;RFID_Reader.c: 52: translatedASCII[i]=RecievedString[i]-'0';
  3044  001262  5176               	movf	VerifySignal@i& (0+255),w,b
  3045  001264  0D01               	mullw	1
  3046  001266  0E68               	movlw	low VerifySignal@translatedASCII
  3047  001268  24F3               	addwf	prodl,w,c
  3048  00126A  6ED9               	movwf	fsr2l,c
  3049  00126C  0E00               	movlw	high VerifySignal@translatedASCII
  3050  00126E  20F4               	addwfc	prodh,w,c
  3051  001270  6EDA               	movwf	fsr2h,c
  3052  001272  5176               	movf	VerifySignal@i& (0+255),w,b
  3053  001274  0D01               	mullw	1
  3054  001276  50F3               	movf	prodl,w,c
  3055  001278  2562               	addwf	VerifySignal@RecievedString& (0+255),w,b
  3056  00127A  6EE1               	movwf	fsr1l,c
  3057  00127C  50F4               	movf	prodh,w,c
  3058  00127E  2163               	addwfc	(VerifySignal@RecievedString+1)& (0+255),w,b
  3059  001280  6EE2               	movwf	fsr1h,c
  3060  001282  50E7               	movf	indf1,w,c
  3061  001284  0FD0               	addlw	208
  3062  001286                     L4:
  3063  001286  6EDF               	movwf	indf2,c
  3064  001288                     l273:
  3065                           
  3066                           ; BSR set to: 0
  3067                           
  3068                           ; BSR set to: 0
  3069                           
  3070                           ; BSR set to: 0
  3071                           
  3072                           ; BSR set to: 0
  3073  001288  2B76               	incf	VerifySignal@i& (0+255),f,b
  3074  00128A  D7B1               	goto	l3599
  3075  00128C                     u3180:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;RFID_Reader.c: 53: }
  3079                           ;RFID_Reader.c: 54: }
  3080                           ;RFID_Reader.c: 56: for (i=0;i<5;i++) {
  3081                           
  3082                           ; BSR set to: 0
  3083  00128C  0E00               	movlw	0
  3084  00128E  6F76               	movwf	VerifySignal@i& (0+255),b
  3085  001290                     l3625:
  3086                           
  3087                           ; BSR set to: 0
  3088  001290  0E04               	movlw	4
  3089  001292  6576               	cpfsgt	VerifySignal@i& (0+255),b
  3090  001294  D001               	goto	l274
  3091  001296  D022               	goto	u3200
  3092  001298                     l274:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;RFID_Reader.c: 57: xorOutput^=(translatedASCII[2*i]<<4)+translatedASCII[2*i+1];
  3096                           
  3097                           ; BSR set to: 0
  3098  001298  5176               	movf	VerifySignal@i& (0+255),w,b
  3099  00129A  6F64               	movwf	??_VerifySignal& (0+255),b
  3100  00129C  6B65               	clrf	(??_VerifySignal+1)& (0+255),b
  3101  00129E  90D8               	bcf	status,0,c
  3102  0012A0  3764               	rlcf	??_VerifySignal& (0+255),f,b
  3103  0012A2  3765               	rlcf	(??_VerifySignal+1)& (0+255),f,b
  3104  0012A4  0E01               	movlw	1
  3105  0012A6  2764               	addwf	??_VerifySignal& (0+255),f,b
  3106  0012A8  0E00               	movlw	0
  3107  0012AA  2365               	addwfc	(??_VerifySignal+1)& (0+255),f,b
  3108  0012AC  0E68               	movlw	low VerifySignal@translatedASCII
  3109  0012AE  2564               	addwf	??_VerifySignal& (0+255),w,b
  3110  0012B0  6ED9               	movwf	fsr2l,c
  3111  0012B2  0E00               	movlw	high VerifySignal@translatedASCII
  3112  0012B4  2165               	addwfc	(??_VerifySignal+1)& (0+255),w,b
  3113  0012B6  6EDA               	movwf	fsr2h,c
  3114  0012B8  50DF               	movf	indf2,w,c
  3115  0012BA  6F66               	movwf	(??_VerifySignal+2)& (0+255),b
  3116  0012BC  5176               	movf	VerifySignal@i& (0+255),w,b
  3117  0012BE  0D02               	mullw	2
  3118  0012C0  0E68               	movlw	low VerifySignal@translatedASCII
  3119  0012C2  24F3               	addwf	prodl,w,c
  3120  0012C4  6ED9               	movwf	fsr2l,c
  3121  0012C6  0E00               	movlw	high VerifySignal@translatedASCII
  3122  0012C8  20F4               	addwfc	prodh,w,c
  3123  0012CA  6EDA               	movwf	fsr2h,c
  3124  0012CC  50DF               	movf	indf2,w,c
  3125  0012CE  6F67               	movwf	(??_VerifySignal+3)& (0+255),b
  3126  0012D0  3967               	swapf	(??_VerifySignal+3)& (0+255),w,b
  3127  0012D2  0BF0               	andlw	240
  3128  0012D4  2566               	addwf	(??_VerifySignal+2)& (0+255),w,b
  3129  0012D6  1B74               	xorwf	VerifySignal@xorOutput& (0+255),f,b
  3130                           
  3131                           ; BSR set to: 0
  3132  0012D8  2B76               	incf	VerifySignal@i& (0+255),f,b
  3133  0012DA  D7DA               	goto	l3625
  3134  0012DC                     u3200:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;RFID_Reader.c: 58: }
  3138                           ;RFID_Reader.c: 60: ASCIICheckSum=(translatedASCII[10]<<4)+(translatedASCII[11]&0xF);
  3139                           
  3140                           ; BSR set to: 0
  3141  0012DC  C073  F064         	movff	VerifySignal@translatedASCII+11,??_VerifySignal
  3142  0012E0  0E0F               	movlw	15
  3143  0012E2  1764               	andwf	??_VerifySignal& (0+255),f,b
  3144  0012E4  3972               	swapf	(VerifySignal@translatedASCII+10)& (0+255),w,b
  3145  0012E6  0BF0               	andlw	240
  3146  0012E8  2564               	addwf	??_VerifySignal& (0+255),w,b
  3147  0012EA  6F75               	movwf	VerifySignal@ASCIICheckSum& (0+255),b
  3148                           
  3149                           ;RFID_Reader.c: 62: if (ASCIICheckSum==xorOutput){
  3150  0012EC  5174               	movf	VerifySignal@xorOutput& (0+255),w,b
  3151  0012EE  1975               	xorwf	VerifySignal@ASCIICheckSum& (0+255),w,b
  3152  0012F0  A4D8               	btfss	status,2,c
  3153  0012F2  D002               	goto	l276
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;RFID_Reader.c: 63: return 1;
  3157  0012F4  0E01               	movlw	1
  3158                           
  3159                           ; BSR set to: 0
  3160  0012F6  0012               	return	
  3161  0012F8                     l276:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;RFID_Reader.c: 64: }
  3165                           ;RFID_Reader.c: 66: return 0;
  3166                           
  3167                           ; BSR set to: 0
  3168  0012F8  0E00               	movlw	0
  3169  0012FA  0012               	return	
  3170  0012FC                     __end_of_VerifySignal:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           postinc0	equ	0xFEE
  3177                           wreg	equ	0xFE8
  3178                           indf1	equ	0xFE7
  3179                           plusw1	equ	0xFE3
  3180                           fsr1h	equ	0xFE2
  3181                           fsr1l	equ	0xFE1
  3182                           indf2	equ	0xFDF
  3183                           postinc2	equ	0xFDE
  3184                           postdec2	equ	0xFDD
  3185                           plusw2	equ	0xFDB
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _memset *****************
  3191 ;; Defined at:
  3192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  p1              2   43[COMRAM] PTR void 
  3195 ;;		 -> VerifySignal@translatedASCII(12), 
  3196 ;;  c               2   45[COMRAM] int 
  3197 ;;  n               2   47[COMRAM] unsigned int 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  p               2    0[BANK0 ] PTR unsigned char 
  3200 ;;		 -> VerifySignal@translatedASCII(12), 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  2   43[COMRAM] PTR void 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3210 ;;      Params:         6       0       0       0
  3211 ;;      Locals:         0       2       0       0
  3212 ;;      Temps:          0       0       0       0
  3213 ;;      Totals:         6       2       0       0
  3214 ;;Total ram usage:        8 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_VerifySignal
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text9
  3225  0000FA                     __ptext9:
  3226                           	opt stack 0
  3227  0000FA                     _memset:
  3228                           	opt stack 26
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;incstack = 0
  3232  0000FA  C02C  F060         	movff	memset@p1,memset@p
  3233  0000FE  C02D  F061         	movff	memset@p1+1,memset@p+1
  3234  000102  D009               	goto	l935
  3235  000104                     l3375:
  3236  000104  C060  FFD9         	movff	memset@p,fsr2l
  3237  000108  C061  FFDA         	movff	memset@p+1,fsr2h
  3238  00010C  C02E  FFDF         	movff	memset@c,indf2
  3239  000110  0100               	movlb	0	; () banked
  3240  000112  4B60               	infsnz	memset@p& (0+255),f,b
  3241  000114  2B61               	incf	(memset@p+1)& (0+255),f,b
  3242  000116                     l935:
  3243                           
  3244                           ; BSR set to: 0
  3245  000116  0630               	decf	memset@n,f,c
  3246  000118  A0D8               	btfss	status,0,c
  3247  00011A  0631               	decf	memset@n+1,f,c
  3248  00011C  2830               	incf	memset@n,w,c
  3249  00011E  E1F2               	bnz	l3375
  3250  000120  2831               	incf	memset@n+1,w,c
  3251  000122  B4D8               	btfsc	status,2,c
  3252  000124  0012               	return	
  3253  000126  D7EE               	goto	l936
  3254  000128                     __end_of_memset:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           indf1	equ	0xFE7
  3263                           plusw1	equ	0xFE3
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           plusw2	equ	0xFDB
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _ScanWithRange *****************
  3275 ;; Defined at:
  3276 ;;		line 98 in file "Movement.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  3279 ;;		 -> main@mL(9), 
  3280 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  3281 ;;		 -> main@mR(9), 
  3282 ;;  loops           2   32[BANK0 ] int 
  3283 ;;  MoveTime        2   34[BANK0 ] PTR int 
  3284 ;;		 -> main@MoveTime(100), 
  3285 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  3286 ;;		 -> main@Move(1), 
  3287 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  3288 ;;		 -> main@MoveType(50), 
  3289 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  3290 ;;		 -> RFID_Read(1), 
  3291 ;;  millis          2   42[BANK0 ] PTR unsigned int 
  3292 ;;		 -> millis(2), 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  buf            40   48[BANK0 ] unsigned char [40]
  3295 ;;  SensorResult    4   98[BANK0 ] unsigned int [2]
  3296 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  3297 ;;  TimeAboveThr    2   96[BANK0 ] unsigned int 
  3298 ;;  LeftFlag        2   94[BANK0 ] unsigned int 
  3299 ;;  DirectionFou    2   90[BANK0 ] const unsigned int 
  3300 ;;  i               2   88[BANK0 ] unsigned int 
  3301 ;;  LeftFlick       1  102[BANK0 ] const char 
  3302 ;;  MiniLeftFlic    1   93[BANK0 ] const unsigned char 
  3303 ;;  MotorPower      1   92[BANK0 ] const unsigned char 
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      unsigned char 
  3306 ;; Registers used:
  3307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3313 ;;      Params:         0      16       0       0
  3314 ;;      Locals:         0      57       0       0
  3315 ;;      Temps:          0       4       0       0
  3316 ;;      Totals:         0      77       0       0
  3317 ;;Total ram usage:       77 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    7
  3320 ;; This function calls:
  3321 ;;		_LCD_String
  3322 ;;		_SendLCD
  3323 ;;		_SetLine
  3324 ;;		_delay_tenth_s
  3325 ;;		_grabLeftIR
  3326 ;;		_grabRightIR
  3327 ;;		_sprintf
  3328 ;;		_stop
  3329 ;;		_turnLeft
  3330 ;;		_turnRight
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text10
  3337  000A20                     __ptext10:
  3338                           	opt stack 0
  3339  000A20                     _ScanWithRange:
  3340                           	opt stack 23
  3341                           
  3342                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3343                           
  3344                           ;incstack = 0
  3345  000A20  C0CB  F0C2         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  3346  000A24  C0CC  F0C3         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  3347  000A28  C0CD  F0C4         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  3348  000A2C  C0CE  F0C5         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  3349                           
  3350                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3351  000A30  0E00               	movlw	0
  3352  000A32  0100               	movlb	0	; () banked
  3353  000A34  6FBF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3354  000A36  0E00               	movlw	0
  3355  000A38  6FBE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3356                           
  3357                           ;Movement.c: 105: unsigned int RightFlag=0;
  3358  000A3A  0E00               	movlw	0
  3359  000A3C  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3360  000A3E  0E00               	movlw	0
  3361  000A40  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3362                           
  3363                           ;Movement.c: 106: char buf[40];
  3364                           ;Movement.c: 107: unsigned int i=0;
  3365  000A42  0E00               	movlw	0
  3366  000A44  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3367  000A46  0E00               	movlw	0
  3368  000A48  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3369                           
  3370                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3371  000A4A  0E00               	movlw	0
  3372  000A4C  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3373  000A4E  0E00               	movlw	0
  3374  000A50  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3375                           
  3376                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=500;
  3377  000A52  0E01               	movlw	1
  3378  000A54  6FBB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3379  000A56  0EF4               	movlw	244
  3380  000A58  6FBA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3381                           
  3382                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3383  000A5A  0E28               	movlw	40
  3384  000A5C  6FBC               	movwf	ScanWithRange@MotorPower& (0+255),b
  3385                           
  3386                           ;Movement.c: 114: const signed char LeftFlick=2;
  3387  000A5E  0E02               	movlw	2
  3388  000A60  6FC6               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3389                           
  3390                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3391  000A62  0E01               	movlw	1
  3392  000A64  6FBD               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3396  000A66  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3397  000A6A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3398  000A6E  50DF               	movf	indf2,w,c
  3399  000A70  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3400  000A72  518C               	movf	??_ScanWithRange& (0+255),w,b
  3401  000A74  0D01               	mullw	1
  3402  000A76  50F3               	movf	prodl,w,c
  3403  000A78  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3404  000A7A  6ED9               	movwf	fsr2l,c
  3405  000A7C  50F4               	movf	prodh,w,c
  3406  000A7E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3407  000A80  6EDA               	movwf	fsr2h,c
  3408  000A82  0E02               	movlw	2
  3409  000A84  6EDF               	movwf	indf2,c
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3413  000A86  C0C6  F08C         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3414  000A8A  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3415  000A8C  BF8C               	btfsc	??_ScanWithRange& (0+255),7,b
  3416  000A8E  078D               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3417  000A90  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3418  000A94  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3419  000A98  50DF               	movf	indf2,w,c
  3420  000A9A  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3421  000A9C  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3422  000A9E  0D02               	mullw	2
  3423  000AA0  50F3               	movf	prodl,w,c
  3424  000AA2  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3425  000AA4  6ED9               	movwf	fsr2l,c
  3426  000AA6  50F4               	movf	prodh,w,c
  3427  000AA8  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3428  000AAA  6EDA               	movwf	fsr2h,c
  3429  000AAC  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3430  000AB0  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;Movement.c: 126: *Move = *Move+1;
  3434  000AB4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3435  000AB8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3436  000ABC  50DF               	movf	indf2,w,c
  3437  000ABE  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3438  000AC0  298C               	incf	??_ScanWithRange& (0+255),w,b
  3439  000AC2  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3440  000AC6  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3441  000ACA  6EDF               	movwf	indf2,c
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3445  000ACC  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3446  000AD0  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3447  000AD4  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3448  000AD8  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3449  000ADC  0E64               	movlw	100
  3450  000ADE  6F7B               	movwf	turnLeft@power& (0+255),b
  3451  000AE0  ECB3  F00D         	call	_turnLeft	;wreg free
  3452                           
  3453                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3454  000AE4  0100               	movlb	0	; () banked
  3455  000AE6  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3456  000AE8  ECEE  F00D         	call	_delay_tenth_s
  3457                           
  3458                           ;Movement.c: 129: stop(mL,mR);
  3459  000AEC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3460  000AF0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3461  000AF4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3462  000AF8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3463  000AFC  ECBB  F00B         	call	_stop	;wreg free
  3464                           
  3465                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3466  000B00  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3467  000B04  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3468  000B08  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3469  000B0C  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3470  000B10  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3471  000B14  EC95  F00D         	call	_turnRight	;wreg free
  3472                           
  3473                           ;Movement.c: 135: TMR0L = 0;
  3474  000B18  0E00               	movlw	0
  3475  000B1A  6ED6               	movwf	4054,c	;volatile
  3476                           
  3477                           ;Movement.c: 136: TMR0H = 0;
  3478  000B1C  0E00               	movlw	0
  3479  000B1E  6ED7               	movwf	4055,c	;volatile
  3480                           
  3481                           ;Movement.c: 137: *millis = 0;
  3482  000B20  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3483  000B24  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3484  000B28  0E00               	movlw	0
  3485  000B2A  6EDE               	movwf	postinc2,c
  3486  000B2C  0E00               	movlw	0
  3487  000B2E  6EDD               	movwf	postdec2,c
  3488                           
  3489                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3490  000B30  8ED5               	bsf	4053,7,c	;volatile
  3491                           
  3492                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3493  000B32  0E00               	movlw	0
  3494  000B34  0100               	movlb	0	; () banked
  3495  000B36  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3496  000B38  0E01               	movlw	1
  3497  000B3A  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3498  000B3C  D1A0               	goto	l224
  3499  000B3E                     
  3500                           ; BSR set to: 0
  3501                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3502                           
  3503                           ; BSR set to: 0
  3504  000B3E  ECC0  F00C         	call	_grabLeftIR	;wreg free
  3505  000B42  C02C  F0C2         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3506  000B46  C02D  F0C3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3507                           
  3508                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3509  000B4A  EC85  F00C         	call	_grabRightIR	;wreg free
  3510  000B4E  C02C  F0C4         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3511  000B52  C02D  F0C5         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3512                           
  3513                           ;Movement.c: 148: CAP1BUFH=0;
  3514  000B56  0E00               	movlw	0
  3515  000B58  6E69               	movwf	3945,c	;volatile
  3516                           
  3517                           ;Movement.c: 149: CAP1BUFL=0;
  3518  000B5A  0E00               	movlw	0
  3519  000B5C  6E68               	movwf	3944,c	;volatile
  3520                           
  3521                           ;Movement.c: 150: CAP2BUFH=0;
  3522  000B5E  0E00               	movlw	0
  3523  000B60  6E67               	movwf	3943,c	;volatile
  3524                           
  3525                           ;Movement.c: 151: CAP2BUFL=0;
  3526  000B62  0E00               	movlw	0
  3527  000B64  6E66               	movwf	3942,c	;volatile
  3528                           
  3529                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3530  000B66  0E00               	movlw	0
  3531  000B68  6E30               	movwf	SendLCD@type,c
  3532  000B6A  0E01               	movlw	1
  3533  000B6C  EC5C  F00E         	call	_SendLCD
  3534                           
  3535                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3536  000B70  0E21               	movlw	33
  3537  000B72                     u3647:
  3538  000B72  2EE8               	decfsz	wreg,f,c
  3539  000B74  D7FE               	bra	u3647
  3540  000B76  F000               	nop	
  3541                           
  3542                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3543  000B78  0E00               	movlw	0
  3544  000B7A  6E30               	movwf	SendLCD@type,c
  3545  000B7C  0E02               	movlw	2
  3546  000B7E  EC5C  F00E         	call	_SendLCD
  3547                           
  3548                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3549  000B82  0E06               	movlw	6
  3550  000B84  0100               	movlb	0	; () banked
  3551  000B86  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3552  000B88  0E30               	movlw	48
  3553  000B8A                     u3657:
  3554  000B8A  2EE8               	decfsz	wreg,f,c
  3555  000B8C  D7FE               	bra	u3657
  3556  000B8E  2F8C               	decfsz	??_ScanWithRange& (0+255),f,b
  3557  000B90  D7FC               	bra	u3657
  3558  000B92  F000               	nop	
  3559                           
  3560                           ;Movement.c: 159: SetLine(1);
  3561  000B94  0E01               	movlw	1
  3562  000B96  EC41  F00E         	call	_SetLine
  3563                           
  3564                           ;Movement.c: 160: LCD_String("     ScanIR");
  3565  000B9A  0E2D               	movlw	low STR_1
  3566  000B9C  0100               	movlb	0	; () banked
  3567  000B9E  6F60               	movwf	LCD_String@string& (0+255),b
  3568  000BA0  0E03               	movlw	high STR_1
  3569  000BA2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3570  000BA4  ECFB  F00C         	call	_LCD_String	;wreg free
  3571                           
  3572                           ;Movement.c: 161: SetLine(2);
  3573  000BA8  0E02               	movlw	2
  3574  000BAA  EC41  F00E         	call	_SetLine
  3575                           
  3576                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3577  000BAE  0E90               	movlw	low ScanWithRange@buf
  3578  000BB0  0100               	movlb	0	; () banked
  3579  000BB2  6F67               	movwf	sprintf@sp& (0+255),b
  3580  000BB4  0E00               	movlw	high ScanWithRange@buf
  3581  000BB6  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3582  000BB8  0E0C               	movlw	low (STR_6+1)
  3583  000BBA  6F69               	movwf	sprintf@f& (0+255),b
  3584  000BBC  0E03               	movlw	high (STR_6+1)
  3585  000BBE  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3586  000BC0  C0C2  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3587  000BC4  C0C3  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3588  000BC8  C0C4  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3589  000BCC  C0C5  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3590  000BD0  EC8F  F007         	call	_sprintf	;wreg free
  3591                           
  3592                           ;Movement.c: 163: LCD_String(buf);
  3593  000BD4  0E90               	movlw	low ScanWithRange@buf
  3594  000BD6  0100               	movlb	0	; () banked
  3595  000BD8  6F60               	movwf	LCD_String@string& (0+255),b
  3596  000BDA  0E00               	movlw	high ScanWithRange@buf
  3597  000BDC  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3598  000BDE  ECFB  F00C         	call	_LCD_String	;wreg free
  3599                           
  3600                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3601  000BE2  0100               	movlb	0	; () banked
  3602  000BE4  51C4               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3603  000BE6  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3604  000BE8  51C5               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3605  000BEA  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3606  000BEC  B0D8               	btfsc	status,0,c
  3607  000BEE  D008               	goto	l226
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;Movement.c: 168: RightFlag=*millis;
  3611  000BF0  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3612  000BF4  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3613  000BF8  CFDE F0C7          	movff	postinc2,ScanWithRange@RightFlag
  3614  000BFC  CFDD F0C8          	movff	postdec2,ScanWithRange@RightFlag+1
  3615  000C00                     l226:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;Movement.c: 169: }
  3619                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3620                           
  3621                           ; BSR set to: 0
  3622  000C00  51C2               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3623  000C02  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3624  000C04  51C3               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3625  000C06  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3626  000C08  B0D8               	btfsc	status,0,c
  3627  000C0A  D008               	goto	l227
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;Movement.c: 172: LeftFlag=*millis;
  3631  000C0C  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3632  000C10  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3633  000C14  CFDE F0BE          	movff	postinc2,ScanWithRange@LeftFlag
  3634  000C18  CFDD F0BF          	movff	postdec2,ScanWithRange@LeftFlag+1
  3635  000C1C                     l227:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;Movement.c: 173: }
  3639                           ;Movement.c: 180: if (LeftFlag>0) {
  3640                           
  3641                           ; BSR set to: 0
  3642  000C1C  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3643  000C1E  11BF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3644  000C20  B4D8               	btfsc	status,2,c
  3645  000C22  D122               	goto	l234
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;Movement.c: 183: if (RightFlag>0) {
  3649  000C24  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3650  000C26  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3651  000C28  B4D8               	btfsc	status,2,c
  3652  000C2A  D08A               	goto	l229
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3656  000C2C  C0C7  F08C         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3657  000C30  C0C8  F08D         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3658  000C34  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3659  000C36  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3660  000C38  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3661  000C3A  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3662  000C3C  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3663  000C3E  258C               	addwf	??_ScanWithRange& (0+255),w,b
  3664  000C40  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3665  000C42  51BF               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3666  000C44  218D               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3667  000C46  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Movement.c: 185: TMR0L = 0;
  3671  000C48  0E00               	movlw	0
  3672  000C4A  6ED6               	movwf	4054,c	;volatile
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;Movement.c: 186: TMR0H = 0;
  3676  000C4C  0E00               	movlw	0
  3677  000C4E  6ED7               	movwf	4055,c	;volatile
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;Movement.c: 187: *millis = 0;
  3681  000C50  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3682  000C54  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3683  000C58  0E00               	movlw	0
  3684  000C5A  6EDE               	movwf	postinc2,c
  3685  000C5C  0E00               	movlw	0
  3686  000C5E  6EDD               	movwf	postdec2,c
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;Movement.c: 188: stop(mL,mR);
  3690  000C60  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3691  000C64  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3692  000C68  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3693  000C6C  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3694  000C70  ECBB  F00B         	call	_stop	;wreg free
  3695                           
  3696                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3697  000C74  D00C               	goto	l230
  3698  000C76                     
  3699                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3700  000C76  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3701  000C7A  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3702  000C7E  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3703  000C82  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3704  000C86  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3705  000C8A  ECB3  F00D         	call	_turnLeft	;wreg free
  3706  000C8E                     l230:
  3707  000C8E  90D8               	bcf	status,0,c
  3708  000C90  0100               	movlb	0	; () banked
  3709  000C92  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3710  000C94  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3711  000C96  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3712  000C98  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3713  000C9A  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3714  000C9E  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3715  000CA2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3716  000CA4  5CDE               	subwf	postinc2,w,c
  3717  000CA6  518D               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3718  000CA8  58DE               	subwfb	postinc2,w,c
  3719  000CAA  A0D8               	btfss	status,0,c
  3720  000CAC  D7E4               	goto	l231
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Movement.c: 191: }
  3724                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3725  000CAE  9ED5               	bcf	4053,7,c	;volatile
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Movement.c: 193: stop(mL,mR);
  3729  000CB0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3730  000CB4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3731  000CB8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3732  000CBC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3733  000CC0  ECBB  F00B         	call	_stop	;wreg free
  3734                           
  3735                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3736  000CC4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3737  000CC8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3738  000CCC  50DF               	movf	indf2,w,c
  3739  000CCE  0100               	movlb	0	; () banked
  3740  000CD0  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3741  000CD2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3742  000CD4  0D01               	mullw	1
  3743  000CD6  50F3               	movf	prodl,w,c
  3744  000CD8  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3745  000CDA  6ED9               	movwf	fsr2l,c
  3746  000CDC  50F4               	movf	prodh,w,c
  3747  000CDE  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3748  000CE0  6EDA               	movwf	fsr2h,c
  3749  000CE2  0E01               	movlw	1
  3750  000CE4  6EDF               	movwf	indf2,c
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3754  000CE6  90D8               	bcf	status,0,c
  3755  000CE8  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3756  000CEA  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3757  000CEC  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3758  000CEE  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3759  000CF0  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3760  000CF2  278C               	addwf	??_ScanWithRange& (0+255),f,b
  3761  000CF4  51C8               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3762  000CF6  238D               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3763  000CF8  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3764  000CFA  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3765  000CFC  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3766  000CFE  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3767  000D00  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3768  000D04  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3769  000D08  50DF               	movf	indf2,w,c
  3770  000D0A  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3771  000D0C  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3772  000D0E  0D02               	mullw	2
  3773  000D10  50F3               	movf	prodl,w,c
  3774  000D12  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3775  000D14  6ED9               	movwf	fsr2l,c
  3776  000D16  50F4               	movf	prodh,w,c
  3777  000D18  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3778  000D1A  6EDA               	movwf	fsr2h,c
  3779  000D1C  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3780  000D20  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;Movement.c: 197: *Move = *Move+1;
  3784  000D24  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3785  000D28  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3786  000D2C  50DF               	movf	indf2,w,c
  3787  000D2E  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3788  000D30  298C               	incf	??_ScanWithRange& (0+255),w,b
  3789  000D32  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3790  000D36  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3791  000D3A  6EDF               	movwf	indf2,c
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Movement.c: 199: return 2;
  3795  000D3C  0E02               	movlw	2
  3796                           
  3797                           ; BSR set to: 0
  3798  000D3E  0012               	return	
  3799  000D40                     l229:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3803  000D40  9ED5               	bcf	4053,7,c	;volatile
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3807  000D42  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3808  000D46  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3809  000D4A  50DF               	movf	indf2,w,c
  3810  000D4C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3811  000D4E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3812  000D50  0D01               	mullw	1
  3813  000D52  50F3               	movf	prodl,w,c
  3814  000D54  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3815  000D56  6ED9               	movwf	fsr2l,c
  3816  000D58  50F4               	movf	prodh,w,c
  3817  000D5A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3818  000D5C  6EDA               	movwf	fsr2h,c
  3819  000D5E  0E01               	movlw	1
  3820  000D60  6EDF               	movwf	indf2,c
  3821                           
  3822                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3823  000D62  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3824  000D66  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3825  000D6A  CFDE F08C          	movff	postinc2,??_ScanWithRange
  3826  000D6E  CFDD F08D          	movff	postdec2,??_ScanWithRange+1
  3827  000D72  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3828  000D74  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3829  000D76  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3830  000D78  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3831  000D7A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3832  000D7E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3833  000D82  50DF               	movf	indf2,w,c
  3834  000D84  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3835  000D86  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3836  000D88  0D02               	mullw	2
  3837  000D8A  50F3               	movf	prodl,w,c
  3838  000D8C  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3839  000D8E  6ED9               	movwf	fsr2l,c
  3840  000D90  50F4               	movf	prodh,w,c
  3841  000D92  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3842  000D94  6EDA               	movwf	fsr2h,c
  3843  000D96  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3844  000D9A  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Movement.c: 207: *Move = *Move+1;
  3848  000D9E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3849  000DA2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3850  000DA6  50DF               	movf	indf2,w,c
  3851  000DA8  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3852  000DAA  298C               	incf	??_ScanWithRange& (0+255),w,b
  3853  000DAC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3854  000DB0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3855  000DB4  6EDF               	movwf	indf2,c
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;Movement.c: 208: stop(mL,mR);
  3859  000DB6  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3860  000DBA  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3861  000DBE  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3862  000DC2  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3863  000DC6  ECBB  F00B         	call	_stop	;wreg free
  3864                           
  3865                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3866  000DCA  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3867  000DCE  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3868  000DD2  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3869  000DD6  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3870  000DDA  0E64               	movlw	100
  3871  000DDC  0100               	movlb	0	; () banked
  3872  000DDE  6F7B               	movwf	turnLeft@power& (0+255),b
  3873  000DE0  ECB3  F00D         	call	_turnLeft	;wreg free
  3874                           
  3875                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3876  000DE4  0100               	movlb	0	; () banked
  3877  000DE6  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3878  000DE8  ECEE  F00D         	call	_delay_tenth_s
  3879                           
  3880                           ;Movement.c: 213: stop(mL,mR);
  3881  000DEC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3882  000DF0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3883  000DF4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3884  000DF8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3885  000DFC  ECBB  F00B         	call	_stop	;wreg free
  3886                           
  3887                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3888  000E00  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3889  000E04  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3890  000E08  50DF               	movf	indf2,w,c
  3891  000E0A  0100               	movlb	0	; () banked
  3892  000E0C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3893  000E0E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3894  000E10  0D01               	mullw	1
  3895  000E12  50F3               	movf	prodl,w,c
  3896  000E14  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3897  000E16  6ED9               	movwf	fsr2l,c
  3898  000E18  50F4               	movf	prodh,w,c
  3899  000E1A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3900  000E1C  6EDA               	movwf	fsr2h,c
  3901  000E1E  0E02               	movlw	2
  3902  000E20  6EDF               	movwf	indf2,c
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3906  000E22  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3907  000E24  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3908  000E26  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3909  000E28  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3910  000E2C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3911  000E30  50DF               	movf	indf2,w,c
  3912  000E32  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3913  000E34  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3914  000E36  0D02               	mullw	2
  3915  000E38  50F3               	movf	prodl,w,c
  3916  000E3A  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3917  000E3C  6ED9               	movwf	fsr2l,c
  3918  000E3E  50F4               	movf	prodh,w,c
  3919  000E40  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3920  000E42  6EDA               	movwf	fsr2h,c
  3921  000E44  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3922  000E48  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;Movement.c: 216: *Move = *Move+1;
  3926  000E4C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3927  000E50  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3928  000E54  50DF               	movf	indf2,w,c
  3929  000E56  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3930  000E58  298C               	incf	??_ScanWithRange& (0+255),w,b
  3931  000E5A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3932  000E5E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3933  000E62  6EDF               	movwf	indf2,c
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Movement.c: 219: return 2;
  3937  000E64  0E02               	movlw	2
  3938                           
  3939                           ; BSR set to: 0
  3940  000E66  0012               	return	
  3941  000E68                     l234:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;Movement.c: 220: }
  3945                           ;Movement.c: 221: }
  3946                           ;Movement.c: 223: if (*RFID_Read==1) {
  3947                           
  3948                           ; BSR set to: 0
  3949                           
  3950                           ; BSR set to: 0
  3951  000E68  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3952  000E6C  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3953  000E70  04DE               	decf	postinc2,w,c
  3954  000E72  A4D8               	btfss	status,2,c
  3955  000E74  D002               	goto	l235
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;Movement.c: 224: return 2;
  3959  000E76  0E02               	movlw	2
  3960                           
  3961                           ; BSR set to: 0
  3962  000E78  0012               	return	
  3963  000E7A                     l235:
  3964                           
  3965                           ; BSR set to: 0
  3966                           
  3967                           ; BSR set to: 0
  3968  000E7A  4BB8               	infsnz	ScanWithRange@i& (0+255),f,b
  3969  000E7C  2BB9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3970  000E7E                     l224:
  3971                           
  3972                           ; BSR set to: 0
  3973                           
  3974                           ; BSR set to: 0
  3975  000E7E  51B8               	movf	ScanWithRange@i& (0+255),w,b
  3976  000E80  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3977  000E82  51B9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3978  000E84  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3979  000E86  B0D8               	btfsc	status,0,c
  3980  000E88  D65A               	goto	l225
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;Movement.c: 225: }
  3984                           ;Movement.c: 226: }
  3985                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3986                           
  3987                           ; BSR set to: 0
  3988  000E8A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3989  000E8E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3990  000E92  50DF               	movf	indf2,w,c
  3991  000E94  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3992  000E96  518C               	movf	??_ScanWithRange& (0+255),w,b
  3993  000E98  0D01               	mullw	1
  3994  000E9A  50F3               	movf	prodl,w,c
  3995  000E9C  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3996  000E9E  6ED9               	movwf	fsr2l,c
  3997  000EA0  50F4               	movf	prodh,w,c
  3998  000EA2  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3999  000EA4  6EDA               	movwf	fsr2h,c
  4000  000EA6  0E02               	movlw	2
  4001  000EA8  6EDF               	movwf	indf2,c
  4002                           
  4003                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  4004  000EAA  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  4005  000EAE  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  4006  000EB2  50DF               	movf	indf2,w,c
  4007  000EB4  6F8C               	movwf	??_ScanWithRange& (0+255),b
  4008  000EB6  518C               	movf	??_ScanWithRange& (0+255),w,b
  4009  000EB8  0D02               	mullw	2
  4010  000EBA  50F3               	movf	prodl,w,c
  4011  000EBC  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  4012  000EBE  6ED9               	movwf	fsr2l,c
  4013  000EC0  50F4               	movf	prodh,w,c
  4014  000EC2  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  4015  000EC4  6EDA               	movwf	fsr2h,c
  4016  000EC6  0EFE               	movlw	254
  4017  000EC8  6EDE               	movwf	postinc2,c
  4018  000ECA  0EFF               	movlw	255
  4019  000ECC  6EDD               	movwf	postdec2,c
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;Movement.c: 233: *Move = *Move+1;
  4023  000ECE  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  4024  000ED2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  4025  000ED6  50DF               	movf	indf2,w,c
  4026  000ED8  6F8C               	movwf	??_ScanWithRange& (0+255),b
  4027  000EDA  298C               	incf	??_ScanWithRange& (0+255),w,b
  4028  000EDC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  4029  000EE0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  4030  000EE4  6EDF               	movwf	indf2,c
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;Movement.c: 234: turnRight(mL,mR, 100);
  4034  000EE6  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  4035  000EEA  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  4036  000EEE  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  4037  000EF2  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  4038  000EF6  0E64               	movlw	100
  4039  000EF8  6F7B               	movwf	turnRight@power& (0+255),b
  4040  000EFA  EC95  F00D         	call	_turnRight	;wreg free
  4041                           
  4042                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  4043  000EFE  0100               	movlb	0	; () banked
  4044  000F00  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  4045  000F02  ECEE  F00D         	call	_delay_tenth_s
  4046                           
  4047                           ;Movement.c: 236: stop(mL,mR);
  4048  000F06  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  4049  000F0A  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  4050  000F0E  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  4051  000F12  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  4052  000F16  ECBB  F00B         	call	_stop	;wreg free
  4053                           
  4054                           ;Movement.c: 237: return -1;
  4055  000F1A  0EFF               	movlw	255
  4056  000F1C  0012               	return	
  4057  000F1E                     __end_of_ScanWithRange:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           indf1	equ	0xFE7
  4066                           plusw1	equ	0xFE3
  4067                           fsr1h	equ	0xFE2
  4068                           fsr1l	equ	0xFE1
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           plusw2	equ	0xFDB
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function _turnRight *****************
  4078 ;; Defined at:
  4079 ;;		line 103 in file "dc_motor.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4082 ;;		 -> main@mL(9), 
  4083 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4084 ;;		 -> main@mR(9), 
  4085 ;;  power           1   27[BANK0 ] unsigned char 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4097 ;;      Params:         0       5       0       0
  4098 ;;      Locals:         0       0       0       0
  4099 ;;      Temps:          0       0       0       0
  4100 ;;      Totals:         0       5       0       0
  4101 ;;Total ram usage:        5 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    6
  4104 ;; This function calls:
  4105 ;;		_fullSpeed
  4106 ;; This function is called by:
  4107 ;;		_ScanWithRange
  4108 ;;		_main
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text11
  4113  001B2A                     __ptext11:
  4114                           	opt stack 0
  4115  001B2A                     _turnRight:
  4116                           	opt stack 24
  4117                           
  4118                           ;dc_motor.c: 107: mL->direction=0;
  4119                           
  4120                           ;incstack = 0
  4121  001B2A  0100               	movlb	0	; () banked
  4122  001B2C  EE20 F001          	lfsr	2,1
  4123  001B30  5177               	movf	turnRight@mL& (0+255),w,b
  4124  001B32  26D9               	addwf	fsr2l,f,c
  4125  001B34  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  4126  001B36  22DA               	addwfc	fsr2h,f,c
  4127  001B38  0E00               	movlw	0
  4128  001B3A  6EDF               	movwf	indf2,c
  4129                           
  4130                           ;dc_motor.c: 108: mR->direction=1;
  4131  001B3C  EE20 F001          	lfsr	2,1
  4132  001B40  5179               	movf	turnRight@mR& (0+255),w,b
  4133  001B42  26D9               	addwf	fsr2l,f,c
  4134  001B44  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  4135  001B46  22DA               	addwfc	fsr2h,f,c
  4136  001B48  0E01               	movlw	1
  4137  001B4A  6EDF               	movwf	indf2,c
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  4141  001B4C  C077  F071         	movff	turnRight@mL,fullSpeed@mL
  4142  001B50  C078  F072         	movff	turnRight@mL+1,fullSpeed@mL+1
  4143  001B54  C079  F073         	movff	turnRight@mR,fullSpeed@mR
  4144  001B58  C07A  F074         	movff	turnRight@mR+1,fullSpeed@mR+1
  4145  001B5C  C07B  F075         	movff	turnRight@power,fullSpeed@power
  4146  001B60  EC47  F00C         	call	_fullSpeed	;wreg free
  4147  001B64  0012               	return		;funcret
  4148  001B66                     __end_of_turnRight:
  4149                           	opt stack 0
  4150                           tblptru	equ	0xFF8
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           indf1	equ	0xFE7
  4157                           plusw1	equ	0xFE3
  4158                           fsr1h	equ	0xFE2
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           postdec2	equ	0xFDD
  4163                           plusw2	equ	0xFDB
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _turnLeft *****************
  4169 ;; Defined at:
  4170 ;;		line 92 in file "dc_motor.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4173 ;;		 -> main@mL(9), 
  4174 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4175 ;;		 -> main@mR(9), 
  4176 ;;  power           1   27[BANK0 ] unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4188 ;;      Params:         0       5       0       0
  4189 ;;      Locals:         0       0       0       0
  4190 ;;      Temps:          0       0       0       0
  4191 ;;      Totals:         0       5       0       0
  4192 ;;Total ram usage:        5 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    6
  4195 ;; This function calls:
  4196 ;;		_fullSpeed
  4197 ;; This function is called by:
  4198 ;;		_ScanWithRange
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text12
  4204  001B66                     __ptext12:
  4205                           	opt stack 0
  4206  001B66                     _turnLeft:
  4207                           	opt stack 24
  4208                           
  4209                           ;dc_motor.c: 96: mL->direction=1;
  4210                           
  4211                           ;incstack = 0
  4212  001B66  0100               	movlb	0	; () banked
  4213  001B68  EE20 F001          	lfsr	2,1
  4214  001B6C  5177               	movf	turnLeft@mL& (0+255),w,b
  4215  001B6E  26D9               	addwf	fsr2l,f,c
  4216  001B70  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  4217  001B72  22DA               	addwfc	fsr2h,f,c
  4218  001B74  0E01               	movlw	1
  4219  001B76  6EDF               	movwf	indf2,c
  4220                           
  4221                           ;dc_motor.c: 97: mR->direction=0;
  4222  001B78  EE20 F001          	lfsr	2,1
  4223  001B7C  5179               	movf	turnLeft@mR& (0+255),w,b
  4224  001B7E  26D9               	addwf	fsr2l,f,c
  4225  001B80  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4226  001B82  22DA               	addwfc	fsr2h,f,c
  4227  001B84  0E00               	movlw	0
  4228  001B86  6EDF               	movwf	indf2,c
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  4232  001B88  C077  F071         	movff	turnLeft@mL,fullSpeed@mL
  4233  001B8C  C078  F072         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4234  001B90  C079  F073         	movff	turnLeft@mR,fullSpeed@mR
  4235  001B94  C07A  F074         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4236  001B98  C07B  F075         	movff	turnLeft@power,fullSpeed@power
  4237  001B9C  EC47  F00C         	call	_fullSpeed	;wreg free
  4238  001BA0  0012               	return		;funcret
  4239  001BA2                     __end_of_turnLeft:
  4240                           	opt stack 0
  4241                           tblptru	equ	0xFF8
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf1	equ	0xFE7
  4248                           plusw1	equ	0xFE3
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           plusw2	equ	0xFDB
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function _fullSpeed *****************
  4260 ;; Defined at:
  4261 ;;		line 113 in file "dc_motor.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4264 ;;		 -> main@mL(9), 
  4265 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4266 ;;		 -> main@mR(9), 
  4267 ;;  power           1   21[BANK0 ] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4279 ;;      Params:         0       5       0       0
  4280 ;;      Locals:         0       0       0       0
  4281 ;;      Temps:          0       1       0       0
  4282 ;;      Totals:         0       6       0       0
  4283 ;;Total ram usage:        6 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    5
  4286 ;; This function calls:
  4287 ;;		_setMotorPWM
  4288 ;; This function is called by:
  4289 ;;		_turnLeft
  4290 ;;		_turnRight
  4291 ;;		_fullSpeedBack
  4292 ;;		_main
  4293 ;;		_fullSpeedForward
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text13
  4298  00188E                     __ptext13:
  4299                           	opt stack 0
  4300  00188E                     _fullSpeed:
  4301                           	opt stack 24
  4302                           
  4303                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4304                           
  4305                           ;incstack = 0
  4306  00188E  D02B               	goto	l67
  4307  001890                     
  4308                           ;dc_motor.c: 117: if(mL->power<power){
  4309  001890  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4310  001894  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4311  001898  0100               	movlb	0	; () banked
  4312  00189A  5175               	movf	fullSpeed@power& (0+255),w,b
  4313  00189C  5CDE               	subwf	postinc2,w,c
  4314  00189E  B0D8               	btfsc	status,0,c
  4315  0018A0  D005               	goto	l69
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;dc_motor.c: 118: mL->power++;
  4319  0018A2  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4320  0018A6  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4321  0018AA  2ADF               	incf	indf2,f,c
  4322  0018AC                     l69:
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;dc_motor.c: 119: }
  4326                           ;dc_motor.c: 120: if(mR->power<power){
  4327                           
  4328                           ; BSR set to: 0
  4329  0018AC  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4330  0018B0  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4331  0018B4  5175               	movf	fullSpeed@power& (0+255),w,b
  4332  0018B6  5CDE               	subwf	postinc2,w,c
  4333  0018B8  B0D8               	btfsc	status,0,c
  4334  0018BA  D005               	goto	l70
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;dc_motor.c: 121: mR->power++;
  4338  0018BC  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4339  0018C0  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4340  0018C4  2ADF               	incf	indf2,f,c
  4341  0018C6                     l70:
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;dc_motor.c: 122: }
  4345                           ;dc_motor.c: 123: setMotorPWM(mL);
  4346                           
  4347                           ; BSR set to: 0
  4348  0018C6  C071  F068         	movff	fullSpeed@mL,setMotorPWM@m
  4349  0018CA  C072  F069         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4350  0018CE  EC7E  F009         	call	_setMotorPWM	;wreg free
  4351                           
  4352                           ;dc_motor.c: 124: setMotorPWM(mR);
  4353  0018D2  C073  F068         	movff	fullSpeed@mR,setMotorPWM@m
  4354  0018D6  C074  F069         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4355  0018DA  EC7E  F009         	call	_setMotorPWM	;wreg free
  4356                           
  4357                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4358  0018DE  0E21               	movlw	33
  4359  0018E0                     u3667:
  4360  0018E0  2EE8               	decfsz	wreg,f,c
  4361  0018E2  D7FE               	bra	u3667
  4362  0018E4  F000               	nop	
  4363  0018E6                     l67:
  4364  0018E6  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4365  0018EA  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4366  0018EE  0100               	movlb	0	; () banked
  4367  0018F0  5175               	movf	fullSpeed@power& (0+255),w,b
  4368  0018F2  5CDE               	subwf	postinc2,w,c
  4369  0018F4  A0D8               	btfss	status,0,c
  4370  0018F6  D7CC               	goto	l68
  4371                           
  4372                           ; BSR set to: 0
  4373  0018F8  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4374  0018FC  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4375  001900  5175               	movf	fullSpeed@power& (0+255),w,b
  4376  001902  5CDE               	subwf	postinc2,w,c
  4377  001904  B0D8               	btfsc	status,0,c
  4378  001906  0012               	return	
  4379  001908  D7C3               	goto	l68
  4380  00190A                     __end_of_fullSpeed:
  4381                           	opt stack 0
  4382                           tblptru	equ	0xFF8
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           indf1	equ	0xFE7
  4389                           plusw1	equ	0xFE3
  4390                           fsr1h	equ	0xFE2
  4391                           fsr1l	equ	0xFE1
  4392                           indf2	equ	0xFDF
  4393                           postinc2	equ	0xFDE
  4394                           postdec2	equ	0xFDD
  4395                           plusw2	equ	0xFDB
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _delay_tenth_s *****************
  4401 ;; Defined at:
  4402 ;;		line 32 in file "Movement.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  tenth_second    1    wreg     unsigned char 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4407 ;;  i               2   45[COMRAM] unsigned int 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  1    wreg      void 
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4417 ;;      Params:         0       0       0       0
  4418 ;;      Locals:         3       0       0       0
  4419 ;;      Temps:          1       0       0       0
  4420 ;;      Totals:         4       0       0       0
  4421 ;;Total ram usage:        4 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    3
  4424 ;; This function calls:
  4425 ;;		Nothing
  4426 ;; This function is called by:
  4427 ;;		_ScanWithRange
  4428 ;;		_main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text14
  4433  001BDC                     __ptext14:
  4434                           	opt stack 0
  4435  001BDC                     _delay_tenth_s:
  4436                           	opt stack 27
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;incstack = 0
  4440                           ;delay_tenth_s@tenth_seconds stored from wreg
  4441  001BDC  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4442                           
  4443                           ;Movement.c: 33: unsigned int i=0;
  4444  001BDE  0E00               	movlw	0
  4445  001BE0  6E2F               	movwf	delay_tenth_s@i+1,c
  4446  001BE2  0E00               	movlw	0
  4447  001BE4  6E2E               	movwf	delay_tenth_s@i,c
  4448                           
  4449                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4450  001BE6  0E00               	movlw	0
  4451  001BE8  6E2F               	movwf	delay_tenth_s@i+1,c
  4452  001BEA  0E01               	movlw	1
  4453  001BEC  6E2E               	movwf	delay_tenth_s@i,c
  4454  001BEE  D009               	goto	l209
  4455  001BF0                     
  4456                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4457  001BF0  0E82               	movlw	130
  4458  001BF2  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4459  001BF4  0EDE               	movlw	222
  4460  001BF6                     u3677:
  4461  001BF6  2EE8               	decfsz	wreg,f,c
  4462  001BF8  D7FE               	bra	u3677
  4463  001BFA  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4464  001BFC  D7FC               	bra	u3677
  4465  001BFE  4A2E               	infsnz	delay_tenth_s@i,f,c
  4466  001C00  2A2F               	incf	delay_tenth_s@i+1,f,c
  4467  001C02                     l209:
  4468  001C02  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4469  001C04  0D02               	mullw	2
  4470  001C06  502E               	movf	delay_tenth_s@i,w,c
  4471  001C08  5CF3               	subwf	prodl,w,c
  4472  001C0A  502F               	movf	delay_tenth_s@i+1,w,c
  4473  001C0C  58F4               	subwfb	prodh,w,c
  4474  001C0E  A0D8               	btfss	status,0,c
  4475  001C10  0012               	return	
  4476  001C12  D7EE               	goto	l210
  4477  001C14                     __end_of_delay_tenth_s:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           prodh	equ	0xFF4
  4481                           prodl	equ	0xFF3
  4482                           intcon	equ	0xFF2
  4483                           postinc0	equ	0xFEE
  4484                           wreg	equ	0xFE8
  4485                           indf1	equ	0xFE7
  4486                           plusw1	equ	0xFE3
  4487                           fsr1h	equ	0xFE2
  4488                           fsr1l	equ	0xFE1
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           plusw2	equ	0xFDB
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _ScanIR *****************
  4498 ;; Defined at:
  4499 ;;		line 44 in file "Movement.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4502 ;;		 -> main@mL(9), 
  4503 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4504 ;;		 -> main@mR(9), 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4507 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4508 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      unsigned char 
  4511 ;; Registers used:
  4512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4518 ;;      Params:         0       4       0       0
  4519 ;;      Locals:         0      46       0       0
  4520 ;;      Temps:          0       1       0       0
  4521 ;;      Totals:         0      51       0       0
  4522 ;;Total ram usage:       51 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    7
  4525 ;; This function calls:
  4526 ;;		_LCD_String
  4527 ;;		_SendLCD
  4528 ;;		_SetLine
  4529 ;;		_grabLeftIR
  4530 ;;		_grabRightIR
  4531 ;;		_sprintf
  4532 ;;		_stop
  4533 ;; This function is called by:
  4534 ;;		_main
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text15
  4539  00143A                     __ptext15:
  4540                           	opt stack 0
  4541  00143A                     _ScanIR:
  4542                           	opt stack 23
  4543                           
  4544                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4545                           
  4546                           ;incstack = 0
  4547  00143A  C0CF  F0AB         	movff	ScanIR@F3541,ScanIR@SensorResult
  4548  00143E  C0D0  F0AC         	movff	ScanIR@F3541+1,ScanIR@SensorResult+1
  4549  001442  C0D1  F0AD         	movff	ScanIR@F3541+2,ScanIR@SensorResult+2
  4550  001446  C0D2  F0AE         	movff	ScanIR@F3541+3,ScanIR@SensorResult+3
  4551                           
  4552                           ;Movement.c: 48: char buf[40];
  4553                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=500;
  4554  00144A  0E01               	movlw	1
  4555  00144C  0100               	movlb	0	; () banked
  4556  00144E  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4557  001450  0EF4               	movlw	244
  4558  001452  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4562  001454  ECC0  F00C         	call	_grabLeftIR	;wreg free
  4563  001458  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4564  00145C  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4565                           
  4566                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4567  001460  EC85  F00C         	call	_grabRightIR	;wreg free
  4568  001464  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4569  001468  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4570                           
  4571                           ;Movement.c: 60: CAP1BUFH=0;
  4572  00146C  0E00               	movlw	0
  4573  00146E  6E69               	movwf	3945,c	;volatile
  4574                           
  4575                           ;Movement.c: 61: CAP1BUFL=0;
  4576  001470  0E00               	movlw	0
  4577  001472  6E68               	movwf	3944,c	;volatile
  4578                           
  4579                           ;Movement.c: 62: CAP2BUFH=0;
  4580  001474  0E00               	movlw	0
  4581  001476  6E67               	movwf	3943,c	;volatile
  4582                           
  4583                           ;Movement.c: 63: CAP2BUFL=0;
  4584  001478  0E00               	movlw	0
  4585  00147A  6E66               	movwf	3942,c	;volatile
  4586                           
  4587                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4588  00147C  0E00               	movlw	0
  4589  00147E  6E30               	movwf	SendLCD@type,c
  4590  001480  0E01               	movlw	1
  4591  001482  EC5C  F00E         	call	_SendLCD
  4592                           
  4593                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4594  001486  0E21               	movlw	33
  4595  001488                     u3687:
  4596  001488  2EE8               	decfsz	wreg,f,c
  4597  00148A  D7FE               	bra	u3687
  4598  00148C  F000               	nop	
  4599                           
  4600                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4601  00148E  0E00               	movlw	0
  4602  001490  6E30               	movwf	SendLCD@type,c
  4603  001492  0E02               	movlw	2
  4604  001494  EC5C  F00E         	call	_SendLCD
  4605                           
  4606                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4607  001498  0E06               	movlw	6
  4608  00149A  0100               	movlb	0	; () banked
  4609  00149C  6F80               	movwf	??_ScanIR& (0+255),b
  4610  00149E  0E30               	movlw	48
  4611  0014A0                     u3697:
  4612  0014A0  2EE8               	decfsz	wreg,f,c
  4613  0014A2  D7FE               	bra	u3697
  4614  0014A4  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4615  0014A6  D7FC               	bra	u3697
  4616  0014A8  F000               	nop	
  4617                           
  4618                           ;Movement.c: 70: SetLine(1);
  4619  0014AA  0E01               	movlw	1
  4620  0014AC  EC41  F00E         	call	_SetLine
  4621                           
  4622                           ;Movement.c: 71: LCD_String("     ScanIR");
  4623  0014B0  0E2D               	movlw	low STR_1
  4624  0014B2  0100               	movlb	0	; () banked
  4625  0014B4  6F60               	movwf	LCD_String@string& (0+255),b
  4626  0014B6  0E03               	movlw	high STR_1
  4627  0014B8  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4628  0014BA  ECFB  F00C         	call	_LCD_String	;wreg free
  4629                           
  4630                           ;Movement.c: 72: SetLine(2);
  4631  0014BE  0E02               	movlw	2
  4632  0014C0  EC41  F00E         	call	_SetLine
  4633                           
  4634                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4635  0014C4  0E81               	movlw	low ScanIR@buf
  4636  0014C6  0100               	movlb	0	; () banked
  4637  0014C8  6F67               	movwf	sprintf@sp& (0+255),b
  4638  0014CA  0E00               	movlw	high ScanIR@buf
  4639  0014CC  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4640  0014CE  0E0C               	movlw	low (STR_6+1)
  4641  0014D0  6F69               	movwf	sprintf@f& (0+255),b
  4642  0014D2  0E03               	movlw	high (STR_6+1)
  4643  0014D4  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4644  0014D6  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4645  0014DA  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4646  0014DE  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4647  0014E2  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4648  0014E6  EC8F  F007         	call	_sprintf	;wreg free
  4649                           
  4650                           ;Movement.c: 74: LCD_String(buf);
  4651  0014EA  0E81               	movlw	low ScanIR@buf
  4652  0014EC  0100               	movlb	0	; () banked
  4653  0014EE  6F60               	movwf	LCD_String@string& (0+255),b
  4654  0014F0  0E00               	movlw	high ScanIR@buf
  4655  0014F2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4656  0014F4  ECFB  F00C         	call	_LCD_String	;wreg free
  4657                           
  4658                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4659                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4660  0014F8  0100               	movlb	0	; () banked
  4661  0014FA  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4662  0014FC  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4663  0014FE  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4664  001500  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4665  001502  B0D8               	btfsc	status,0,c
  4666  001504  D008               	goto	l217
  4667                           
  4668                           ; BSR set to: 0
  4669  001506  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4670  001508  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4671  00150A  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4672  00150C  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4673  00150E  B0D8               	btfsc	status,0,c
  4674  001510  D002               	goto	l217
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;Movement.c: 80: return 2;
  4678  001512  0E02               	movlw	2
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;Movement.c: 81: } else {
  4682                           
  4683                           ; BSR set to: 0
  4684  001514  0012               	return	
  4685  001516                     l217:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;Movement.c: 82: stop(mL,mR);
  4689                           
  4690                           ; BSR set to: 0
  4691  001516  C07C  F071         	movff	ScanIR@mL,stop@mL
  4692  00151A  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4693  00151E  C07E  F073         	movff	ScanIR@mR,stop@mR
  4694  001522  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4695  001526  ECBB  F00B         	call	_stop	;wreg free
  4696                           
  4697                           ;Movement.c: 83: return 0;
  4698  00152A  0E00               	movlw	0
  4699  00152C  0012               	return	
  4700  00152E                     __end_of_ScanIR:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           intcon	equ	0xFF2
  4706                           postinc0	equ	0xFEE
  4707                           wreg	equ	0xFE8
  4708                           indf1	equ	0xFE7
  4709                           plusw1	equ	0xFE3
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _stop *****************
  4721 ;; Defined at:
  4722 ;;		line 72 in file "dc_motor.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4725 ;;		 -> main@mL(9), 
  4726 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4727 ;;		 -> main@mR(9), 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4739 ;;      Params:         0       4       0       0
  4740 ;;      Locals:         0       0       0       0
  4741 ;;      Temps:          0       0       0       0
  4742 ;;      Totals:         0       4       0       0
  4743 ;;Total ram usage:        4 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    5
  4746 ;; This function calls:
  4747 ;;		_setMotorPWM
  4748 ;; This function is called by:
  4749 ;;		_ScanIR
  4750 ;;		_ScanWithRange
  4751 ;;		_main
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text16
  4756  001776                     __ptext16:
  4757                           	opt stack 0
  4758  001776                     _stop:
  4759                           	opt stack 25
  4760                           
  4761                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4762                           
  4763                           ;incstack = 0
  4764  001776  D028               	goto	l53
  4765  001778                     
  4766                           ;dc_motor.c: 76: if(mL->power>0){
  4767  001778  C071  FFD9         	movff	stop@mL,fsr2l
  4768  00177C  C072  FFDA         	movff	stop@mL+1,fsr2h
  4769  001780  50DF               	movf	indf2,w,c
  4770  001782  B4D8               	btfsc	status,2,c
  4771  001784  D005               	goto	l55
  4772                           
  4773                           ;dc_motor.c: 77: mL->power--;
  4774  001786  C071  FFD9         	movff	stop@mL,fsr2l
  4775  00178A  C072  FFDA         	movff	stop@mL+1,fsr2h
  4776  00178E  06DF               	decf	indf2,f,c
  4777  001790                     l55:
  4778                           
  4779                           ;dc_motor.c: 78: }
  4780                           ;dc_motor.c: 79: if(mR->power>0){
  4781  001790  C073  FFD9         	movff	stop@mR,fsr2l
  4782  001794  C074  FFDA         	movff	stop@mR+1,fsr2h
  4783  001798  50DF               	movf	indf2,w,c
  4784  00179A  B4D8               	btfsc	status,2,c
  4785  00179C  D005               	goto	l56
  4786                           
  4787                           ;dc_motor.c: 80: mR->power--;
  4788  00179E  C073  FFD9         	movff	stop@mR,fsr2l
  4789  0017A2  C074  FFDA         	movff	stop@mR+1,fsr2h
  4790  0017A6  06DF               	decf	indf2,f,c
  4791  0017A8                     l56:
  4792                           
  4793                           ;dc_motor.c: 81: }
  4794                           ;dc_motor.c: 82: setMotorPWM(mL);
  4795  0017A8  C071  F068         	movff	stop@mL,setMotorPWM@m
  4796  0017AC  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4797  0017B0  EC7E  F009         	call	_setMotorPWM	;wreg free
  4798                           
  4799                           ;dc_motor.c: 83: setMotorPWM(mR);
  4800  0017B4  C073  F068         	movff	stop@mR,setMotorPWM@m
  4801  0017B8  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4802  0017BC  EC7E  F009         	call	_setMotorPWM	;wreg free
  4803                           
  4804                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4805  0017C0  0E21               	movlw	33
  4806  0017C2                     u3707:
  4807  0017C2  2EE8               	decfsz	wreg,f,c
  4808  0017C4  D7FE               	bra	u3707
  4809  0017C6  F000               	nop	
  4810  0017C8                     l53:
  4811  0017C8  C071  FFD9         	movff	stop@mL,fsr2l
  4812  0017CC  C072  FFDA         	movff	stop@mL+1,fsr2h
  4813  0017D0  50DF               	movf	indf2,w,c
  4814  0017D2  A4D8               	btfss	status,2,c
  4815  0017D4  D7D1               	goto	l54
  4816  0017D6  C073  FFD9         	movff	stop@mR,fsr2l
  4817  0017DA  C074  FFDA         	movff	stop@mR+1,fsr2h
  4818  0017DE  50DF               	movf	indf2,w,c
  4819  0017E0  A4D8               	btfss	status,2,c
  4820  0017E2  D7CA               	goto	l54
  4821                           
  4822                           ;dc_motor.c: 85: }
  4823                           ;dc_motor.c: 86: mL->direction=1;
  4824  0017E4  0100               	movlb	0	; () banked
  4825  0017E6  EE20 F001          	lfsr	2,1
  4826  0017EA  5171               	movf	stop@mL& (0+255),w,b
  4827  0017EC  26D9               	addwf	fsr2l,f,c
  4828  0017EE  5172               	movf	(stop@mL+1)& (0+255),w,b
  4829  0017F0  22DA               	addwfc	fsr2h,f,c
  4830  0017F2  0E01               	movlw	1
  4831  0017F4  6EDF               	movwf	indf2,c
  4832                           
  4833                           ;dc_motor.c: 87: mR->direction=1;
  4834  0017F6  EE20 F001          	lfsr	2,1
  4835  0017FA  5173               	movf	stop@mR& (0+255),w,b
  4836  0017FC  26D9               	addwf	fsr2l,f,c
  4837  0017FE  5174               	movf	(stop@mR+1)& (0+255),w,b
  4838  001800  22DA               	addwfc	fsr2h,f,c
  4839  001802  0E01               	movlw	1
  4840  001804  6EDF               	movwf	indf2,c
  4841                           
  4842                           ; BSR set to: 0
  4843  001806  0012               	return		;funcret
  4844  001808                     __end_of_stop:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           indf1	equ	0xFE7
  4853                           plusw1	equ	0xFE3
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _setMotorPWM *****************
  4865 ;; Defined at:
  4866 ;;		line 31 in file "dc_motor.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4869 ;;		 -> main@mR(9), main@mL(9), 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  PWMduty         2   15[BANK0 ] int 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4881 ;;      Params:         0       2       0       0
  4882 ;;      Locals:         0       2       0       0
  4883 ;;      Temps:          0       5       0       0
  4884 ;;      Totals:         0       9       0       0
  4885 ;;Total ram usage:        9 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    4
  4888 ;; This function calls:
  4889 ;;		___awdiv
  4890 ;;		___wmul
  4891 ;; This function is called by:
  4892 ;;		_stop
  4893 ;;		_fullSpeed
  4894 ;;		_setMotorFullSpeed
  4895 ;;		_stopMotor
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text17
  4900  0012FC                     __ptext17:
  4901                           	opt stack 0
  4902  0012FC                     _setMotorPWM:
  4903                           	opt stack 24
  4904                           
  4905                           ;dc_motor.c: 33: int PWMduty;
  4906                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;incstack = 0
  4910  0012FC  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4911  001300  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4912  001304  50DF               	movf	indf2,w,c
  4913  001306  0100               	movlb	0	; () banked
  4914  001308  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4915  00130A  516A               	movf	??_setMotorPWM& (0+255),w,b
  4916  00130C  6E2C               	movwf	___wmul@multiplier,c
  4917  00130E  6A2D               	clrf	___wmul@multiplier+1,c
  4918  001310  EE20 F007          	lfsr	2,7
  4919  001314  5168               	movf	setMotorPWM@m& (0+255),w,b
  4920  001316  26D9               	addwf	fsr2l,f,c
  4921  001318  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4922  00131A  22DA               	addwfc	fsr2h,f,c
  4923  00131C  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4924  001320  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4925  001324  ECA7  F000         	call	___wmul	;wreg free
  4926  001328  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4927  00132C  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4928  001330  0E00               	movlw	0
  4929  001332  0100               	movlb	0	; () banked
  4930  001334  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4931  001336  0E64               	movlw	100
  4932  001338  6F62               	movwf	___awdiv@divisor& (0+255),b
  4933  00133A  EC04  F00C         	call	___awdiv	;wreg free
  4934  00133E  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4935  001342  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4936                           
  4937                           ;dc_motor.c: 37: if (m->direction)
  4938  001346  0100               	movlb	0	; () banked
  4939  001348  EE20 F001          	lfsr	2,1
  4940  00134C  5168               	movf	setMotorPWM@m& (0+255),w,b
  4941  00134E  26D9               	addwf	fsr2l,f,c
  4942  001350  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4943  001352  22DA               	addwfc	fsr2h,f,c
  4944  001354  50DF               	movf	indf2,w,c
  4945  001356  B4D8               	btfsc	status,2,c
  4946  001358  D02D               	goto	l36
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;dc_motor.c: 38: {
  4950                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4951  00135A  EE20 F006          	lfsr	2,6
  4952  00135E  5168               	movf	setMotorPWM@m& (0+255),w,b
  4953  001360  26D9               	addwf	fsr2l,f,c
  4954  001362  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4955  001364  22DA               	addwfc	fsr2h,f,c
  4956  001366  50DF               	movf	indf2,w,c
  4957  001368  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4958  00136A  0E01               	movlw	1
  4959  00136C  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4960  00136E  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4961  001370  D002               	goto	u2524
  4962  001372                     u2525:
  4963  001372  90D8               	bcf	status,0,c
  4964  001374  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4965  001376                     u2524:
  4966  001376  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4967  001378  D7FC               	goto	u2525
  4968  00137A  0100               	movlb	0	; () banked
  4969  00137C  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4970  00137E  108A               	iorwf	3978,w,c	;volatile
  4971  001380  6E8A               	movwf	3978,c	;volatile
  4972                           
  4973                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4974  001382  EE20 F007          	lfsr	2,7
  4975  001386  5168               	movf	setMotorPWM@m& (0+255),w,b
  4976  001388  26D9               	addwf	fsr2l,f,c
  4977  00138A  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4978  00138C  22DA               	addwfc	fsr2h,f,c
  4979  00138E  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4980  001392  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4981  001396  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4982  00139A  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4983  00139E  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4984  0013A0  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4985  0013A2  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4986  0013A4  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4987  0013A6  516A               	movf	??_setMotorPWM& (0+255),w,b
  4988  0013A8  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4989  0013AA  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4990  0013AC  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4991  0013AE  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4992  0013B0  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4993                           
  4994                           ;dc_motor.c: 41: }
  4995  0013B2  D015               	goto	l37
  4996  0013B4                     l36:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;dc_motor.c: 42: else
  5000                           ;dc_motor.c: 43: {
  5001                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  5002                           
  5003                           ; BSR set to: 0
  5004  0013B4  EE20 F006          	lfsr	2,6
  5005  0013B8  5168               	movf	setMotorPWM@m& (0+255),w,b
  5006  0013BA  26D9               	addwf	fsr2l,f,c
  5007  0013BC  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  5008  0013BE  22DA               	addwfc	fsr2h,f,c
  5009  0013C0  50DF               	movf	indf2,w,c
  5010  0013C2  6F6A               	movwf	??_setMotorPWM& (0+255),b
  5011  0013C4  0E01               	movlw	1
  5012  0013C6  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  5013  0013C8  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  5014  0013CA  D002               	goto	u2534
  5015  0013CC                     u2535:
  5016  0013CC  90D8               	bcf	status,0,c
  5017  0013CE  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  5018  0013D0                     u2534:
  5019  0013D0  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  5020  0013D2  D7FC               	goto	u2535
  5021  0013D4  0100               	movlb	0	; () banked
  5022  0013D6  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  5023  0013D8  0AFF               	xorlw	255
  5024  0013DA  148A               	andwf	3978,w,c	;volatile
  5025  0013DC  6E8A               	movwf	3978,c	;volatile
  5026  0013DE                     l37:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;dc_motor.c: 45: }
  5030                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  5031  0013DE  EE20 F002          	lfsr	2,2
  5032  0013E2  5168               	movf	setMotorPWM@m& (0+255),w,b
  5033  0013E4  26D9               	addwf	fsr2l,f,c
  5034  0013E6  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  5035  0013E8  22DA               	addwfc	fsr2h,f,c
  5036  0013EA  CFDE F06A          	movff	postinc2,??_setMotorPWM
  5037  0013EE  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  5038  0013F2  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  5039  0013F6  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5040  0013FA  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  5041  0013FC  46E8               	rlncf	wreg,f,c
  5042  0013FE  0BFC               	andlw	252
  5043  001400  6EDF               	movwf	indf2,c
  5044                           
  5045                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  5046  001402  EE20 F004          	lfsr	2,4
  5047  001406  5168               	movf	setMotorPWM@m& (0+255),w,b
  5048  001408  26D9               	addwf	fsr2l,f,c
  5049  00140A  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  5050  00140C  22DA               	addwfc	fsr2h,f,c
  5051  00140E  CFDE F06A          	movff	postinc2,??_setMotorPWM
  5052  001412  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  5053  001416  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  5054  00141A  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5055  00141E  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5056  001422  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5057  001426  0E06               	movlw	6
  5058  001428  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  5059  00142A                     u2545:
  5060  00142A  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  5061  00142C  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  5062  00142E  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  5063  001430  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  5064  001432  D7FB               	goto	u2545
  5065  001434  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  5066  001436  6EDF               	movwf	indf2,c
  5067                           
  5068                           ; BSR set to: 0
  5069  001438  0012               	return		;funcret
  5070  00143A                     __end_of_setMotorPWM:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           indf1	equ	0xFE7
  5079                           plusw1	equ	0xFE3
  5080                           fsr1h	equ	0xFE2
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           plusw2	equ	0xFDB
  5086                           fsr2h	equ	0xFDA
  5087                           fsr2l	equ	0xFD9
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function ___awdiv *****************
  5091 ;; Defined at:
  5092 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  dividend        2    0[BANK0 ] int 
  5095 ;;  divisor         2    2[BANK0 ] int 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  quotient        2    6[BANK0 ] int 
  5098 ;;  sign            1    5[BANK0 ] unsigned char 
  5099 ;;  counter         1    4[BANK0 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  2    0[BANK0 ] int 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5109 ;;      Params:         0       4       0       0
  5110 ;;      Locals:         0       4       0       0
  5111 ;;      Temps:          0       0       0       0
  5112 ;;      Totals:         0       8       0       0
  5113 ;;Total ram usage:        8 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    3
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_setMotorPWM
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text18
  5124  001808                     __ptext18:
  5125                           	opt stack 0
  5126  001808                     ___awdiv:
  5127                           	opt stack 24
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131  001808  0E00               	movlw	0
  5132  00180A  0100               	movlb	0	; () banked
  5133  00180C  6F65               	movwf	___awdiv@sign& (0+255),b
  5134                           
  5135                           ; BSR set to: 0
  5136  00180E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5137  001810  D006               	goto	l670
  5138                           
  5139                           ; BSR set to: 0
  5140  001812  6D62               	negf	___awdiv@divisor& (0+255),b
  5141  001814  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5142  001816  B0D8               	btfsc	status,0,c
  5143  001818  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5144                           
  5145                           ; BSR set to: 0
  5146  00181A  0E01               	movlw	1
  5147  00181C  6F65               	movwf	___awdiv@sign& (0+255),b
  5148  00181E                     l670:
  5149                           
  5150                           ; BSR set to: 0
  5151                           
  5152                           ; BSR set to: 0
  5153  00181E  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5154  001820  D006               	goto	l671
  5155                           
  5156                           ; BSR set to: 0
  5157  001822  6D60               	negf	___awdiv@dividend& (0+255),b
  5158  001824  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5159  001826  B0D8               	btfsc	status,0,c
  5160  001828  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5161                           
  5162                           ; BSR set to: 0
  5163  00182A  0E01               	movlw	1
  5164  00182C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5165  00182E                     l671:
  5166                           
  5167                           ; BSR set to: 0
  5168                           
  5169                           ; BSR set to: 0
  5170  00182E  0E00               	movlw	0
  5171  001830  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5172  001832  0E00               	movlw	0
  5173  001834  6F66               	movwf	___awdiv@quotient& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176  001836  5162               	movf	___awdiv@divisor& (0+255),w,b
  5177  001838  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5178  00183A  B4D8               	btfsc	status,2,c
  5179  00183C  D01C               	goto	l678
  5180                           
  5181                           ; BSR set to: 0
  5182  00183E  0E01               	movlw	1
  5183  001840  6F64               	movwf	___awdiv@counter& (0+255),b
  5184  001842  D004               	goto	l673
  5185  001844                     
  5186                           ; BSR set to: 0
  5187                           
  5188                           ; BSR set to: 0
  5189  001844  90D8               	bcf	status,0,c
  5190  001846  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5191  001848  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5192  00184A  2B64               	incf	___awdiv@counter& (0+255),f,b
  5193  00184C                     l673:
  5194                           
  5195                           ; BSR set to: 0
  5196                           
  5197                           ; BSR set to: 0
  5198  00184C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5199  00184E  D7FA               	goto	l674
  5200  001850                     u1300:
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205                           
  5206                           ; BSR set to: 0
  5207  001850  90D8               	bcf	status,0,c
  5208  001852  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5209  001854  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5210                           
  5211                           ; BSR set to: 0
  5212  001856  5162               	movf	___awdiv@divisor& (0+255),w,b
  5213  001858  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5214  00185A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5215  00185C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5216  00185E  A0D8               	btfss	status,0,c
  5217  001860  D005               	goto	l677
  5218                           
  5219                           ; BSR set to: 0
  5220  001862  5162               	movf	___awdiv@divisor& (0+255),w,b
  5221  001864  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5222  001866  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5223  001868  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5224                           
  5225                           ; BSR set to: 0
  5226  00186A  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5227  00186C                     l677:
  5228                           
  5229                           ; BSR set to: 0
  5230                           
  5231                           ; BSR set to: 0
  5232  00186C  90D8               	bcf	status,0,c
  5233  00186E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5234  001870  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5235                           
  5236                           ; BSR set to: 0
  5237  001872  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5238  001874  D7ED               	goto	u1300
  5239  001876                     l678:
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244                           
  5245                           ; BSR set to: 0
  5246  001876  5165               	movf	___awdiv@sign& (0+255),w,b
  5247  001878  B4D8               	btfsc	status,2,c
  5248  00187A  D004               	goto	l679
  5249                           
  5250                           ; BSR set to: 0
  5251  00187C  6D66               	negf	___awdiv@quotient& (0+255),b
  5252  00187E  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5253  001880  B0D8               	btfsc	status,0,c
  5254  001882  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5255  001884                     l679:
  5256                           
  5257                           ; BSR set to: 0
  5258                           
  5259                           ; BSR set to: 0
  5260  001884  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5261  001888  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5262  00188C  0012               	return	
  5263  00188E                     __end_of___awdiv:
  5264                           	opt stack 0
  5265                           tblptru	equ	0xFF8
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           indf1	equ	0xFE7
  5272                           plusw1	equ	0xFE3
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           plusw2	equ	0xFDB
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _sprintf *****************
  5284 ;; Defined at:
  5285 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  5288 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5289 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5290 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  tmpval          4    0        struct .
  5293 ;;  cp              3    0        PTR const unsigned char 
  5294 ;;  width           2   25[BANK0 ] int 
  5295 ;;  val             2   22[BANK0 ] unsigned int 
  5296 ;;  ap              2   19[BANK0 ] PTR void [1]
  5297 ;;		 -> ?_sprintf(2), 
  5298 ;;  len             2    0        unsigned int 
  5299 ;;  c               1   27[BANK0 ] char 
  5300 ;;  flag            1   24[BANK0 ] unsigned char 
  5301 ;;  prec            1   21[BANK0 ] char 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  2    7[BANK0 ] int 
  5304 ;; Registers used:
  5305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5311 ;;      Params:         0       8       0       0
  5312 ;;      Locals:         0       9       0       0
  5313 ;;      Temps:          0       4       0       0
  5314 ;;      Totals:         0      21       0       0
  5315 ;;Total ram usage:       21 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    4
  5318 ;; This function calls:
  5319 ;;		___lwdiv
  5320 ;;		___lwmod
  5321 ;;		___wmul
  5322 ;;		_isdigit
  5323 ;; This function is called by:
  5324 ;;		_ScanIR
  5325 ;;		_ScanWithRange
  5326 ;;		_main
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text19
  5331  000F1E                     __ptext19:
  5332                           	opt stack 0
  5333  000F1E                     _sprintf:
  5334                           	opt stack 26
  5335                           
  5336                           ;doprnt.c: 494: va_list ap;
  5337                           ;doprnt.c: 499: signed char c;
  5338                           ;doprnt.c: 501: int width;
  5339                           ;doprnt.c: 506: signed char prec;
  5340                           ;doprnt.c: 508: unsigned char flag;
  5341                           ;doprnt.c: 523: union {
  5342                           ;doprnt.c: 524: unsigned long vd;
  5343                           ;doprnt.c: 525: double integ;
  5344                           ;doprnt.c: 526: } tmpval;
  5345                           ;doprnt.c: 528: unsigned int val;
  5346                           ;doprnt.c: 529: unsigned len;
  5347                           ;doprnt.c: 530: const char * cp;
  5348                           ;doprnt.c: 533: *ap = __va_start();
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;incstack = 0
  5352  000F1E  0E6B               	movlw	low (?_sprintf+4)
  5353  000F20  0100               	movlb	0	; () banked
  5354  000F22  6F73               	movwf	sprintf@ap& (0+255),b
  5355  000F24  0E00               	movlw	high (?_sprintf+4)
  5356  000F26  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5357                           
  5358                           ;doprnt.c: 536: while(c = *f++) {
  5359  000F28  D136               	goto	u3020
  5360  000F2A                     
  5361                           ; BSR set to: 0
  5362                           ;doprnt.c: 538: if(c != '%')
  5363                           
  5364                           ; BSR set to: 0
  5365  000F2A  0E25               	movlw	37
  5366  000F2C  197B               	xorwf	sprintf@c& (0+255),w,b
  5367  000F2E  B4D8               	btfsc	status,2,c
  5368  000F30  D009               	goto	l464
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 540: {
  5372                           ;doprnt.c: 541: ((*sp++ = (c)));
  5373  000F32  C067  FFD9         	movff	sprintf@sp,fsr2l
  5374  000F36  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5375  000F3A  C07B  FFDF         	movff	sprintf@c,indf2
  5376                           
  5377                           ; BSR set to: 0
  5378  000F3E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5379  000F40  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5380                           
  5381                           ;doprnt.c: 542: continue;
  5382  000F42  D129               	goto	u3020
  5383  000F44                     l464:
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;doprnt.c: 543: }
  5387                           ;doprnt.c: 546: width = 0;
  5388                           
  5389                           ; BSR set to: 0
  5390  000F44  0E00               	movlw	0
  5391  000F46  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5392  000F48  0E00               	movlw	0
  5393  000F4A  6F79               	movwf	sprintf@width& (0+255),b
  5394                           
  5395                           ;doprnt.c: 548: flag = 0;
  5396  000F4C  0E00               	movlw	0
  5397  000F4E  6F78               	movwf	sprintf@flag& (0+255),b
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 551: switch(*f) {
  5401                           
  5402                           ;doprnt.c: 550: for(;;) {
  5403  000F50  D004               	goto	l466
  5404  000F52                     
  5405                           ;doprnt.c: 580: flag |= 0x04;
  5406                           
  5407                           ; BSR set to: 0
  5408  000F52  0100               	movlb	0	; () banked
  5409  000F54  8578               	bsf	sprintf@flag& (0+255),2,b
  5410                           
  5411                           ;doprnt.c: 581: f++;
  5412  000F56  4B69               	infsnz	sprintf@f& (0+255),f,b
  5413  000F58  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5414  000F5A                     l466:
  5415                           
  5416                           ; BSR set to: 0
  5417  000F5A  C069  FFF6         	movff	sprintf@f,tblptrl
  5418  000F5E  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5419  000F62                     	if	0	;tblptru may be non-zero
  5420  000F62                     	endif
  5421  000F62                     	if	0	;tblptru may be non-zero
  5422  000F62                     	endif
  5423  000F62  0008               	tblrd		*
  5424  000F64  50F5               	movf	tablat,w,c
  5425                           
  5426                           ; Switch size 1, requested type "space"
  5427                           ; Number of cases is 1, Range of values is 48 to 48
  5428                           ; switch strategies available:
  5429                           ; Name         Instructions Cycles
  5430                           ; simple_byte            4     3 (average)
  5431                           ;	Chosen strategy is simple_byte
  5432  000F66  0A30               	xorlw	48	; case 48
  5433  000F68  B4D8               	btfsc	status,2,c
  5434  000F6A  D7F3               	goto	l467
  5435                           
  5436                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5437                           
  5438                           ;doprnt.c: 586: }
  5439                           
  5440                           ;doprnt.c: 585: break;
  5441  000F6C  C069  FFF6         	movff	sprintf@f,tblptrl
  5442  000F70  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5443  000F74                     	if	0	;tblptru may be non-zero
  5444  000F74                     	endif
  5445  000F74                     	if	0	;tblptru may be non-zero
  5446  000F74                     	endif
  5447  000F74  0008               	tblrd		*
  5448  000F76  50F5               	movf	tablat,w,c
  5449  000F78  ECCB  F000         	call	_isdigit
  5450  000F7C  A0D8               	btfss	status,0,c
  5451  000F7E  D034               	goto	l474
  5452                           
  5453                           ;doprnt.c: 598: width = 0;
  5454  000F80  0E00               	movlw	0
  5455  000F82  0100               	movlb	0	; () banked
  5456  000F84  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5457  000F86  0E00               	movlw	0
  5458  000F88  6F79               	movwf	sprintf@width& (0+255),b
  5459  000F8A                     
  5460                           ;doprnt.c: 600: width *= 10;
  5461                           
  5462                           ; BSR set to: 0
  5463  000F8A  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5464  000F8E  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5465  000F92  0E00               	movlw	0
  5466  000F94  6E2F               	movwf	___wmul@multiplicand+1,c
  5467  000F96  0E0A               	movlw	10
  5468  000F98  6E2E               	movwf	___wmul@multiplicand,c
  5469  000F9A  ECA7  F000         	call	___wmul	;wreg free
  5470  000F9E  C02C  F079         	movff	?___wmul,sprintf@width
  5471  000FA2  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5472                           
  5473                           ;doprnt.c: 601: width += *f++ - '0';
  5474  000FA6  0ED0               	movlw	208
  5475  000FA8  0100               	movlb	0	; () banked
  5476  000FAA  6F6F               	movwf	??_sprintf& (0+255),b
  5477  000FAC  0EFF               	movlw	255
  5478  000FAE  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5479  000FB0  C069  FFF6         	movff	sprintf@f,tblptrl
  5480  000FB4  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5481  000FB8                     	if	0	;tblptru may be non-zero
  5482  000FB8                     	endif
  5483  000FB8                     	if	0	;tblptru may be non-zero
  5484  000FB8                     	endif
  5485  000FB8  0008               	tblrd		*
  5486  000FBA  50F5               	movf	tablat,w,c
  5487  000FBC  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5488  000FBE  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5489  000FC0  516F               	movf	??_sprintf& (0+255),w,b
  5490  000FC2  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5491  000FC4  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5492  000FC6  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5493  000FC8  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5494  000FCA  2779               	addwf	sprintf@width& (0+255),f,b
  5495  000FCC  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5496  000FCE  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5497                           
  5498                           ; BSR set to: 0
  5499  000FD0  4B69               	infsnz	sprintf@f& (0+255),f,b
  5500  000FD2  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5504  000FD4  C069  FFF6         	movff	sprintf@f,tblptrl
  5505  000FD8  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5506  000FDC                     	if	0	;tblptru may be non-zero
  5507  000FDC                     	endif
  5508  000FDC                     	if	0	;tblptru may be non-zero
  5509  000FDC                     	endif
  5510  000FDC  0008               	tblrd		*
  5511  000FDE  50F5               	movf	tablat,w,c
  5512  000FE0  ECCB  F000         	call	_isdigit
  5513  000FE4  B0D8               	btfsc	status,0,c
  5514  000FE6  D7D1               	goto	l472
  5515  000FE8                     l474:
  5516  000FE8  C069  FFF6         	movff	sprintf@f,tblptrl
  5517  000FEC  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5518  000FF0  0100               	movlb	0	; () banked
  5519  000FF2  4B69               	infsnz	sprintf@f& (0+255),f,b
  5520  000FF4  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5521  000FF6                     	if	0	;tblptru may be non-zero
  5522  000FF6                     	endif
  5523  000FF6                     	if	0	;tblptru may be non-zero
  5524  000FF6                     	endif
  5525  000FF6  0008               	tblrd		*
  5526  000FF8  CFF5 F07B          	movff	tablat,sprintf@c
  5527  000FFC  517B               	movf	sprintf@c& (0+255),w,b
  5528                           
  5529                           ; Switch size 1, requested type "space"
  5530                           ; Number of cases is 3, Range of values is 0 to 105
  5531                           ; switch strategies available:
  5532                           ; Name         Instructions Cycles
  5533                           ; simple_byte           10     6 (average)
  5534                           ;	Chosen strategy is simple_byte
  5535  000FFE  0A00               	xorlw	0	; case 0
  5536  001000  B4D8               	btfsc	status,2,c
  5537  001002  D0D6               	goto	u3030
  5538  001004  0A64               	xorlw	100	; case 100
  5539  001006  B4D8               	btfsc	status,2,c
  5540  001008  D003               	goto	l479
  5541  00100A  0A0D               	xorlw	13	; case 105
  5542  00100C  A4D8               	btfss	status,2,c
  5543  00100E  D0C3               	goto	u3020
  5544  001010                     l479:
  5545                           
  5546                           ;doprnt.c: 1253: {
  5547                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5548                           
  5549                           ; BSR set to: 0
  5550  001010  C073  FFD9         	movff	sprintf@ap,fsr2l
  5551  001014  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5552  001018  CFDE F076          	movff	postinc2,sprintf@val
  5553  00101C  CFDD F077          	movff	postdec2,sprintf@val+1
  5554  001020  0E02               	movlw	2
  5555  001022  0100               	movlb	0	; () banked
  5556  001024  2773               	addwf	sprintf@ap& (0+255),f,b
  5557  001026  0E00               	movlw	0
  5558  001028  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;doprnt.c: 1261: if((int)val < 0) {
  5562  00102A  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5563  00102C  D006               	goto	l481
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;doprnt.c: 1262: flag |= 0x03;
  5567  00102E  0E03               	movlw	3
  5568  001030  1378               	iorwf	sprintf@flag& (0+255),f,b
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 1263: val = -val;
  5572  001032  6D76               	negf	sprintf@val& (0+255),b
  5573  001034  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5574  001036  B0D8               	btfsc	status,0,c
  5575  001038  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5576  00103A                     l481:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 1264: }
  5580                           ;doprnt.c: 1266: }
  5581                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5582                           
  5583                           ; BSR set to: 0
  5584  00103A  0E01               	movlw	1
  5585  00103C  6F7B               	movwf	sprintf@c& (0+255),b
  5586  00103E                     l3303:
  5587                           
  5588                           ; BSR set to: 0
  5589  00103E  0E05               	movlw	5
  5590  001040  197B               	xorwf	sprintf@c& (0+255),w,b
  5591  001042  B4D8               	btfsc	status,2,c
  5592  001044  D012               	goto	u2910
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;doprnt.c: 1306: if(val < dpowers[c])
  5596                           
  5597                           ; BSR set to: 0
  5598                           
  5599                           ; BSR set to: 0
  5600  001046  517B               	movf	sprintf@c& (0+255),w,b
  5601  001048  0D02               	mullw	2
  5602  00104A  0E01               	movlw	low _dpowers
  5603  00104C  24F3               	addwf	prodl,w,c
  5604  00104E  6EF6               	movwf	tblptrl,c
  5605  001050  0E03               	movlw	high _dpowers
  5606  001052  20F4               	addwfc	prodh,w,c
  5607  001054  6EF7               	movwf	tblptrh,c
  5608  001056                     	if	0	;There are less than 3 active tblptr bytes
  5609  001056                     	endif
  5610  001056  0009               	tblrd		*+
  5611  001058  50F5               	movf	tablat,w,c
  5612  00105A  5D76               	subwf	sprintf@val& (0+255),w,b
  5613  00105C  0009               	tblrd		*+
  5614  00105E  50F5               	movf	tablat,w,c
  5615  001060  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5616  001062  A0D8               	btfss	status,0,c
  5617  001064  D002               	goto	u2910
  5618                           
  5619                           ; BSR set to: 0
  5620                           
  5621                           ; BSR set to: 0
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;doprnt.c: 1307: break;
  5625  001066  2B7B               	incf	sprintf@c& (0+255),f,b
  5626  001068  D7EA               	goto	l3303
  5627  00106A                     u2910:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5631                           
  5632                           ; BSR set to: 0
  5633  00106A  5179               	movf	sprintf@width& (0+255),w,b
  5634  00106C  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5635  00106E  B4D8               	btfsc	status,2,c
  5636  001070  D009               	goto	l485
  5637                           
  5638                           ; BSR set to: 0
  5639  001072  C078  F06F         	movff	sprintf@flag,??_sprintf
  5640  001076  0E03               	movlw	3
  5641  001078  176F               	andwf	??_sprintf& (0+255),f,b
  5642  00107A  B4D8               	btfsc	status,2,c
  5643  00107C  D003               	goto	l485
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;doprnt.c: 1346: width--;
  5647  00107E  0779               	decf	sprintf@width& (0+255),f,b
  5648  001080  A0D8               	btfss	status,0,c
  5649  001082  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5650  001084                     l485:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;doprnt.c: 1381: if(width > c)
  5654                           
  5655                           ; BSR set to: 0
  5656  001084  0E80               	movlw	128
  5657  001086  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5658  001088  0E7F               	movlw	127
  5659  00108A  6F6F               	movwf	??_sprintf& (0+255),b
  5660  00108C  5179               	movf	sprintf@width& (0+255),w,b
  5661  00108E  5D7B               	subwf	sprintf@c& (0+255),w,b
  5662  001090  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5663  001092  0A80               	xorlw	128
  5664  001094  596F               	subwfb	??_sprintf& (0+255),w,b
  5665  001096  B0D8               	btfsc	status,0,c
  5666  001098  D007               	goto	l486
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;doprnt.c: 1382: width -= c;
  5670  00109A  517B               	movf	sprintf@c& (0+255),w,b
  5671  00109C  5F79               	subwf	sprintf@width& (0+255),f,b
  5672  00109E  0E00               	movlw	0
  5673  0010A0  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5674  0010A2  0EFF               	movlw	255
  5675  0010A4  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5676  0010A6  D004               	goto	l487
  5677  0010A8                     l486:
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;doprnt.c: 1383: else
  5681                           ;doprnt.c: 1384: width = 0;
  5682                           
  5683                           ; BSR set to: 0
  5684  0010A8  0E00               	movlw	0
  5685  0010AA  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5686  0010AC  0E00               	movlw	0
  5687  0010AE  6F79               	movwf	sprintf@width& (0+255),b
  5688  0010B0                     l487:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;doprnt.c: 1387: if(flag & 0x04) {
  5692                           
  5693                           ; BSR set to: 0
  5694  0010B0  A578               	btfss	sprintf@flag& (0+255),2,b
  5695  0010B2  D01E               	goto	l488
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;doprnt.c: 1392: if(flag & 0x03)
  5699  0010B4  C078  F06F         	movff	sprintf@flag,??_sprintf
  5700  0010B8  0E03               	movlw	3
  5701  0010BA  176F               	andwf	??_sprintf& (0+255),f,b
  5702  0010BC  B4D8               	btfsc	status,2,c
  5703  0010BE  D008               	goto	l489
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5707  0010C0  C067  FFD9         	movff	sprintf@sp,fsr2l
  5708  0010C4  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5709  0010C8  0E2D               	movlw	45
  5710  0010CA  6EDF               	movwf	indf2,c
  5711                           
  5712                           ; BSR set to: 0
  5713  0010CC  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5714  0010CE  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5715  0010D0                     l489:
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;doprnt.c: 1415: if(width)
  5719                           
  5720                           ; BSR set to: 0
  5721  0010D0  5179               	movf	sprintf@width& (0+255),w,b
  5722  0010D2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5723  0010D4  B4D8               	btfsc	status,2,c
  5724  0010D6  D02D               	goto	l497
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5728                           
  5729                           ; BSR set to: 0
  5730                           
  5731                           ;doprnt.c: 1416: do
  5732  0010D8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5733  0010DC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5734  0010E0  0E30               	movlw	48
  5735  0010E2  6EDF               	movwf	indf2,c
  5736                           
  5737                           ; BSR set to: 0
  5738  0010E4  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5739  0010E6  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 1418: while(--width);
  5743  0010E8  0779               	decf	sprintf@width& (0+255),f,b
  5744  0010EA  A0D8               	btfss	status,0,c
  5745  0010EC  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5746  0010EE  D7F0               	goto	l489
  5747  0010F0                     l488:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;doprnt.c: 1422: {
  5751                           ;doprnt.c: 1424: if(width
  5752                           ;doprnt.c: 1428: )
  5753                           
  5754                           ; BSR set to: 0
  5755  0010F0  5179               	movf	sprintf@width& (0+255),w,b
  5756  0010F2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5757  0010F4  B4D8               	btfsc	status,2,c
  5758  0010F6  D00F               	goto	u3000
  5759  0010F8                     u2990:
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5763                           
  5764                           ; BSR set to: 0
  5765                           
  5766                           ;doprnt.c: 1429: do
  5767  0010F8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5768  0010FC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5769  001100  0E20               	movlw	32
  5770  001102  6EDF               	movwf	indf2,c
  5771                           
  5772                           ; BSR set to: 0
  5773  001104  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5774  001106  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;doprnt.c: 1431: while(--width);
  5778  001108  0779               	decf	sprintf@width& (0+255),f,b
  5779  00110A  A0D8               	btfss	status,0,c
  5780  00110C  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5781  00110E  5179               	movf	sprintf@width& (0+255),w,b
  5782  001110  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5783  001112  A4D8               	btfss	status,2,c
  5784  001114  D7F1               	goto	u2990
  5785  001116                     u3000:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;doprnt.c: 1438: if(flag & 0x03)
  5789                           
  5790                           ; BSR set to: 0
  5791                           
  5792                           ; BSR set to: 0
  5793  001116  C078  F06F         	movff	sprintf@flag,??_sprintf
  5794  00111A  0E03               	movlw	3
  5795  00111C  176F               	andwf	??_sprintf& (0+255),f,b
  5796  00111E  B4D8               	btfsc	status,2,c
  5797  001120  D008               	goto	l497
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5801  001122  C067  FFD9         	movff	sprintf@sp,fsr2l
  5802  001126  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5803  00112A  0E2D               	movlw	45
  5804  00112C  6EDF               	movwf	indf2,c
  5805                           
  5806                           ; BSR set to: 0
  5807  00112E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5808  001130  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5809  001132                     l497:
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;doprnt.c: 1469: }
  5813                           ;doprnt.c: 1472: prec = c;
  5814                           
  5815                           ; BSR set to: 0
  5816                           
  5817                           ; BSR set to: 0
  5818  001132  C07B  F075         	movff	sprintf@c,sprintf@prec
  5819                           
  5820                           ;doprnt.c: 1474: while(prec--) {
  5821  001136  D02B               	goto	l498
  5822  001138                     
  5823                           ; BSR set to: 0
  5824                           ;doprnt.c: 1478: {
  5825                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5826                           
  5827                           ; BSR set to: 0
  5828  001138  5175               	movf	sprintf@prec& (0+255),w,b
  5829  00113A  0D02               	mullw	2
  5830  00113C  0E01               	movlw	low _dpowers
  5831  00113E  24F3               	addwf	prodl,w,c
  5832  001140  6EF6               	movwf	tblptrl,c
  5833  001142  0E03               	movlw	high _dpowers
  5834  001144  20F4               	addwfc	prodh,w,c
  5835  001146  6EF7               	movwf	tblptrh,c
  5836  001148                     	if	0	;There are less than 3 active tblptr bytes
  5837  001148                     	endif
  5838  001148  0009               	tblrd		*+
  5839  00114A  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5840  00114E  000A               	tblrd		*-
  5841  001150  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5842  001154  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5843  001158  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5844  00115C  EC2B  F00D         	call	___lwdiv	;wreg free
  5845  001160  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5846  001164  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5847  001168  0E00               	movlw	0
  5848  00116A  0100               	movlb	0	; () banked
  5849  00116C  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5850  00116E  0E0A               	movlw	10
  5851  001170  6F65               	movwf	___lwmod@divisor& (0+255),b
  5852  001172  EC55  F00D         	call	___lwmod	;wreg free
  5853  001176  0100               	movlb	0	; () banked
  5854  001178  5163               	movf	?___lwmod& (0+255),w,b
  5855  00117A  0F30               	addlw	48
  5856  00117C  6F7B               	movwf	sprintf@c& (0+255),b
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;doprnt.c: 1523: }
  5860                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5861  00117E  C067  FFD9         	movff	sprintf@sp,fsr2l
  5862  001182  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5863  001186  C07B  FFDF         	movff	sprintf@c,indf2
  5864                           
  5865                           ; BSR set to: 0
  5866  00118A  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5867  00118C  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5868  00118E                     l498:
  5869                           
  5870                           ; BSR set to: 0
  5871                           
  5872                           ; BSR set to: 0
  5873  00118E  0775               	decf	sprintf@prec& (0+255),f,b
  5874  001190  2975               	incf	sprintf@prec& (0+255),w,b
  5875  001192  A4D8               	btfss	status,2,c
  5876  001194  D7D1               	goto	l499
  5877  001196                     u3020:
  5878                           
  5879                           ; BSR set to: 0
  5880                           
  5881                           ; BSR set to: 0
  5882  001196  C069  FFF6         	movff	sprintf@f,tblptrl
  5883  00119A  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5884  00119E  0100               	movlb	0	; () banked
  5885  0011A0  4B69               	infsnz	sprintf@f& (0+255),f,b
  5886  0011A2  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5887  0011A4                     	if	0	;tblptru may be non-zero
  5888  0011A4                     	endif
  5889  0011A4                     	if	0	;tblptru may be non-zero
  5890  0011A4                     	endif
  5891  0011A4  0008               	tblrd		*
  5892  0011A6  CFF5 F07B          	movff	tablat,sprintf@c
  5893  0011AA  517B               	movf	sprintf@c& (0+255),w,b
  5894  0011AC  A4D8               	btfss	status,2,c
  5895  0011AE  D6BD               	goto	l463
  5896  0011B0                     u3030:
  5897                           
  5898                           ;doprnt.c: 1538: *sp = 0;
  5899                           
  5900                           ; BSR set to: 0
  5901                           
  5902                           ;doprnt.c: 1525: }
  5903                           ;doprnt.c: 1533: }
  5904                           ;doprnt.c: 1535: alldone:
  5905                           
  5906                           ; BSR set to: 0
  5907  0011B0  C067  FFD9         	movff	sprintf@sp,fsr2l
  5908  0011B4  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5909  0011B8  0E00               	movlw	0
  5910  0011BA  6EDF               	movwf	indf2,c
  5911  0011BC  0012               	return	
  5912  0011BE                     __end_of_sprintf:
  5913                           	opt stack 0
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           postinc0	equ	0xFEE
  5922                           wreg	equ	0xFE8
  5923                           indf1	equ	0xFE7
  5924                           plusw1	equ	0xFE3
  5925                           fsr1h	equ	0xFE2
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           plusw2	equ	0xFDB
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _isdigit *****************
  5936 ;; Defined at:
  5937 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  c               1    wreg     unsigned char 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  c               1   45[COMRAM] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;		None               void
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5951 ;;      Params:         0       0       0       0
  5952 ;;      Locals:         2       0       0       0
  5953 ;;      Temps:          1       0       0       0
  5954 ;;      Totals:         3       0       0       0
  5955 ;;Total ram usage:        3 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    3
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_sprintf
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text20
  5966  000196                     __ptext20:
  5967                           	opt stack 0
  5968  000196                     _isdigit:
  5969                           	opt stack 26
  5970                           
  5971                           ;incstack = 0
  5972                           ;isdigit@c stored from wreg
  5973  000196  6E2E               	movwf	isdigit@c,c
  5974  000198  0E00               	movlw	0
  5975  00019A  6E2D               	movwf	_isdigit$1781,c
  5976  00019C  0E3A               	movlw	58
  5977  00019E  602E               	cpfslt	isdigit@c,c
  5978  0001A0  D005               	goto	l832
  5979  0001A2  0E2F               	movlw	47
  5980  0001A4  642E               	cpfsgt	isdigit@c,c
  5981  0001A6  D002               	goto	l832
  5982  0001A8  0E01               	movlw	1
  5983  0001AA  6E2D               	movwf	_isdigit$1781,c
  5984  0001AC                     l832:
  5985  0001AC  C02D  F02C         	movff	_isdigit$1781,??_isdigit
  5986  0001B0  302C               	rrcf	??_isdigit,w,c
  5987  0001B2  0012               	return	
  5988  0001B4                     __end_of_isdigit:
  5989                           	opt stack 0
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           postinc0	equ	0xFEE
  5998                           wreg	equ	0xFE8
  5999                           indf1	equ	0xFE7
  6000                           plusw1	equ	0xFE3
  6001                           fsr1h	equ	0xFE2
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           plusw2	equ	0xFDB
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011 ;; *************** function ___wmul *****************
  6012 ;; Defined at:
  6013 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  multiplier      2   43[COMRAM] unsigned int 
  6016 ;;  multiplicand    2   45[COMRAM] unsigned int 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  product         2   47[COMRAM] unsigned int 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2   43[COMRAM] unsigned int 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0, prodl, prodh
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         4       0       0       0
  6029 ;;      Locals:         2       0       0       0
  6030 ;;      Temps:          0       0       0       0
  6031 ;;      Totals:         6       0       0       0
  6032 ;;Total ram usage:        6 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    3
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_setMotorPWM
  6039 ;;		_sprintf
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text21
  6044  00014E                     __ptext21:
  6045                           	opt stack 0
  6046  00014E                     ___wmul:
  6047                           	opt stack 24
  6048                           
  6049                           ;incstack = 0
  6050  00014E  502C               	movf	___wmul@multiplier,w,c
  6051  000150  022E               	mulwf	___wmul@multiplicand,c
  6052  000152  CFF3 F030          	movff	prodl,___wmul@product
  6053  000156  CFF4 F031          	movff	prodh,___wmul@product+1
  6054  00015A  502C               	movf	___wmul@multiplier,w,c
  6055  00015C  022F               	mulwf	___wmul@multiplicand+1,c
  6056  00015E  50F3               	movf	prodl,w,c
  6057  000160  2631               	addwf	___wmul@product+1,f,c
  6058  000162  502D               	movf	___wmul@multiplier+1,w,c
  6059  000164  022E               	mulwf	___wmul@multiplicand,c
  6060  000166  50F3               	movf	prodl,w,c
  6061  000168  2631               	addwf	___wmul@product+1,f,c
  6062  00016A  C030  F02C         	movff	___wmul@product,?___wmul
  6063  00016E  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  6064  000172  0012               	return	
  6065  000174                     __end_of___wmul:
  6066                           	opt stack 0
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           indf1	equ	0xFE7
  6077                           plusw1	equ	0xFE3
  6078                           fsr1h	equ	0xFE2
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function ___lwmod *****************
  6089 ;; Defined at:
  6090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  dividend        2    3[BANK0 ] unsigned int 
  6093 ;;  divisor         2    5[BANK0 ] unsigned int 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  counter         1   47[COMRAM] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2    3[BANK0 ] unsigned int 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6105 ;;      Params:         0       4       0       0
  6106 ;;      Locals:         1       0       0       0
  6107 ;;      Temps:          0       0       0       0
  6108 ;;      Totals:         1       4       0       0
  6109 ;;Total ram usage:        5 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    3
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_sprintf
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           	psect	text22
  6120  001AAA                     __ptext22:
  6121                           	opt stack 0
  6122  001AAA                     ___lwmod:
  6123                           	opt stack 26
  6124                           
  6125                           ;incstack = 0
  6126  001AAA  0100               	movlb	0	; () banked
  6127  001AAC  5165               	movf	___lwmod@divisor& (0+255),w,b
  6128  001AAE  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6129  001AB0  B4D8               	btfsc	status,2,c
  6130  001AB2  D018               	goto	l926
  6131                           
  6132                           ; BSR set to: 0
  6133  001AB4  0E01               	movlw	1
  6134  001AB6  6E30               	movwf	___lwmod@counter,c
  6135  001AB8  D004               	goto	l921
  6136  001ABA                     
  6137                           ; BSR set to: 0
  6138                           
  6139                           ; BSR set to: 0
  6140  001ABA  90D8               	bcf	status,0,c
  6141  001ABC  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  6142  001ABE  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6143  001AC0  2A30               	incf	___lwmod@counter,f,c
  6144  001AC2                     l921:
  6145                           
  6146                           ; BSR set to: 0
  6147                           
  6148                           ; BSR set to: 0
  6149  001AC2  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6150  001AC4  D7FA               	goto	l922
  6151  001AC6                     u1550:
  6152                           
  6153                           ; BSR set to: 0
  6154                           
  6155                           ; BSR set to: 0
  6156                           
  6157                           ; BSR set to: 0
  6158  001AC6  5165               	movf	___lwmod@divisor& (0+255),w,b
  6159  001AC8  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  6160  001ACA  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6161  001ACC  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6162  001ACE  A0D8               	btfss	status,0,c
  6163  001AD0  D004               	goto	l925
  6164                           
  6165                           ; BSR set to: 0
  6166  001AD2  5165               	movf	___lwmod@divisor& (0+255),w,b
  6167  001AD4  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  6168  001AD6  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6169  001AD8  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6170  001ADA                     l925:
  6171                           
  6172                           ; BSR set to: 0
  6173                           
  6174                           ; BSR set to: 0
  6175  001ADA  90D8               	bcf	status,0,c
  6176  001ADC  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6177  001ADE  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  6178                           
  6179                           ; BSR set to: 0
  6180  001AE0  2E30               	decfsz	___lwmod@counter,f,c
  6181  001AE2  D7F1               	goto	u1550
  6182  001AE4                     l926:
  6183                           
  6184                           ; BSR set to: 0
  6185                           
  6186                           ; BSR set to: 0
  6187  001AE4  C063  F063         	movff	___lwmod@dividend,?___lwmod
  6188  001AE8  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  6189                           
  6190                           ; BSR set to: 0
  6191  001AEC  0012               	return		;funcret
  6192  001AEE                     __end_of___lwmod:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodh	equ	0xFF4
  6199                           prodl	equ	0xFF3
  6200                           intcon	equ	0xFF2
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           indf1	equ	0xFE7
  6204                           plusw1	equ	0xFE3
  6205                           fsr1h	equ	0xFE2
  6206                           fsr1l	equ	0xFE1
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           postdec2	equ	0xFDD
  6210                           plusw2	equ	0xFDB
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function ___lwdiv *****************
  6216 ;; Defined at:
  6217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  dividend        2   43[COMRAM] unsigned int 
  6220 ;;  divisor         2   45[COMRAM] unsigned int 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;  quotient        2    1[BANK0 ] unsigned int 
  6223 ;;  counter         1    0[BANK0 ] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  2   43[COMRAM] unsigned int 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6233 ;;      Params:         4       0       0       0
  6234 ;;      Locals:         0       3       0       0
  6235 ;;      Temps:          0       0       0       0
  6236 ;;      Totals:         4       3       0       0
  6237 ;;Total ram usage:        7 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    3
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_sprintf
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           	psect	text23
  6248  001A56                     __ptext23:
  6249                           	opt stack 0
  6250  001A56                     ___lwdiv:
  6251                           	opt stack 26
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;incstack = 0
  6255  001A56  0E00               	movlw	0
  6256  001A58  0100               	movlb	0	; () banked
  6257  001A5A  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6258  001A5C  0E00               	movlw	0
  6259  001A5E  6F61               	movwf	___lwdiv@quotient& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262  001A60  502E               	movf	___lwdiv@divisor,w,c
  6263  001A62  102F               	iorwf	___lwdiv@divisor+1,w,c
  6264  001A64  B4D8               	btfsc	status,2,c
  6265  001A66  D01C               	goto	l916
  6266                           
  6267                           ; BSR set to: 0
  6268  001A68  0E01               	movlw	1
  6269  001A6A  6F60               	movwf	___lwdiv@counter& (0+255),b
  6270  001A6C  D004               	goto	l911
  6271  001A6E                     
  6272                           ; BSR set to: 0
  6273                           
  6274                           ; BSR set to: 0
  6275  001A6E  90D8               	bcf	status,0,c
  6276  001A70  362E               	rlcf	___lwdiv@divisor,f,c
  6277  001A72  362F               	rlcf	___lwdiv@divisor+1,f,c
  6278  001A74  2B60               	incf	___lwdiv@counter& (0+255),f,b
  6279  001A76                     l911:
  6280                           
  6281                           ; BSR set to: 0
  6282                           
  6283                           ; BSR set to: 0
  6284  001A76  AE2F               	btfss	___lwdiv@divisor+1,7,c
  6285  001A78  D7FA               	goto	l912
  6286  001A7A                     u2680:
  6287                           
  6288                           ; BSR set to: 0
  6289                           
  6290                           ; BSR set to: 0
  6291                           
  6292                           ; BSR set to: 0
  6293  001A7A  90D8               	bcf	status,0,c
  6294  001A7C  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  6295  001A7E  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6296                           
  6297                           ; BSR set to: 0
  6298  001A80  502E               	movf	___lwdiv@divisor,w,c
  6299  001A82  5C2C               	subwf	___lwdiv@dividend,w,c
  6300  001A84  502F               	movf	___lwdiv@divisor+1,w,c
  6301  001A86  582D               	subwfb	___lwdiv@dividend+1,w,c
  6302  001A88  A0D8               	btfss	status,0,c
  6303  001A8A  D005               	goto	l915
  6304                           
  6305                           ; BSR set to: 0
  6306  001A8C  502E               	movf	___lwdiv@divisor,w,c
  6307  001A8E  5E2C               	subwf	___lwdiv@dividend,f,c
  6308  001A90  502F               	movf	___lwdiv@divisor+1,w,c
  6309  001A92  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  6310                           
  6311                           ; BSR set to: 0
  6312  001A94  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  6313  001A96                     l915:
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  001A96  90D8               	bcf	status,0,c
  6319  001A98  322F               	rrcf	___lwdiv@divisor+1,f,c
  6320  001A9A  322E               	rrcf	___lwdiv@divisor,f,c
  6321                           
  6322                           ; BSR set to: 0
  6323  001A9C  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  6324  001A9E  D7ED               	goto	u2680
  6325  001AA0                     l916:
  6326                           
  6327                           ; BSR set to: 0
  6328                           
  6329                           ; BSR set to: 0
  6330  001AA0  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  6331  001AA4  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6332                           
  6333                           ; BSR set to: 0
  6334  001AA8  0012               	return		;funcret
  6335  001AAA                     __end_of___lwdiv:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           tblptrh	equ	0xFF7
  6339                           tblptrl	equ	0xFF6
  6340                           tablat	equ	0xFF5
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           indf1	equ	0xFE7
  6347                           plusw1	equ	0xFE3
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           indf2	equ	0xFDF
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           plusw2	equ	0xFDB
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _grabRightIR *****************
  6359 ;; Defined at:
  6360 ;;		line 74 in file "IR_Reading.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6365 ;;  i               1    2[BANK0 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  2   43[COMRAM] unsigned int 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6375 ;;      Params:         2       0       0       0
  6376 ;;      Locals:         0       3       0       0
  6377 ;;      Temps:          3       0       0       0
  6378 ;;      Totals:         5       3       0       0
  6379 ;;Total ram usage:        8 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    3
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_ScanIR
  6386 ;;		_ScanWithRange
  6387 ;;		_main
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text24
  6392  00190A                     __ptext24:
  6393                           	opt stack 0
  6394  00190A                     _grabRightIR:
  6395                           	opt stack 27
  6396                           
  6397                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;incstack = 0
  6401  00190A  0E00               	movlw	0
  6402  00190C  0100               	movlb	0	; () banked
  6403  00190E  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6404  001910  0E00               	movlw	0
  6405  001912  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6406                           
  6407                           ;IR_Reading.c: 77: unsigned char i=0;
  6408  001914  0E00               	movlw	0
  6409  001916  6F62               	movwf	grabRightIR@i& (0+255),b
  6410                           
  6411                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6412  001918  0E00               	movlw	0
  6413  00191A  6F62               	movwf	grabRightIR@i& (0+255),b
  6414  00191C                     l3209:
  6415                           
  6416                           ; BSR set to: 0
  6417  00191C  0E03               	movlw	3
  6418  00191E  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6419  001920  D001               	goto	l110
  6420  001922  D01F               	goto	u2760
  6421  001924                     l110:
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6425                           
  6426                           ; BSR set to: 0
  6427  001924  5069               	movf	3945,w,c	;volatile
  6428  001926  6E2E               	movwf	??_grabRightIR& (0+255),c
  6429  001928  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6430  00192A  0E07               	movlw	7
  6431  00192C                     u2755:
  6432  00192C  90D8               	bcf	status,0,c
  6433  00192E  362E               	rlcf	??_grabRightIR,f,c
  6434  001930  362F               	rlcf	??_grabRightIR+1,f,c
  6435  001932  2EE8               	decfsz	wreg,f,c
  6436  001934  D7FB               	goto	u2755
  6437  001936  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6438  00193A  90D8               	bcf	status,0,c
  6439  00193C  3230               	rrcf	??_grabRightIR+2,f,c
  6440  00193E  5030               	movf	??_grabRightIR+2,w,c
  6441  001940  122E               	iorwf	??_grabRightIR,f,c
  6442  001942  0E00               	movlw	0
  6443  001944  122F               	iorwf	??_grabRightIR+1,f,c
  6444  001946  502E               	movf	??_grabRightIR,w,c
  6445  001948  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6446  00194A  502F               	movf	??_grabRightIR+1,w,c
  6447  00194C  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6451  00194E  0E82               	movlw	130
  6452  001950  6E2E               	movwf	??_grabRightIR& (0+255),c
  6453  001952  0EDE               	movlw	222
  6454  001954                     u3717:
  6455  001954  2EE8               	decfsz	wreg,f,c
  6456  001956  D7FE               	bra	u3717
  6457  001958  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6458  00195A  D7FC               	bra	u3717
  6459  00195C  0100               	movlb	0	; () banked
  6460  00195E  2B62               	incf	grabRightIR@i& (0+255),f,b
  6461  001960  D7DD               	goto	l3209
  6462  001962                     u2760:
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;IR_Reading.c: 83: }
  6466                           ;IR_Reading.c: 85: return IR_signal>>2;
  6467                           
  6468                           ; BSR set to: 0
  6469  001962  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6470  001966  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6471  00196A  90D8               	bcf	status,0,c
  6472  00196C  322F               	rrcf	??_grabRightIR+1,f,c
  6473  00196E  322E               	rrcf	??_grabRightIR,f,c
  6474  001970  90D8               	bcf	status,0,c
  6475  001972  322F               	rrcf	??_grabRightIR+1,f,c
  6476  001974  322E               	rrcf	??_grabRightIR,f,c
  6477  001976  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6478  00197A  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6479  00197E  0012               	return	
  6480  001980                     __end_of_grabRightIR:
  6481                           	opt stack 0
  6482                           tblptru	equ	0xFF8
  6483                           tblptrh	equ	0xFF7
  6484                           tblptrl	equ	0xFF6
  6485                           tablat	equ	0xFF5
  6486                           prodh	equ	0xFF4
  6487                           prodl	equ	0xFF3
  6488                           intcon	equ	0xFF2
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           plusw1	equ	0xFE3
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           plusw2	equ	0xFDB
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _grabLeftIR *****************
  6504 ;; Defined at:
  6505 ;;		line 90 in file "IR_Reading.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6510 ;;  i               1    2[BANK0 ] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  2   43[COMRAM] unsigned int 
  6513 ;; Registers used:
  6514 ;;		wreg, status,2, status,0
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6520 ;;      Params:         2       0       0       0
  6521 ;;      Locals:         0       3       0       0
  6522 ;;      Temps:          3       0       0       0
  6523 ;;      Totals:         5       3       0       0
  6524 ;;Total ram usage:        8 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    3
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_ScanIR
  6531 ;;		_ScanWithRange
  6532 ;;		_main
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text25
  6537  001980                     __ptext25:
  6538                           	opt stack 0
  6539  001980                     _grabLeftIR:
  6540                           	opt stack 27
  6541                           
  6542                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;incstack = 0
  6546  001980  0E00               	movlw	0
  6547  001982  0100               	movlb	0	; () banked
  6548  001984  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6549  001986  0E00               	movlw	0
  6550  001988  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6551                           
  6552                           ;IR_Reading.c: 93: unsigned char i=0;
  6553  00198A  0E00               	movlw	0
  6554  00198C  6F62               	movwf	grabLeftIR@i& (0+255),b
  6555                           
  6556                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6557  00198E  0E00               	movlw	0
  6558  001990  6F62               	movwf	grabLeftIR@i& (0+255),b
  6559  001992                     l3225:
  6560                           
  6561                           ; BSR set to: 0
  6562  001992  0E03               	movlw	3
  6563  001994  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6564  001996  D001               	goto	l115
  6565  001998  D01F               	goto	u2790
  6566  00199A                     l115:
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6570                           
  6571                           ; BSR set to: 0
  6572  00199A  5067               	movf	3943,w,c	;volatile
  6573  00199C  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6574  00199E  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6575  0019A0  0E07               	movlw	7
  6576  0019A2                     u2785:
  6577  0019A2  90D8               	bcf	status,0,c
  6578  0019A4  362E               	rlcf	??_grabLeftIR,f,c
  6579  0019A6  362F               	rlcf	??_grabLeftIR+1,f,c
  6580  0019A8  2EE8               	decfsz	wreg,f,c
  6581  0019AA  D7FB               	goto	u2785
  6582  0019AC  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6583  0019B0  90D8               	bcf	status,0,c
  6584  0019B2  3230               	rrcf	??_grabLeftIR+2,f,c
  6585  0019B4  5030               	movf	??_grabLeftIR+2,w,c
  6586  0019B6  122E               	iorwf	??_grabLeftIR,f,c
  6587  0019B8  0E00               	movlw	0
  6588  0019BA  122F               	iorwf	??_grabLeftIR+1,f,c
  6589  0019BC  502E               	movf	??_grabLeftIR,w,c
  6590  0019BE  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6591  0019C0  502F               	movf	??_grabLeftIR+1,w,c
  6592  0019C2  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6596  0019C4  0E82               	movlw	130
  6597  0019C6  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6598  0019C8  0EDE               	movlw	222
  6599  0019CA                     u3727:
  6600  0019CA  2EE8               	decfsz	wreg,f,c
  6601  0019CC  D7FE               	bra	u3727
  6602  0019CE  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6603  0019D0  D7FC               	bra	u3727
  6604  0019D2  0100               	movlb	0	; () banked
  6605  0019D4  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6606  0019D6  D7DD               	goto	l3225
  6607  0019D8                     u2790:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;IR_Reading.c: 99: }
  6611                           ;IR_Reading.c: 101: return IR_signal>>2;
  6612                           
  6613                           ; BSR set to: 0
  6614  0019D8  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6615  0019DC  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6616  0019E0  90D8               	bcf	status,0,c
  6617  0019E2  322F               	rrcf	??_grabLeftIR+1,f,c
  6618  0019E4  322E               	rrcf	??_grabLeftIR,f,c
  6619  0019E6  90D8               	bcf	status,0,c
  6620  0019E8  322F               	rrcf	??_grabLeftIR+1,f,c
  6621  0019EA  322E               	rrcf	??_grabLeftIR,f,c
  6622  0019EC  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6623  0019F0  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6624  0019F4  0012               	return	
  6625  0019F6                     __end_of_grabLeftIR:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           indf1	equ	0xFE7
  6637                           plusw1	equ	0xFE3
  6638                           fsr1h	equ	0xFE2
  6639                           fsr1l	equ	0xFE1
  6640                           indf2	equ	0xFDF
  6641                           postinc2	equ	0xFDE
  6642                           postdec2	equ	0xFDD
  6643                           plusw2	equ	0xFDB
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _SetLine *****************
  6649 ;; Defined at:
  6650 ;;		line 74 in file "LCD.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  line            1    wreg     unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  line            1    0[BANK0 ] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6664 ;;      Params:         0       0       0       0
  6665 ;;      Locals:         0       1       0       0
  6666 ;;      Temps:          0       0       0       0
  6667 ;;      Totals:         0       1       0       0
  6668 ;;Total ram usage:        1 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    6
  6671 ;; This function calls:
  6672 ;;		_SendLCD
  6673 ;; This function is called by:
  6674 ;;		_ScanIR
  6675 ;;		_ScanWithRange
  6676 ;;		_main
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text26
  6681  001C82                     __ptext26:
  6682                           	opt stack 0
  6683  001C82                     _SetLine:
  6684                           	opt stack 24
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;incstack = 0
  6688                           ;SetLine@line stored from wreg
  6689  001C82  0100               	movlb	0	; () banked
  6690  001C84  6F60               	movwf	SetLine@line& (0+255),b
  6691                           
  6692                           ;LCD.c: 75: if (line==1) {
  6693  001C86  0100               	movlb	0	; () banked
  6694  001C88  0560               	decf	SetLine@line& (0+255),w,b
  6695  001C8A  A4D8               	btfss	status,2,c
  6696  001C8C  D006               	goto	l152
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;LCD.c: 76: SendLCD(0x80,0);
  6700  001C8E  0E00               	movlw	0
  6701  001C90  6E30               	movwf	SendLCD@type,c
  6702  001C92  0E80               	movlw	128
  6703  001C94  EC5C  F00E         	call	_SendLCD
  6704                           
  6705                           ;LCD.c: 77: } else if (line==2) {
  6706  001C98  D00A               	goto	l154
  6707  001C9A                     l152:
  6708  001C9A  0E02               	movlw	2
  6709  001C9C  0100               	movlb	0	; () banked
  6710  001C9E  1960               	xorwf	SetLine@line& (0+255),w,b
  6711  001CA0  A4D8               	btfss	status,2,c
  6712  001CA2  D005               	goto	l154
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;LCD.c: 78: SendLCD(0xC0,0);
  6716  001CA4  0E00               	movlw	0
  6717  001CA6  6E30               	movwf	SendLCD@type,c
  6718  001CA8  0EC0               	movlw	192
  6719  001CAA  EC5C  F00E         	call	_SendLCD
  6720  001CAE                     l154:
  6721                           
  6722                           ;LCD.c: 79: }
  6723                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6724  001CAE  0E21               	movlw	33
  6725  001CB0                     u3737:
  6726  001CB0  2EE8               	decfsz	wreg,f,c
  6727  001CB2  D7FE               	bra	u3737
  6728  001CB4  F000               	nop	
  6729  001CB6  0012               	return		;funcret
  6730  001CB8                     __end_of_SetLine:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           indf1	equ	0xFE7
  6742                           plusw1	equ	0xFE3
  6743                           fsr1h	equ	0xFE2
  6744                           fsr1l	equ	0xFE1
  6745                           indf2	equ	0xFDF
  6746                           postinc2	equ	0xFDE
  6747                           postdec2	equ	0xFDD
  6748                           plusw2	equ	0xFDB
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _LCD_String *****************
  6754 ;; Defined at:
  6755 ;;		line 83 in file "LCD.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6758 ;;		 -> STR_8(11), STR_7(10), main@buf(40), STR_5(17), 
  6759 ;;		 -> main@Message(10), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6760 ;;		 -> STR_1(12), 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6772 ;;      Params:         0       2       0       0
  6773 ;;      Locals:         0       0       0       0
  6774 ;;      Temps:          0       0       0       0
  6775 ;;      Totals:         0       2       0       0
  6776 ;;Total ram usage:        2 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    6
  6779 ;; This function calls:
  6780 ;;		_SendLCD
  6781 ;; This function is called by:
  6782 ;;		_ScanIR
  6783 ;;		_ScanWithRange
  6784 ;;		_main
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text27
  6789  0019F6                     __ptext27:
  6790                           	opt stack 0
  6791  0019F6                     _LCD_String:
  6792                           	opt stack 23
  6793                           
  6794                           ;LCD.c: 85: while(*string != 0){
  6795                           
  6796                           ;incstack = 0
  6797  0019F6  D01B               	goto	l158
  6798  0019F8                     
  6799                           ;LCD.c: 88: SendLCD(*string++,1);
  6800  0019F8  0E01               	movlw	1
  6801  0019FA  6E30               	movwf	SendLCD@type,c
  6802  0019FC  C060  FFF6         	movff	LCD_String@string,tblptrl
  6803  001A00  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6804  001A04  6AF8               	clrf	tblptru,c
  6805  001A06  0E02               	movlw	(high __ramtop+-1)
  6806  001A08  64F7               	cpfsgt	tblptrh,c
  6807  001A0A  D003               	bra	u2827
  6808  001A0C  0008               	tblrd		*
  6809  001A0E  50F5               	movf	tablat,w,c
  6810  001A10  D005               	bra	u2820
  6811  001A12                     u2827:
  6812  001A12  CFF6 FFE1          	movff	tblptrl,fsr1l
  6813  001A16  CFF7 FFE2          	movff	tblptrh,fsr1h
  6814  001A1A  50E7               	movf	indf1,w,c
  6815  001A1C                     u2820:
  6816  001A1C  EC5C  F00E         	call	_SendLCD
  6817  001A20  0100               	movlb	0	; () banked
  6818  001A22  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6819  001A24  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6823  001A26  0E21               	movlw	33
  6824  001A28                     u3747:
  6825  001A28  2EE8               	decfsz	wreg,f,c
  6826  001A2A  D7FE               	bra	u3747
  6827  001A2C  F000               	nop	
  6828  001A2E                     l158:
  6829  001A2E  C060  FFF6         	movff	LCD_String@string,tblptrl
  6830  001A32  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6831  001A36  6AF8               	clrf	tblptru,c
  6832  001A38  0E02               	movlw	(high __ramtop+-1)
  6833  001A3A  64F7               	cpfsgt	tblptrh,c
  6834  001A3C  D003               	bra	u2837
  6835  001A3E  0008               	tblrd		*
  6836  001A40  50F5               	movf	tablat,w,c
  6837  001A42  D005               	bra	u2830
  6838  001A44                     u2837:
  6839  001A44  CFF6 FFE1          	movff	tblptrl,fsr1l
  6840  001A48  CFF7 FFE2          	movff	tblptrh,fsr1h
  6841  001A4C  50E7               	movf	indf1,w,c
  6842  001A4E                     u2830:
  6843  001A4E  0900               	iorlw	0
  6844  001A50  B4D8               	btfsc	status,2,c
  6845  001A52  0012               	return	
  6846  001A54  D7D1               	goto	l159
  6847  001A56                     __end_of_LCD_String:
  6848                           	opt stack 0
  6849                           tblptru	equ	0xFF8
  6850                           tblptrh	equ	0xFF7
  6851                           tblptrl	equ	0xFF6
  6852                           tablat	equ	0xFF5
  6853                           prodh	equ	0xFF4
  6854                           prodl	equ	0xFF3
  6855                           intcon	equ	0xFF2
  6856                           postinc0	equ	0xFEE
  6857                           wreg	equ	0xFE8
  6858                           indf1	equ	0xFE7
  6859                           plusw1	equ	0xFE3
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           plusw2	equ	0xFDB
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _SendLCD *****************
  6871 ;; Defined at:
  6872 ;;		line 27 in file "LCD.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  Byte            1    wreg     unsigned char 
  6875 ;;  type            1   47[COMRAM] unsigned char 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  Byte            1   48[COMRAM] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      void 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2, status,0, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6887 ;;      Params:         1       0       0       0
  6888 ;;      Locals:         1       0       0       0
  6889 ;;      Temps:          0       0       0       0
  6890 ;;      Totals:         2       0       0       0
  6891 ;;Total ram usage:        2 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    5
  6894 ;; This function calls:
  6895 ;;		_LCDout
  6896 ;; This function is called by:
  6897 ;;		_initLCD
  6898 ;;		_SetLine
  6899 ;;		_LCD_String
  6900 ;;		_ScanIR
  6901 ;;		_ScanWithRange
  6902 ;;		_main
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text28
  6907  001CB8                     __ptext28:
  6908                           	opt stack 0
  6909  001CB8                     _SendLCD:
  6910                           	opt stack 24
  6911                           
  6912                           ;incstack = 0
  6913                           ;SendLCD@Byte stored from wreg
  6914  001CB8  6E31               	movwf	SendLCD@Byte,c
  6915                           
  6916                           ;LCD.c: 30: LATAbits.LATA6=type;
  6917  001CBA  B030               	btfsc	SendLCD@type,0,c
  6918  001CBC  D002               	bra	u2665
  6919  001CBE  9C89               	bcf	3977,6,c	;volatile
  6920  001CC0  D001               	bra	u2666
  6921  001CC2                     u2665:
  6922  001CC2  8C89               	bsf	3977,6,c	;volatile
  6923  001CC4                     u2666:
  6924                           
  6925                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6926  001CC4  3831               	swapf	SendLCD@Byte,w,c
  6927  001CC6  0B0F               	andlw	15
  6928  001CC8  0B0F               	andlw	15
  6929  001CCA  EC97  F00A         	call	_LCDout
  6930                           
  6931                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6932  001CCE  0E06               	movlw	6
  6933  001CD0                     u3757:
  6934  001CD0  2EE8               	decfsz	wreg,f,c
  6935  001CD2  D7FE               	bra	u3757
  6936  001CD4  D000               	nop2	
  6937                           
  6938                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6939  001CD6  5031               	movf	SendLCD@Byte,w,c
  6940  001CD8  0B0F               	andlw	15
  6941  001CDA  EC97  F00A         	call	_LCDout
  6942                           
  6943                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6944  001CDE  0E21               	movlw	33
  6945  001CE0                     u3767:
  6946  001CE0  2EE8               	decfsz	wreg,f,c
  6947  001CE2  D7FE               	bra	u3767
  6948  001CE4  F000               	nop	
  6949  001CE6  0012               	return		;funcret
  6950  001CE8                     __end_of_SendLCD:
  6951                           	opt stack 0
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           intcon	equ	0xFF2
  6959                           postinc0	equ	0xFEE
  6960                           wreg	equ	0xFE8
  6961                           indf1	equ	0xFE7
  6962                           plusw1	equ	0xFE3
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           plusw2	equ	0xFDB
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _LCDout *****************
  6974 ;; Defined at:
  6975 ;;		line 14 in file "LCD.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  number          1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  number          1   46[COMRAM] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6989 ;;      Params:         0       0       0       0
  6990 ;;      Locals:         1       0       0       0
  6991 ;;      Temps:          3       0       0       0
  6992 ;;      Totals:         4       0       0       0
  6993 ;;Total ram usage:        4 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    4
  6996 ;; This function calls:
  6997 ;;		_E_TOG
  6998 ;; This function is called by:
  6999 ;;		_SendLCD
  7000 ;;		_initLCD
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text29
  7005  00152E                     __ptext29:
  7006                           	opt stack 0
  7007  00152E                     _LCDout:
  7008                           	opt stack 24
  7009                           
  7010                           ;incstack = 0
  7011                           ;LCDout@number stored from wreg
  7012  00152E  6E2F               	movwf	LCDout@number,c
  7013                           
  7014                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  7015  001530  502F               	movf	LCDout@number,w,c
  7016  001532  6E2C               	movwf	??_LCDout& (0+255),c
  7017  001534  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7018  001536  0E07               	movlw	7
  7019  001538                     u2555:
  7020  001538  90D8               	bcf	status,0,c
  7021  00153A  362C               	rlcf	??_LCDout,f,c
  7022  00153C  362D               	rlcf	??_LCDout+1,f,c
  7023  00153E  2EE8               	decfsz	wreg,f,c
  7024  001540  D7FB               	goto	u2555
  7025  001542  0E07               	movlw	7
  7026  001544  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7027  001546                     u2565:
  7028  001546  342D               	rlcf	??_LCDout+1,w,c
  7029  001548  322D               	rrcf	??_LCDout+1,f,c
  7030  00154A  322C               	rrcf	??_LCDout,f,c
  7031  00154C  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7032  00154E  D7FB               	goto	u2565
  7033  001550  462C               	rlncf	??_LCDout,f,c
  7034  001552  508B               	movf	3979,w,c	;volatile
  7035  001554  182C               	xorwf	??_LCDout,w,c
  7036  001556  0BFD               	andlw	-3
  7037  001558  182C               	xorwf	??_LCDout,w,c
  7038  00155A  6E8B               	movwf	3979,c	;volatile
  7039                           
  7040                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  7041  00155C  502F               	movf	LCDout@number,w,c
  7042  00155E  6E2C               	movwf	??_LCDout& (0+255),c
  7043  001560  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7044  001562  0E06               	movlw	6
  7045  001564                     u2575:
  7046  001564  90D8               	bcf	status,0,c
  7047  001566  362C               	rlcf	??_LCDout,f,c
  7048  001568  362D               	rlcf	??_LCDout+1,f,c
  7049  00156A  2EE8               	decfsz	wreg,f,c
  7050  00156C  D7FB               	goto	u2575
  7051  00156E  0E07               	movlw	7
  7052  001570  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7053  001572                     u2585:
  7054  001572  342D               	rlcf	??_LCDout+1,w,c
  7055  001574  322D               	rrcf	??_LCDout+1,f,c
  7056  001576  322C               	rrcf	??_LCDout,f,c
  7057  001578  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7058  00157A  D7FB               	goto	u2585
  7059  00157C  462C               	rlncf	??_LCDout,f,c
  7060  00157E  462C               	rlncf	??_LCDout,f,c
  7061  001580  508B               	movf	3979,w,c	;volatile
  7062  001582  182C               	xorwf	??_LCDout,w,c
  7063  001584  0BFB               	andlw	-5
  7064  001586  182C               	xorwf	??_LCDout,w,c
  7065  001588  6E8B               	movwf	3979,c	;volatile
  7066                           
  7067                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  7068  00158A  502F               	movf	LCDout@number,w,c
  7069  00158C  6E2C               	movwf	??_LCDout& (0+255),c
  7070  00158E  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7071  001590  0E05               	movlw	5
  7072  001592                     u2595:
  7073  001592  90D8               	bcf	status,0,c
  7074  001594  362C               	rlcf	??_LCDout,f,c
  7075  001596  362D               	rlcf	??_LCDout+1,f,c
  7076  001598  2EE8               	decfsz	wreg,f,c
  7077  00159A  D7FB               	goto	u2595
  7078  00159C  0E07               	movlw	7
  7079  00159E  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7080  0015A0                     u2605:
  7081  0015A0  342D               	rlcf	??_LCDout+1,w,c
  7082  0015A2  322D               	rrcf	??_LCDout+1,f,c
  7083  0015A4  322C               	rrcf	??_LCDout,f,c
  7084  0015A6  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7085  0015A8  D7FB               	goto	u2605
  7086  0015AA  508C               	movf	3980,w,c	;volatile
  7087  0015AC  182C               	xorwf	??_LCDout,w,c
  7088  0015AE  0BFE               	andlw	-2
  7089  0015B0  182C               	xorwf	??_LCDout,w,c
  7090  0015B2  6E8C               	movwf	3980,c	;volatile
  7091                           
  7092                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  7093  0015B4  502F               	movf	LCDout@number,w,c
  7094  0015B6  6E2C               	movwf	??_LCDout& (0+255),c
  7095  0015B8  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7096  0015BA  3A2C               	swapf	??_LCDout,f,c
  7097  0015BC  3A2D               	swapf	??_LCDout+1,f,c
  7098  0015BE  0EF0               	movlw	240
  7099  0015C0  162D               	andwf	??_LCDout+1,f,c
  7100  0015C2  502C               	movf	??_LCDout,w,c
  7101  0015C4  0B0F               	andlw	15
  7102  0015C6  122D               	iorwf	??_LCDout+1,f,c
  7103  0015C8  0EF0               	movlw	240
  7104  0015CA  162C               	andwf	??_LCDout,f,c
  7105  0015CC  0E07               	movlw	7
  7106  0015CE  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7107  0015D0                     u2615:
  7108  0015D0  342D               	rlcf	??_LCDout+1,w,c
  7109  0015D2  322D               	rrcf	??_LCDout+1,f,c
  7110  0015D4  322C               	rrcf	??_LCDout,f,c
  7111  0015D6  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7112  0015D8  D7FB               	goto	u2615
  7113  0015DA  462C               	rlncf	??_LCDout,f,c
  7114  0015DC  508C               	movf	3980,w,c	;volatile
  7115  0015DE  182C               	xorwf	??_LCDout,w,c
  7116  0015E0  0BFD               	andlw	-3
  7117  0015E2  182C               	xorwf	??_LCDout,w,c
  7118  0015E4  6E8C               	movwf	3980,c	;volatile
  7119                           
  7120                           ;LCD.c: 21: E_TOG();
  7121  0015E6  ECE8  F000         	call	_E_TOG	;wreg free
  7122                           
  7123                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7124  0015EA  0E03               	movlw	3
  7125  0015EC                     u3777:
  7126  0015EC  2EE8               	decfsz	wreg,f,c
  7127  0015EE  D7FE               	bra	u3777
  7128  0015F0  F000               	nop	
  7129  0015F2  0012               	return		;funcret
  7130  0015F4                     __end_of_LCDout:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           indf1	equ	0xFE7
  7142                           plusw1	equ	0xFE3
  7143                           fsr1h	equ	0xFE2
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           plusw2	equ	0xFDB
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function _E_TOG *****************
  7154 ;; Defined at:
  7155 ;;		line 5 in file "LCD.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;		None
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;		None
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      void 
  7162 ;; Registers used:
  7163 ;;		wreg
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7169 ;;      Params:         0       0       0       0
  7170 ;;      Locals:         0       0       0       0
  7171 ;;      Temps:          0       0       0       0
  7172 ;;      Totals:         0       0       0       0
  7173 ;;Total ram usage:        0 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    3
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_LCDout
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text30
  7184  0001D0                     __ptext30:
  7185                           	opt stack 0
  7186  0001D0                     _E_TOG:
  7187                           	opt stack 24
  7188                           
  7189                           ;LCD.c: 8: LATCbits.LATC0=1;
  7190                           
  7191                           ;incstack = 0
  7192  0001D0  808B               	bsf	3979,0,c	;volatile
  7193                           
  7194                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7195  0001D2  0E03               	movlw	3
  7196  0001D4                     u3787:
  7197  0001D4  2EE8               	decfsz	wreg,f,c
  7198  0001D6  D7FE               	bra	u3787
  7199  0001D8  F000               	nop	
  7200                           
  7201                           ;LCD.c: 10: LATCbits.LATC0=0;
  7202  0001DA  908B               	bcf	3979,0,c	;volatile
  7203  0001DC  0012               	return		;funcret
  7204  0001DE                     __end_of_E_TOG:
  7205                           	opt stack 0
  7206                           tblptru	equ	0xFF8
  7207                           tblptrh	equ	0xFF7
  7208                           tblptrl	equ	0xFF6
  7209                           tablat	equ	0xFF5
  7210                           prodh	equ	0xFF4
  7211                           prodl	equ	0xFF3
  7212                           intcon	equ	0xFF2
  7213                           postinc0	equ	0xFEE
  7214                           wreg	equ	0xFE8
  7215                           indf1	equ	0xFE7
  7216                           plusw1	equ	0xFE3
  7217                           fsr1h	equ	0xFE2
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           postinc2	equ	0xFDE
  7221                           postdec2	equ	0xFDD
  7222                           plusw2	equ	0xFDB
  7223                           fsr2h	equ	0xFDA
  7224                           fsr2l	equ	0xFD9
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function _InterruptHandlerLow *****************
  7228 ;; Defined at:
  7229 ;;		line 18 in file "main.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      void 
  7236 ;; Registers used:
  7237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7243 ;;      Params:         0       0       0       0
  7244 ;;      Locals:         0       0       0       0
  7245 ;;      Temps:         21       0       0       0
  7246 ;;      Totals:        21       0       0       0
  7247 ;;Total ram usage:       21 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    2
  7250 ;; This function calls:
  7251 ;;		Nothing
  7252 ;; This function is called by:
  7253 ;;		Interrupt level 1
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           	psect	intcodelo
  7258  000018                     __pintcodelo:
  7259                           	opt stack 0
  7260  000018                     _InterruptHandlerLow:
  7261                           	opt stack 23
  7262                           
  7263                           ;incstack = 0
  7264  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7265  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  7266  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  7267  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  7268  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  7269  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  7270  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  7271  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  7272  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  7273  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  7274  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  7275  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  7276  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  7277  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  7278  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  7279  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  7280  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  7281  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  7282  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  7283  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  7284  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  7285  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  7286                           
  7287                           ;main.c: 20: if (PIR1bits.RCIF) {
  7288  00006E  AA9E               	btfss	3998,5,c	;volatile
  7289  000070  D016               	goto	i1l375
  7290                           
  7291                           ;main.c: 21: ReceivedString[i]=RCREG;
  7292  000072  5033               	movf	_i,w,c	;volatile
  7293  000074  0D01               	mullw	1
  7294  000076  0EE7               	movlw	low _ReceivedString
  7295  000078  24F3               	addwf	prodl,w,c
  7296  00007A  6ED9               	movwf	fsr2l,c
  7297  00007C  0E01               	movlw	high _ReceivedString
  7298  00007E  20F4               	addwfc	prodh,w,c
  7299  000080  6EDA               	movwf	fsr2h,c
  7300  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  7301                           
  7302                           ;main.c: 22: RFID_Read=1;
  7303  000086  0E01               	movlw	1
  7304  000088  0101               	movlb	1	; () banked
  7305  00008A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  7306                           
  7307                           ; BSR set to: 1
  7308                           ;main.c: 23: if (i==15){
  7309  00008C  0E0F               	movlw	15
  7310  00008E  1833               	xorwf	_i,w,c	;volatile
  7311  000090  A4D8               	btfss	status,2,c
  7312  000092  D003               	goto	i1l376
  7313                           
  7314                           ; BSR set to: 1
  7315                           ;main.c: 24: i=0;
  7316  000094  0E00               	movlw	0
  7317  000096  6E33               	movwf	_i,c	;volatile
  7318                           
  7319                           ;main.c: 25: }else{
  7320  000098  D001               	goto	i1l377
  7321  00009A                     i1l376:
  7322                           
  7323                           ; BSR set to: 1
  7324                           ;main.c: 26: i++;
  7325                           
  7326                           ; BSR set to: 1
  7327  00009A  2A33               	incf	_i,f,c	;volatile
  7328  00009C                     i1l377:
  7329                           
  7330                           ; BSR set to: 1
  7331                           ;main.c: 27: }
  7332                           ;main.c: 28: PIR1bits.RCIF=0;
  7333                           
  7334                           ; BSR set to: 1
  7335  00009C  9A9E               	bcf	3998,5,c	;volatile
  7336  00009E                     i1l375:
  7337                           
  7338                           ; BSR set to: 1
  7339  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7340  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7341  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7342  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7343  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7344  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7345  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7346  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7347  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7348  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7349  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7350  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7351  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7352  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7353  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7354  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7355  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7356  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7357  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7358  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7359  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7360  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7361  0000F4  0010               	retfie	
  7362  0000F6                     __end_of_InterruptHandlerLow:
  7363                           	opt stack 0
  7364                           pclatu	equ	0xFFB
  7365                           pclath	equ	0xFFA
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           postinc0	equ	0xFEE
  7374                           fsr0h	equ	0xFEA
  7375                           fsr0l	equ	0xFE9
  7376                           wreg	equ	0xFE8
  7377                           indf1	equ	0xFE7
  7378                           plusw1	equ	0xFE3
  7379                           fsr1h	equ	0xFE2
  7380                           fsr1l	equ	0xFE1
  7381                           bsr	equ	0xFE0
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           plusw2	equ	0xFDB
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _InterruptHandlerHigh *****************
  7391 ;; Defined at:
  7392 ;;		line 34 in file "main.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7406 ;;      Params:         0       0       0       0
  7407 ;;      Locals:         0       0       0       0
  7408 ;;      Temps:         18       0       0       0
  7409 ;;      Totals:        18       0       0       0
  7410 ;;Total ram usage:       18 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    1
  7413 ;; This function calls:
  7414 ;;		i2_delay_tenth_s
  7415 ;; This function is called by:
  7416 ;;		Interrupt level 2
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	intcode
  7421  000008                     __pintcode:
  7422                           	opt stack 0
  7423  000008                     _InterruptHandlerHigh:
  7424                           	opt stack 23
  7425                           
  7426                           ;incstack = 0
  7427  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7428  00000A  EF5C  F00B         	goto	int_func
  7429                           pclatu	equ	0xFFB
  7430                           pclath	equ	0xFFA
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           postinc0	equ	0xFEE
  7439                           fsr0h	equ	0xFEA
  7440                           fsr0l	equ	0xFE9
  7441                           wreg	equ	0xFE8
  7442                           indf1	equ	0xFE7
  7443                           plusw1	equ	0xFE3
  7444                           fsr1h	equ	0xFE2
  7445                           fsr1l	equ	0xFE1
  7446                           bsr	equ	0xFE0
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455                           	psect	intcode_body
  7456  0016B8                     __pintcode_body:
  7457                           	opt stack 23
  7458  0016B8                     int_func:
  7459                           	opt stack 23
  7460  0016B8  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7461  0016BC  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7462  0016C0  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7463  0016C4  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7464  0016C8  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7465  0016CC  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7466  0016D0  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7467  0016D4  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7468  0016D8  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7469  0016DC  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7470  0016E0  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7471  0016E4  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7472  0016E8  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7473  0016EC  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7474  0016F0  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7475  0016F4  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7476  0016F8  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7477  0016FC  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7478                           
  7479                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7480  001700  A2F2               	btfss	intcon,1,c	;volatile
  7481  001702  D00D               	goto	i2l383
  7482                           
  7483                           ;main.c: 36: if (mode==-1) {
  7484  001704  2832               	incf	_mode,w,c	;volatile
  7485  001706  A4D8               	btfss	status,2,c
  7486  001708  D003               	goto	i2l384
  7487                           
  7488                           ;main.c: 38: mode=1;
  7489  00170A  0E01               	movlw	1
  7490  00170C  6E32               	movwf	_mode,c	;volatile
  7491                           
  7492                           ;main.c: 39: } else if (mode==0) {
  7493  00170E  D003               	goto	i2l387
  7494  001710                     i2l384:
  7495  001710  5032               	movf	_mode,w,c	;volatile
  7496  001712  A4D8               	btfss	status,2,c
  7497                           
  7498                           ;main.c: 43: mode=-1;
  7499                           
  7500                           ;main.c: 41: } else {
  7501  001714  6832               	setf	_mode,c	;volatile
  7502  001716                     i2l387:
  7503                           
  7504                           ;main.c: 44: }
  7505                           ;main.c: 46: delay_tenth_s(2);
  7506  001716  0E02               	movlw	2
  7507  001718  EC0A  F00E         	call	i2_delay_tenth_s
  7508                           
  7509                           ;main.c: 47: INTCONbits.INT0IF=0;
  7510  00171C  92F2               	bcf	intcon,1,c	;volatile
  7511  00171E                     i2l383:
  7512                           
  7513                           ;main.c: 48: }
  7514                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7515  00171E  A4F2               	btfss	intcon,2,c	;volatile
  7516  001720  D004               	goto	i2l388
  7517                           
  7518                           ;main.c: 50: millis++;
  7519  001722  0101               	movlb	1	; () banked
  7520  001724  4BF7               	infsnz	_millis& (0+255),f,b	;volatile
  7521  001726  2BF8               	incf	(_millis+1)& (0+255),f,b	;volatile
  7522                           
  7523                           ; BSR set to: 1
  7524                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7525  001728  94F2               	bcf	intcon,2,c	;volatile
  7526  00172A                     i2l388:
  7527                           
  7528                           ; BSR set to: 1
  7529  00172A  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7530  00172E  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7531  001732  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7532  001736  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7533  00173A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7534  00173E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7535  001742  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7536  001746  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7537  00174A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7538  00174E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7539  001752  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7540  001756  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7541  00175A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7542  00175E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7543  001762  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7544  001766  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7545  00176A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7546  00176E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7547  001772  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7548  001774  0011               	retfie		f
  7549  001776                     __end_of_InterruptHandlerHigh:
  7550                           	opt stack 0
  7551                           pclatu	equ	0xFFB
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           postinc0	equ	0xFEE
  7561                           fsr0h	equ	0xFEA
  7562                           fsr0l	equ	0xFE9
  7563                           wreg	equ	0xFE8
  7564                           indf1	equ	0xFE7
  7565                           plusw1	equ	0xFE3
  7566                           fsr1h	equ	0xFE2
  7567                           fsr1l	equ	0xFE1
  7568                           bsr	equ	0xFE0
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           plusw2	equ	0xFDB
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8
  7576                           
  7577 ;; *************** function i2_delay_tenth_s *****************
  7578 ;; Defined at:
  7579 ;;		line 32 in file "Movement.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  tenth_second    1    wreg     unsigned char 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7584 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      void 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7594 ;;      Params:         0       0       0       0
  7595 ;;      Locals:         3       0       0       0
  7596 ;;      Temps:          1       0       0       0
  7597 ;;      Totals:         4       0       0       0
  7598 ;;Total ram usage:        4 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; This function calls:
  7601 ;;		Nothing
  7602 ;; This function is called by:
  7603 ;;		_InterruptHandlerHigh
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text33
  7608  001C14                     __ptext33:
  7609                           	opt stack 0
  7610  001C14                     i2_delay_tenth_s:
  7611                           	opt stack 23
  7612                           
  7613                           ;incstack = 0
  7614                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7615  001C14  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7616                           
  7617                           ;Movement.c: 33: unsigned int i=0;
  7618  001C16  0E00               	movlw	0
  7619  001C18  6E04               	movwf	i2delay_tenth_s@i+1,c
  7620  001C1A  0E00               	movlw	0
  7621  001C1C  6E03               	movwf	i2delay_tenth_s@i,c
  7622                           
  7623                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7624  001C1E  0E00               	movlw	0
  7625  001C20  6E04               	movwf	i2delay_tenth_s@i+1,c
  7626  001C22  0E01               	movlw	1
  7627  001C24  6E03               	movwf	i2delay_tenth_s@i,c
  7628  001C26  D009               	goto	i2l209
  7629  001C28                     
  7630                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7631  001C28  0E82               	movlw	130
  7632  001C2A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7633  001C2C  0EDE               	movlw	222
  7634  001C2E                     i2u379_47:
  7635  001C2E  2EE8               	decfsz	wreg,f,c
  7636  001C30  D7FE               	bra	i2u379_47
  7637  001C32  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7638  001C34  D7FC               	bra	i2u379_47
  7639  001C36  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7640  001C38  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7641  001C3A                     i2l209:
  7642  001C3A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7643  001C3C  0D02               	mullw	2
  7644  001C3E  5003               	movf	i2delay_tenth_s@i,w,c
  7645  001C40  5CF3               	subwf	prodl,w,c
  7646  001C42  5004               	movf	i2delay_tenth_s@i+1,w,c
  7647  001C44  58F4               	subwfb	prodh,w,c
  7648  001C46  A0D8               	btfss	status,0,c
  7649  001C48  0012               	return	
  7650  001C4A  D7EE               	goto	i2l210
  7651  001C4C                     __end_ofi2_delay_tenth_s:
  7652                           	opt stack 0
  7653                           pclatu	equ	0xFFB
  7654                           pclath	equ	0xFFA
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           postinc0	equ	0xFEE
  7663                           fsr0h	equ	0xFEA
  7664                           fsr0l	equ	0xFE9
  7665                           wreg	equ	0xFE8
  7666                           indf1	equ	0xFE7
  7667                           plusw1	equ	0xFE3
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           bsr	equ	0xFE0
  7671                           indf2	equ	0xFDF
  7672                           postinc2	equ	0xFDE
  7673                           postdec2	equ	0xFDD
  7674                           plusw2	equ	0xFDB
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           pclatu	equ	0xFFB
  7679                           pclath	equ	0xFFA
  7680                           tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           prodh	equ	0xFF4
  7685                           prodl	equ	0xFF3
  7686                           intcon	equ	0xFF2
  7687                           postinc0	equ	0xFEE
  7688                           fsr0h	equ	0xFEA
  7689                           fsr0l	equ	0xFE9
  7690                           wreg	equ	0xFE8
  7691                           indf1	equ	0xFE7
  7692                           plusw1	equ	0xFE3
  7693                           fsr1h	equ	0xFE2
  7694                           fsr1l	equ	0xFE1
  7695                           bsr	equ	0xFE0
  7696                           indf2	equ	0xFDF
  7697                           postinc2	equ	0xFDE
  7698                           postdec2	equ	0xFDD
  7699                           plusw2	equ	0xFDB
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704                           	psect	rparam
  7705  0000                     pclatu	equ	0xFFB
  7706                           pclath	equ	0xFFA
  7707                           tblptru	equ	0xFF8
  7708                           tblptrh	equ	0xFF7
  7709                           tblptrl	equ	0xFF6
  7710                           tablat	equ	0xFF5
  7711                           prodh	equ	0xFF4
  7712                           prodl	equ	0xFF3
  7713                           intcon	equ	0xFF2
  7714                           postinc0	equ	0xFEE
  7715                           fsr0h	equ	0xFEA
  7716                           fsr0l	equ	0xFE9
  7717                           wreg	equ	0xFE8
  7718                           indf1	equ	0xFE7
  7719                           plusw1	equ	0xFE3
  7720                           fsr1h	equ	0xFE2
  7721                           fsr1l	equ	0xFE1
  7722                           bsr	equ	0xFE0
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           plusw2	equ	0xFDB
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731                           	psect	temp
  7732  000034                     btemp:
  7733                           	opt stack 0
  7734  000034                     	ds	1
  7735  0000                     int$flags	set	btemp
  7736  0000                     wtemp6	set	btemp+1
  7737                           pclatu	equ	0xFFB
  7738                           pclath	equ	0xFFA
  7739                           tblptru	equ	0xFF8
  7740                           tblptrh	equ	0xFF7
  7741                           tblptrl	equ	0xFF6
  7742                           tablat	equ	0xFF5
  7743                           prodh	equ	0xFF4
  7744                           prodl	equ	0xFF3
  7745                           intcon	equ	0xFF2
  7746                           postinc0	equ	0xFEE
  7747                           fsr0h	equ	0xFEA
  7748                           fsr0l	equ	0xFE9
  7749                           wreg	equ	0xFE8
  7750                           indf1	equ	0xFE7
  7751                           plusw1	equ	0xFE3
  7752                           fsr1h	equ	0xFE2
  7753                           fsr1l	equ	0xFE1
  7754                           bsr	equ	0xFE0
  7755                           indf2	equ	0xFDF
  7756                           postinc2	equ	0xFDE
  7757                           postdec2	equ	0xFDD
  7758                           plusw2	equ	0xFDB
  7759                           fsr2h	equ	0xFDA
  7760                           fsr2l	equ	0xFD9
  7761                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    107     115
    BANK1           256    227     250
    BANK2           239      0     150

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 12
		 -> VerifySignal@translatedASCII(BANK0[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 12
		 -> VerifySignal@translatedASCII(BANK0[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@RecievedString	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    sp__memset	PTR void  size(2) Largest target is 12
		 -> VerifySignal@translatedASCII(BANK0[12]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), STR_5(CODE[17]), 
		 -> main@Message(BANK1[10]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S111DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S111DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _initLCD->_SendLCD
    _VerifySignal->_memset
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _VerifySignal->_memset
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               229   229      0   82211
                                            105 BANK0      2     2      0
                                              0 BANK1    227   227      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4921
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        21    19      2    1391
                                              2 BANK0     21    19      2
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     407
                                             43 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   27849
                                             28 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5461
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5731
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4226
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13771
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4344
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2532
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
     _memset
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E3      FA       7       97.7%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0      96       9       62.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6B      73       4       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     236       5        0.0%
DATA                 0      0     236      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 20 13:35:14 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l36 13B4  
                                  l37 13DE                                    l53 17C8  
                                  l54 1778                                    l70 18C6  
                                  l55 1790                                    l56 17A8  
                                  l67 18E6                                    l68 1890  
                                  l69 18AC                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l110 1924                                   l120 013C  
                                 l210 1BF0                                   l115 199A  
                                 l230 0C8E                                   l231 0C76  
                                 l152 1C9A                                   l224 0E7E  
                                 l217 1516                                   l209 1C02  
                                 l225 0B3E                                   l401 03FA  
                                 l154 1CAE                                   l234 0E68  
                                 l226 0C00                                   l235 0E7A  
                                 l227 0C1C                                   l411 04F6  
                                 l420 0654                                   l412 0540  
                                 l229 0D40                                   l421 0770  
                                 l413 05C4                                   l405 0400  
                                 l158 1A2E                                   l430 07CC  
                                 l406 0494                                   l159 19F8  
                                 l271 124C                                   l423 071E  
                                 l415 0610                                   l407 04A2  
                                 l424 06BE                                   l408 04C0  
                                 l273 1288                                   l433 085C  
                                 l417 0632                                   l274 1298  
                                 l266 11F6                                   l442 0900  
                                 l426 0700                                   l435 093A  
                                 l276 12F8                                   l268 1210  
                                 l436 08E4                                   l446 09A8  
                                 l438 08C4                                   l463 0F2A  
                                 l447 09DA                                   l472 0F8A  
                                 l464 0F44                                   l481 103A  
                                 l474 0FE8                                   l466 0F5A  
                                 l467 0F52                                   l485 1084  
                                 l486 10A8                                   l670 181E  
                                 l911 1A76                                   l487 10B0  
                                 l479 1010                                   l671 182E  
                                 l912 1A6E                                   l832 01AC  
                                 l488 10F0                                   l921 1AC2  
                                 l497 1132                                   l489 10D0  
                                 l673 184C                                   l922 1ABA  
                                 l498 118E                                   l674 1844  
                                 l915 1A96                                   l499 1138  
                                 l916 1AA0                                   l925 1ADA  
                                 l677 186C                                   l926 1AE4  
                                 l678 1876                                   l679 1884  
                                 l935 0116                                   l936 0104  
                         grabLeftIR@i 0062                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3303 103E                                  l3225 1992  
                                l3209 191C                                  l3375 0104  
                                l3625 1290                                  l3801 06B6  
                                l3813 06F8                                  l3599 11EE  
                                l3897 09FC                                  l3899 09FE  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1300 1850                                  u3000 1116  
                                u3020 1196                                  u3030 11B0  
                                _LATB 000F8A                                  u3200 12DC  
                                u1550 1AC6                                  u3241 0364  
                                u3410 0718                                  u3251 0376  
                                u2524 1376                                  u3180 128C  
                                u3340 0680                                  u2605 15A0  
                                u2525 1372                                  u2534 13D0  
                                u3510 09E6                                  u3350 0694  
                                u3342 0682                                  u2615 15D0  
                                u2535 13CC                                  u3352 0696  
                                u2545 142A                                  u3450 08A8  
                                u2555 1538                                  u2820 1A1C  
                                u2565 1546                                  u2830 1A4E  
                                u2910 106A                                  u3470 0936  
                                u3390 06F4                                  u2575 1564  
                                u3607 1670                                  u3527 0454  
                                u2760 1962                                  u2680 1A7A  
                                u2585 1572                                  u2665 1CC2  
                                u1945 0138                                  u3617 1688  
                                u3537 046C                                  u2666 1CC4  
                                u1946 013A                                  u3490 0974  
                                u2595 1592                                  u2827 1A12  
                                u2755 192C                                  u3707 17C2  
                                u3627 169E                                  u3547 1608  
                                u2837 1A44                                  u3717 1954  
                                u1965 014A                                  u3637 16B0  
                                u3557 161E                                  u2790 19D8  
                                u1966 014C                                  u3727 19CA  
                                u3647 0B72                                  u3567 1630  
                                u3737 1CB0                                  u2785 19A2  
                                u3657 0B8A                                  u3577 163E  
                                u3747 1A28                                  u3667 18E0  
                                u3587 164C                                  u3757 1CD0  
                                u3677 1BF6                                  u3597 165E  
                                u2990 10F8                                  u3767 1CE0  
                                u3687 1488                                  u3777 15EC  
                                u3697 14A0                                  u3787 01D4  
         VerifySignal@translatedASCII 0068                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0034                                  _stop 1776  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00F6               ScanWithRange@MotorPower 00BC  
                        ___param_bank 000000                       i2_delay_tenth_s 1C14  
                     __end_of_SendLCD 1CE8                       __end_of_SetLine 1CB8  
                  ScanWithRange@F3555 00CB                           ScanIR@F3541 00CF  
                               ?_main 0001                       __end_of___awdiv 188E  
                               ?_stop 0071                       ___awdiv@divisor 0062  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0062  
                     __end_of___lwdiv 1AAA                       __end_of___lwmod 1AEE  
                               i2l210 1C28                                 i1l375 009E  
                               i1l376 009A                                 i2l209 1C3A  
                               i1l377 009C                                 i2l383 171E  
                               i2l384 1710                                 i2l387 1716  
                               i2l388 172A                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 01D0  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 16B8                    ScanWithRange@loops 0080  
                     __end_of_dpowers 030B                       __end_of_isdigit 01B4  
                               main@i 01CF                                 pclath 000FFA  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                               wtemp6 0035                   __size_of_LCD_String 0060  
                     __end_of_sprintf 11BE                __size_of_ScanWithRange 04FE  
                      __CFG_MCLRE$OFF 000000                       __initialization 1C4C  
                        __end_of_main 0A20                          __end_of_stop 1808  
                      delay_tenth_s@i 002E                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 0060          ScanIR@DirectionMoveThreshold 00A9  
          VerifySignal@RecievedString 0062                  __end_of_enableSensor 014E  
                              ??_main 00C9                                ??_stop 0032  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                        main@MotorPower 01CD  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1C14                                _LCDout 152E  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00BD  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1C4C                           SendLCD@type 0030  
                           ??_SendLCD 0031                                _ScanIR 143A  
                           ??_SetLine 0032                           fullSpeed@mL 0071  
                         fullSpeed@mR 0073                   ScanWithRange@millis 008A  
                              ___wmul 014E                             ??___awdiv 0032  
                    __end_of_initRFID 01D0                             ??___lwdiv 0030  
                           ??___lwmod 0030                                _initIR 0174  
                              _memset 00FA                  __size_of_grabRightIR 0076  
                              _millis 01F7                                clear_0 1C52  
                              clear_1 1C5E                                clear_2 1C6A  
                    ___awdiv@quotient 0066                                main@mL 01D1  
                              main@mR 01DA                        ??_initMotorPWM 002C  
                           ??_initLCD 0060                         _ScanWithRange 0A20  
                           ??_isdigit 002C          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0071                                stop@mR 0073  
                           ??_sprintf 006F       ScanWithRange@TimeAboveThreshold 00C0  
                    __end_of_turnLeft 1BA2                       fullSpeedBack@mL 0077  
                     fullSpeedBack@mR 0079                            __accesstop 0060  
             __end_of__initialization 1C74                         ___rparam_used 000001  
                         SetLine@line 0060                         __end_of_E_TOG 01DE  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1AEE  
                        ??_LCD_String 0032                        ?_ScanWithRange 007C  
                             ??_E_TOG 002C         __size_of_InterruptHandlerHigh 176E  
         __end_of_InterruptHandlerLow 00F6            delay_tenth_s@tenth_seconds 002D  
                        sprintf@width 0079                            __pbssBANK0 00CB  
                          __pbssBANK1 01E3                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 007C  
                  __end_of_LCD_String 1A56                               ?_ScanIR 007C  
                      ?_fullSpeedBack 0077                 __size_of_enableSensor 0026  
                             ?___wmul 002C                   grabLeftIR@IR_signal 0060  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                               ?_memset 002C  
                          _grabLeftIR 1980                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013E                       __size_of_LCDout 00C6  
                        _enableSensor 0128                    __size_of_turnRight 003C  
                __end_of_initMotorPWM 1BDC                ScanWithRange@RFID_Read 0088  
                             _SendLCD 1CB8                               __Hparam 0000  
                             _SetLine 1C82                               __Lparam 0000  
                     __size_of_ScanIR 00F4                               ___awdiv 1808  
                     __size_of___wmul 0026                               ___lwdiv 1A56  
                             ___lwmod 1AAA                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1C4C  
                     ??_ScanWithRange 008C                       __size_of_memset 002E  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 1CE8  
                             __ptext2 01B4                               __ptext3 1BA2  
                             __ptext4 15F4                               __ptext5 0174  
                             __ptext6 1AEE                               __ptext7 0128  
                             __ptext8 11BE                               __ptext9 00FA  
                           _T0CONbits 000FD5                               _initLCD 15F4  
                   __end_of_initTimer 1CFC                               _dpowers 0301  
                   __end_of_fullSpeed 190A                               _isdigit 0196  
                        LCDout@number 002F                         ?_VerifySignal 0062  
                             main@buf 0100                               _sprintf 0F1E  
                      __pintcode_body 16B8                  end_of_initialization 1C74  
                      ScanWithRange@i 00B8                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                               memset@c 002E  
                             memset@n 0030                               memset@p 0060  
                       __Lmediumconst 0000                               int_func 16B8  
                  ScanIR@SensorResult 00AB                       ??_fullSpeedBack 0032  
                           _RFID_Read 01F9                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 0032  
              ScanWithRange@LeftFlick 00C6                     __end_of_turnRight 1B66  
                         ?_grabLeftIR 002C                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0064                ScanWithRange@RightFlag 00C7  
                      __end_of_LCDout 15F4                             _TXSTAbits 000FAC  
                           ScanIR@buf 0081                         ??_grabRightIR 002E  
                      __end_of_ScanIR 152E                        _ReceivedString 01E7  
                      __end_of___wmul 0174                     ScanWithRange@Move 0084  
                         _BAUDCONbits 000FAA                        __end_of_initIR 0196  
              __size_of_delay_tenth_s 0038                        __end_of_memset 0128  
                 start_initialization 1C4C                 __size_of_initMotorPWM 003A  
                            ??_LCDout 002C          __end_of_InterruptHandlerHigh 1776  
                            ??_ScanIR 0080                   __size_of_grabLeftIR 0076  
                            ??___wmul 0030                              ??_initIR 002C  
                            ??_memset 0032                   __end_of_grabRightIR 1980  
                        _initMotorPWM 1BA2                           __pbssCOMRAM 0032  
                      fullSpeed@power 0075                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$1781 002D  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1BDC  
                         sprintf@flag 0078                           sprintf@prec 0075  
                   __size_of_initRFID 001C                              ?_SendLCD 0030  
                            ?_SetLine 0001                      ___lwdiv@dividend 002C  
                           __pintcode 0008                  __end_of_VerifySignal 12FC  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                 VerifySignal@xorOutput 0074  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003C  
                       ??_setMotorPWM 006A                             _initTimer 1CE8  
                           _fullSpeed 188E                      ___lwdiv@quotient 0061  
                            ?_sprintf 0067                        ?_delay_tenth_s 0001  
                      ___wmul@product 0030                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0077                           turnRight@mR 0079  
                            _PIR1bits 000F9E                              i2u379_47 1C2E  
                            _RCONbits 000FD0                             main@F3552 0200  
                           main@F3554 0264                             main@F3557 01E3  
                         _grabRightIR 190A                 ScanWithRange@LeftFlag 00BE  
                grabRightIR@IR_signal 0060                     ___wmul@multiplier 002C  
               __end_of_ScanWithRange 0F1E                          setMotorPWM@m 0068  
               ScanWithRange@MoveTime 0082                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0086                              ScanIR@mL 007C  
                            ScanIR@mR 007E                          ??_grabLeftIR 002E  
                          ?_initTimer 0001                             _turnRight 1B2A  
                          ?_fullSpeed 0071                      ScanWithRange@buf 0090  
           VerifySignal@ASCIICheckSum 0075                   __end_of_setMotorPWM 143A  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1B2A  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 19F6  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0076                      __size_of_initLCD 00C4  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 002E  
                     ___lwdiv@counter 0060                            ?_turnRight 0077  
                            __ptext10 0A20                              __ptext11 1B2A  
                            __ptext20 0196                              __ptext12 1B66  
                            __ptext21 014E                              __ptext13 188E  
                            __ptext30 01D0                              __ptext22 1AAA  
                            __ptext14 1BDC                              __ptext23 1A56  
                            __ptext15 143A                              __ptext24 190A  
                            __ptext16 1776                              __ptext33 1C14  
                            __ptext25 1980                              __ptext17 12FC  
                            __ptext26 1C82                              __ptext18 1808  
                            __ptext27 19F6                              __ptext19 0F1E  
                            __ptext28 1CB8                              __ptext29 152E  
                     ??_delay_tenth_s 002C                      __size_of_sprintf 02A0  
                            _initRFID 01B4             ScanWithRange@SensorResult 00C2  
                      turnRight@power 007B                         __size_of_main 06D0  
                  main@DirectionFound 01CE                         turnLeft@power 007B  
                       __size_of_stop 0092                            turnLeft@mL 0077  
                          turnLeft@mR 0079                 __size_of_VerifySignal 013E  
                            int$flags 0034                              main@Move 01D0  
                 _InterruptHandlerLow 0018                            _LCD_String 19F6  
                            _turnLeft 1B66                       ScanWithRange@mL 007C  
                     ScanWithRange@mR 007E                    enableSensor@sensor 002D  
                  enableSensor@status 002C                         VerifySignal@i 0076  
                          _INTCONbits 000FF2                           ??_initTimer 002C  
                            isdigit@c 002E                              memset@p1 002C  
                         ??_fullSpeed 0076                           _setMotorPWM 12FC  
                        _VerifySignal 11BE                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0073  
                           sprintf@sp 0067                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 002C                      ___lwmod@dividend 0063  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00BA  
              ??_InterruptHandlerHigh 0005                              sprintf@c 007B  
                            sprintf@f 0069                       ___lwmod@divisor 0065  
                     ___lwmod@counter 0030                           ??_turnRight 0032  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 002D  
                    i2delay_tenth_s@i 0003  
