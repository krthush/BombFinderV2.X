

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 18:54:00 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATBbits	set	3978
    74  0000                     _LATCbits	set	3979
    75  0000                     _LATDbits	set	3980
    76  0000                     _LATEbits	set	3981
    77  0000                     _PTCON0	set	3967
    78  0000                     _PTCON1	set	3966
    79  0000                     _PTPERH	set	3962
    80  0000                     _PTPERL	set	3963
    81  0000                     _PWMCON0	set	3951
    82  0000                     _PWMCON1	set	3950
    83  0000                     _TRISAbits	set	3986
    84  0000                     _TRISBbits	set	3987
    85  0000                     _TRISC	set	3988
    86  0000                     _TRISCbits	set	3988
    87  0000                     _TRISDbits	set	3989
    88  0000                     _TRISEbits	set	3990
    89  0000                     _PDC0H	set	3960
    90  0000                     _PDC0L	set	3961
    91  0000                     _PDC1H	set	3958
    92  0000                     _PDC1L	set	3959
    93  0000                     _ANSEL0bits	set	4024
    94  0000                     _BAUDCONbits	set	4010
    95  0000                     _IPR1bits	set	3999
    96  0000                     _OSCCON	set	4051
    97  0000                     _OSCCONbits	set	4051
    98  0000                     _PIE1bits	set	3997
    99  0000                     _PIR1bits	set	3998
   100  0000                     _RCONbits	set	4048
   101  0000                     _RCREG	set	4014
   102  0000                     _RCSTAbits	set	4011
   103  0000                     _SPBRG	set	4015
   104  0000                     _SPBRGH	set	4016
   105  0000                     _T5CON	set	4023
   106  0000                     _TXREG	set	4013
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _T0CONbits	set	4053
   109  0000                     _TMR0H	set	4055
   110  0000                     _TMR0L	set	4054
   111  0000                     _INTCONbits	set	4082
   112  00030B                     STR_6:
   113  00030B  20                 	db	32
   114  00030C  20                 	db	32
   115  00030D  20                 	db	32
   116  00030E  20                 	db	32
   117  00030F  20                 	db	32
   118  000310  20                 	db	32
   119  000311  25                 	db	37
   120  000312  30                 	db	48	;'0'
   121  000313  34                 	db	52	;'4'
   122  000314  64                 	db	100	;'d'
   123  000315  2C                 	db	44
   124  000316  20                 	db	32
   125  000317  25                 	db	37
   126  000318  30                 	db	48	;'0'
   127  000319  34                 	db	52	;'4'
   128  00031A  64                 	db	100	;'d'
   129  00031B  00                 	db	0
   130  00031C                     STR_5:
   131  00031C  20                 	db	32
   132  00031D  20                 	db	32
   133  00031E  20                 	db	32
   134  00031F  20                 	db	32
   135  000320  20                 	db	32
   136  000321  20                 	db	32
   137  000322  49                 	db	73	;'I'
   138  000323  6E                 	db	110	;'n'
   139  000324  65                 	db	101	;'e'
   140  000325  72                 	db	114	;'r'
   141  000326  74                 	db	116	;'t'
   142  000327  20                 	db	32
   143  000328  4D                 	db	77	;'M'
   144  000329  6F                 	db	111	;'o'
   145  00032A  64                 	db	100	;'d'
   146  00032B  65                 	db	101	;'e'
   147  00032C  00                 	db	0
   148  00032D                     STR_1:
   149  00032D  20                 	db	32
   150  00032E  20                 	db	32
   151  00032F  20                 	db	32
   152  000330  20                 	db	32
   153  000331  20                 	db	32
   154  000332  53                 	db	83	;'S'
   155  000333  63                 	db	99	;'c'
   156  000334  61                 	db	97	;'a'
   157  000335  6E                 	db	110	;'n'
   158  000336  49                 	db	73	;'I'
   159  000337  52                 	db	82	;'R'
   160  000338  00                 	db	0
   161  000339                     STR_8:
   162  000339  47                 	db	71	;'G'
   163  00033A  6F                 	db	111	;'o'
   164  00033B  69                 	db	105	;'i'
   165  00033C  6E                 	db	110	;'n'
   166  00033D  67                 	db	103	;'g'
   167  00033E  20                 	db	32
   168  00033F  48                 	db	72	;'H'
   169  000340  6F                 	db	111	;'o'
   170  000341  6D                 	db	109	;'m'
   171  000342  65                 	db	101	;'e'
   172  000343  00                 	db	0
   173  000344                     STR_7:
   174  000344  53                 	db	83	;'S'
   175  000345  65                 	db	101	;'e'
   176  000346  61                 	db	97	;'a'
   177  000347  72                 	db	114	;'r'
   178  000348  63                 	db	99	;'c'
   179  000349  68                 	db	104	;'h'
   180  00034A  69                 	db	105	;'i'
   181  00034B  6E                 	db	110	;'n'
   182  00034C  67                 	db	103	;'g'
   183  00034D  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  00034E  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  001C9C                     __pcinit:
   190                           	opt stack 0
   191  001C9C                     start_initialization:
   192                           	opt stack 0
   193  001C9C                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Clear objects allocated to BANK1 (21 bytes)
   197  001C9C  EE01  F0E2         	lfsr	0,__pbssBANK1
   198  001CA0  0E15               	movlw	21
   199  001CA2                     clear_0:
   200  001CA2  6AEE               	clrf	postinc0,c
   201  001CA4  06E8               	decf	wreg,f,c
   202  001CA6  E1FD               	bnz	clear_0
   203                           
   204                           ; Clear objects allocated to BANK2 (100 bytes)
   205  001CA8  EE02  F000         	lfsr	0,__pbssBANK2
   206  001CAC  0E64               	movlw	100
   207  001CAE                     clear_1:
   208  001CAE  6AEE               	clrf	postinc0,c
   209  001CB0  06E8               	decf	wreg,f,c
   210  001CB2  E1FD               	bnz	clear_1
   211                           
   212                           ; Clear objects allocated to BANK0 (58 bytes)
   213  001CB4  EE00  F0BF         	lfsr	0,__pbssBANK0
   214  001CB8  0E3A               	movlw	58
   215  001CBA                     clear_2:
   216  001CBA  6AEE               	clrf	postinc0,c
   217  001CBC  06E8               	decf	wreg,f,c
   218  001CBE  E1FD               	bnz	clear_2
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  001CC0  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  001CC2  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  001CC4                     end_of_initialization:
   224                           	opt stack 0
   225  001CC4                     __end_of__initialization:
   226                           	opt stack 0
   227  001CC4  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  001CC6  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  001CC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  001CCA  6EF8               	movwf	tblptru,c
   231  001CCC  0100               	movlb	0
   232  001CCE  EFA8  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000BF                     __pbssBANK0:
   252                           	opt stack 0
   253  0000BF                     main@F3895:
   254                           	opt stack 0
   255  0000BF                     	ds	50
   256  0000F1                     ScanIR@F3879:
   257                           	opt stack 0
   258  0000F1                     	ds	4
   259  0000F5                     ScanWithRange@F3892:
   260                           	opt stack 0
   261  0000F5                     	ds	4
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001E2                     __pbssBANK1:
   268                           	opt stack 0
   269  0001E2                     main@F3898:
   270                           	opt stack 0
   271  0001E2                     	ds	4
   272  0001E6                     _ReceivedString:
   273                           	opt stack 0
   274  0001E6                     	ds	16
   275  0001F6                     _RFID_Read:
   276                           	opt stack 0
   277  0001F6                     	ds	1
   278                           tblptru	equ	0xFF8
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK2
   283  000200                     __pbssBANK2:
   284                           	opt stack 0
   285  000200                     main@F3893:
   286                           	opt stack 0
   287  000200                     	ds	100
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@buf:
   296                           	opt stack 0
   297                           
   298                           ; 40 bytes @ 0x0
   299  000100                     	ds	40
   300  000128                     main@MoveType:
   301                           	opt stack 0
   302                           
   303                           ; 50 bytes @ 0x28
   304  000128                     	ds	50
   305  00015A                     main@MoveTime:
   306                           	opt stack 0
   307                           
   308                           ; 100 bytes @ 0x5A
   309  00015A                     	ds	100
   310  0001BE                     main@Message:
   311                           	opt stack 0
   312                           
   313                           ; 10 bytes @ 0xBE
   314  0001BE                     	ds	10
   315  0001C8                     main@ScanAngle:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0xC8
   319  0001C8                     	ds	1
   320  0001C9                     main@SensorResult:
   321                           	opt stack 0
   322                           
   323                           ; 4 bytes @ 0xC9
   324  0001C9                     	ds	4
   325  0001CD                     main@DirectionFound:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xCD
   329  0001CD                     	ds	1
   330  0001CE                     main@i:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xCE
   334  0001CE                     	ds	1
   335  0001CF                     main@Move:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xCF
   339  0001CF                     	ds	1
   340  0001D0                     main@mL:
   341                           	opt stack 0
   342                           
   343                           ; 9 bytes @ 0xD0
   344  0001D0                     	ds	9
   345  0001D9                     main@mR:
   346                           	opt stack 0
   347                           
   348                           ; 9 bytes @ 0xD9
   349  0001D9                     	ds	9
   350                           tblptru	equ	0xFF8
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackBANK0
   355  000060                     __pcstackBANK0:
   356                           	opt stack 0
   357  000060                     ??_sprintf:
   358  000060                     setMotorPWM@PWMduty:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  000060                     	ds	2
   363  000062                     stop@mL:
   364                           	opt stack 0
   365  000062                     fullSpeed@mL:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000062                     	ds	2
   370  000064                     stop@mR:
   371                           	opt stack 0
   372  000064                     fullSpeed@mR:
   373                           	opt stack 0
   374  000064                     sprintf@ap:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x4
   378  000064                     	ds	2
   379  000066                     fullSpeed@power:
   380                           	opt stack 0
   381  000066                     sprintf@prec:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000066                     	ds	1
   386  000067                     turnLeft@mL:
   387                           	opt stack 0
   388  000067                     turnRight@mL:
   389                           	opt stack 0
   390  000067                     fullSpeedBack@mL:
   391                           	opt stack 0
   392  000067                     sprintf@val:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x7
   396  000067                     	ds	2
   397  000069                     sprintf@flag:
   398                           	opt stack 0
   399  000069                     turnLeft@mR:
   400                           	opt stack 0
   401  000069                     turnRight@mR:
   402                           	opt stack 0
   403  000069                     fullSpeedBack@mR:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x9
   407  000069                     	ds	1
   408  00006A                     sprintf@width:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0xA
   412  00006A                     	ds	1
   413  00006B                     turnLeft@power:
   414                           	opt stack 0
   415  00006B                     turnRight@power:
   416                           	opt stack 0
   417  00006B                     fullSpeedBack@power:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xB
   421  00006B                     	ds	1
   422  00006C                     sprintf@c:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0xC
   426  00006C                     	ds	1
   427  00006D                     ScanIR@mL:
   428                           	opt stack 0
   429  00006D                     ScanWithRange@mL:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xD
   433  00006D                     	ds	2
   434  00006F                     ScanIR@mR:
   435                           	opt stack 0
   436  00006F                     ScanWithRange@mR:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xF
   440  00006F                     	ds	2
   441  000071                     ScanWithRange@loops:
   442                           	opt stack 0
   443  000071                     ScanIR@buf:
   444                           	opt stack 0
   445                           
   446                           ; 40 bytes @ 0x11
   447  000071                     	ds	2
   448  000073                     ScanWithRange@MoveTime:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x13
   452  000073                     	ds	2
   453  000075                     ScanWithRange@Move:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x15
   457  000075                     	ds	2
   458  000077                     ScanWithRange@MoveType:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x17
   462  000077                     	ds	2
   463  000079                     ScanWithRange@RFID_Read:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x19
   467  000079                     	ds	2
   468  00007B                     ??_ScanWithRange:
   469                           
   470                           ; 0 bytes @ 0x1B
   471  00007B                     	ds	5
   472  000080                     ScanWithRange@buf:
   473                           	opt stack 0
   474                           
   475                           ; 40 bytes @ 0x20
   476  000080                     	ds	25
   477  000099                     ScanIR@DirectionMoveThreshold:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x39
   481  000099                     	ds	2
   482  00009B                     ScanIR@SensorResult:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x3B
   486  00009B                     	ds	13
   487  0000A8                     ScanWithRange@n:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x48
   491  0000A8                     	ds	2
   492  0000AA                     ScanWithRange@MiniLeftFlick:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x4A
   496  0000AA                     	ds	1
   497  0000AB                     ScanWithRange@i:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x4B
   501  0000AB                     	ds	2
   502  0000AD                     ScanWithRange@DirectionFoundThreshold:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x4D
   506  0000AD                     	ds	2
   507  0000AF                     ScanWithRange@MotorPower:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x4F
   511  0000AF                     	ds	1
   512  0000B0                     ScanWithRange@LeftFlick:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x50
   516  0000B0                     	ds	1
   517  0000B1                     ScanWithRange@LeftFlag:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x51
   521  0000B1                     	ds	2
   522  0000B3                     ScanWithRange@TimeAboveThreshold:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x53
   526  0000B3                     	ds	1
   527  0000B4                     ScanWithRange@SensorResult:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x54
   531  0000B4                     	ds	4
   532  0000B8                     ScanWithRange@RightFlag:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x58
   536  0000B8                     	ds	2
   537  0000BA                     ??_main:
   538                           
   539                           ; 0 bytes @ 0x5A
   540  0000BA                     	ds	5
   541                           tblptru	equ	0xFF8
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ??i2_delay_tenth_s:
   549                           
   550                           ; 0 bytes @ 0x0
   551  000001                     	ds	1
   552  000002                     i2delay_tenth_s@tenth_seconds:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x1
   556  000002                     	ds	1
   557  000003                     i2delay_tenth_s@i:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2
   561  000003                     	ds	2
   562  000005                     ??_InterruptHandlerHigh:
   563                           
   564                           ; 0 bytes @ 0x4
   565  000005                     	ds	14
   566  000013                     ??_InterruptHandlerLow:
   567                           
   568                           ; 0 bytes @ 0x12
   569  000013                     	ds	17
   570  000024                     ??_isdigit:
   571  000024                     ??_LCDout:
   572  000024                     ??_delay_tenth_s:
   573  000024                     ?_grabRightIR:
   574                           	opt stack 0
   575  000024                     ?_grabLeftIR:
   576                           	opt stack 0
   577  000024                     ?___wmul:
   578                           	opt stack 0
   579  000024                     ?___lwdiv:
   580                           	opt stack 0
   581  000024                     enableSensor@status:
   582                           	opt stack 0
   583  000024                     VerifySignal@Signal:
   584                           	opt stack 0
   585  000024                     ___wmul@multiplier:
   586                           	opt stack 0
   587  000024                     ___lwdiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x23
   591  000024                     	ds	1
   592  000025                     enableSensor@sensor:
   593                           	opt stack 0
   594  000025                     delay_tenth_s@tenth_seconds:
   595                           	opt stack 0
   596  000025                     _isdigit$2085:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x24
   600  000025                     	ds	1
   601  000026                     ??_grabRightIR:
   602  000026                     ??_grabLeftIR:
   603  000026                     ??_VerifySignal:
   604  000026                     isdigit@c:
   605                           	opt stack 0
   606  000026                     delay_tenth_s@i:
   607                           	opt stack 0
   608  000026                     ___wmul@multiplicand:
   609                           	opt stack 0
   610  000026                     ___lwdiv@divisor:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x25
   614  000026                     	ds	1
   615  000027                     LCDout@number:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x26
   619  000027                     	ds	1
   620  000028                     SendLCD@type:
   621                           	opt stack 0
   622  000028                     ___wmul@product:
   623                           	opt stack 0
   624  000028                     ___lwdiv@quotient:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x27
   628  000028                     	ds	1
   629  000029                     SendLCD@Byte:
   630                           	opt stack 0
   631  000029                     grabRightIR@IR_signal:
   632                           	opt stack 0
   633  000029                     grabLeftIR@IR_signal:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x28
   637  000029                     	ds	1
   638  00002A                     ??_initLCD:
   639  00002A                     ?___awdiv:
   640                           	opt stack 0
   641  00002A                     SetLine@line:
   642                           	opt stack 0
   643  00002A                     VerifySignal@i:
   644                           	opt stack 0
   645  00002A                     ___lwdiv@counter:
   646                           	opt stack 0
   647  00002A                     LCD_String@string:
   648                           	opt stack 0
   649  00002A                     ___awdiv@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x29
   653  00002A                     	ds	1
   654  00002B                     ?___lwmod:
   655                           	opt stack 0
   656  00002B                     grabRightIR@i:
   657                           	opt stack 0
   658  00002B                     grabLeftIR@i:
   659                           	opt stack 0
   660  00002B                     VerifySignal@checksum:
   661                           	opt stack 0
   662  00002B                     ___lwmod@dividend:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x2A
   666  00002B                     	ds	1
   667  00002C                     VerifySignal@hexByte:
   668                           	opt stack 0
   669  00002C                     ___awdiv@divisor:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x2B
   673  00002C                     	ds	1
   674  00002D                     ___lwmod@divisor:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2C
   678  00002D                     	ds	1
   679  00002E                     ___awdiv@counter:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     ___awdiv@sign:
   685                           	opt stack 0
   686  00002F                     ___lwmod@counter:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x2E
   690  00002F                     	ds	1
   691  000030                     ?_sprintf:
   692                           	opt stack 0
   693  000030                     sprintf@sp:
   694                           	opt stack 0
   695  000030                     ___awdiv@quotient:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x2F
   699  000030                     	ds	2
   700  000032                     setMotorPWM@m:
   701                           	opt stack 0
   702  000032                     sprintf@f:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x31
   706  000032                     	ds	2
   707  000034                     ??_setMotorPWM:
   708                           
   709                           ; 0 bytes @ 0x33
   710  000034                     	ds	5
   711  000039                     ??_ScanIR:
   712                           
   713                           ; 0 bytes @ 0x38
   714  000039                     	ds	1
   715  00003A                     tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           ; 0 bytes @ 0x39
   720 ;;
   721 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   722 ;;
   723 ;; *************** function _main *****************
   724 ;; Defined at:
   725 ;;		line 51 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  MoveTime      100   90[BANK1 ] int [50]
   730 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   731 ;;  buf            40    0[BANK1 ] unsigned char [40]
   732 ;;  Message        10  190[BANK1 ] unsigned char [10]
   733 ;;  mR              9  217[BANK1 ] struct DC_motor
   734 ;;  mL              9  208[BANK1 ] struct DC_motor
   735 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   736 ;;  Move            1  207[BANK1 ] char 
   737 ;;  i               1  206[BANK1 ] unsigned char 
   738 ;;  DirectionFou    1  205[BANK1 ] char 
   739 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   749 ;;      Params:         0       0       0       0
   750 ;;      Locals:         0       0     226       0
   751 ;;      Temps:          0       5       0       0
   752 ;;      Totals:         0       5     226       0
   753 ;;Total ram usage:      231 bytes
   754 ;; Hardware stack levels required when called:    8
   755 ;; This function calls:
   756 ;;		_LCD_String
   757 ;;		_ScanIR
   758 ;;		_ScanWithRange
   759 ;;		_SendLCD
   760 ;;		_SetLine
   761 ;;		_VerifySignal
   762 ;;		_delay_tenth_s
   763 ;;		_enableSensor
   764 ;;		_fullSpeed
   765 ;;		_fullSpeedBack
   766 ;;		_grabLeftIR
   767 ;;		_grabRightIR
   768 ;;		_initIR
   769 ;;		_initLCD
   770 ;;		_initMotorPWM
   771 ;;		_initRFID
   772 ;;		_initTimer
   773 ;;		_sprintf
   774 ;;		_stop
   775 ;;		_turnLeft
   776 ;;		_turnRight
   777 ;; This function is called by:
   778 ;;		Startup code after reset
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text0
   783  000350                     __ptext0:
   784                           	opt stack 0
   785  000350                     _main:
   786                           	opt stack 23
   787                           
   788                           ;main.c: 54: unsigned char Message[10];
   789                           ;main.c: 55: unsigned char i=0;
   790                           
   791                           ;incstack = 0
   792  000350  0E00               	movlw	0
   793  000352  0101               	movlb	1	; () banked
   794  000354  6FCE               	movwf	main@i& (0+255),b
   795                           
   796                           ;main.c: 56: signed char DirectionFound=0;
   797  000356  0E00               	movlw	0
   798  000358  0101               	movlb	1	; () banked
   799  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   800                           
   801                           ; BSR set to: 1
   802                           ;main.c: 57: int MoveTime[50] = { 0 };
   803  00035C  EE22  F000         	lfsr	2,main@F3893
   804  000360  EE11  F05A         	lfsr	1,main@MoveTime
   805  000364  0E63               	movlw	99
   806  000366                     u2791:
   807  000366  CFDB FFE3          	movff	plusw2,plusw1
   808  00036A  06E8               	decf	wreg,f,c
   809  00036C  E2FC               	bc	u2791
   810                           
   811                           ; BSR set to: 1
   812                           ;main.c: 60: char MoveType[50] = { 0 };
   813  00036E  EE20  F0BF         	lfsr	2,main@F3895
   814  000372  EE11  F028         	lfsr	1,main@MoveType
   815  000376  0E31               	movlw	49
   816  000378                     u2801:
   817  000378  CFDB FFE3          	movff	plusw2,plusw1
   818  00037C  06E8               	decf	wreg,f,c
   819  00037E  E2FC               	bc	u2801
   820                           
   821                           ;main.c: 63: signed char Move=0;
   822  000380  0E00               	movlw	0
   823  000382  0101               	movlb	1	; () banked
   824  000384  6FCF               	movwf	main@Move& (0+255),b
   825                           
   826                           ; BSR set to: 1
   827                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   828  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   829  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   830  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   831  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   832                           
   833                           ;main.c: 65: char buf[40];
   834                           ;main.c: 67: unsigned char ScanAngle=60;
   835  000396  0E3C               	movlw	60
   836  000398  0101               	movlb	1	; () banked
   837  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   838                           
   839                           ; BSR set to: 1
   840                           ;main.c: 76: INTCONbits.GIEH=1;
   841  00039C  8EF2               	bsf	intcon,7,c	;volatile
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 77: INTCONbits.GIEL=1;
   845  00039E  8CF2               	bsf	intcon,6,c	;volatile
   846                           
   847                           ; BSR set to: 1
   848                           ;main.c: 78: INTCONbits.PEIE=1;
   849  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   850                           
   851                           ; BSR set to: 1
   852                           ;main.c: 79: RCONbits.IPEN=1;
   853  0003A2  8ED0               	bsf	4048,7,c	;volatile
   854                           
   855                           ; BSR set to: 1
   856                           ;main.c: 82: IPR1bits.RCIP=0;
   857  0003A4  9A9F               	bcf	3999,5,c	;volatile
   858                           
   859                           ; BSR set to: 1
   860                           ;main.c: 83: PIE1bits.RCIE=1;
   861  0003A6  8A9D               	bsf	3997,5,c	;volatile
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 86: TRISCbits.RC3=1;
   865  0003A8  8694               	bsf	3988,3,c	;volatile
   866                           
   867                           ; BSR set to: 1
   868                           ;main.c: 87: INTCONbits.INT0IE=1;
   869  0003AA  88F2               	bsf	intcon,4,c	;volatile
   870                           
   871                           ; BSR set to: 1
   872                           ;main.c: 90: PIR1bits.RC1IF=0;
   873  0003AC  9A9E               	bcf	3998,5,c	;volatile
   874                           
   875                           ; BSR set to: 1
   876                           ;main.c: 91: INTCONbits.INT0IF=0;
   877  0003AE  92F2               	bcf	intcon,1,c	;volatile
   878                           
   879                           ;main.c: 94: struct DC_motor mL, mR;
   880                           ;main.c: 95: mL.power=0;
   881  0003B0  0E00               	movlw	0
   882  0003B2  0101               	movlb	1	; () banked
   883  0003B4  6FD0               	movwf	main@mL& (0+255),b
   884                           
   885                           ;main.c: 96: mL.direction=1;
   886  0003B6  0E01               	movlw	1
   887  0003B8  0101               	movlb	1	; () banked
   888  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   889                           
   890                           ; BSR set to: 1
   891                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   892  0003BC  0E79               	movlw	121
   893  0003BE  0101               	movlb	1	; () banked
   894  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   895  0003C2  0E0F               	movlw	15
   896  0003C4  0101               	movlb	1	; () banked
   897  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   898                           
   899                           ; BSR set to: 1
   900                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   901  0003C8  0E78               	movlw	120
   902  0003CA  0101               	movlb	1	; () banked
   903  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   904  0003CE  0E0F               	movlw	15
   905  0003D0  0101               	movlb	1	; () banked
   906  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   907                           
   908                           ;main.c: 99: mL.dir_pin=0;
   909  0003D4  0E00               	movlw	0
   910  0003D6  0101               	movlb	1	; () banked
   911  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   912                           
   913                           ;main.c: 100: mL.PWMperiod=199;
   914  0003DA  0E00               	movlw	0
   915  0003DC  0101               	movlb	1	; () banked
   916  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   917  0003E0  0EC7               	movlw	199
   918  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   919                           
   920                           ;main.c: 102: mR.power=0;
   921  0003E4  0E00               	movlw	0
   922  0003E6  0101               	movlb	1	; () banked
   923  0003E8  6FD9               	movwf	main@mR& (0+255),b
   924                           
   925                           ;main.c: 103: mR.direction=1;
   926  0003EA  0E01               	movlw	1
   927  0003EC  0101               	movlb	1	; () banked
   928  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   929                           
   930                           ; BSR set to: 1
   931                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   932  0003F0  0E77               	movlw	119
   933  0003F2  0101               	movlb	1	; () banked
   934  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   935  0003F6  0E0F               	movlw	15
   936  0003F8  0101               	movlb	1	; () banked
   937  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   941  0003FC  0E76               	movlw	118
   942  0003FE  0101               	movlb	1	; () banked
   943  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   944  000402  0E0F               	movlw	15
   945  000404  0101               	movlb	1	; () banked
   946  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   947                           
   948                           ;main.c: 106: mR.dir_pin=2;
   949  000408  0E02               	movlw	2
   950  00040A  0101               	movlb	1	; () banked
   951  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   952                           
   953                           ;main.c: 107: mR.PWMperiod=199;
   954  00040E  0E00               	movlw	0
   955  000410  0101               	movlb	1	; () banked
   956  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   957  000414  0EC7               	movlw	199
   958  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   959                           
   960                           ;main.c: 109: OSCCON = 0x72;
   961  000418  0E72               	movlw	114
   962  00041A  6ED3               	movwf	4051,c	;volatile
   963  00041C                     l395:
   964  00041C  B4D3               	btfsc	4051,2,c	;volatile
   965  00041E  D36F               	goto	l3582
   966  000420  D7FD               	goto	l395
   967  000422                     l3380:
   968                           
   969                           ;main.c: 121: stop(&mL, &mR);
   970  000422  0ED0               	movlw	low main@mL
   971  000424  0100               	movlb	0	; () banked
   972  000426  6F62               	movwf	stop@mL& (0+255),b
   973  000428  0E01               	movlw	high main@mL
   974  00042A  0100               	movlb	0	; () banked
   975  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   976  00042E  0ED9               	movlw	low main@mR
   977  000430  0100               	movlb	0	; () banked
   978  000432  6F64               	movwf	stop@mR& (0+255),b
   979  000434  0E01               	movlw	high main@mR
   980  000436  0100               	movlb	0	; () banked
   981  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   982  00043A  EC74  F00B         	call	_stop	;wreg free
   983                           
   984                           ;main.c: 124: RFID_Read=0;
   985  00043E  0E00               	movlw	0
   986  000440  0101               	movlb	1	; () banked
   987  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   988                           
   989                           ; BSR set to: 1
   990                           ;main.c: 125: Move=0;
   991  000444  0E00               	movlw	0
   992  000446  0101               	movlb	1	; () banked
   993  000448  6FCF               	movwf	main@Move& (0+255),b
   994                           
   995                           ; BSR set to: 1
   996                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   997  00044A  ECBE  F00C         	call	_grabLeftIR	;wreg free
   998  00044E  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   999  000452  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1000                           
  1001                           ;main.c: 129: SensorResult[1]=grabRightIR();
  1002  000456  EC85  F00C         	call	_grabRightIR	;wreg free
  1003  00045A  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1004  00045E  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1005                           
  1006                           ;main.c: 133: CAP1BUFH=0;
  1007  000462  0E00               	movlw	0
  1008  000464  6E69               	movwf	3945,c	;volatile
  1009                           
  1010                           ;main.c: 134: CAP1BUFL=0;
  1011  000466  0E00               	movlw	0
  1012  000468  6E68               	movwf	3944,c	;volatile
  1013                           
  1014                           ;main.c: 135: CAP2BUFH=0;
  1015  00046A  0E00               	movlw	0
  1016  00046C  6E67               	movwf	3943,c	;volatile
  1017                           
  1018                           ;main.c: 136: CAP2BUFL=0;
  1019  00046E  0E00               	movlw	0
  1020  000470  6E66               	movwf	3942,c	;volatile
  1021                           
  1022                           ;main.c: 139: SendLCD(0b00000001,0);
  1023  000472  0E00               	movlw	0
  1024  000474  6E28               	movwf	SendLCD@type,c
  1025  000476  0E01               	movlw	1
  1026  000478  EC85  F000         	call	_SendLCD
  1027                           
  1028                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1029  00047C  0E21               	movlw	33
  1030  00047E                     u3067:
  1031  00047E  2EE8               	decfsz	wreg,f,c
  1032  000480  D7FE               	goto	u3067
  1033  000482  F000               	nop	
  1034                           
  1035                           ;main.c: 141: SendLCD(0b00000010,0);
  1036  000484  0E00               	movlw	0
  1037  000486  6E28               	movwf	SendLCD@type,c
  1038  000488  0E02               	movlw	2
  1039  00048A  EC85  F000         	call	_SendLCD
  1040                           
  1041                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1042  00048E  0E06               	movlw	6
  1043  000490  0100               	movlb	0	; () banked
  1044  000492  6FBA               	movwf	??_main& (0+255),b
  1045  000494  0E30               	movlw	48
  1046  000496                     u3077:
  1047  000496  2EE8               	decfsz	wreg,f,c
  1048  000498  D7FE               	goto	u3077
  1049  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1050  00049C  D7FC               	goto	u3077
  1051  00049E  D000               	nop2	
  1052                           
  1053                           ;main.c: 143: SetLine(1);
  1054  0004A0  0E01               	movlw	1
  1055  0004A2  EC6D  F000         	call	_SetLine
  1056                           
  1057                           ;main.c: 144: LCD_String("      Inert Mode");
  1058  0004A6  0E1C               	movlw	low STR_5
  1059  0004A8  6E2A               	movwf	LCD_String@string,c
  1060  0004AA  0E03               	movlw	high STR_5
  1061  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1062  0004AE  ECF7  F00C         	call	_LCD_String	;wreg free
  1063                           
  1064                           ;main.c: 145: SetLine(2);
  1065  0004B2  0E02               	movlw	2
  1066  0004B4  EC6D  F000         	call	_SetLine
  1067                           
  1068                           ;main.c: 146: if (RFID_Read) {
  1069  0004B8  0101               	movlb	1	; () banked
  1070  0004BA  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1071  0004BC  B4D8               	btfsc	status,2,c
  1072  0004BE  D007               	goto	l3416
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;main.c: 147: LCD_String(Message);
  1076  0004C0  0EBE               	movlw	low main@Message
  1077  0004C2  6E2A               	movwf	LCD_String@string,c
  1078  0004C4  0E01               	movlw	high main@Message
  1079  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1080  0004C8  ECF7  F00C         	call	_LCD_String	;wreg free
  1081                           
  1082                           ;main.c: 148: } else {
  1083  0004CC  D318               	goto	l3582
  1084  0004CE                     l3416:
  1085                           
  1086                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1087  0004CE  0E00               	movlw	low main@buf
  1088  0004D0  6E30               	movwf	sprintf@sp,c
  1089  0004D2  0E01               	movlw	high main@buf
  1090  0004D4  6E31               	movwf	sprintf@sp+1,c
  1091  0004D6  0E0B               	movlw	low STR_6
  1092  0004D8  6E32               	movwf	sprintf@f,c
  1093  0004DA  0E03               	movlw	high STR_6
  1094  0004DC  6E33               	movwf	sprintf@f+1,c
  1095  0004DE  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1096  0004E2  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1097  0004E6  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1098  0004EA  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1099  0004EE  EC16  F008         	call	_sprintf	;wreg free
  1100                           
  1101                           ;main.c: 150: LCD_String(buf);
  1102  0004F2  0E00               	movlw	low main@buf
  1103  0004F4  6E2A               	movwf	LCD_String@string,c
  1104  0004F6  0E01               	movlw	high main@buf
  1105  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1106  0004FA  ECF7  F00C         	call	_LCD_String	;wreg free
  1107                           
  1108                           ;main.c: 151: }
  1109                           ;main.c: 153: break;
  1110  0004FE  D2FF               	goto	l3582
  1111  000500                     l3420:
  1112                           
  1113                           ;main.c: 157: initMotorPWM();
  1114  000500  ECF9  F00D         	call	_initMotorPWM	;wreg free
  1115                           
  1116                           ;main.c: 158: initTimer();
  1117  000504  ECDE  F000         	call	_initTimer	;wreg free
  1118                           
  1119                           ;main.c: 159: initRFID();
  1120  000508  ECD0  F000         	call	_initRFID	;wreg free
  1121                           
  1122                           ;main.c: 160: initLCD();
  1123  00050C  EC16  F00B         	call	_initLCD	;wreg free
  1124                           
  1125                           ;main.c: 161: initIR();
  1126  000510  ECB0  F000         	call	_initIR	;wreg free
  1127                           
  1128                           ;main.c: 163: enableSensor(0, 1);
  1129  000514  0E01               	movlw	1
  1130  000516  6E24               	movwf	enableSensor@status,c
  1131  000518  0E00               	movlw	0
  1132  00051A  EC69  F00E         	call	_enableSensor
  1133                           
  1134                           ;main.c: 164: enableSensor(1, 1);
  1135  00051E  0E01               	movlw	1
  1136  000520  6E24               	movwf	enableSensor@status,c
  1137  000522  0E01               	movlw	1
  1138  000524  EC69  F00E         	call	_enableSensor
  1139                           
  1140                           ;main.c: 167: fullSpeed(&mL, &mR, 100);
  1141  000528  0ED0               	movlw	low main@mL
  1142  00052A  0100               	movlb	0	; () banked
  1143  00052C  6F62               	movwf	fullSpeed@mL& (0+255),b
  1144  00052E  0E01               	movlw	high main@mL
  1145  000530  0100               	movlb	0	; () banked
  1146  000532  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1147  000534  0ED9               	movlw	low main@mR
  1148  000536  0100               	movlb	0	; () banked
  1149  000538  6F64               	movwf	fullSpeed@mR& (0+255),b
  1150  00053A  0E01               	movlw	high main@mR
  1151  00053C  0100               	movlb	0	; () banked
  1152  00053E  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1153  000540  0E64               	movlw	100
  1154  000542  0100               	movlb	0	; () banked
  1155  000544  6F66               	movwf	fullSpeed@power& (0+255),b
  1156  000546  EC45  F00C         	call	_fullSpeed	;wreg free
  1157                           
  1158                           ;main.c: 168: delay_tenth_s(1);
  1159  00054A  0E01               	movlw	1
  1160  00054C  EC16  F00E         	call	_delay_tenth_s
  1161  000550  D2D5               	goto	l3578
  1162  000552                     l3440:
  1163                           
  1164                           ;main.c: 176: SetLine(1);
  1165  000552  0E01               	movlw	1
  1166  000554  EC6D  F000         	call	_SetLine
  1167                           
  1168                           ;main.c: 177: LCD_String("Searching");
  1169  000558  0E44               	movlw	low STR_7
  1170  00055A  6E2A               	movwf	LCD_String@string,c
  1171  00055C  0E03               	movlw	high STR_7
  1172  00055E  6E2B               	movwf	LCD_String@string+1,c
  1173  000560  ECF7  F00C         	call	_LCD_String	;wreg free
  1174                           
  1175                           ;main.c: 179: if (DirectionFound==-1) {
  1176  000564  0101               	movlb	1	; () banked
  1177  000566  29CD               	incf	main@DirectionFound& (0+255),w,b
  1178  000568  A4D8               	btfss	status,2,c
  1179  00056A  D03E               	goto	l3458
  1180                           
  1181                           ; BSR set to: 1
  1182                           ;main.c: 184: MoveType[Move]=0;
  1183  00056C  0101               	movlb	1	; () banked
  1184  00056E  51CF               	movf	main@Move& (0+255),w,b
  1185  000570  0D01               	mullw	1
  1186  000572  0E28               	movlw	low main@MoveType
  1187  000574  24F3               	addwf	prodl,w,c
  1188  000576  6ED9               	movwf	fsr2l,c
  1189  000578  0E01               	movlw	high main@MoveType
  1190  00057A  20F4               	addwfc	prodh,w,c
  1191  00057C  6EDA               	movwf	fsr2h,c
  1192  00057E  0E00               	movlw	0
  1193  000580  6EDF               	movwf	indf2,c
  1194                           
  1195                           ;main.c: 185: MoveTime[Move]=6;
  1196  000582  0101               	movlb	1	; () banked
  1197  000584  51CF               	movf	main@Move& (0+255),w,b
  1198  000586  0D02               	mullw	2
  1199  000588  0E5A               	movlw	low main@MoveTime
  1200  00058A  24F3               	addwf	prodl,w,c
  1201  00058C  6ED9               	movwf	fsr2l,c
  1202  00058E  0E01               	movlw	high main@MoveTime
  1203  000590  20F4               	addwfc	prodh,w,c
  1204  000592  6EDA               	movwf	fsr2h,c
  1205  000594  0E06               	movlw	6
  1206  000596  6EDE               	movwf	postinc2,c
  1207  000598  0E00               	movlw	0
  1208  00059A  6EDD               	movwf	postdec2,c
  1209                           
  1210                           ; BSR set to: 1
  1211                           ;main.c: 186: Move++;
  1212  00059C  0101               	movlb	1	; () banked
  1213  00059E  2BCF               	incf	main@Move& (0+255),f,b
  1214                           
  1215                           ; BSR set to: 1
  1216                           ;main.c: 187: fullSpeed(&mL, &mR, 100);
  1217  0005A0  0ED0               	movlw	low main@mL
  1218  0005A2  0100               	movlb	0	; () banked
  1219  0005A4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1220  0005A6  0E01               	movlw	high main@mL
  1221  0005A8  0100               	movlb	0	; () banked
  1222  0005AA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1223  0005AC  0ED9               	movlw	low main@mR
  1224  0005AE  0100               	movlb	0	; () banked
  1225  0005B0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1226  0005B2  0E01               	movlw	high main@mR
  1227  0005B4  0100               	movlb	0	; () banked
  1228  0005B6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1229  0005B8  0E64               	movlw	100
  1230  0005BA  0100               	movlb	0	; () banked
  1231  0005BC  6F66               	movwf	fullSpeed@power& (0+255),b
  1232  0005BE  EC45  F00C         	call	_fullSpeed	;wreg free
  1233                           
  1234                           ;main.c: 188: delay_tenth_s(6);
  1235  0005C2  0E06               	movlw	6
  1236  0005C4  EC16  F00E         	call	_delay_tenth_s
  1237                           
  1238                           ;main.c: 189: stop(&mL,&mR);
  1239  0005C8  0ED0               	movlw	low main@mL
  1240  0005CA  0100               	movlb	0	; () banked
  1241  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1242  0005CE  0E01               	movlw	high main@mL
  1243  0005D0  0100               	movlb	0	; () banked
  1244  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1245  0005D4  0ED9               	movlw	low main@mR
  1246  0005D6  0100               	movlb	0	; () banked
  1247  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1248  0005DA  0E01               	movlw	high main@mR
  1249  0005DC  0100               	movlb	0	; () banked
  1250  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1251  0005E0  EC74  F00B         	call	_stop	;wreg free
  1252                           
  1253                           ;main.c: 190: DirectionFound=0;
  1254  0005E4  0E00               	movlw	0
  1255  0005E6  D042               	goto	L2
  1256  0005E8                     l3458:
  1257                           
  1258                           ; BSR set to: 1
  1259  0005E8  0101               	movlb	1	; () banked
  1260  0005EA  51CD               	movf	main@DirectionFound& (0+255),w,b
  1261  0005EC  0101               	movlb	1	; () banked
  1262  0005EE  A4D8               	btfss	status,2,c
  1263  0005F0  D02B               	goto	l3462
  1264                           
  1265                           ; BSR set to: 1
  1266                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1267                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1268  0005F2  0ED0               	movlw	low main@mL
  1269  0005F4  0100               	movlb	0	; () banked
  1270  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1271  0005F8  0E01               	movlw	high main@mL
  1272  0005FA  0100               	movlb	0	; () banked
  1273  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1274  0005FE  0ED9               	movlw	low main@mR
  1275  000600  0100               	movlb	0	; () banked
  1276  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1277  000604  0E01               	movlw	high main@mR
  1278  000606  0100               	movlb	0	; () banked
  1279  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1280  00060A  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1281  00060E  0100               	movlb	0	; () banked
  1282  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1283  000612  0E5A               	movlw	low main@MoveTime
  1284  000614  0100               	movlb	0	; () banked
  1285  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1286  000618  0E01               	movlw	high main@MoveTime
  1287  00061A  0100               	movlb	0	; () banked
  1288  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1289  00061E  0ECF               	movlw	low main@Move
  1290  000620  0100               	movlb	0	; () banked
  1291  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1292  000624  0E01               	movlw	high main@Move
  1293  000626  0100               	movlb	0	; () banked
  1294  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1295  00062A  0E28               	movlw	low main@MoveType
  1296  00062C  0100               	movlb	0	; () banked
  1297  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1298  000630  0E01               	movlw	high main@MoveType
  1299  000632  0100               	movlb	0	; () banked
  1300  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1301  000636  0EF6               	movlw	low _RFID_Read
  1302  000638  0100               	movlb	0	; () banked
  1303  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1304  00063C  0E01               	movlw	high _RFID_Read
  1305  00063E  0100               	movlb	0	; () banked
  1306  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1307  000642  EC90  F005         	call	_ScanWithRange	;wreg free
  1308  000646  D012               	goto	L2
  1309  000648                     l3462:
  1310                           
  1311                           ; BSR set to: 1
  1312  000648  0101               	movlb	1	; () banked
  1313  00064A  05CD               	decf	main@DirectionFound& (0+255),w,b
  1314  00064C  A4D8               	btfss	status,2,c
  1315  00064E  D011               	goto	l3466
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1319  000650  0ED0               	movlw	low main@mL
  1320  000652  0100               	movlb	0	; () banked
  1321  000654  6F6D               	movwf	ScanIR@mL& (0+255),b
  1322  000656  0E01               	movlw	high main@mL
  1323  000658  0100               	movlb	0	; () banked
  1324  00065A  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1325  00065C  0ED9               	movlw	low main@mR
  1326  00065E  0100               	movlb	0	; () banked
  1327  000660  6F6F               	movwf	ScanIR@mR& (0+255),b
  1328  000662  0E01               	movlw	high main@mR
  1329  000664  0100               	movlb	0	; () banked
  1330  000666  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1331  000668  EC36  F00A         	call	_ScanIR	;wreg free
  1332  00066C                     L2:
  1333  00066C  0101               	movlb	1	; () banked
  1334  00066E  6FCD               	movwf	main@DirectionFound& (0+255),b
  1335                           
  1336                           ;main.c: 198: } else if (DirectionFound==2) {
  1337  000670  D246               	goto	l3582
  1338  000672                     l3466:
  1339                           
  1340                           ; BSR set to: 1
  1341  000672  0E02               	movlw	2
  1342  000674  0101               	movlb	1	; () banked
  1343  000676  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1344  000678  A4D8               	btfss	status,2,c
  1345  00067A  D241               	goto	l3582
  1346                           
  1347                           ; BSR set to: 1
  1348                           ;main.c: 200: mode=2;
  1349  00067C  0E02               	movlw	2
  1350  00067E  6E3B               	movwf	_mode,c	;volatile
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 201: MoveType[Move]=1;
  1354  000680  0101               	movlb	1	; () banked
  1355  000682  51CF               	movf	main@Move& (0+255),w,b
  1356  000684  0D01               	mullw	1
  1357  000686  0E28               	movlw	low main@MoveType
  1358  000688  24F3               	addwf	prodl,w,c
  1359  00068A  6ED9               	movwf	fsr2l,c
  1360  00068C  0E01               	movlw	high main@MoveType
  1361  00068E  20F4               	addwfc	prodh,w,c
  1362  000690  6EDA               	movwf	fsr2h,c
  1363  000692  0E01               	movlw	1
  1364  000694  6EDF               	movwf	indf2,c
  1365                           
  1366                           ; BSR set to: 1
  1367                           ;main.c: 202: }
  1368                           ;main.c: 204: break;
  1369                           
  1370                           ; BSR set to: 1
  1371                           
  1372                           ; BSR set to: 1
  1373                           
  1374                           ; BSR set to: 1
  1375  000696  D233               	goto	l3582
  1376  000698                     l3472:
  1377                           
  1378                           ;main.c: 211: if (RFID_Read) {
  1379  000698  0101               	movlb	1	; () banked
  1380  00069A  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1381  00069C  B4D8               	btfsc	status,2,c
  1382  00069E  D0A2               	goto	l3514
  1383                           
  1384                           ; BSR set to: 1
  1385                           ;main.c: 212: stop(&mL, &mR);
  1386  0006A0  0ED0               	movlw	low main@mL
  1387  0006A2  0100               	movlb	0	; () banked
  1388  0006A4  6F62               	movwf	stop@mL& (0+255),b
  1389  0006A6  0E01               	movlw	high main@mL
  1390  0006A8  0100               	movlb	0	; () banked
  1391  0006AA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1392  0006AC  0ED9               	movlw	low main@mR
  1393  0006AE  0100               	movlb	0	; () banked
  1394  0006B0  6F64               	movwf	stop@mR& (0+255),b
  1395  0006B2  0E01               	movlw	high main@mR
  1396  0006B4  0100               	movlb	0	; () banked
  1397  0006B6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1398  0006B8  EC74  F00B         	call	_stop	;wreg free
  1399                           
  1400                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1401  0006BC  0E03               	movlw	3
  1402  0006BE  0101               	movlb	1	; () banked
  1403  0006C0  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1404  0006C2  A4D8               	btfss	status,2,c
  1405  0006C4  D002               	goto	u2880
  1406  0006C6  0E01               	movlw	1
  1407  0006C8  D001               	goto	u2882
  1408  0006CA                     u2880:
  1409  0006CA  0E00               	movlw	0
  1410  0006CC                     u2882:
  1411  0006CC  0100               	movlb	0	; () banked
  1412  0006CE  6FBA               	movwf	??_main& (0+255),b
  1413  0006D0  0E02               	movlw	2
  1414  0006D2  0101               	movlb	1	; () banked
  1415  0006D4  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1416  0006D6  A4D8               	btfss	status,2,c
  1417  0006D8  D002               	goto	u2890
  1418  0006DA  0E01               	movlw	1
  1419  0006DC  D001               	goto	u2892
  1420  0006DE                     u2890:
  1421  0006DE  0E00               	movlw	0
  1422  0006E0                     u2892:
  1423  0006E0  0100               	movlb	0	; () banked
  1424  0006E2  15BA               	andwf	??_main& (0+255),w,b
  1425  0006E4  A0E8               	btfss	wreg,0,c
  1426  0006E6  D20B               	goto	l3582
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1430  0006E8  0EE6               	movlw	low _ReceivedString
  1431  0006EA  6E24               	movwf	VerifySignal@Signal,c
  1432  0006EC  0E01               	movlw	high _ReceivedString
  1433  0006EE  6E25               	movwf	VerifySignal@Signal+1,c
  1434  0006F0  EC26  F00D         	call	_VerifySignal	;wreg free
  1435  0006F4  0900               	iorlw	0
  1436  0006F6  B4D8               	btfsc	status,2,c
  1437  0006F8  D041               	goto	l3506
  1438                           
  1439                           ;main.c: 216: for (i=0; i<10; i++){
  1440  0006FA  0E00               	movlw	0
  1441  0006FC  0101               	movlb	1	; () banked
  1442  0006FE  6FCE               	movwf	main@i& (0+255),b
  1443  000700                     l3482:
  1444                           
  1445                           ; BSR set to: 1
  1446  000700  0E09               	movlw	9
  1447  000702  0101               	movlb	1	; () banked
  1448  000704  65CE               	cpfsgt	main@i& (0+255),b
  1449  000706  D001               	goto	l3486
  1450  000708  D020               	goto	l3492
  1451  00070A                     l3486:
  1452                           
  1453                           ; BSR set to: 1
  1454                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1455  00070A  0101               	movlb	1	; () banked
  1456  00070C  51CE               	movf	main@i& (0+255),w,b
  1457  00070E  0100               	movlb	0	; () banked
  1458  000710  6FBA               	movwf	??_main& (0+255),b
  1459  000712  6BBB               	clrf	(??_main+1)& (0+255),b
  1460  000714  0E01               	movlw	1
  1461  000716  0100               	movlb	0	; () banked
  1462  000718  27BA               	addwf	??_main& (0+255),f,b
  1463  00071A  0E00               	movlw	0
  1464  00071C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1465  00071E  0EE6               	movlw	low _ReceivedString
  1466  000720  0100               	movlb	0	; () banked
  1467  000722  25BA               	addwf	??_main& (0+255),w,b
  1468  000724  6ED9               	movwf	fsr2l,c
  1469  000726  0E01               	movlw	high _ReceivedString
  1470  000728  0100               	movlb	0	; () banked
  1471  00072A  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1472  00072C  6EDA               	movwf	fsr2h,c
  1473  00072E  0101               	movlb	1	; () banked
  1474  000730  51CE               	movf	main@i& (0+255),w,b
  1475  000732  0D01               	mullw	1
  1476  000734  0EBE               	movlw	low main@Message
  1477  000736  24F3               	addwf	prodl,w,c
  1478  000738  6EE1               	movwf	fsr1l,c
  1479  00073A  0E01               	movlw	high main@Message
  1480  00073C  20F4               	addwfc	prodh,w,c
  1481  00073E  6EE2               	movwf	fsr1h,c
  1482  000740  CFDF FFE7          	movff	indf2,indf1
  1483                           
  1484                           ; BSR set to: 1
  1485  000744  0101               	movlb	1	; () banked
  1486  000746  2BCE               	incf	main@i& (0+255),f,b
  1487  000748  D7DB               	goto	l3482
  1488  00074A                     l3492:
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 218: }
  1492                           ;main.c: 221: for (i=0; i<16; i++) {
  1493  00074A  0E00               	movlw	0
  1494  00074C  0101               	movlb	1	; () banked
  1495  00074E  6FCE               	movwf	main@i& (0+255),b
  1496  000750                     l3494:
  1497                           
  1498                           ; BSR set to: 1
  1499  000750  0E0F               	movlw	15
  1500  000752  0101               	movlb	1	; () banked
  1501  000754  65CE               	cpfsgt	main@i& (0+255),b
  1502  000756  D001               	goto	l3498
  1503  000758  D00E               	goto	l3504
  1504  00075A                     l3498:
  1505                           
  1506                           ; BSR set to: 1
  1507                           ;main.c: 222: ReceivedString[i]=0;
  1508  00075A  0101               	movlb	1	; () banked
  1509  00075C  51CE               	movf	main@i& (0+255),w,b
  1510  00075E  0D01               	mullw	1
  1511  000760  0EE6               	movlw	low _ReceivedString
  1512  000762  24F3               	addwf	prodl,w,c
  1513  000764  6ED9               	movwf	fsr2l,c
  1514  000766  0E01               	movlw	high _ReceivedString
  1515  000768  20F4               	addwfc	prodh,w,c
  1516  00076A  6EDA               	movwf	fsr2h,c
  1517  00076C  0E00               	movlw	0
  1518  00076E  6EDF               	movwf	indf2,c
  1519                           
  1520                           ; BSR set to: 1
  1521  000770  0101               	movlb	1	; () banked
  1522  000772  2BCE               	incf	main@i& (0+255),f,b
  1523  000774  D7ED               	goto	l3494
  1524  000776                     l3504:
  1525                           
  1526                           ; BSR set to: 1
  1527                           ;main.c: 223: }
  1528                           ;main.c: 224: mode=3;
  1529  000776  0E03               	movlw	3
  1530  000778  6E3B               	movwf	_mode,c	;volatile
  1531                           
  1532                           ;main.c: 226: } else {
  1533  00077A  D1C1               	goto	l3582
  1534  00077C                     l3506:
  1535                           
  1536                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1537  00077C  0ED0               	movlw	low main@mL
  1538  00077E  0100               	movlb	0	; () banked
  1539  000780  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1540  000782  0E01               	movlw	high main@mL
  1541  000784  0100               	movlb	0	; () banked
  1542  000786  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1543  000788  0ED9               	movlw	low main@mR
  1544  00078A  0100               	movlb	0	; () banked
  1545  00078C  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1546  00078E  0E01               	movlw	high main@mR
  1547  000790  0100               	movlb	0	; () banked
  1548  000792  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1549  000794  0E64               	movlw	100
  1550  000796  0100               	movlb	0	; () banked
  1551  000798  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1552  00079A  EC9C  F00D         	call	_fullSpeedBack	;wreg free
  1553                           
  1554                           ;main.c: 228: delay_tenth_s(5);
  1555  00079E  0E05               	movlw	5
  1556  0007A0  EC16  F00E         	call	_delay_tenth_s
  1557                           
  1558                           ;main.c: 229: stop(&mL,&mR);
  1559  0007A4  0ED0               	movlw	low main@mL
  1560  0007A6  0100               	movlb	0	; () banked
  1561  0007A8  6F62               	movwf	stop@mL& (0+255),b
  1562  0007AA  0E01               	movlw	high main@mL
  1563  0007AC  0100               	movlb	0	; () banked
  1564  0007AE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1565  0007B0  0ED9               	movlw	low main@mR
  1566  0007B2  0100               	movlb	0	; () banked
  1567  0007B4  6F64               	movwf	stop@mR& (0+255),b
  1568  0007B6  0E01               	movlw	high main@mR
  1569  0007B8  0100               	movlb	0	; () banked
  1570  0007BA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1571  0007BC  EC74  F00B         	call	_stop	;wreg free
  1572                           
  1573                           ;main.c: 230: fullSpeed(&mL,&mR, 100);
  1574  0007C0  0ED0               	movlw	low main@mL
  1575  0007C2  0100               	movlb	0	; () banked
  1576  0007C4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1577  0007C6  0E01               	movlw	high main@mL
  1578  0007C8  0100               	movlb	0	; () banked
  1579  0007CA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1580  0007CC  0ED9               	movlw	low main@mR
  1581  0007CE  0100               	movlb	0	; () banked
  1582  0007D0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1583  0007D2  0E01               	movlw	high main@mR
  1584  0007D4  0100               	movlb	0	; () banked
  1585  0007D6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1586  0007D8  0E64               	movlw	100
  1587  0007DA  0100               	movlb	0	; () banked
  1588  0007DC  6F66               	movwf	fullSpeed@power& (0+255),b
  1589  0007DE  EC45  F00C         	call	_fullSpeed	;wreg free
  1590                           
  1591                           ;main.c: 231: }
  1592                           ;main.c: 232: }
  1593                           ;main.c: 233: } else {
  1594  0007E2  D18D               	goto	l3582
  1595  0007E4                     l3514:
  1596                           
  1597                           ;main.c: 234: DirectionFound=1;
  1598  0007E4  0E01               	movlw	1
  1599  0007E6  0101               	movlb	1	; () banked
  1600  0007E8  6FCD               	movwf	main@DirectionFound& (0+255),b
  1601                           
  1602                           ;main.c: 235: mode=1;
  1603  0007EA  0E01               	movlw	1
  1604  0007EC  6E3B               	movwf	_mode,c	;volatile
  1605                           
  1606                           ; BSR set to: 1
  1607                           ;main.c: 237: fullSpeed(&mL,&mR, 100);
  1608  0007EE  0ED0               	movlw	low main@mL
  1609  0007F0  0100               	movlb	0	; () banked
  1610  0007F2  6F62               	movwf	fullSpeed@mL& (0+255),b
  1611  0007F4  0E01               	movlw	high main@mL
  1612  0007F6  0100               	movlb	0	; () banked
  1613  0007F8  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1614  0007FA  0ED9               	movlw	low main@mR
  1615  0007FC  0100               	movlb	0	; () banked
  1616  0007FE  6F64               	movwf	fullSpeed@mR& (0+255),b
  1617  000800  0E01               	movlw	high main@mR
  1618  000802  0100               	movlb	0	; () banked
  1619  000804  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1620  000806  0E64               	movlw	100
  1621  000808  0100               	movlb	0	; () banked
  1622  00080A  6F66               	movwf	fullSpeed@power& (0+255),b
  1623  00080C  EC45  F00C         	call	_fullSpeed	;wreg free
  1624                           
  1625                           ;main.c: 238: delay_tenth_s(1);
  1626  000810  0E01               	movlw	1
  1627  000812  EC16  F00E         	call	_delay_tenth_s
  1628                           
  1629                           ;main.c: 239: MoveType[Move] = 0;
  1630  000816  0101               	movlb	1	; () banked
  1631  000818  51CF               	movf	main@Move& (0+255),w,b
  1632  00081A  0D01               	mullw	1
  1633  00081C  0E28               	movlw	low main@MoveType
  1634  00081E  24F3               	addwf	prodl,w,c
  1635  000820  6ED9               	movwf	fsr2l,c
  1636  000822  0E01               	movlw	high main@MoveType
  1637  000824  20F4               	addwfc	prodh,w,c
  1638  000826  6EDA               	movwf	fsr2h,c
  1639  000828  0E00               	movlw	0
  1640  00082A  6EDF               	movwf	indf2,c
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;main.c: 240: MoveTime[Move] = 5;
  1644  00082C  0101               	movlb	1	; () banked
  1645  00082E  51CF               	movf	main@Move& (0+255),w,b
  1646  000830  0D02               	mullw	2
  1647  000832  0E5A               	movlw	low main@MoveTime
  1648  000834  24F3               	addwf	prodl,w,c
  1649  000836  6ED9               	movwf	fsr2l,c
  1650  000838  0E01               	movlw	high main@MoveTime
  1651  00083A  20F4               	addwfc	prodh,w,c
  1652  00083C  6EDA               	movwf	fsr2h,c
  1653  00083E  0E05               	movlw	5
  1654  000840  6EDE               	movwf	postinc2,c
  1655  000842  0E00               	movlw	0
  1656  000844  6EDD               	movwf	postdec2,c
  1657                           
  1658                           ; BSR set to: 1
  1659                           ;main.c: 241: Move++;
  1660  000846  0101               	movlb	1	; () banked
  1661  000848  2BCF               	incf	main@Move& (0+255),f,b
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;main.c: 242: }
  1665                           ;main.c: 244: break;
  1666  00084A  D159               	goto	l3582
  1667  00084C                     l3526:
  1668                           
  1669                           ;main.c: 249: SetLine(1);
  1670  00084C  0E01               	movlw	1
  1671  00084E  EC6D  F000         	call	_SetLine
  1672                           
  1673                           ;main.c: 250: LCD_String(Message);
  1674  000852  0EBE               	movlw	low main@Message
  1675  000854  6E2A               	movwf	LCD_String@string,c
  1676  000856  0E01               	movlw	high main@Message
  1677  000858  6E2B               	movwf	LCD_String@string+1,c
  1678  00085A  ECF7  F00C         	call	_LCD_String	;wreg free
  1679                           
  1680                           ;main.c: 251: SetLine(2);
  1681  00085E  0E02               	movlw	2
  1682  000860  EC6D  F000         	call	_SetLine
  1683                           
  1684                           ;main.c: 252: LCD_String("Going Home");
  1685  000864  0E39               	movlw	low STR_8
  1686  000866  6E2A               	movwf	LCD_String@string,c
  1687  000868  0E03               	movlw	high STR_8
  1688  00086A  6E2B               	movwf	LCD_String@string+1,c
  1689  00086C  ECF7  F00C         	call	_LCD_String	;wreg free
  1690  000870                     l3532:
  1691  000870  0101               	movlb	1	; () banked
  1692  000872  BFCF               	btfsc	main@Move& (0+255),7,b
  1693  000874  D135               	goto	l3576
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 255: stop(&mL,&mR);
  1697                           
  1698                           ; BSR set to: 1
  1699                           
  1700                           ; BSR set to: 1
  1701  000876  0ED0               	movlw	low main@mL
  1702  000878  0100               	movlb	0	; () banked
  1703  00087A  6F62               	movwf	stop@mL& (0+255),b
  1704  00087C  0E01               	movlw	high main@mL
  1705  00087E  0100               	movlb	0	; () banked
  1706  000880  6F63               	movwf	(stop@mL+1)& (0+255),b
  1707  000882  0ED9               	movlw	low main@mR
  1708  000884  0100               	movlb	0	; () banked
  1709  000886  6F64               	movwf	stop@mR& (0+255),b
  1710  000888  0E01               	movlw	high main@mR
  1711  00088A  0100               	movlb	0	; () banked
  1712  00088C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1713  00088E  EC74  F00B         	call	_stop	;wreg free
  1714                           
  1715                           ;main.c: 256: if (MoveType[Move]==0) {
  1716  000892  0101               	movlb	1	; () banked
  1717  000894  51CF               	movf	main@Move& (0+255),w,b
  1718  000896  0D01               	mullw	1
  1719  000898  0E28               	movlw	low main@MoveType
  1720  00089A  24F3               	addwf	prodl,w,c
  1721  00089C  6ED9               	movwf	fsr2l,c
  1722  00089E  0E01               	movlw	high main@MoveType
  1723  0008A0  20F4               	addwfc	prodh,w,c
  1724  0008A2  6EDA               	movwf	fsr2h,c
  1725  0008A4  50DF               	movf	indf2,w,c
  1726  0008A6  A4D8               	btfss	status,2,c
  1727  0008A8  D01E               	goto	l3542
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1731  0008AA  0ED0               	movlw	low main@mL
  1732  0008AC  0100               	movlb	0	; () banked
  1733  0008AE  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1734  0008B0  0E01               	movlw	high main@mL
  1735  0008B2  0100               	movlb	0	; () banked
  1736  0008B4  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1737  0008B6  0ED9               	movlw	low main@mR
  1738  0008B8  0100               	movlb	0	; () banked
  1739  0008BA  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1740  0008BC  0E01               	movlw	high main@mR
  1741  0008BE  0100               	movlb	0	; () banked
  1742  0008C0  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1743  0008C2  0E64               	movlw	100
  1744  0008C4  0100               	movlb	0	; () banked
  1745  0008C6  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1746  0008C8  EC9C  F00D         	call	_fullSpeedBack	;wreg free
  1747                           
  1748                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1749  0008CC  0101               	movlb	1	; () banked
  1750  0008CE  51CF               	movf	main@Move& (0+255),w,b
  1751  0008D0  0D02               	mullw	2
  1752  0008D2  0E5A               	movlw	low main@MoveTime
  1753  0008D4  24F3               	addwf	prodl,w,c
  1754  0008D6  6ED9               	movwf	fsr2l,c
  1755  0008D8  0E01               	movlw	high main@MoveTime
  1756  0008DA  20F4               	addwfc	prodh,w,c
  1757  0008DC  6EDA               	movwf	fsr2h,c
  1758  0008DE  50DF               	movf	indf2,w,c
  1759  0008E0  EC16  F00E         	call	_delay_tenth_s
  1760                           
  1761                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1762  0008E4  D0F7               	goto	l3568
  1763  0008E6                     l3542:
  1764  0008E6  0101               	movlb	1	; () banked
  1765  0008E8  51CF               	movf	main@Move& (0+255),w,b
  1766  0008EA  0D01               	mullw	1
  1767  0008EC  0E28               	movlw	low main@MoveType
  1768  0008EE  24F3               	addwf	prodl,w,c
  1769  0008F0  6ED9               	movwf	fsr2l,c
  1770  0008F2  0E01               	movlw	high main@MoveType
  1771  0008F4  20F4               	addwfc	prodh,w,c
  1772  0008F6  6EDA               	movwf	fsr2h,c
  1773  0008F8  04DE               	decf	postinc2,w,c
  1774  0008FA  A4D8               	btfss	status,2,c
  1775  0008FC  D091               	goto	l3560
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1779  0008FE  9ED5               	bcf	4053,7,c	;volatile
  1780                           
  1781                           ; BSR set to: 1
  1782                           ;main.c: 261: TMR0L = 0;
  1783  000900  0E00               	movlw	0
  1784  000902  6ED6               	movwf	4054,c	;volatile
  1785                           
  1786                           ;main.c: 262: TMR0H = 0;
  1787  000904  0E00               	movlw	0
  1788  000906  6ED7               	movwf	4055,c	;volatile
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;main.c: 263: if (MoveTime[Move]>0) {
  1792  000908  0101               	movlb	1	; () banked
  1793  00090A  51CF               	movf	main@Move& (0+255),w,b
  1794  00090C  0D02               	mullw	2
  1795  00090E  0E5A               	movlw	low main@MoveTime
  1796  000910  24F3               	addwf	prodl,w,c
  1797  000912  6ED9               	movwf	fsr2l,c
  1798  000914  0E01               	movlw	high main@MoveTime
  1799  000916  20F4               	addwfc	prodh,w,c
  1800  000918  6EDA               	movwf	fsr2h,c
  1801  00091A  0E01               	movlw	1
  1802  00091C  BEDB               	btfsc	plusw2,7,c
  1803  00091E  D03D               	goto	l429
  1804  000920  0E01               	movlw	1
  1805  000922  50DB               	movf	plusw2,w,c
  1806  000924  E103               	bnz	u2990
  1807  000926  04DE               	decf	postinc2,w,c
  1808  000928  A0D8               	btfss	status,0,c
  1809  00092A  D037               	goto	l429
  1810  00092C                     u2990:
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1814  00092C  8ED5               	bsf	4053,7,c	;volatile
  1815                           
  1816                           ; BSR set to: 1
  1817                           ;main.c: 265: turnRight(&mL,&mR,40);
  1818  00092E  0ED0               	movlw	low main@mL
  1819  000930  0100               	movlb	0	; () banked
  1820  000932  6F67               	movwf	turnRight@mL& (0+255),b
  1821  000934  0E01               	movlw	high main@mL
  1822  000936  0100               	movlb	0	; () banked
  1823  000938  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1824  00093A  0ED9               	movlw	low main@mR
  1825  00093C  0100               	movlb	0	; () banked
  1826  00093E  6F69               	movwf	turnRight@mR& (0+255),b
  1827  000940  0E01               	movlw	high main@mR
  1828  000942  0100               	movlb	0	; () banked
  1829  000944  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1830  000946  0E28               	movlw	40
  1831  000948  0100               	movlb	0	; () banked
  1832  00094A  6F6B               	movwf	turnRight@power& (0+255),b
  1833  00094C  ECBB  F00D         	call	_turnRight	;wreg free
  1834  000950                     l3554:
  1835  000950  0101               	movlb	1	; () banked
  1836  000952  51CF               	movf	main@Move& (0+255),w,b
  1837  000954  0D02               	mullw	2
  1838  000956  0E5A               	movlw	low main@MoveTime
  1839  000958  24F3               	addwf	prodl,w,c
  1840  00095A  6ED9               	movwf	fsr2l,c
  1841  00095C  0E01               	movlw	high main@MoveTime
  1842  00095E  20F4               	addwfc	prodh,w,c
  1843  000960  6EDA               	movwf	fsr2h,c
  1844  000962  50D6               	movf	4054,w,c	;volatile
  1845  000964  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1846  000968  0100               	movlb	0	; () banked
  1847  00096A  6BBD               	clrf	(??_main+3)& (0+255),b
  1848  00096C  C0BC  F0BD         	movff	??_main+2,??_main+3
  1849  000970  0100               	movlb	0	; () banked
  1850  000972  6BBC               	clrf	(??_main+2)& (0+255),b
  1851  000974  0100               	movlb	0	; () banked
  1852  000976  27BC               	addwf	(??_main+2)& (0+255),f,b
  1853  000978  0E00               	movlw	0
  1854  00097A  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1855  00097C  50DE               	movf	postinc2,w,c
  1856  00097E  0100               	movlb	0	; () banked
  1857  000980  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1858  000982  0100               	movlb	0	; () banked
  1859  000984  51BD               	movf	(??_main+3)& (0+255),w,b
  1860  000986  0A80               	xorlw	128
  1861  000988  0100               	movlb	0	; () banked
  1862  00098A  6FBE               	movwf	(??_main+4)& (0+255),b
  1863  00098C  50DE               	movf	postinc2,w,c
  1864  00098E  0A80               	xorlw	128
  1865  000990  0100               	movlb	0	; () banked
  1866  000992  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1867  000994  A0D8               	btfss	status,0,c
  1868  000996  D7DC               	goto	l3554
  1869  000998  D041               	goto	l436
  1870  00099A                     l429:
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1874  00099A  8ED5               	bsf	4053,7,c	;volatile
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1878  00099C  0ED0               	movlw	low main@mL
  1879  00099E  0100               	movlb	0	; () banked
  1880  0009A0  6F67               	movwf	turnLeft@mL& (0+255),b
  1881  0009A2  0E01               	movlw	high main@mL
  1882  0009A4  0100               	movlb	0	; () banked
  1883  0009A6  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1884  0009A8  0ED9               	movlw	low main@mR
  1885  0009AA  0100               	movlb	0	; () banked
  1886  0009AC  6F69               	movwf	turnLeft@mR& (0+255),b
  1887  0009AE  0E01               	movlw	high main@mR
  1888  0009B0  0100               	movlb	0	; () banked
  1889  0009B2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1890  0009B4  0E28               	movlw	40
  1891  0009B6  0100               	movlb	0	; () banked
  1892  0009B8  6F6B               	movwf	turnLeft@power& (0+255),b
  1893  0009BA  ECDA  F00D         	call	_turnLeft	;wreg free
  1894  0009BE                     l3558:
  1895  0009BE  0101               	movlb	1	; () banked
  1896  0009C0  51CF               	movf	main@Move& (0+255),w,b
  1897  0009C2  0D02               	mullw	2
  1898  0009C4  0E5A               	movlw	low main@MoveTime
  1899  0009C6  24F3               	addwf	prodl,w,c
  1900  0009C8  6ED9               	movwf	fsr2l,c
  1901  0009CA  0E01               	movlw	high main@MoveTime
  1902  0009CC  20F4               	addwfc	prodh,w,c
  1903  0009CE  6EDA               	movwf	fsr2h,c
  1904  0009D0  CFDE F0BA          	movff	postinc2,??_main
  1905  0009D4  CFDD F0BB          	movff	postdec2,??_main+1
  1906  0009D8  0100               	movlb	0	; () banked
  1907  0009DA  1FBA               	comf	??_main& (0+255),f,b
  1908  0009DC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1909  0009DE  4BBA               	infsnz	??_main& (0+255),f,b
  1910  0009E0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1911  0009E2  50D6               	movf	4054,w,c	;volatile
  1912  0009E4  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1913  0009E8  0100               	movlb	0	; () banked
  1914  0009EA  6BBD               	clrf	(??_main+3)& (0+255),b
  1915  0009EC  C0BC  F0BD         	movff	??_main+2,??_main+3
  1916  0009F0  0100               	movlb	0	; () banked
  1917  0009F2  6BBC               	clrf	(??_main+2)& (0+255),b
  1918  0009F4  0100               	movlb	0	; () banked
  1919  0009F6  27BC               	addwf	(??_main+2)& (0+255),f,b
  1920  0009F8  0E00               	movlw	0
  1921  0009FA  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1922  0009FC  0100               	movlb	0	; () banked
  1923  0009FE  51BA               	movf	??_main& (0+255),w,b
  1924  000A00  0100               	movlb	0	; () banked
  1925  000A02  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1926  000A04  0100               	movlb	0	; () banked
  1927  000A06  51BD               	movf	(??_main+3)& (0+255),w,b
  1928  000A08  0A80               	xorlw	128
  1929  000A0A  0100               	movlb	0	; () banked
  1930  000A0C  6FBE               	movwf	(??_main+4)& (0+255),b
  1931  000A0E  0100               	movlb	0	; () banked
  1932  000A10  51BB               	movf	(??_main+1)& (0+255),w,b
  1933  000A12  0A80               	xorlw	128
  1934  000A14  0100               	movlb	0	; () banked
  1935  000A16  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1936  000A18  A0D8               	btfss	status,0,c
  1937  000A1A  D7D1               	goto	l3558
  1938  000A1C                     l436:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1942  000A1C  9ED5               	bcf	4053,7,c	;volatile
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 275: }
  1946                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1947  000A1E  D05A               	goto	l3568
  1948  000A20                     l3560:
  1949  000A20  0101               	movlb	1	; () banked
  1950  000A22  51CF               	movf	main@Move& (0+255),w,b
  1951  000A24  0D01               	mullw	1
  1952  000A26  0E28               	movlw	low main@MoveType
  1953  000A28  24F3               	addwf	prodl,w,c
  1954  000A2A  6ED9               	movwf	fsr2l,c
  1955  000A2C  0E01               	movlw	high main@MoveType
  1956  000A2E  20F4               	addwfc	prodh,w,c
  1957  000A30  6EDA               	movwf	fsr2h,c
  1958  000A32  0E02               	movlw	2
  1959  000A34  18DE               	xorwf	postinc2,w,c
  1960  000A36  A4D8               	btfss	status,2,c
  1961  000A38  D04D               	goto	l3568
  1962                           
  1963                           ; BSR set to: 1
  1964                           ;main.c: 277: if (MoveTime[Move]>0) {
  1965  000A3A  0101               	movlb	1	; () banked
  1966  000A3C  51CF               	movf	main@Move& (0+255),w,b
  1967  000A3E  0D02               	mullw	2
  1968  000A40  0E5A               	movlw	low main@MoveTime
  1969  000A42  24F3               	addwf	prodl,w,c
  1970  000A44  6ED9               	movwf	fsr2l,c
  1971  000A46  0E01               	movlw	high main@MoveTime
  1972  000A48  20F4               	addwfc	prodh,w,c
  1973  000A4A  6EDA               	movwf	fsr2h,c
  1974  000A4C  0E01               	movlw	1
  1975  000A4E  BEDB               	btfsc	plusw2,7,c
  1976  000A50  D024               	goto	l3566
  1977  000A52  0E01               	movlw	1
  1978  000A54  50DB               	movf	plusw2,w,c
  1979  000A56  E103               	bnz	u3030
  1980  000A58  04DE               	decf	postinc2,w,c
  1981  000A5A  A0D8               	btfss	status,0,c
  1982  000A5C  D01E               	goto	l3566
  1983  000A5E                     u3030:
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;main.c: 278: turnRight(&mL,&mR,100);
  1987  000A5E  0ED0               	movlw	low main@mL
  1988  000A60  0100               	movlb	0	; () banked
  1989  000A62  6F67               	movwf	turnRight@mL& (0+255),b
  1990  000A64  0E01               	movlw	high main@mL
  1991  000A66  0100               	movlb	0	; () banked
  1992  000A68  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1993  000A6A  0ED9               	movlw	low main@mR
  1994  000A6C  0100               	movlb	0	; () banked
  1995  000A6E  6F69               	movwf	turnRight@mR& (0+255),b
  1996  000A70  0E01               	movlw	high main@mR
  1997  000A72  0100               	movlb	0	; () banked
  1998  000A74  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1999  000A76  0E64               	movlw	100
  2000  000A78  0100               	movlb	0	; () banked
  2001  000A7A  6F6B               	movwf	turnRight@power& (0+255),b
  2002  000A7C  ECBB  F00D         	call	_turnRight	;wreg free
  2003                           
  2004                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  2005  000A80  0101               	movlb	1	; () banked
  2006  000A82  51CF               	movf	main@Move& (0+255),w,b
  2007  000A84  0D02               	mullw	2
  2008  000A86  0E5A               	movlw	low main@MoveTime
  2009  000A88  24F3               	addwf	prodl,w,c
  2010  000A8A  6ED9               	movwf	fsr2l,c
  2011  000A8C  0E01               	movlw	high main@MoveTime
  2012  000A8E  20F4               	addwfc	prodh,w,c
  2013  000A90  6EDA               	movwf	fsr2h,c
  2014  000A92  50DF               	movf	indf2,w,c
  2015  000A94  EC16  F00E         	call	_delay_tenth_s
  2016                           
  2017                           ;main.c: 280: } else {
  2018  000A98  D01D               	goto	l3568
  2019  000A9A                     l3566:
  2020                           
  2021                           ;main.c: 281: turnLeft(&mL,&mR,100);
  2022  000A9A  0ED0               	movlw	low main@mL
  2023  000A9C  0100               	movlb	0	; () banked
  2024  000A9E  6F67               	movwf	turnLeft@mL& (0+255),b
  2025  000AA0  0E01               	movlw	high main@mL
  2026  000AA2  0100               	movlb	0	; () banked
  2027  000AA4  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2028  000AA6  0ED9               	movlw	low main@mR
  2029  000AA8  0100               	movlb	0	; () banked
  2030  000AAA  6F69               	movwf	turnLeft@mR& (0+255),b
  2031  000AAC  0E01               	movlw	high main@mR
  2032  000AAE  0100               	movlb	0	; () banked
  2033  000AB0  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2034  000AB2  0E64               	movlw	100
  2035  000AB4  0100               	movlb	0	; () banked
  2036  000AB6  6F6B               	movwf	turnLeft@power& (0+255),b
  2037  000AB8  ECDA  F00D         	call	_turnLeft	;wreg free
  2038                           
  2039                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2040  000ABC  0101               	movlb	1	; () banked
  2041  000ABE  51CF               	movf	main@Move& (0+255),w,b
  2042  000AC0  0D02               	mullw	2
  2043  000AC2  0E5A               	movlw	low main@MoveTime
  2044  000AC4  24F3               	addwf	prodl,w,c
  2045  000AC6  6ED9               	movwf	fsr2l,c
  2046  000AC8  0E01               	movlw	high main@MoveTime
  2047  000ACA  20F4               	addwfc	prodh,w,c
  2048  000ACC  6EDA               	movwf	fsr2h,c
  2049  000ACE  50DF               	movf	indf2,w,c
  2050  000AD0  EC16  F00E         	call	_delay_tenth_s
  2051  000AD4                     l3568:
  2052                           
  2053                           ;main.c: 283: }
  2054                           ;main.c: 284: }
  2055                           ;main.c: 285: if (mode==-1) {
  2056  000AD4  283B               	incf	_mode,w,c	;volatile
  2057  000AD6  B4D8               	btfsc	status,2,c
  2058  000AD8  D003               	goto	l3576
  2059                           
  2060                           ;main.c: 286: break;
  2061  000ADA  0101               	movlb	1	; () banked
  2062  000ADC  07CF               	decf	main@Move& (0+255),f,b
  2063  000ADE  D6C8               	goto	l3532
  2064  000AE0                     l3576:
  2065                           
  2066                           ;main.c: 287: }
  2067                           ;main.c: 288: }
  2068                           ;main.c: 289: stop(&mL,&mR);
  2069  000AE0  0ED0               	movlw	low main@mL
  2070  000AE2  0100               	movlb	0	; () banked
  2071  000AE4  6F62               	movwf	stop@mL& (0+255),b
  2072  000AE6  0E01               	movlw	high main@mL
  2073  000AE8  0100               	movlb	0	; () banked
  2074  000AEA  6F63               	movwf	(stop@mL+1)& (0+255),b
  2075  000AEC  0ED9               	movlw	low main@mR
  2076  000AEE  0100               	movlb	0	; () banked
  2077  000AF0  6F64               	movwf	stop@mR& (0+255),b
  2078  000AF2  0E01               	movlw	high main@mR
  2079  000AF4  0100               	movlb	0	; () banked
  2080  000AF6  6F65               	movwf	(stop@mR+1)& (0+255),b
  2081  000AF8  EC74  F00B         	call	_stop	;wreg free
  2082  000AFC                     l3578:
  2083                           
  2084                           ;main.c: 290: mode=-1;
  2085  000AFC  683B               	setf	_mode,c	;volatile
  2086  000AFE                     l3582:
  2087  000AFE  503B               	movf	_mode,w,c	;volatile
  2088                           
  2089                           ; Switch size 1, requested type "space"
  2090                           ; Number of cases is 5, Range of values is 0 to 255
  2091                           ; switch strategies available:
  2092                           ; Name         Instructions Cycles
  2093                           ; simple_byte           16     9 (average)
  2094                           ;	Chosen strategy is simple_byte
  2095  000B00  0A00               	xorlw	0	; case 0
  2096  000B02  B4D8               	btfsc	status,2,c
  2097  000B04  D4FD               	goto	l3420
  2098  000B06  0A01               	xorlw	1	; case 1
  2099  000B08  B4D8               	btfsc	status,2,c
  2100  000B0A  D523               	goto	l3440
  2101  000B0C  0A03               	xorlw	3	; case 2
  2102  000B0E  B4D8               	btfsc	status,2,c
  2103  000B10  D5C3               	goto	l3472
  2104  000B12  0A01               	xorlw	1	; case 3
  2105  000B14  B4D8               	btfsc	status,2,c
  2106  000B16  D69A               	goto	l3526
  2107  000B18  0AFC               	xorlw	252	; case 255
  2108  000B1A  B4D8               	btfsc	status,2,c
  2109  000B1C  D482               	goto	l3380
  2110  000B1E  D7EF               	goto	l3582
  2111  000B20                     __end_of_main:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           prodh	equ	0xFF4
  2115                           prodl	equ	0xFF3
  2116                           intcon	equ	0xFF2
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           indf1	equ	0xFE7
  2120                           plusw1	equ	0xFE3
  2121                           fsr1h	equ	0xFE2
  2122                           fsr1l	equ	0xFE1
  2123                           indf2	equ	0xFDF
  2124                           postinc2	equ	0xFDE
  2125                           postdec2	equ	0xFDD
  2126                           plusw2	equ	0xFDB
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _initTimer *****************
  2132 ;; Defined at:
  2133 ;;		line 8 in file "Movement.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;		None               void
  2140 ;; Registers used:
  2141 ;;		None
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2147 ;;      Params:         0       0       0       0
  2148 ;;      Locals:         0       0       0       0
  2149 ;;      Temps:          0       0       0       0
  2150 ;;      Totals:         0       0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    3
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text1
  2162  0001BC                     __ptext1:
  2163                           	opt stack 0
  2164  0001BC                     _initTimer:
  2165                           	opt stack 27
  2166                           
  2167                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2168                           
  2169                           ;incstack = 0
  2170  0001BC  9ED5               	bcf	4053,7,c	;volatile
  2171                           
  2172                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2173  0001BE  9CD5               	bcf	4053,6,c	;volatile
  2174                           
  2175                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2176  0001C0  9AD5               	bcf	4053,5,c	;volatile
  2177                           
  2178                           ;Movement.c: 13: T0CONbits.PSA=0;
  2179  0001C2  96D5               	bcf	4053,3,c	;volatile
  2180                           
  2181                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2182  0001C4  80D5               	bsf	4053,0,c	;volatile
  2183  0001C6  82D5               	bsf	4053,1,c	;volatile
  2184  0001C8  84D5               	bsf	4053,2,c	;volatile
  2185                           
  2186                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2187  0001CA  9AF2               	bcf	intcon,5,c	;volatile
  2188  0001CC  0012               	return		;funcret
  2189  0001CE                     __end_of_initTimer:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           indf1	equ	0xFE7
  2198                           plusw1	equ	0xFE3
  2199                           fsr1h	equ	0xFE2
  2200                           fsr1l	equ	0xFE1
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           plusw2	equ	0xFDB
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _initRFID *****************
  2210 ;; Defined at:
  2211 ;;		line 8 in file "RFID_Reader.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;		None               void
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, status,0
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2225 ;;      Params:         0       0       0       0
  2226 ;;      Locals:         0       0       0       0
  2227 ;;      Temps:          0       0       0       0
  2228 ;;      Totals:         0       0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    3
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_main
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text2
  2240  0001A0                     __ptext2:
  2241                           	opt stack 0
  2242  0001A0                     _initRFID:
  2243                           	opt stack 27
  2244                           
  2245                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2246                           
  2247                           ;incstack = 0
  2248  0001A0  5094               	movf	3988,w,c	;volatile
  2249  0001A2  09C0               	iorlw	192
  2250  0001A4  6E94               	movwf	3988,c	;volatile
  2251                           
  2252                           ;RFID_Reader.c: 13: SPBRG=205;
  2253  0001A6  0ECD               	movlw	205
  2254  0001A8  6EAF               	movwf	4015,c	;volatile
  2255                           
  2256                           ;RFID_Reader.c: 14: SPBRGH=0;
  2257  0001AA  0E00               	movlw	0
  2258  0001AC  6EB0               	movwf	4016,c	;volatile
  2259                           
  2260                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2261  0001AE  86AA               	bsf	4010,3,c	;volatile
  2262                           
  2263                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2264  0001B0  84AC               	bsf	4012,2,c	;volatile
  2265                           
  2266                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2267  0001B2  88AB               	bsf	4011,4,c	;volatile
  2268                           
  2269                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2270  0001B4  8EAB               	bsf	4011,7,c	;volatile
  2271                           
  2272                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2273  0001B6  98AC               	bcf	4012,4,c	;volatile
  2274                           
  2275                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2276  0001B8  9CAB               	bcf	4011,6,c	;volatile
  2277  0001BA  0012               	return		;funcret
  2278  0001BC                     __end_of_initRFID:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           indf1	equ	0xFE7
  2287                           plusw1	equ	0xFE3
  2288                           fsr1h	equ	0xFE2
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           postinc2	equ	0xFDE
  2292                           postdec2	equ	0xFDD
  2293                           plusw2	equ	0xFDB
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _initMotorPWM *****************
  2299 ;; Defined at:
  2300 ;;		line 4 in file "dc_motor.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, status,2
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2314 ;;      Params:         0       0       0       0
  2315 ;;      Locals:         0       0       0       0
  2316 ;;      Temps:          0       0       0       0
  2317 ;;      Totals:         0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    3
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text3
  2329  001BF2                     __ptext3:
  2330                           	opt stack 0
  2331  001BF2                     _initMotorPWM:
  2332                           	opt stack 27
  2333                           
  2334                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2335                           
  2336                           ;incstack = 0
  2337  001BF2  0E00               	movlw	0
  2338  001BF4  6E7F               	movwf	3967,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2341  001BF6  0E80               	movlw	128
  2342  001BF8  6E7E               	movwf	3966,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2345  001BFA  0E6F               	movlw	111
  2346  001BFC  6E6F               	movwf	3951,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2349  001BFE  0E00               	movlw	0
  2350  001C00  6E6E               	movwf	3950,c	;volatile
  2351                           
  2352                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2353  001C02  0EC7               	movlw	199
  2354  001C04  6E7B               	movwf	3963,c	;volatile
  2355                           
  2356                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2357  001C06  0E00               	movlw	0
  2358  001C08  6E7A               	movwf	3962,c	;volatile
  2359                           
  2360                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2361  001C0A  0E00               	movlw	0
  2362  001C0C  6E79               	movwf	3961,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2365  001C0E  0E00               	movlw	0
  2366  001C10  6E78               	movwf	3960,c	;volatile
  2367                           
  2368                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2369  001C12  0E00               	movlw	0
  2370  001C14  6E77               	movwf	3959,c	;volatile
  2371                           
  2372                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2373  001C16  0E00               	movlw	0
  2374  001C18  6E76               	movwf	3958,c	;volatile
  2375                           
  2376                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2377  001C1A  9093               	bcf	3987,0,c	;volatile
  2378                           
  2379                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2380  001C1C  9293               	bcf	3987,1,c	;volatile
  2381                           
  2382                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2383  001C1E  9493               	bcf	3987,2,c	;volatile
  2384                           
  2385                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2386  001C20  9693               	bcf	3987,3,c	;volatile
  2387                           
  2388                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2389  001C22  908A               	bcf	3978,0,c	;volatile
  2390                           
  2391                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2392  001C24  928A               	bcf	3978,1,c	;volatile
  2393                           
  2394                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2395  001C26  948A               	bcf	3978,2,c	;volatile
  2396                           
  2397                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2398  001C28  968A               	bcf	3978,3,c	;volatile
  2399  001C2A  0012               	return		;funcret
  2400  001C2C                     __end_of_initMotorPWM:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           indf1	equ	0xFE7
  2409                           plusw1	equ	0xFE3
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           plusw2	equ	0xFDB
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _initLCD *****************
  2421 ;; Defined at:
  2422 ;;		line 38 in file "LCD.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;		None               void
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2436 ;;      Params:         0       0       0       0
  2437 ;;      Locals:         0       0       0       0
  2438 ;;      Temps:          1       0       0       0
  2439 ;;      Totals:         1       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    6
  2443 ;; This function calls:
  2444 ;;		_LCDout
  2445 ;;		_SendLCD
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text4
  2452  00162C                     __ptext4:
  2453                           	opt stack 0
  2454  00162C                     _initLCD:
  2455                           	opt stack 24
  2456                           
  2457                           ;LCD.c: 44: TRISAbits.RA6=0;
  2458                           
  2459                           ;incstack = 0
  2460  00162C  9C92               	bcf	3986,6,c	;volatile
  2461                           
  2462                           ;LCD.c: 45: TRISCbits.RC0=0;
  2463  00162E  9094               	bcf	3988,0,c	;volatile
  2464                           
  2465                           ;LCD.c: 46: TRISCbits.RC1=0;
  2466  001630  9294               	bcf	3988,1,c	;volatile
  2467                           
  2468                           ;LCD.c: 47: TRISCbits.RC2=0;
  2469  001632  9494               	bcf	3988,2,c	;volatile
  2470                           
  2471                           ;LCD.c: 48: TRISDbits.RD0=0;
  2472  001634  9095               	bcf	3989,0,c	;volatile
  2473                           
  2474                           ;LCD.c: 49: TRISDbits.RD1=0;
  2475  001636  9295               	bcf	3989,1,c	;volatile
  2476                           
  2477                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2478  001638  0E27               	movlw	39
  2479  00163A  6E2A               	movwf	??_initLCD& (0+255),c
  2480  00163C  0EF5               	movlw	245
  2481  00163E                     u3087:
  2482  00163E  2EE8               	decfsz	wreg,f,c
  2483  001640  D7FE               	goto	u3087
  2484  001642  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2485  001644  D7FC               	goto	u3087
  2486  001646  F000               	nop	
  2487                           
  2488                           ;LCD.c: 52: LCDout(0b0011);
  2489  001648  0E03               	movlw	3
  2490  00164A  ECB3  F00A         	call	_LCDout
  2491                           
  2492                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2493  00164E  0E0D               	movlw	13
  2494  001650  6E2A               	movwf	??_initLCD& (0+255),c
  2495  001652  0EFC               	movlw	252
  2496  001654                     u3097:
  2497  001654  2EE8               	decfsz	wreg,f,c
  2498  001656  D7FE               	goto	u3097
  2499  001658  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2500  00165A  D7FC               	goto	u3097
  2501                           
  2502                           ;LCD.c: 54: LCDout(0b0011);
  2503  00165C  0E03               	movlw	3
  2504  00165E  ECB3  F00A         	call	_LCDout
  2505                           
  2506                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2507  001662  0E85               	movlw	133
  2508  001664                     u3107:
  2509  001664  2EE8               	decfsz	wreg,f,c
  2510  001666  D7FE               	goto	u3107
  2511  001668  F000               	nop	
  2512                           
  2513                           ;LCD.c: 56: LCDout(0b0011);
  2514  00166A  0E03               	movlw	3
  2515  00166C  ECB3  F00A         	call	_LCDout
  2516                           
  2517                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2518  001670  0E21               	movlw	33
  2519  001672                     u3117:
  2520  001672  2EE8               	decfsz	wreg,f,c
  2521  001674  D7FE               	goto	u3117
  2522  001676  F000               	nop	
  2523                           
  2524                           ;LCD.c: 58: LCDout(0b0010);
  2525  001678  0E02               	movlw	2
  2526  00167A  ECB3  F00A         	call	_LCDout
  2527                           
  2528                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2529  00167E  0E21               	movlw	33
  2530  001680                     u3127:
  2531  001680  2EE8               	decfsz	wreg,f,c
  2532  001682  D7FE               	goto	u3127
  2533  001684  F000               	nop	
  2534                           
  2535                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2536  001686  0E00               	movlw	0
  2537  001688  6E28               	movwf	SendLCD@type,c
  2538  00168A  0E28               	movlw	40
  2539  00168C  EC85  F000         	call	_SendLCD
  2540                           
  2541                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2542  001690  0E21               	movlw	33
  2543  001692                     u3137:
  2544  001692  2EE8               	decfsz	wreg,f,c
  2545  001694  D7FE               	goto	u3137
  2546  001696  F000               	nop	
  2547                           
  2548                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2549  001698  0E00               	movlw	0
  2550  00169A  6E28               	movwf	SendLCD@type,c
  2551  00169C  0E08               	movlw	8
  2552  00169E  EC85  F000         	call	_SendLCD
  2553                           
  2554                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2555  0016A2  0E21               	movlw	33
  2556  0016A4                     u3147:
  2557  0016A4  2EE8               	decfsz	wreg,f,c
  2558  0016A6  D7FE               	goto	u3147
  2559  0016A8  F000               	nop	
  2560                           
  2561                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2562  0016AA  0E00               	movlw	0
  2563  0016AC  6E28               	movwf	SendLCD@type,c
  2564  0016AE  0E01               	movlw	1
  2565  0016B0  EC85  F000         	call	_SendLCD
  2566                           
  2567                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2568  0016B4  0E0D               	movlw	13
  2569  0016B6  6E2A               	movwf	??_initLCD& (0+255),c
  2570  0016B8  0EFC               	movlw	252
  2571  0016BA                     u3157:
  2572  0016BA  2EE8               	decfsz	wreg,f,c
  2573  0016BC  D7FE               	goto	u3157
  2574  0016BE  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2575  0016C0  D7FC               	goto	u3157
  2576                           
  2577                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2578  0016C2  0E00               	movlw	0
  2579  0016C4  6E28               	movwf	SendLCD@type,c
  2580  0016C6  0E06               	movlw	6
  2581  0016C8  EC85  F000         	call	_SendLCD
  2582                           
  2583                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2584  0016CC  0E21               	movlw	33
  2585  0016CE                     u3167:
  2586  0016CE  2EE8               	decfsz	wreg,f,c
  2587  0016D0  D7FE               	goto	u3167
  2588  0016D2  F000               	nop	
  2589                           
  2590                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2591  0016D4  0E00               	movlw	0
  2592  0016D6  6E28               	movwf	SendLCD@type,c
  2593  0016D8  0E0C               	movlw	12
  2594  0016DA  EC85  F000         	call	_SendLCD
  2595                           
  2596                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2597  0016DE  0E21               	movlw	33
  2598  0016E0                     u3177:
  2599  0016E0  2EE8               	decfsz	wreg,f,c
  2600  0016E2  D7FE               	goto	u3177
  2601  0016E4  F000               	nop	
  2602  0016E6  0012               	return		;funcret
  2603  0016E8                     __end_of_initLCD:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           indf1	equ	0xFE7
  2612                           plusw1	equ	0xFE3
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           plusw2	equ	0xFDB
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _initIR *****************
  2624 ;; Defined at:
  2625 ;;		line 30 in file "IR_Reading.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;		None               void
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2639 ;;      Params:         0       0       0       0
  2640 ;;      Locals:         0       0       0       0
  2641 ;;      Temps:          0       0       0       0
  2642 ;;      Totals:         0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    3
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text5
  2654  000160                     __ptext5:
  2655                           	opt stack 0
  2656  000160                     _initIR:
  2657                           	opt stack 27
  2658                           
  2659                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2660                           
  2661                           ;incstack = 0
  2662  000160  9489               	bcf	3977,2,c	;volatile
  2663                           
  2664                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2665  000162  9689               	bcf	3977,3,c	;volatile
  2666                           
  2667                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2668  000164  8492               	bsf	3986,2,c	;volatile
  2669                           
  2670                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2671  000166  8692               	bsf	3986,3,c	;volatile
  2672                           
  2673                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2674  000168  94B8               	bcf	4024,2,c	;volatile
  2675                           
  2676                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2677  00016A  96B8               	bcf	4024,3,c	;volatile
  2678                           
  2679                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2680  00016C  9CB8               	bcf	4024,6,c	;volatile
  2681                           
  2682                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2683  00016E  9EB8               	bcf	4024,7,c	;volatile
  2684                           
  2685                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2686  000170  0E06               	movlw	6
  2687  000172  6E63               	movwf	3939,c	;volatile
  2688                           
  2689                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2690  000174  0E06               	movlw	6
  2691  000176  6E62               	movwf	3938,c	;volatile
  2692                           
  2693                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2694  000178  9096               	bcf	3990,0,c	;volatile
  2695                           
  2696                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2697  00017A  9296               	bcf	3990,1,c	;volatile
  2698                           
  2699                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2700  00017C  0E59               	movlw	89
  2701  00017E  6EB7               	movwf	4023,c	;volatile
  2702  000180  0012               	return		;funcret
  2703  000182                     __end_of_initIR:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon	equ	0xFF2
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           indf1	equ	0xFE7
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           plusw2	equ	0xFDB
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _fullSpeedBack *****************
  2724 ;; Defined at:
  2725 ;;		line 138 in file "dc_motor.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2728 ;;		 -> main@mL(9), 
  2729 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2730 ;;		 -> main@mR(9), 
  2731 ;;  power           1   11[BANK0 ] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;		None               void
  2736 ;; Registers used:
  2737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2743 ;;      Params:         0       5       0       0
  2744 ;;      Locals:         0       0       0       0
  2745 ;;      Temps:          0       0       0       0
  2746 ;;      Totals:         0       5       0       0
  2747 ;;Total ram usage:        5 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    6
  2750 ;; This function calls:
  2751 ;;		_fullSpeed
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text6
  2758  001B38                     __ptext6:
  2759                           	opt stack 0
  2760  001B38                     _fullSpeedBack:
  2761                           	opt stack 24
  2762                           
  2763                           ;dc_motor.c: 141: mL->direction=0;
  2764                           
  2765                           ;incstack = 0
  2766  001B38  0100               	movlb	0	; () banked
  2767  001B3A  EE20 F001          	lfsr	2,1
  2768  001B3E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2769  001B40  26D9               	addwf	fsr2l,f,c
  2770  001B42  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2771  001B44  22DA               	addwfc	fsr2h,f,c
  2772  001B46  0E00               	movlw	0
  2773  001B48  6EDF               	movwf	indf2,c
  2774                           
  2775                           ;dc_motor.c: 142: mR->direction=0;
  2776  001B4A  0100               	movlb	0	; () banked
  2777  001B4C  EE20 F001          	lfsr	2,1
  2778  001B50  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2779  001B52  26D9               	addwf	fsr2l,f,c
  2780  001B54  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2781  001B56  22DA               	addwfc	fsr2h,f,c
  2782  001B58  0E00               	movlw	0
  2783  001B5A  6EDF               	movwf	indf2,c
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2787  001B5C  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2788  001B60  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2789  001B64  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2790  001B68  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2791  001B6C  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2792  001B70  EC45  F00C         	call	_fullSpeed	;wreg free
  2793  001B74  0012               	return		;funcret
  2794  001B76                     __end_of_fullSpeedBack:
  2795                           	opt stack 0
  2796                           tblptru	equ	0xFF8
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           intcon	equ	0xFF2
  2800                           postinc0	equ	0xFEE
  2801                           wreg	equ	0xFE8
  2802                           indf1	equ	0xFE7
  2803                           plusw1	equ	0xFE3
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           postinc2	equ	0xFDE
  2808                           postdec2	equ	0xFDD
  2809                           plusw2	equ	0xFDB
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _enableSensor *****************
  2815 ;; Defined at:
  2816 ;;		line 106 in file "IR_Reading.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  sensor          1    wreg     unsigned char 
  2819 ;;  status          1   35[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  sensor          1   36[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;		None               void
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2831 ;;      Params:         1       0       0       0
  2832 ;;      Locals:         1       0       0       0
  2833 ;;      Temps:          0       0       0       0
  2834 ;;      Totals:         2       0       0       0
  2835 ;;Total ram usage:        2 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    3
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text7
  2846  001CD2                     __ptext7:
  2847                           	opt stack 0
  2848  001CD2                     _enableSensor:
  2849                           	opt stack 27
  2850                           
  2851                           ;incstack = 0
  2852                           ;enableSensor@sensor stored from wreg
  2853  001CD2  6E25               	movwf	enableSensor@sensor,c
  2854                           
  2855                           ;IR_Reading.c: 108: if (sensor==0){
  2856  001CD4  5025               	movf	enableSensor@sensor,w,c
  2857  001CD6  A4D8               	btfss	status,2,c
  2858  001CD8  D006               	goto	l2426
  2859                           
  2860                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2861  001CDA  B024               	btfsc	enableSensor@status,0,c
  2862  001CDC  D002               	bra	u1845
  2863  001CDE  908D               	bcf	3981,0,c	;volatile
  2864  001CE0  D001               	bra	u1846
  2865  001CE2                     u1845:
  2866  001CE2  808D               	bsf	3981,0,c	;volatile
  2867  001CE4                     u1846:
  2868                           
  2869                           ;IR_Reading.c: 110: } else if (sensor==1){
  2870  001CE4  0012               	return	
  2871  001CE6                     l2426:
  2872  001CE6  0425               	decf	enableSensor@sensor,w,c
  2873  001CE8  A4D8               	btfss	status,2,c
  2874  001CEA  0012               	return	
  2875                           
  2876                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2877  001CEC  B024               	btfsc	enableSensor@status,0,c
  2878  001CEE  D002               	bra	u1865
  2879  001CF0  928D               	bcf	3981,1,c	;volatile
  2880  001CF2  D001               	bra	u1866
  2881  001CF4                     u1865:
  2882  001CF4  828D               	bsf	3981,1,c	;volatile
  2883  001CF6                     u1866:
  2884  001CF6  0012               	return	
  2885  001CF8                     __end_of_enableSensor:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           prodh	equ	0xFF4
  2889                           prodl	equ	0xFF3
  2890                           intcon	equ	0xFF2
  2891                           postinc0	equ	0xFEE
  2892                           wreg	equ	0xFE8
  2893                           indf1	equ	0xFE7
  2894                           plusw1	equ	0xFE3
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           plusw2	equ	0xFDB
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _VerifySignal *****************
  2906 ;; Defined at:
  2907 ;;		line 58 in file "RFID_Reader.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2910 ;;		 -> ReceivedString(16), 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  ptr             3    0        PTR unsigned char 
  2913 ;;  hexByte         2   43[COMRAM] unsigned int 
  2914 ;;  checksum        1   42[COMRAM] unsigned char 
  2915 ;;  i               1   41[COMRAM] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      unsigned char 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2925 ;;      Params:         2       0       0       0
  2926 ;;      Locals:         4       0       0       0
  2927 ;;      Temps:          4       0       0       0
  2928 ;;      Totals:        10       0       0       0
  2929 ;;Total ram usage:       10 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text8
  2940  001A4C                     __ptext8:
  2941                           	opt stack 0
  2942  001A4C                     _VerifySignal:
  2943                           	opt stack 27
  2944                           
  2945                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2946                           
  2947                           ;incstack = 0
  2948  001A4C  0E00               	movlw	0
  2949  001A4E  6E2B               	movwf	VerifySignal@checksum,c
  2950                           
  2951                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2952  001A50  0E00               	movlw	0
  2953  001A52  6E2D               	movwf	VerifySignal@hexByte+1,c
  2954  001A54  0E00               	movlw	0
  2955  001A56  6E2C               	movwf	VerifySignal@hexByte,c
  2956                           
  2957                           ;RFID_Reader.c: 61: unsigned char i=0;
  2958  001A58  0E00               	movlw	0
  2959  001A5A  6E2A               	movwf	VerifySignal@i,c
  2960                           
  2961                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2962                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2963  001A5C  EE20 F004          	lfsr	2,4
  2964  001A60  5024               	movf	VerifySignal@Signal,w,c
  2965  001A62  26D9               	addwf	fsr2l,f,c
  2966  001A64  5025               	movf	VerifySignal@Signal+1,w,c
  2967  001A66  22DA               	addwfc	fsr2h,f,c
  2968  001A68  50DF               	movf	indf2,w,c
  2969  001A6A  6E26               	movwf	??_VerifySignal& (0+255),c
  2970  001A6C  EE20 F003          	lfsr	2,3
  2971  001A70  5024               	movf	VerifySignal@Signal,w,c
  2972  001A72  26D9               	addwf	fsr2l,f,c
  2973  001A74  5025               	movf	VerifySignal@Signal+1,w,c
  2974  001A76  22DA               	addwfc	fsr2h,f,c
  2975  001A78  50DF               	movf	indf2,w,c
  2976  001A7A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2977  001A7C  5027               	movf	??_VerifySignal+1,w,c
  2978  001A7E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2979  001A80  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2980  001A82  5026               	movf	??_VerifySignal,w,c
  2981  001A84  2428               	addwf	??_VerifySignal+2,w,c
  2982  001A86  6E2C               	movwf	VerifySignal@hexByte,c
  2983  001A88  0E00               	movlw	0
  2984  001A8A  2029               	addwfc	??_VerifySignal+3,w,c
  2985  001A8C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2986                           
  2987                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2988  001A8E  EE20 F002          	lfsr	2,2
  2989  001A92  5024               	movf	VerifySignal@Signal,w,c
  2990  001A94  26D9               	addwf	fsr2l,f,c
  2991  001A96  5025               	movf	VerifySignal@Signal+1,w,c
  2992  001A98  22DA               	addwfc	fsr2h,f,c
  2993  001A9A  50DF               	movf	indf2,w,c
  2994  001A9C  182C               	xorwf	VerifySignal@hexByte,w,c
  2995  001A9E  6E2B               	movwf	VerifySignal@checksum,c
  2996                           
  2997                           ;RFID_Reader.c: 75: return 1;
  2998  001AA0  0E01               	movlw	1
  2999  001AA2  0012               	return	
  3000  001AA4                     __end_of_VerifySignal:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           intcon	equ	0xFF2
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf1	equ	0xFE7
  3009                           plusw1	equ	0xFE3
  3010                           fsr1h	equ	0xFE2
  3011                           fsr1l	equ	0xFE1
  3012                           indf2	equ	0xFDF
  3013                           postinc2	equ	0xFDE
  3014                           postdec2	equ	0xFDD
  3015                           plusw2	equ	0xFDB
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _ScanWithRange *****************
  3021 ;; Defined at:
  3022 ;;		line 98 in file "Movement.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3025 ;;		 -> main@mL(9), 
  3026 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3027 ;;		 -> main@mR(9), 
  3028 ;;  loops           2   17[BANK0 ] int 
  3029 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3030 ;;		 -> main@MoveTime(100), 
  3031 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3032 ;;		 -> main@Move(1), 
  3033 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3034 ;;		 -> main@MoveType(50), 
  3035 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3036 ;;		 -> RFID_Read(1), 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  buf            40   32[BANK0 ] unsigned char [40]
  3039 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  3040 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3041 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  3042 ;;  DirectionFou    2   77[BANK0 ] const unsigned int 
  3043 ;;  i               2   75[BANK0 ] unsigned int 
  3044 ;;  n               2   72[BANK0 ] unsigned int 
  3045 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  3046 ;;  LeftFlick       1   80[BANK0 ] const unsigned char 
  3047 ;;  MotorPower      1   79[BANK0 ] const unsigned char 
  3048 ;;  MiniLeftFlic    1   74[BANK0 ] const unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      unsigned char 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3058 ;;      Params:         0      14       0       0
  3059 ;;      Locals:         0      58       0       0
  3060 ;;      Temps:          0       5       0       0
  3061 ;;      Totals:         0      77       0       0
  3062 ;;Total ram usage:       77 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    7
  3065 ;; This function calls:
  3066 ;;		_LCD_String
  3067 ;;		_SendLCD
  3068 ;;		_SetLine
  3069 ;;		_delay_tenth_s
  3070 ;;		_grabLeftIR
  3071 ;;		_grabRightIR
  3072 ;;		_sprintf
  3073 ;;		_stop
  3074 ;;		_turnLeft
  3075 ;;		_turnRight
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text9
  3082  000B20                     __ptext9:
  3083                           	opt stack 0
  3084  000B20                     _ScanWithRange:
  3085                           	opt stack 23
  3086                           
  3087                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3088                           
  3089                           ;incstack = 0
  3090  000B20  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3091  000B24  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3092  000B28  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3093  000B2C  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3094                           
  3095                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3096  000B30  0E00               	movlw	0
  3097  000B32  0100               	movlb	0	; () banked
  3098  000B34  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3099  000B36  0E00               	movlw	0
  3100  000B38  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3101                           
  3102                           ;Movement.c: 104: unsigned int RightFlag=0;
  3103  000B3A  0E00               	movlw	0
  3104  000B3C  0100               	movlb	0	; () banked
  3105  000B3E  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3106  000B40  0E00               	movlw	0
  3107  000B42  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3108                           
  3109                           ;Movement.c: 105: char buf[40];
  3110                           ;Movement.c: 106: unsigned int i=0;
  3111  000B44  0E00               	movlw	0
  3112  000B46  0100               	movlb	0	; () banked
  3113  000B48  6FAC               	movwf	(ScanWithRange@i+1)& (0+255),b
  3114  000B4A  0E00               	movlw	0
  3115  000B4C  6FAB               	movwf	ScanWithRange@i& (0+255),b
  3116                           
  3117                           ;Movement.c: 107: unsigned int n=0;
  3118  000B4E  0E00               	movlw	0
  3119  000B50  0100               	movlb	0	; () banked
  3120  000B52  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3121  000B54  0E00               	movlw	0
  3122  000B56  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3123                           
  3124                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3125  000B58  0E00               	movlw	0
  3126  000B5A  0100               	movlb	0	; () banked
  3127  000B5C  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3128                           
  3129                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3130  000B5E  0E03               	movlw	3
  3131  000B60  0100               	movlb	0	; () banked
  3132  000B62  6FAE               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3133  000B64  0EE8               	movlw	232
  3134  000B66  6FAD               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3135                           
  3136                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3137  000B68  0E28               	movlw	40
  3138  000B6A  0100               	movlb	0	; () banked
  3139  000B6C  6FAF               	movwf	ScanWithRange@MotorPower& (0+255),b
  3140                           
  3141                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3142  000B6E  0E02               	movlw	2
  3143  000B70  0100               	movlb	0	; () banked
  3144  000B72  6FB0               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3145                           
  3146                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3147  000B74  0E01               	movlw	1
  3148  000B76  0100               	movlb	0	; () banked
  3149  000B78  6FAA               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3153  000B7A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3154  000B7E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3155  000B82  50DF               	movf	indf2,w,c
  3156  000B84  0100               	movlb	0	; () banked
  3157  000B86  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3158  000B88  0100               	movlb	0	; () banked
  3159  000B8A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3160  000B8C  0D01               	mullw	1
  3161  000B8E  50F3               	movf	prodl,w,c
  3162  000B90  0100               	movlb	0	; () banked
  3163  000B92  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3164  000B94  6ED9               	movwf	fsr2l,c
  3165  000B96  50F4               	movf	prodh,w,c
  3166  000B98  0100               	movlb	0	; () banked
  3167  000B9A  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3168  000B9C  6EDA               	movwf	fsr2h,c
  3169  000B9E  0E02               	movlw	2
  3170  000BA0  6EDF               	movwf	indf2,c
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;Movement.c: 122: (MoveTime[*Move]) = LeftFlick;
  3174  000BA2  0100               	movlb	0	; () banked
  3175  000BA4  51B0               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3176  000BA6  0100               	movlb	0	; () banked
  3177  000BA8  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3178  000BAA  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3179  000BAC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3180  000BB0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3181  000BB4  50DF               	movf	indf2,w,c
  3182  000BB6  0100               	movlb	0	; () banked
  3183  000BB8  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3184  000BBA  0100               	movlb	0	; () banked
  3185  000BBC  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3186  000BBE  0D02               	mullw	2
  3187  000BC0  50F3               	movf	prodl,w,c
  3188  000BC2  0100               	movlb	0	; () banked
  3189  000BC4  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3190  000BC6  6ED9               	movwf	fsr2l,c
  3191  000BC8  50F4               	movf	prodh,w,c
  3192  000BCA  0100               	movlb	0	; () banked
  3193  000BCC  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3194  000BCE  6EDA               	movwf	fsr2h,c
  3195  000BD0  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3196  000BD4  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;Movement.c: 123: *Move = *Move+1;
  3200  000BD8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3201  000BDC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3202  000BE0  50DF               	movf	indf2,w,c
  3203  000BE2  0100               	movlb	0	; () banked
  3204  000BE4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3205  000BE6  0100               	movlb	0	; () banked
  3206  000BE8  297B               	incf	??_ScanWithRange& (0+255),w,b
  3207  000BEA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3208  000BEE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3209  000BF2  6EDF               	movwf	indf2,c
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3213  000BF4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3214  000BF8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3215  000BFC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3216  000C00  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3217  000C04  0E64               	movlw	100
  3218  000C06  0100               	movlb	0	; () banked
  3219  000C08  6F6B               	movwf	turnLeft@power& (0+255),b
  3220  000C0A  ECDA  F00D         	call	_turnLeft	;wreg free
  3221                           
  3222                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3223  000C0E  0100               	movlb	0	; () banked
  3224  000C10  51B0               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3225  000C12  EC16  F00E         	call	_delay_tenth_s
  3226                           
  3227                           ;Movement.c: 126: stop(mL,mR);
  3228  000C16  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3229  000C1A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3230  000C1E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3231  000C22  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3232  000C26  EC74  F00B         	call	_stop	;wreg free
  3233                           
  3234                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3235  000C2A  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3236  000C2E  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3237  000C32  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3238  000C36  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3239  000C3A  C0AF  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3240  000C3E  ECBB  F00D         	call	_turnRight	;wreg free
  3241                           
  3242                           ;Movement.c: 132: TMR0L = 0;
  3243  000C42  0E00               	movlw	0
  3244  000C44  6ED6               	movwf	4054,c	;volatile
  3245                           
  3246                           ;Movement.c: 133: TMR0H = 0;
  3247  000C46  0E00               	movlw	0
  3248  000C48  6ED7               	movwf	4055,c	;volatile
  3249                           
  3250                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3251  000C4A  8ED5               	bsf	4053,7,c	;volatile
  3252                           
  3253                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3254  000C4C  0E00               	movlw	0
  3255  000C4E  0100               	movlb	0	; () banked
  3256  000C50  6FAC               	movwf	(ScanWithRange@i+1)& (0+255),b
  3257  000C52  0E01               	movlw	1
  3258  000C54  6FAB               	movwf	ScanWithRange@i& (0+255),b
  3259  000C56  D18C               	goto	l3310
  3260  000C58                     l3234:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3264  000C58  ECBE  F00C         	call	_grabLeftIR	;wreg free
  3265  000C5C  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3266  000C60  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3267                           
  3268                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3269  000C64  EC85  F00C         	call	_grabRightIR	;wreg free
  3270  000C68  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3271  000C6C  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3272                           
  3273                           ;Movement.c: 144: CAP1BUFH=0;
  3274  000C70  0E00               	movlw	0
  3275  000C72  6E69               	movwf	3945,c	;volatile
  3276                           
  3277                           ;Movement.c: 145: CAP1BUFL=0;
  3278  000C74  0E00               	movlw	0
  3279  000C76  6E68               	movwf	3944,c	;volatile
  3280                           
  3281                           ;Movement.c: 146: CAP2BUFH=0;
  3282  000C78  0E00               	movlw	0
  3283  000C7A  6E67               	movwf	3943,c	;volatile
  3284                           
  3285                           ;Movement.c: 147: CAP2BUFL=0;
  3286  000C7C  0E00               	movlw	0
  3287  000C7E  6E66               	movwf	3942,c	;volatile
  3288                           
  3289                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3290  000C80  0E00               	movlw	0
  3291  000C82  6E28               	movwf	SendLCD@type,c
  3292  000C84  0E01               	movlw	1
  3293  000C86  EC85  F000         	call	_SendLCD
  3294                           
  3295                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3296  000C8A  0E21               	movlw	33
  3297  000C8C                     u3187:
  3298  000C8C  2EE8               	decfsz	wreg,f,c
  3299  000C8E  D7FE               	goto	u3187
  3300  000C90  F000               	nop	
  3301                           
  3302                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3303  000C92  0E00               	movlw	0
  3304  000C94  6E28               	movwf	SendLCD@type,c
  3305  000C96  0E02               	movlw	2
  3306  000C98  EC85  F000         	call	_SendLCD
  3307                           
  3308                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3309  000C9C  0E06               	movlw	6
  3310  000C9E  0100               	movlb	0	; () banked
  3311  000CA0  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3312  000CA2  0E30               	movlw	48
  3313  000CA4                     u3197:
  3314  000CA4  2EE8               	decfsz	wreg,f,c
  3315  000CA6  D7FE               	goto	u3197
  3316  000CA8  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3317  000CAA  D7FC               	goto	u3197
  3318  000CAC  D000               	nop2	
  3319                           
  3320                           ;Movement.c: 155: SetLine(1);
  3321  000CAE  0E01               	movlw	1
  3322  000CB0  EC6D  F000         	call	_SetLine
  3323                           
  3324                           ;Movement.c: 156: LCD_String("     ScanIR");
  3325  000CB4  0E2D               	movlw	low STR_1
  3326  000CB6  6E2A               	movwf	LCD_String@string,c
  3327  000CB8  0E03               	movlw	high STR_1
  3328  000CBA  6E2B               	movwf	LCD_String@string+1,c
  3329  000CBC  ECF7  F00C         	call	_LCD_String	;wreg free
  3330                           
  3331                           ;Movement.c: 157: SetLine(2);
  3332  000CC0  0E02               	movlw	2
  3333  000CC2  EC6D  F000         	call	_SetLine
  3334                           
  3335                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3336  000CC6  0E80               	movlw	low ScanWithRange@buf
  3337  000CC8  6E30               	movwf	sprintf@sp,c
  3338  000CCA  0E00               	movlw	high ScanWithRange@buf
  3339  000CCC  6E31               	movwf	sprintf@sp+1,c
  3340  000CCE  0E0C               	movlw	low (STR_6+1)
  3341  000CD0  6E32               	movwf	sprintf@f,c
  3342  000CD2  0E03               	movlw	high (STR_6+1)
  3343  000CD4  6E33               	movwf	sprintf@f+1,c
  3344  000CD6  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3345  000CDA  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3346  000CDE  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3347  000CE2  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3348  000CE6  EC16  F008         	call	_sprintf	;wreg free
  3349                           
  3350                           ;Movement.c: 159: LCD_String(buf);
  3351  000CEA  0E80               	movlw	low ScanWithRange@buf
  3352  000CEC  6E2A               	movwf	LCD_String@string,c
  3353  000CEE  0E00               	movlw	high ScanWithRange@buf
  3354  000CF0  6E2B               	movwf	LCD_String@string+1,c
  3355  000CF2  ECF7  F00C         	call	_LCD_String	;wreg free
  3356                           
  3357                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3358  000CF6  0100               	movlb	0	; () banked
  3359  000CF8  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3360  000CFA  0100               	movlb	0	; () banked
  3361  000CFC  5DAD               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3362  000CFE  0100               	movlb	0	; () banked
  3363  000D00  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3364  000D02  0100               	movlb	0	; () banked
  3365  000D04  59AE               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3366  000D06  B0D8               	btfsc	status,0,c
  3367  000D08  D00E               	goto	l226
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3371  000D0A  50D7               	movf	4055,w,c	;volatile
  3372  000D0C  0100               	movlb	0	; () banked
  3373  000D0E  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3374  000D10  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3375  000D12  50D6               	movf	4054,w,c	;volatile
  3376  000D14  0100               	movlb	0	; () banked
  3377  000D16  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3378  000D18  0100               	movlb	0	; () banked
  3379  000D1A  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3380  000D1C  0E00               	movlw	0
  3381  000D1E  0100               	movlb	0	; () banked
  3382  000D20  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3383  000D22  0100               	movlb	0	; () banked
  3384  000D24  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3385  000D26                     l226:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;Movement.c: 165: }
  3389                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3390  000D26  0100               	movlb	0	; () banked
  3391  000D28  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3392  000D2A  0100               	movlb	0	; () banked
  3393  000D2C  5DAD               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3394  000D2E  0100               	movlb	0	; () banked
  3395  000D30  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3396  000D32  0100               	movlb	0	; () banked
  3397  000D34  59AE               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3398  000D36  B0D8               	btfsc	status,0,c
  3399  000D38  D00E               	goto	l227
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3403  000D3A  50D7               	movf	4055,w,c	;volatile
  3404  000D3C  0100               	movlb	0	; () banked
  3405  000D3E  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3406  000D40  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3407  000D42  50D6               	movf	4054,w,c	;volatile
  3408  000D44  0100               	movlb	0	; () banked
  3409  000D46  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3410  000D48  0100               	movlb	0	; () banked
  3411  000D4A  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3412  000D4C  0E00               	movlw	0
  3413  000D4E  0100               	movlb	0	; () banked
  3414  000D50  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3415  000D52  0100               	movlb	0	; () banked
  3416  000D54  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3417  000D56                     l227:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;Movement.c: 169: }
  3421                           ;Movement.c: 176: if (LeftFlag>0) {
  3422  000D56  0100               	movlb	0	; () banked
  3423  000D58  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3424  000D5A  0100               	movlb	0	; () banked
  3425  000D5C  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3426  000D5E  B4D8               	btfsc	status,2,c
  3427  000D60  D0FB               	goto	l3302
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;Movement.c: 179: if (RightFlag>0) {
  3431  000D62  0100               	movlb	0	; () banked
  3432  000D64  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3433  000D66  0100               	movlb	0	; () banked
  3434  000D68  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3435  000D6A  B4D8               	btfsc	status,2,c
  3436  000D6C  D09F               	goto	l229
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3440  000D6E  0100               	movlb	0	; () banked
  3441  000D70  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3442  000D72  0800               	sublw	0
  3443  000D74  0100               	movlb	0	; () banked
  3444  000D76  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3445  000D78  0100               	movlb	0	; () banked
  3446  000D7A  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;Movement.c: 181: TMR0L = 0;
  3450  000D7C  0E00               	movlw	0
  3451  000D7E  6ED6               	movwf	4054,c	;volatile
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;Movement.c: 182: TMR0H = 0;
  3455  000D80  0E00               	movlw	0
  3456  000D82  6ED7               	movwf	4055,c	;volatile
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;Movement.c: 183: stop(mL,mR);
  3460  000D84  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3461  000D88  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3462  000D8C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3463  000D90  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3464  000D94  EC74  F00B         	call	_stop	;wreg free
  3465                           
  3466                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3467  000D98  D00C               	goto	l3276
  3468  000D9A                     l3274:
  3469                           
  3470                           ;Movement.c: 185: turnLeft(mL,mR, MotorPower);
  3471  000D9A  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3472  000D9E  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3473  000DA2  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3474  000DA6  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3475  000DAA  C0AF  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3476  000DAE  ECDA  F00D         	call	_turnLeft	;wreg free
  3477  000DB2                     l3276:
  3478  000DB2  0100               	movlb	0	; () banked
  3479  000DB4  90D8               	bcf	status,0,c
  3480  000DB6  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3481  000DB8  0100               	movlb	0	; () banked
  3482  000DBA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3483  000DBC  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3484  000DBE  50D6               	movf	4054,w,c	;volatile
  3485  000DC0  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3486  000DC4  0100               	movlb	0	; () banked
  3487  000DC6  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3488  000DC8  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3489  000DCC  0100               	movlb	0	; () banked
  3490  000DCE  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3491  000DD0  0100               	movlb	0	; () banked
  3492  000DD2  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3493  000DD4  0E00               	movlw	0
  3494  000DD6  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3495  000DD8  0100               	movlb	0	; () banked
  3496  000DDA  517B               	movf	??_ScanWithRange& (0+255),w,b
  3497  000DDC  0100               	movlb	0	; () banked
  3498  000DDE  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3499  000DE0  0100               	movlb	0	; () banked
  3500  000DE2  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3501  000DE4  0A80               	xorlw	128
  3502  000DE6  0100               	movlb	0	; () banked
  3503  000DE8  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3504  000DEA  0100               	movlb	0	; () banked
  3505  000DEC  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3506  000DEE  0A80               	xorlw	128
  3507  000DF0  0100               	movlb	0	; () banked
  3508  000DF2  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3509  000DF4  A0D8               	btfss	status,0,c
  3510  000DF6  D7D1               	goto	l3274
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;Movement.c: 186: }
  3514                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3515  000DF8  9ED5               	bcf	4053,7,c	;volatile
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;Movement.c: 188: stop(mL,mR);
  3519  000DFA  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3520  000DFE  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3521  000E02  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3522  000E06  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3523  000E0A  EC74  F00B         	call	_stop	;wreg free
  3524                           
  3525                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3526  000E0E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3527  000E12  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3528  000E16  50DF               	movf	indf2,w,c
  3529  000E18  0100               	movlb	0	; () banked
  3530  000E1A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3531  000E1C  0100               	movlb	0	; () banked
  3532  000E1E  517B               	movf	??_ScanWithRange& (0+255),w,b
  3533  000E20  0D01               	mullw	1
  3534  000E22  50F3               	movf	prodl,w,c
  3535  000E24  0100               	movlb	0	; () banked
  3536  000E26  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3537  000E28  6ED9               	movwf	fsr2l,c
  3538  000E2A  50F4               	movf	prodh,w,c
  3539  000E2C  0100               	movlb	0	; () banked
  3540  000E2E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3541  000E30  6EDA               	movwf	fsr2h,c
  3542  000E32  0E01               	movlw	1
  3543  000E34  6EDF               	movwf	indf2,c
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;Movement.c: 191: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3547  000E36  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3548  000E3A  0100               	movlb	0	; () banked
  3549  000E3C  90D8               	bcf	status,0,c
  3550  000E3E  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3551  000E40  0100               	movlb	0	; () banked
  3552  000E42  517B               	movf	??_ScanWithRange& (0+255),w,b
  3553  000E44  0100               	movlb	0	; () banked
  3554  000E46  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3555  000E48  0100               	movlb	0	; () banked
  3556  000E4A  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3557  000E4C  0E00               	movlw	0
  3558  000E4E  0100               	movlb	0	; () banked
  3559  000E50  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3560  000E52  0100               	movlb	0	; () banked
  3561  000E54  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3562  000E56  0100               	movlb	0	; () banked
  3563  000E58  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3564  000E5A  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3565  000E5C  4B7C               	infsnz	(??_ScanWithRange+1)& (0+255),f,b
  3566  000E5E  2B7D               	incf	(??_ScanWithRange+2)& (0+255),f,b
  3567  000E60  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3568  000E64  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3569  000E68  50DF               	movf	indf2,w,c
  3570  000E6A  0100               	movlb	0	; () banked
  3571  000E6C  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3572  000E6E  0100               	movlb	0	; () banked
  3573  000E70  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3574  000E72  0D02               	mullw	2
  3575  000E74  50F3               	movf	prodl,w,c
  3576  000E76  0100               	movlb	0	; () banked
  3577  000E78  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3578  000E7A  6ED9               	movwf	fsr2l,c
  3579  000E7C  50F4               	movf	prodh,w,c
  3580  000E7E  0100               	movlb	0	; () banked
  3581  000E80  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3582  000E82  6EDA               	movwf	fsr2h,c
  3583  000E84  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3584  000E88  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;Movement.c: 192: *Move = *Move+1;
  3588  000E8C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3589  000E90  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3590  000E94  50DF               	movf	indf2,w,c
  3591  000E96  0100               	movlb	0	; () banked
  3592  000E98  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3593  000E9A  0100               	movlb	0	; () banked
  3594  000E9C  297B               	incf	??_ScanWithRange& (0+255),w,b
  3595  000E9E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3596  000EA2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3597  000EA6  6EDF               	movwf	indf2,c
  3598  000EA8                     l3286:
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;Movement.c: 194: return 2;
  3602  000EA8  0E02               	movlw	2
  3603                           
  3604                           ; BSR set to: 0
  3605  000EAA  0012               	return	
  3606  000EAC                     l229:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;Movement.c: 196: T0CONbits.TMR0ON=0;
  3610  000EAC  9ED5               	bcf	4053,7,c	;volatile
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Movement.c: 200: (MoveType[*Move]) = 1;
  3614  000EAE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3615  000EB2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3616  000EB6  50DF               	movf	indf2,w,c
  3617  000EB8  0100               	movlb	0	; () banked
  3618  000EBA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3619  000EBC  0100               	movlb	0	; () banked
  3620  000EBE  517B               	movf	??_ScanWithRange& (0+255),w,b
  3621  000EC0  0D01               	mullw	1
  3622  000EC2  50F3               	movf	prodl,w,c
  3623  000EC4  0100               	movlb	0	; () banked
  3624  000EC6  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3625  000EC8  6ED9               	movwf	fsr2l,c
  3626  000ECA  50F4               	movf	prodh,w,c
  3627  000ECC  0100               	movlb	0	; () banked
  3628  000ECE  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3629  000ED0  6EDA               	movwf	fsr2h,c
  3630  000ED2  0E01               	movlw	1
  3631  000ED4  6EDF               	movwf	indf2,c
  3632                           
  3633                           ;Movement.c: 201: (MoveTime[*Move]) = -((TMR0H<<8)+TMR0L);
  3634  000ED6  50D6               	movf	4054,w,c	;volatile
  3635  000ED8  CFD7 F07B          	movff	4055,??_ScanWithRange	;volatile
  3636  000EDC  0100               	movlb	0	; () banked
  3637  000EDE  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3638  000EE0  C07B  F07C         	movff	??_ScanWithRange,??_ScanWithRange+1
  3639  000EE4  0100               	movlb	0	; () banked
  3640  000EE6  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3641  000EE8  0100               	movlb	0	; () banked
  3642  000EEA  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3643  000EEC  0E00               	movlw	0
  3644  000EEE  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3645  000EF0  0100               	movlb	0	; () banked
  3646  000EF2  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3647  000EF4  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3648  000EF6  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3649  000EF8  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3650  000EFA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3651  000EFE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3652  000F02  50DF               	movf	indf2,w,c
  3653  000F04  0100               	movlb	0	; () banked
  3654  000F06  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3655  000F08  0100               	movlb	0	; () banked
  3656  000F0A  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3657  000F0C  0D02               	mullw	2
  3658  000F0E  50F3               	movf	prodl,w,c
  3659  000F10  0100               	movlb	0	; () banked
  3660  000F12  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3661  000F14  6ED9               	movwf	fsr2l,c
  3662  000F16  50F4               	movf	prodh,w,c
  3663  000F18  0100               	movlb	0	; () banked
  3664  000F1A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3665  000F1C  6EDA               	movwf	fsr2h,c
  3666  000F1E  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3667  000F22  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Movement.c: 202: *Move = *Move+1;
  3671  000F26  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3672  000F2A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3673  000F2E  50DF               	movf	indf2,w,c
  3674  000F30  0100               	movlb	0	; () banked
  3675  000F32  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3676  000F34  0100               	movlb	0	; () banked
  3677  000F36  297B               	incf	??_ScanWithRange& (0+255),w,b
  3678  000F38  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3679  000F3C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3680  000F40  6EDF               	movwf	indf2,c
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Movement.c: 203: stop(mL,mR);
  3684  000F42  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3685  000F46  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3686  000F4A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3687  000F4E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3688  000F52  EC74  F00B         	call	_stop	;wreg free
  3689  000F56  D7A8               	goto	l3286
  3690  000F58                     l3302:
  3691                           
  3692                           ;Movement.c: 215: }
  3693                           ;Movement.c: 216: }
  3694                           ;Movement.c: 218: if (*RFID_Read==1) {
  3695  000F58  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3696  000F5C  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3697  000F60  04DE               	decf	postinc2,w,c
  3698  000F62  A4D8               	btfss	status,2,c
  3699  000F64  D002               	goto	l3308
  3700                           
  3701                           ;Movement.c: 219: return 2;
  3702  000F66  0E02               	movlw	2
  3703  000F68  0012               	return	
  3704  000F6A                     l3308:
  3705  000F6A  0100               	movlb	0	; () banked
  3706  000F6C  4BAB               	infsnz	ScanWithRange@i& (0+255),f,b
  3707  000F6E  2BAC               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3708  000F70                     l3310:
  3709                           
  3710                           ; BSR set to: 0
  3711  000F70  0100               	movlb	0	; () banked
  3712  000F72  51AB               	movf	ScanWithRange@i& (0+255),w,b
  3713  000F74  0100               	movlb	0	; () banked
  3714  000F76  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3715  000F78  0100               	movlb	0	; () banked
  3716  000F7A  51AC               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3717  000F7C  0100               	movlb	0	; () banked
  3718  000F7E  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3719  000F80  B0D8               	btfsc	status,0,c
  3720  000F82  D66A               	goto	l3234
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Movement.c: 220: }
  3724                           ;Movement.c: 221: }
  3725                           ;Movement.c: 224: (MoveType[*Move]) = 2;
  3726                           
  3727                           ; BSR set to: 0
  3728  000F84  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3729  000F88  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3730  000F8C  50DF               	movf	indf2,w,c
  3731  000F8E  0100               	movlb	0	; () banked
  3732  000F90  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3733  000F92  0100               	movlb	0	; () banked
  3734  000F94  517B               	movf	??_ScanWithRange& (0+255),w,b
  3735  000F96  0D01               	mullw	1
  3736  000F98  50F3               	movf	prodl,w,c
  3737  000F9A  0100               	movlb	0	; () banked
  3738  000F9C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3739  000F9E  6ED9               	movwf	fsr2l,c
  3740  000FA0  50F4               	movf	prodh,w,c
  3741  000FA2  0100               	movlb	0	; () banked
  3742  000FA4  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3743  000FA6  6EDA               	movwf	fsr2h,c
  3744  000FA8  0E02               	movlw	2
  3745  000FAA  6EDF               	movwf	indf2,c
  3746                           
  3747                           ;Movement.c: 225: (MoveTime[*Move]) = -2;
  3748  000FAC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3749  000FB0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3750  000FB4  50DF               	movf	indf2,w,c
  3751  000FB6  0100               	movlb	0	; () banked
  3752  000FB8  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3753  000FBA  0100               	movlb	0	; () banked
  3754  000FBC  517B               	movf	??_ScanWithRange& (0+255),w,b
  3755  000FBE  0D02               	mullw	2
  3756  000FC0  50F3               	movf	prodl,w,c
  3757  000FC2  0100               	movlb	0	; () banked
  3758  000FC4  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3759  000FC6  6ED9               	movwf	fsr2l,c
  3760  000FC8  50F4               	movf	prodh,w,c
  3761  000FCA  0100               	movlb	0	; () banked
  3762  000FCC  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3763  000FCE  6EDA               	movwf	fsr2h,c
  3764  000FD0  0EFE               	movlw	254
  3765  000FD2  6EDE               	movwf	postinc2,c
  3766  000FD4  0EFF               	movlw	255
  3767  000FD6  6EDD               	movwf	postdec2,c
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;Movement.c: 226: *Move = *Move+1;
  3771  000FD8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3772  000FDC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3773  000FE0  50DF               	movf	indf2,w,c
  3774  000FE2  0100               	movlb	0	; () banked
  3775  000FE4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3776  000FE6  0100               	movlb	0	; () banked
  3777  000FE8  297B               	incf	??_ScanWithRange& (0+255),w,b
  3778  000FEA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3779  000FEE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3780  000FF2  6EDF               	movwf	indf2,c
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;Movement.c: 227: turnRight(mL,mR, 100);
  3784  000FF4  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3785  000FF8  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3786  000FFC  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3787  001000  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3788  001004  0E64               	movlw	100
  3789  001006  0100               	movlb	0	; () banked
  3790  001008  6F6B               	movwf	turnRight@power& (0+255),b
  3791  00100A  ECBB  F00D         	call	_turnRight	;wreg free
  3792                           
  3793                           ;Movement.c: 228: delay_tenth_s(2);
  3794  00100E  0E02               	movlw	2
  3795  001010  EC16  F00E         	call	_delay_tenth_s
  3796                           
  3797                           ;Movement.c: 229: stop(mL,mR);
  3798  001014  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3799  001018  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3800  00101C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3801  001020  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3802  001024  EC74  F00B         	call	_stop	;wreg free
  3803                           
  3804                           ;Movement.c: 230: return -1;
  3805  001028  0EFF               	movlw	255
  3806  00102A  0012               	return	
  3807  00102C                     __end_of_ScanWithRange:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           prodh	equ	0xFF4
  3811                           prodl	equ	0xFF3
  3812                           intcon	equ	0xFF2
  3813                           postinc0	equ	0xFEE
  3814                           wreg	equ	0xFE8
  3815                           indf1	equ	0xFE7
  3816                           plusw1	equ	0xFE3
  3817                           fsr1h	equ	0xFE2
  3818                           fsr1l	equ	0xFE1
  3819                           indf2	equ	0xFDF
  3820                           postinc2	equ	0xFDE
  3821                           postdec2	equ	0xFDD
  3822                           plusw2	equ	0xFDB
  3823                           fsr2h	equ	0xFDA
  3824                           fsr2l	equ	0xFD9
  3825                           status	equ	0xFD8
  3826                           
  3827 ;; *************** function _turnRight *****************
  3828 ;; Defined at:
  3829 ;;		line 103 in file "dc_motor.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3832 ;;		 -> main@mL(9), 
  3833 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3834 ;;		 -> main@mR(9), 
  3835 ;;  power           1   11[BANK0 ] unsigned char 
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;		None               void
  3840 ;; Registers used:
  3841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3847 ;;      Params:         0       5       0       0
  3848 ;;      Locals:         0       0       0       0
  3849 ;;      Temps:          0       0       0       0
  3850 ;;      Totals:         0       5       0       0
  3851 ;;Total ram usage:        5 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    6
  3854 ;; This function calls:
  3855 ;;		_fullSpeed
  3856 ;; This function is called by:
  3857 ;;		_ScanWithRange
  3858 ;;		_main
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text10
  3863  001B76                     __ptext10:
  3864                           	opt stack 0
  3865  001B76                     _turnRight:
  3866                           	opt stack 24
  3867                           
  3868                           ;dc_motor.c: 107: mL->direction=0;
  3869                           
  3870                           ;incstack = 0
  3871  001B76  0100               	movlb	0	; () banked
  3872  001B78  EE20 F001          	lfsr	2,1
  3873  001B7C  5167               	movf	turnRight@mL& (0+255),w,b
  3874  001B7E  26D9               	addwf	fsr2l,f,c
  3875  001B80  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3876  001B82  22DA               	addwfc	fsr2h,f,c
  3877  001B84  0E00               	movlw	0
  3878  001B86  6EDF               	movwf	indf2,c
  3879                           
  3880                           ;dc_motor.c: 108: mR->direction=1;
  3881  001B88  0100               	movlb	0	; () banked
  3882  001B8A  EE20 F001          	lfsr	2,1
  3883  001B8E  5169               	movf	turnRight@mR& (0+255),w,b
  3884  001B90  26D9               	addwf	fsr2l,f,c
  3885  001B92  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3886  001B94  22DA               	addwfc	fsr2h,f,c
  3887  001B96  0E01               	movlw	1
  3888  001B98  6EDF               	movwf	indf2,c
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3892  001B9A  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3893  001B9E  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3894  001BA2  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3895  001BA6  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3896  001BAA  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3897  001BAE  EC45  F00C         	call	_fullSpeed	;wreg free
  3898  001BB2  0012               	return		;funcret
  3899  001BB4                     __end_of_turnRight:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           intcon	equ	0xFF2
  3905                           postinc0	equ	0xFEE
  3906                           wreg	equ	0xFE8
  3907                           indf1	equ	0xFE7
  3908                           plusw1	equ	0xFE3
  3909                           fsr1h	equ	0xFE2
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           plusw2	equ	0xFDB
  3915                           fsr2h	equ	0xFDA
  3916                           fsr2l	equ	0xFD9
  3917                           status	equ	0xFD8
  3918                           
  3919 ;; *************** function _turnLeft *****************
  3920 ;; Defined at:
  3921 ;;		line 92 in file "dc_motor.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3924 ;;		 -> main@mL(9), 
  3925 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3926 ;;		 -> main@mR(9), 
  3927 ;;  power           1   11[BANK0 ] unsigned char 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;		None               void
  3932 ;; Registers used:
  3933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3939 ;;      Params:         0       5       0       0
  3940 ;;      Locals:         0       0       0       0
  3941 ;;      Temps:          0       0       0       0
  3942 ;;      Totals:         0       5       0       0
  3943 ;;Total ram usage:        5 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    6
  3946 ;; This function calls:
  3947 ;;		_fullSpeed
  3948 ;; This function is called by:
  3949 ;;		_ScanWithRange
  3950 ;;		_main
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text11
  3955  001BB4                     __ptext11:
  3956                           	opt stack 0
  3957  001BB4                     _turnLeft:
  3958                           	opt stack 24
  3959                           
  3960                           ;dc_motor.c: 96: mL->direction=1;
  3961                           
  3962                           ;incstack = 0
  3963  001BB4  0100               	movlb	0	; () banked
  3964  001BB6  EE20 F001          	lfsr	2,1
  3965  001BBA  5167               	movf	turnLeft@mL& (0+255),w,b
  3966  001BBC  26D9               	addwf	fsr2l,f,c
  3967  001BBE  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3968  001BC0  22DA               	addwfc	fsr2h,f,c
  3969  001BC2  0E01               	movlw	1
  3970  001BC4  6EDF               	movwf	indf2,c
  3971                           
  3972                           ;dc_motor.c: 97: mR->direction=0;
  3973  001BC6  0100               	movlb	0	; () banked
  3974  001BC8  EE20 F001          	lfsr	2,1
  3975  001BCC  5169               	movf	turnLeft@mR& (0+255),w,b
  3976  001BCE  26D9               	addwf	fsr2l,f,c
  3977  001BD0  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3978  001BD2  22DA               	addwfc	fsr2h,f,c
  3979  001BD4  0E00               	movlw	0
  3980  001BD6  6EDF               	movwf	indf2,c
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3984  001BD8  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  3985  001BDC  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  3986  001BE0  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  3987  001BE4  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  3988  001BE8  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  3989  001BEC  EC45  F00C         	call	_fullSpeed	;wreg free
  3990  001BF0  0012               	return		;funcret
  3991  001BF2                     __end_of_turnLeft:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           intcon	equ	0xFF2
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           indf1	equ	0xFE7
  4000                           plusw1	equ	0xFE3
  4001                           fsr1h	equ	0xFE2
  4002                           fsr1l	equ	0xFE1
  4003                           indf2	equ	0xFDF
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           plusw2	equ	0xFDB
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function _fullSpeed *****************
  4012 ;; Defined at:
  4013 ;;		line 113 in file "dc_motor.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4016 ;;		 -> main@mL(9), 
  4017 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4018 ;;		 -> main@mR(9), 
  4019 ;;  power           1    6[BANK0 ] unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;		None               void
  4024 ;; Registers used:
  4025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4031 ;;      Params:         0       5       0       0
  4032 ;;      Locals:         0       0       0       0
  4033 ;;      Temps:          1       0       0       0
  4034 ;;      Totals:         1       5       0       0
  4035 ;;Total ram usage:        6 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    5
  4038 ;; This function calls:
  4039 ;;		_setMotorPWM
  4040 ;; This function is called by:
  4041 ;;		_turnLeft
  4042 ;;		_turnRight
  4043 ;;		_fullSpeedBack
  4044 ;;		_main
  4045 ;;		_fullSpeedForward
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text12
  4050  00188A                     __ptext12:
  4051                           	opt stack 0
  4052  00188A                     _fullSpeed:
  4053                           	opt stack 24
  4054                           
  4055                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4056                           
  4057                           ;incstack = 0
  4058  00188A  D02C               	goto	l67
  4059  00188C                     l3002:
  4060                           
  4061                           ;dc_motor.c: 117: if(mL->power<power){
  4062  00188C  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4063  001890  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4064  001894  0100               	movlb	0	; () banked
  4065  001896  5166               	movf	fullSpeed@power& (0+255),w,b
  4066  001898  5CDE               	subwf	postinc2,w,c
  4067  00189A  B0D8               	btfsc	status,0,c
  4068  00189C  D005               	goto	l3006
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;dc_motor.c: 118: mL->power++;
  4072  00189E  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4073  0018A2  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4074  0018A6  2ADF               	incf	indf2,f,c
  4075  0018A8                     l3006:
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;dc_motor.c: 119: }
  4079                           ;dc_motor.c: 120: if(mR->power<power){
  4080  0018A8  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4081  0018AC  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4082  0018B0  0100               	movlb	0	; () banked
  4083  0018B2  5166               	movf	fullSpeed@power& (0+255),w,b
  4084  0018B4  5CDE               	subwf	postinc2,w,c
  4085  0018B6  B0D8               	btfsc	status,0,c
  4086  0018B8  D005               	goto	l3010
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;dc_motor.c: 121: mR->power++;
  4090  0018BA  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4091  0018BE  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4092  0018C2  2ADF               	incf	indf2,f,c
  4093  0018C4                     l3010:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;dc_motor.c: 122: }
  4097                           ;dc_motor.c: 123: setMotorPWM(mL);
  4098  0018C4  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4099  0018C8  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4100  0018CC  EC99  F009         	call	_setMotorPWM	;wreg free
  4101                           
  4102                           ;dc_motor.c: 124: setMotorPWM(mR);
  4103  0018D0  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4104  0018D4  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4105  0018D8  EC99  F009         	call	_setMotorPWM	;wreg free
  4106                           
  4107                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4108  0018DC  0E21               	movlw	33
  4109  0018DE                     u3207:
  4110  0018DE  2EE8               	decfsz	wreg,f,c
  4111  0018E0  D7FE               	goto	u3207
  4112  0018E2  F000               	nop	
  4113  0018E4                     l67:
  4114  0018E4  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4115  0018E8  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4116  0018EC  0100               	movlb	0	; () banked
  4117  0018EE  5166               	movf	fullSpeed@power& (0+255),w,b
  4118  0018F0  5CDE               	subwf	postinc2,w,c
  4119  0018F2  A0D8               	btfss	status,0,c
  4120  0018F4  D7CB               	goto	l3002
  4121                           
  4122                           ; BSR set to: 0
  4123  0018F6  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4124  0018FA  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4125  0018FE  0100               	movlb	0	; () banked
  4126  001900  5166               	movf	fullSpeed@power& (0+255),w,b
  4127  001902  5CDE               	subwf	postinc2,w,c
  4128  001904  B0D8               	btfsc	status,0,c
  4129  001906  0012               	return	
  4130  001908  D7C1               	goto	l3002
  4131  00190A                     __end_of_fullSpeed:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           indf1	equ	0xFE7
  4140                           plusw1	equ	0xFE3
  4141                           fsr1h	equ	0xFE2
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _delay_tenth_s *****************
  4152 ;; Defined at:
  4153 ;;		line 32 in file "Movement.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  tenth_second    1    wreg     unsigned char 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4158 ;;  i               2   37[COMRAM] unsigned int 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4168 ;;      Params:         0       0       0       0
  4169 ;;      Locals:         3       0       0       0
  4170 ;;      Temps:          1       0       0       0
  4171 ;;      Totals:         4       0       0       0
  4172 ;;Total ram usage:        4 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    3
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_ScanWithRange
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text13
  4184  001C2C                     __ptext13:
  4185                           	opt stack 0
  4186  001C2C                     _delay_tenth_s:
  4187                           	opt stack 27
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;incstack = 0
  4191                           ;delay_tenth_s@tenth_seconds stored from wreg
  4192  001C2C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4193                           
  4194                           ;Movement.c: 33: unsigned int i=0;
  4195  001C2E  0E00               	movlw	0
  4196  001C30  6E27               	movwf	delay_tenth_s@i+1,c
  4197  001C32  0E00               	movlw	0
  4198  001C34  6E26               	movwf	delay_tenth_s@i,c
  4199                           
  4200                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4201  001C36  0E00               	movlw	0
  4202  001C38  6E27               	movwf	delay_tenth_s@i+1,c
  4203  001C3A  0E01               	movlw	1
  4204  001C3C  6E26               	movwf	delay_tenth_s@i,c
  4205  001C3E  D009               	goto	l2276
  4206  001C40                     l2272:
  4207                           
  4208                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4209  001C40  0E82               	movlw	130
  4210  001C42  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4211  001C44  0EDE               	movlw	222
  4212  001C46                     u3217:
  4213  001C46  2EE8               	decfsz	wreg,f,c
  4214  001C48  D7FE               	goto	u3217
  4215  001C4A  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4216  001C4C  D7FC               	goto	u3217
  4217  001C4E  4A26               	infsnz	delay_tenth_s@i,f,c
  4218  001C50  2A27               	incf	delay_tenth_s@i+1,f,c
  4219  001C52                     l2276:
  4220  001C52  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4221  001C54  0D02               	mullw	2
  4222  001C56  5026               	movf	delay_tenth_s@i,w,c
  4223  001C58  5CF3               	subwf	prodl,w,c
  4224  001C5A  5027               	movf	delay_tenth_s@i+1,w,c
  4225  001C5C  58F4               	subwfb	prodh,w,c
  4226  001C5E  A0D8               	btfss	status,0,c
  4227  001C60  0012               	return	
  4228  001C62  D7EE               	goto	l2272
  4229  001C64                     __end_of_delay_tenth_s:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           prodh	equ	0xFF4
  4233                           prodl	equ	0xFF3
  4234                           intcon	equ	0xFF2
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           indf1	equ	0xFE7
  4238                           plusw1	equ	0xFE3
  4239                           fsr1h	equ	0xFE2
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           plusw2	equ	0xFDB
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function _ScanIR *****************
  4250 ;; Defined at:
  4251 ;;		line 44 in file "Movement.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4254 ;;		 -> main@mL(9), 
  4255 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4256 ;;		 -> main@mR(9), 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4259 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4260 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      unsigned char 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4270 ;;      Params:         0       4       0       0
  4271 ;;      Locals:         0      46       0       0
  4272 ;;      Temps:          1       0       0       0
  4273 ;;      Totals:         1      50       0       0
  4274 ;;Total ram usage:       51 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    7
  4277 ;; This function calls:
  4278 ;;		_LCD_String
  4279 ;;		_SendLCD
  4280 ;;		_SetLine
  4281 ;;		_grabLeftIR
  4282 ;;		_grabRightIR
  4283 ;;		_sprintf
  4284 ;;		_stop
  4285 ;; This function is called by:
  4286 ;;		_main
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text14
  4291  00146C                     __ptext14:
  4292                           	opt stack 0
  4293  00146C                     _ScanIR:
  4294                           	opt stack 23
  4295                           
  4296                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4297                           
  4298                           ;incstack = 0
  4299  00146C  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4300  001470  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4301  001474  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4302  001478  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4303                           
  4304                           ;Movement.c: 48: char buf[40];
  4305                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4306  00147C  0E03               	movlw	3
  4307  00147E  0100               	movlb	0	; () banked
  4308  001480  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4309  001482  0EE8               	movlw	232
  4310  001484  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4314  001486  ECBE  F00C         	call	_grabLeftIR	;wreg free
  4315  00148A  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4316  00148E  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4317                           
  4318                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4319  001492  EC85  F00C         	call	_grabRightIR	;wreg free
  4320  001496  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4321  00149A  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4322                           
  4323                           ;Movement.c: 60: CAP1BUFH=0;
  4324  00149E  0E00               	movlw	0
  4325  0014A0  6E69               	movwf	3945,c	;volatile
  4326                           
  4327                           ;Movement.c: 61: CAP1BUFL=0;
  4328  0014A2  0E00               	movlw	0
  4329  0014A4  6E68               	movwf	3944,c	;volatile
  4330                           
  4331                           ;Movement.c: 62: CAP2BUFH=0;
  4332  0014A6  0E00               	movlw	0
  4333  0014A8  6E67               	movwf	3943,c	;volatile
  4334                           
  4335                           ;Movement.c: 63: CAP2BUFL=0;
  4336  0014AA  0E00               	movlw	0
  4337  0014AC  6E66               	movwf	3942,c	;volatile
  4338                           
  4339                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4340  0014AE  0E00               	movlw	0
  4341  0014B0  6E28               	movwf	SendLCD@type,c
  4342  0014B2  0E01               	movlw	1
  4343  0014B4  EC85  F000         	call	_SendLCD
  4344                           
  4345                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4346  0014B8  0E21               	movlw	33
  4347  0014BA                     u3227:
  4348  0014BA  2EE8               	decfsz	wreg,f,c
  4349  0014BC  D7FE               	goto	u3227
  4350  0014BE  F000               	nop	
  4351                           
  4352                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4353  0014C0  0E00               	movlw	0
  4354  0014C2  6E28               	movwf	SendLCD@type,c
  4355  0014C4  0E02               	movlw	2
  4356  0014C6  EC85  F000         	call	_SendLCD
  4357                           
  4358                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4359  0014CA  0E06               	movlw	6
  4360  0014CC  6E39               	movwf	??_ScanIR& (0+255),c
  4361  0014CE  0E30               	movlw	48
  4362  0014D0                     u3237:
  4363  0014D0  2EE8               	decfsz	wreg,f,c
  4364  0014D2  D7FE               	goto	u3237
  4365  0014D4  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4366  0014D6  D7FC               	goto	u3237
  4367  0014D8  D000               	nop2	
  4368                           
  4369                           ;Movement.c: 70: SetLine(1);
  4370  0014DA  0E01               	movlw	1
  4371  0014DC  EC6D  F000         	call	_SetLine
  4372                           
  4373                           ;Movement.c: 71: LCD_String("     ScanIR");
  4374  0014E0  0E2D               	movlw	low STR_1
  4375  0014E2  6E2A               	movwf	LCD_String@string,c
  4376  0014E4  0E03               	movlw	high STR_1
  4377  0014E6  6E2B               	movwf	LCD_String@string+1,c
  4378  0014E8  ECF7  F00C         	call	_LCD_String	;wreg free
  4379                           
  4380                           ;Movement.c: 72: SetLine(2);
  4381  0014EC  0E02               	movlw	2
  4382  0014EE  EC6D  F000         	call	_SetLine
  4383                           
  4384                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4385  0014F2  0E71               	movlw	low ScanIR@buf
  4386  0014F4  6E30               	movwf	sprintf@sp,c
  4387  0014F6  0E00               	movlw	high ScanIR@buf
  4388  0014F8  6E31               	movwf	sprintf@sp+1,c
  4389  0014FA  0E0C               	movlw	low (STR_6+1)
  4390  0014FC  6E32               	movwf	sprintf@f,c
  4391  0014FE  0E03               	movlw	high (STR_6+1)
  4392  001500  6E33               	movwf	sprintf@f+1,c
  4393  001502  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4394  001506  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4395  00150A  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4396  00150E  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4397  001512  EC16  F008         	call	_sprintf	;wreg free
  4398                           
  4399                           ;Movement.c: 74: LCD_String(buf);
  4400  001516  0E71               	movlw	low ScanIR@buf
  4401  001518  6E2A               	movwf	LCD_String@string,c
  4402  00151A  0E00               	movlw	high ScanIR@buf
  4403  00151C  6E2B               	movwf	LCD_String@string+1,c
  4404  00151E  ECF7  F00C         	call	_LCD_String	;wreg free
  4405                           
  4406                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4407                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4408  001522  0100               	movlb	0	; () banked
  4409  001524  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4410  001526  0100               	movlb	0	; () banked
  4411  001528  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4412  00152A  0100               	movlb	0	; () banked
  4413  00152C  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4414  00152E  0100               	movlb	0	; () banked
  4415  001530  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4416  001532  B0D8               	btfsc	status,0,c
  4417  001534  D00C               	goto	l3202
  4418                           
  4419                           ; BSR set to: 0
  4420  001536  0100               	movlb	0	; () banked
  4421  001538  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4422  00153A  0100               	movlb	0	; () banked
  4423  00153C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4424  00153E  0100               	movlb	0	; () banked
  4425  001540  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4426  001542  0100               	movlb	0	; () banked
  4427  001544  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4428  001546  B0D8               	btfsc	status,0,c
  4429  001548  D002               	goto	l3202
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;Movement.c: 80: return 2;
  4433  00154A  0E02               	movlw	2
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;Movement.c: 81: } else {
  4437                           
  4438                           ; BSR set to: 0
  4439  00154C  0012               	return	
  4440  00154E                     l3202:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;Movement.c: 82: stop(mL,mR);
  4444  00154E  C06D  F062         	movff	ScanIR@mL,stop@mL
  4445  001552  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4446  001556  C06F  F064         	movff	ScanIR@mR,stop@mR
  4447  00155A  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4448  00155E  EC74  F00B         	call	_stop	;wreg free
  4449                           
  4450                           ;Movement.c: 83: return 0;
  4451  001562  0E00               	movlw	0
  4452  001564  0012               	return	
  4453  001566                     __end_of_ScanIR:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           postinc0	equ	0xFEE
  4460                           wreg	equ	0xFE8
  4461                           indf1	equ	0xFE7
  4462                           plusw1	equ	0xFE3
  4463                           fsr1h	equ	0xFE2
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           plusw2	equ	0xFDB
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _stop *****************
  4474 ;; Defined at:
  4475 ;;		line 72 in file "dc_motor.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4478 ;;		 -> main@mL(9), 
  4479 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4480 ;;		 -> main@mR(9), 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;		None               void
  4485 ;; Registers used:
  4486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4492 ;;      Params:         0       4       0       0
  4493 ;;      Locals:         0       0       0       0
  4494 ;;      Temps:          0       0       0       0
  4495 ;;      Totals:         0       4       0       0
  4496 ;;Total ram usage:        4 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    5
  4499 ;; This function calls:
  4500 ;;		_setMotorPWM
  4501 ;; This function is called by:
  4502 ;;		_ScanIR
  4503 ;;		_ScanWithRange
  4504 ;;		_main
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text15
  4509  0016E8                     __ptext15:
  4510                           	opt stack 0
  4511  0016E8                     _stop:
  4512                           	opt stack 25
  4513                           
  4514                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4515                           
  4516                           ;incstack = 0
  4517  0016E8  D028               	goto	l3034
  4518  0016EA                     l3020:
  4519                           
  4520                           ;dc_motor.c: 76: if(mL->power>0){
  4521  0016EA  C062  FFD9         	movff	stop@mL,fsr2l
  4522  0016EE  C063  FFDA         	movff	stop@mL+1,fsr2h
  4523  0016F2  50DF               	movf	indf2,w,c
  4524  0016F4  B4D8               	btfsc	status,2,c
  4525  0016F6  D005               	goto	l3024
  4526                           
  4527                           ;dc_motor.c: 77: mL->power--;
  4528  0016F8  C062  FFD9         	movff	stop@mL,fsr2l
  4529  0016FC  C063  FFDA         	movff	stop@mL+1,fsr2h
  4530  001700  06DF               	decf	indf2,f,c
  4531  001702                     l3024:
  4532                           
  4533                           ;dc_motor.c: 78: }
  4534                           ;dc_motor.c: 79: if(mR->power>0){
  4535  001702  C064  FFD9         	movff	stop@mR,fsr2l
  4536  001706  C065  FFDA         	movff	stop@mR+1,fsr2h
  4537  00170A  50DF               	movf	indf2,w,c
  4538  00170C  B4D8               	btfsc	status,2,c
  4539  00170E  D005               	goto	l3028
  4540                           
  4541                           ;dc_motor.c: 80: mR->power--;
  4542  001710  C064  FFD9         	movff	stop@mR,fsr2l
  4543  001714  C065  FFDA         	movff	stop@mR+1,fsr2h
  4544  001718  06DF               	decf	indf2,f,c
  4545  00171A                     l3028:
  4546                           
  4547                           ;dc_motor.c: 81: }
  4548                           ;dc_motor.c: 82: setMotorPWM(mL);
  4549  00171A  C062  F032         	movff	stop@mL,setMotorPWM@m
  4550  00171E  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4551  001722  EC99  F009         	call	_setMotorPWM	;wreg free
  4552                           
  4553                           ;dc_motor.c: 83: setMotorPWM(mR);
  4554  001726  C064  F032         	movff	stop@mR,setMotorPWM@m
  4555  00172A  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4556  00172E  EC99  F009         	call	_setMotorPWM	;wreg free
  4557                           
  4558                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4559  001732  0E21               	movlw	33
  4560  001734                     u3247:
  4561  001734  2EE8               	decfsz	wreg,f,c
  4562  001736  D7FE               	goto	u3247
  4563  001738  F000               	nop	
  4564  00173A                     l3034:
  4565  00173A  C062  FFD9         	movff	stop@mL,fsr2l
  4566  00173E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4567  001742  50DF               	movf	indf2,w,c
  4568  001744  A4D8               	btfss	status,2,c
  4569  001746  D7D1               	goto	l3020
  4570  001748  C064  FFD9         	movff	stop@mR,fsr2l
  4571  00174C  C065  FFDA         	movff	stop@mR+1,fsr2h
  4572  001750  50DF               	movf	indf2,w,c
  4573  001752  A4D8               	btfss	status,2,c
  4574  001754  D7CA               	goto	l3020
  4575                           
  4576                           ;dc_motor.c: 85: }
  4577                           ;dc_motor.c: 86: mL->direction=1;
  4578  001756  0100               	movlb	0	; () banked
  4579  001758  EE20 F001          	lfsr	2,1
  4580  00175C  5162               	movf	stop@mL& (0+255),w,b
  4581  00175E  26D9               	addwf	fsr2l,f,c
  4582  001760  5163               	movf	(stop@mL+1)& (0+255),w,b
  4583  001762  22DA               	addwfc	fsr2h,f,c
  4584  001764  0E01               	movlw	1
  4585  001766  6EDF               	movwf	indf2,c
  4586                           
  4587                           ;dc_motor.c: 87: mR->direction=1;
  4588  001768  0100               	movlb	0	; () banked
  4589  00176A  EE20 F001          	lfsr	2,1
  4590  00176E  5164               	movf	stop@mR& (0+255),w,b
  4591  001770  26D9               	addwf	fsr2l,f,c
  4592  001772  5165               	movf	(stop@mR+1)& (0+255),w,b
  4593  001774  22DA               	addwfc	fsr2h,f,c
  4594  001776  0E01               	movlw	1
  4595  001778  6EDF               	movwf	indf2,c
  4596                           
  4597                           ; BSR set to: 0
  4598  00177A  0012               	return		;funcret
  4599  00177C                     __end_of_stop:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf1	equ	0xFE7
  4608                           plusw1	equ	0xFE3
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _setMotorPWM *****************
  4620 ;; Defined at:
  4621 ;;		line 31 in file "dc_motor.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4624 ;;		 -> main@mR(9), main@mL(9), 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  PWMduty         2    0[BANK0 ] int 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4636 ;;      Params:         2       0       0       0
  4637 ;;      Locals:         0       2       0       0
  4638 ;;      Temps:          5       0       0       0
  4639 ;;      Totals:         7       2       0       0
  4640 ;;Total ram usage:        9 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    4
  4643 ;; This function calls:
  4644 ;;		___awdiv
  4645 ;;		___wmul
  4646 ;; This function is called by:
  4647 ;;		_stop
  4648 ;;		_fullSpeed
  4649 ;;		_setMotorFullSpeed
  4650 ;;		_stopMotor
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text16
  4655  001332                     __ptext16:
  4656                           	opt stack 0
  4657  001332                     _setMotorPWM:
  4658                           	opt stack 24
  4659                           
  4660                           ;dc_motor.c: 33: int PWMduty;
  4661                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;incstack = 0
  4665  001332  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4666  001336  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4667  00133A  50DF               	movf	indf2,w,c
  4668  00133C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4669  00133E  5034               	movf	??_setMotorPWM,w,c
  4670  001340  6E24               	movwf	___wmul@multiplier,c
  4671  001342  6A25               	clrf	___wmul@multiplier+1,c
  4672  001344  EE20 F007          	lfsr	2,7
  4673  001348  5032               	movf	setMotorPWM@m,w,c
  4674  00134A  26D9               	addwf	fsr2l,f,c
  4675  00134C  5033               	movf	setMotorPWM@m+1,w,c
  4676  00134E  22DA               	addwfc	fsr2h,f,c
  4677  001350  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4678  001354  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4679  001358  EC9D  F000         	call	___wmul	;wreg free
  4680  00135C  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4681  001360  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4682  001364  0E00               	movlw	0
  4683  001366  6E2D               	movwf	___awdiv@divisor+1,c
  4684  001368  0E64               	movlw	100
  4685  00136A  6E2C               	movwf	___awdiv@divisor,c
  4686  00136C  EC03  F00C         	call	___awdiv	;wreg free
  4687  001370  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4688  001374  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4689                           
  4690                           ;dc_motor.c: 37: if (m->direction)
  4691  001378  EE20 F001          	lfsr	2,1
  4692  00137C  5032               	movf	setMotorPWM@m,w,c
  4693  00137E  26D9               	addwf	fsr2l,f,c
  4694  001380  5033               	movf	setMotorPWM@m+1,w,c
  4695  001382  22DA               	addwfc	fsr2h,f,c
  4696  001384  50DF               	movf	indf2,w,c
  4697  001386  B4D8               	btfsc	status,2,c
  4698  001388  D02E               	goto	l2998
  4699                           
  4700                           ;dc_motor.c: 38: {
  4701                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4702  00138A  EE20 F006          	lfsr	2,6
  4703  00138E  5032               	movf	setMotorPWM@m,w,c
  4704  001390  26D9               	addwf	fsr2l,f,c
  4705  001392  5033               	movf	setMotorPWM@m+1,w,c
  4706  001394  22DA               	addwfc	fsr2h,f,c
  4707  001396  50DF               	movf	indf2,w,c
  4708  001398  6E34               	movwf	??_setMotorPWM& (0+255),c
  4709  00139A  0E01               	movlw	1
  4710  00139C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4711  00139E  2A34               	incf	??_setMotorPWM,f,c
  4712  0013A0  D002               	goto	u2384
  4713  0013A2                     u2385:
  4714  0013A2  90D8               	bcf	status,0,c
  4715  0013A4  3635               	rlcf	??_setMotorPWM+1,f,c
  4716  0013A6                     u2384:
  4717  0013A6  2E34               	decfsz	??_setMotorPWM,f,c
  4718  0013A8  D7FC               	goto	u2385
  4719  0013AA  5035               	movf	??_setMotorPWM+1,w,c
  4720  0013AC  108A               	iorwf	3978,w,c	;volatile
  4721  0013AE  6E8A               	movwf	3978,c	;volatile
  4722                           
  4723                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4724  0013B0  EE20 F007          	lfsr	2,7
  4725  0013B4  5032               	movf	setMotorPWM@m,w,c
  4726  0013B6  26D9               	addwf	fsr2l,f,c
  4727  0013B8  5033               	movf	setMotorPWM@m+1,w,c
  4728  0013BA  22DA               	addwfc	fsr2h,f,c
  4729  0013BC  CFDE F034          	movff	postinc2,??_setMotorPWM
  4730  0013C0  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4731  0013C4  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4732  0013C8  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4733  0013CC  1E36               	comf	??_setMotorPWM+2,f,c
  4734  0013CE  1E37               	comf	??_setMotorPWM+3,f,c
  4735  0013D0  4A36               	infsnz	??_setMotorPWM+2,f,c
  4736  0013D2  2A37               	incf	??_setMotorPWM+3,f,c
  4737  0013D4  5034               	movf	??_setMotorPWM,w,c
  4738  0013D6  2436               	addwf	??_setMotorPWM+2,w,c
  4739  0013D8  0100               	movlb	0	; () banked
  4740  0013DA  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4741  0013DC  5035               	movf	??_setMotorPWM+1,w,c
  4742  0013DE  2037               	addwfc	??_setMotorPWM+3,w,c
  4743  0013E0  0100               	movlb	0	; () banked
  4744  0013E2  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4745                           
  4746                           ;dc_motor.c: 41: }
  4747  0013E4  D014               	goto	l37
  4748  0013E6                     l2998:
  4749                           
  4750                           ;dc_motor.c: 42: else
  4751                           ;dc_motor.c: 43: {
  4752                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4753  0013E6  EE20 F006          	lfsr	2,6
  4754  0013EA  5032               	movf	setMotorPWM@m,w,c
  4755  0013EC  26D9               	addwf	fsr2l,f,c
  4756  0013EE  5033               	movf	setMotorPWM@m+1,w,c
  4757  0013F0  22DA               	addwfc	fsr2h,f,c
  4758  0013F2  50DF               	movf	indf2,w,c
  4759  0013F4  6E34               	movwf	??_setMotorPWM& (0+255),c
  4760  0013F6  0E01               	movlw	1
  4761  0013F8  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4762  0013FA  2A34               	incf	??_setMotorPWM,f,c
  4763  0013FC  D002               	goto	u2394
  4764  0013FE                     u2395:
  4765  0013FE  90D8               	bcf	status,0,c
  4766  001400  3635               	rlcf	??_setMotorPWM+1,f,c
  4767  001402                     u2394:
  4768  001402  2E34               	decfsz	??_setMotorPWM,f,c
  4769  001404  D7FC               	goto	u2395
  4770  001406  5035               	movf	??_setMotorPWM+1,w,c
  4771  001408  0AFF               	xorlw	255
  4772  00140A  148A               	andwf	3978,w,c	;volatile
  4773  00140C  6E8A               	movwf	3978,c	;volatile
  4774  00140E                     l37:
  4775                           
  4776                           ;dc_motor.c: 45: }
  4777                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4778  00140E  EE20 F002          	lfsr	2,2
  4779  001412  5032               	movf	setMotorPWM@m,w,c
  4780  001414  26D9               	addwf	fsr2l,f,c
  4781  001416  5033               	movf	setMotorPWM@m+1,w,c
  4782  001418  22DA               	addwfc	fsr2h,f,c
  4783  00141A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4784  00141E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4785  001422  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4786  001426  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4787  00142A  0100               	movlb	0	; () banked
  4788  00142C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4789  00142E  46E8               	rlncf	wreg,f,c
  4790  001430  0BFC               	andlw	252
  4791  001432  6EDF               	movwf	indf2,c
  4792                           
  4793                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4794  001434  EE20 F004          	lfsr	2,4
  4795  001438  5032               	movf	setMotorPWM@m,w,c
  4796  00143A  26D9               	addwf	fsr2l,f,c
  4797  00143C  5033               	movf	setMotorPWM@m+1,w,c
  4798  00143E  22DA               	addwfc	fsr2h,f,c
  4799  001440  CFDE F034          	movff	postinc2,??_setMotorPWM
  4800  001444  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4801  001448  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4802  00144C  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4803  001450  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4804  001454  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4805  001458  0E06               	movlw	6
  4806  00145A  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4807  00145C                     u2405:
  4808  00145C  3437               	rlcf	??_setMotorPWM+3,w,c
  4809  00145E  3237               	rrcf	??_setMotorPWM+3,f,c
  4810  001460  3236               	rrcf	??_setMotorPWM+2,f,c
  4811  001462  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4812  001464  D7FB               	goto	u2405
  4813  001466  5036               	movf	??_setMotorPWM+2,w,c
  4814  001468  6EDF               	movwf	indf2,c
  4815                           
  4816                           ; BSR set to: 0
  4817  00146A  0012               	return		;funcret
  4818  00146C                     __end_of_setMotorPWM:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           intcon	equ	0xFF2
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           indf1	equ	0xFE7
  4827                           plusw1	equ	0xFE3
  4828                           fsr1h	equ	0xFE2
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           plusw2	equ	0xFDB
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function ___awdiv *****************
  4839 ;; Defined at:
  4840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  dividend        2   41[COMRAM] int 
  4843 ;;  divisor         2   43[COMRAM] int 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  quotient        2   47[COMRAM] int 
  4846 ;;  sign            1   46[COMRAM] unsigned char 
  4847 ;;  counter         1   45[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  2   41[COMRAM] int 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4857 ;;      Params:         4       0       0       0
  4858 ;;      Locals:         4       0       0       0
  4859 ;;      Temps:          0       0       0       0
  4860 ;;      Totals:         8       0       0       0
  4861 ;;Total ram usage:        8 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    3
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_setMotorPWM
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text17
  4872  001806                     __ptext17:
  4873                           	opt stack 0
  4874  001806                     ___awdiv:
  4875                           	opt stack 24
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;incstack = 0
  4879  001806  0E00               	movlw	0
  4880  001808  6E2F               	movwf	___awdiv@sign,c
  4881  00180A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4882  00180C  D006               	goto	l2956
  4883  00180E  6C2C               	negf	___awdiv@divisor,c
  4884  001810  1E2D               	comf	___awdiv@divisor+1,f,c
  4885  001812  B0D8               	btfsc	status,0,c
  4886  001814  2A2D               	incf	___awdiv@divisor+1,f,c
  4887  001816  0E01               	movlw	1
  4888  001818  6E2F               	movwf	___awdiv@sign,c
  4889  00181A                     l2956:
  4890  00181A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4891  00181C  D006               	goto	l2962
  4892  00181E  6C2A               	negf	___awdiv@dividend,c
  4893  001820  1E2B               	comf	___awdiv@dividend+1,f,c
  4894  001822  B0D8               	btfsc	status,0,c
  4895  001824  2A2B               	incf	___awdiv@dividend+1,f,c
  4896  001826  0E01               	movlw	1
  4897  001828  1A2F               	xorwf	___awdiv@sign,f,c
  4898  00182A                     l2962:
  4899  00182A  0E00               	movlw	0
  4900  00182C  6E31               	movwf	___awdiv@quotient+1,c
  4901  00182E  0E00               	movlw	0
  4902  001830  6E30               	movwf	___awdiv@quotient,c
  4903  001832  502C               	movf	___awdiv@divisor,w,c
  4904  001834  102D               	iorwf	___awdiv@divisor+1,w,c
  4905  001836  B4D8               	btfsc	status,2,c
  4906  001838  D01C               	goto	l2984
  4907  00183A  0E01               	movlw	1
  4908  00183C  6E2E               	movwf	___awdiv@counter,c
  4909  00183E  D004               	goto	l2970
  4910  001840                     l2968:
  4911  001840  90D8               	bcf	status,0,c
  4912  001842  362C               	rlcf	___awdiv@divisor,f,c
  4913  001844  362D               	rlcf	___awdiv@divisor+1,f,c
  4914  001846  2A2E               	incf	___awdiv@counter,f,c
  4915  001848                     l2970:
  4916  001848  AE2D               	btfss	___awdiv@divisor+1,7,c
  4917  00184A  D7FA               	goto	l2968
  4918  00184C                     l2972:
  4919  00184C  90D8               	bcf	status,0,c
  4920  00184E  3630               	rlcf	___awdiv@quotient,f,c
  4921  001850  3631               	rlcf	___awdiv@quotient+1,f,c
  4922  001852  502C               	movf	___awdiv@divisor,w,c
  4923  001854  5C2A               	subwf	___awdiv@dividend,w,c
  4924  001856  502D               	movf	___awdiv@divisor+1,w,c
  4925  001858  582B               	subwfb	___awdiv@dividend+1,w,c
  4926  00185A  A0D8               	btfss	status,0,c
  4927  00185C  D005               	goto	l2980
  4928  00185E  502C               	movf	___awdiv@divisor,w,c
  4929  001860  5E2A               	subwf	___awdiv@dividend,f,c
  4930  001862  502D               	movf	___awdiv@divisor+1,w,c
  4931  001864  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4932  001866  8030               	bsf	___awdiv@quotient,0,c
  4933  001868                     l2980:
  4934  001868  90D8               	bcf	status,0,c
  4935  00186A  322D               	rrcf	___awdiv@divisor+1,f,c
  4936  00186C  322C               	rrcf	___awdiv@divisor,f,c
  4937  00186E  2E2E               	decfsz	___awdiv@counter,f,c
  4938  001870  D7ED               	goto	l2972
  4939  001872                     l2984:
  4940  001872  502F               	movf	___awdiv@sign,w,c
  4941  001874  B4D8               	btfsc	status,2,c
  4942  001876  D004               	goto	l2988
  4943  001878  6C30               	negf	___awdiv@quotient,c
  4944  00187A  1E31               	comf	___awdiv@quotient+1,f,c
  4945  00187C  B0D8               	btfsc	status,0,c
  4946  00187E  2A31               	incf	___awdiv@quotient+1,f,c
  4947  001880                     l2988:
  4948  001880  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4949  001884  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4950  001888  0012               	return	
  4951  00188A                     __end_of___awdiv:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           indf1	equ	0xFE7
  4960                           plusw1	equ	0xFE3
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           plusw2	equ	0xFDB
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _sprintf *****************
  4972 ;; Defined at:
  4973 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4976 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4977 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4978 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  tmpval          4    0        struct .
  4981 ;;  cp              3    0        PTR const unsigned char 
  4982 ;;  width           2   10[BANK0 ] int 
  4983 ;;  val             2    7[BANK0 ] unsigned int 
  4984 ;;  ap              2    4[BANK0 ] PTR void [1]
  4985 ;;		 -> ?_sprintf(2), 
  4986 ;;  len             2    0        unsigned int 
  4987 ;;  c               1   12[BANK0 ] char 
  4988 ;;  flag            1    9[BANK0 ] unsigned char 
  4989 ;;  prec            1    6[BANK0 ] char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  2   47[COMRAM] int 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4999 ;;      Params:         8       0       0       0
  5000 ;;      Locals:         0       9       0       0
  5001 ;;      Temps:          0       4       0       0
  5002 ;;      Totals:         8      13       0       0
  5003 ;;Total ram usage:       21 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    4
  5006 ;; This function calls:
  5007 ;;		___lwdiv
  5008 ;;		___lwmod
  5009 ;;		___wmul
  5010 ;;		_isdigit
  5011 ;; This function is called by:
  5012 ;;		_ScanIR
  5013 ;;		_ScanWithRange
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text18
  5019  00102C                     __ptext18:
  5020                           	opt stack 0
  5021  00102C                     _sprintf:
  5022                           	opt stack 26
  5023                           
  5024                           ;doprnt.c: 494: va_list ap;
  5025                           ;doprnt.c: 499: signed char c;
  5026                           ;doprnt.c: 501: int width;
  5027                           ;doprnt.c: 506: signed char prec;
  5028                           ;doprnt.c: 508: unsigned char flag;
  5029                           ;doprnt.c: 523: union {
  5030                           ;doprnt.c: 524: unsigned long vd;
  5031                           ;doprnt.c: 525: double integ;
  5032                           ;doprnt.c: 526: } tmpval;
  5033                           ;doprnt.c: 528: unsigned int val;
  5034                           ;doprnt.c: 529: unsigned len;
  5035                           ;doprnt.c: 530: const char * cp;
  5036                           ;doprnt.c: 533: *ap = __va_start();
  5037                           
  5038                           ;incstack = 0
  5039  00102C  0E34               	movlw	low (?_sprintf+4)
  5040  00102E  0100               	movlb	0	; () banked
  5041  001030  6F64               	movwf	sprintf@ap& (0+255),b
  5042  001032  0E00               	movlw	high (?_sprintf+4)
  5043  001034  0100               	movlb	0	; () banked
  5044  001036  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5045                           
  5046                           ;doprnt.c: 536: while(c = *f++) {
  5047  001038  D168               	goto	l3156
  5048  00103A                     l3050:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;doprnt.c: 538: if(c != '%')
  5052  00103A  0E25               	movlw	37
  5053  00103C  0100               	movlb	0	; () banked
  5054  00103E  196C               	xorwf	sprintf@c& (0+255),w,b
  5055  001040  B4D8               	btfsc	status,2,c
  5056  001042  D009               	goto	l3056
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;doprnt.c: 540: {
  5060                           ;doprnt.c: 541: ((*sp++ = (c)));
  5061  001044  C030  FFD9         	movff	sprintf@sp,fsr2l
  5062  001048  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5063  00104C  C06C  FFDF         	movff	sprintf@c,indf2
  5064                           
  5065                           ; BSR set to: 0
  5066  001050  4A30               	infsnz	sprintf@sp,f,c
  5067  001052  2A31               	incf	sprintf@sp+1,f,c
  5068                           
  5069                           ;doprnt.c: 542: continue;
  5070  001054  D15A               	goto	l3156
  5071  001056                     l3056:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;doprnt.c: 543: }
  5075                           ;doprnt.c: 546: width = 0;
  5076  001056  0E00               	movlw	0
  5077  001058  0100               	movlb	0	; () banked
  5078  00105A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5079  00105C  0E00               	movlw	0
  5080  00105E  6F6A               	movwf	sprintf@width& (0+255),b
  5081                           
  5082                           ;doprnt.c: 548: flag = 0;
  5083  001060  0E00               	movlw	0
  5084  001062  0100               	movlb	0	; () banked
  5085  001064  6F69               	movwf	sprintf@flag& (0+255),b
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;doprnt.c: 551: switch(*f) {
  5089                           
  5090                           ;doprnt.c: 550: for(;;) {
  5091  001066  D004               	goto	l3062
  5092  001068                     l3058:
  5093                           
  5094                           ;doprnt.c: 580: flag |= 0x04;
  5095  001068  0100               	movlb	0	; () banked
  5096  00106A  8569               	bsf	sprintf@flag& (0+255),2,b
  5097                           
  5098                           ;doprnt.c: 581: f++;
  5099  00106C  4A32               	infsnz	sprintf@f,f,c
  5100  00106E  2A33               	incf	sprintf@f+1,f,c
  5101  001070                     l3062:
  5102  001070  C032  FFF6         	movff	sprintf@f,tblptrl
  5103  001074  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5104  001078                     	if	0	;tblptru may be non-zero
  5105  001078                     	endif
  5106  001078                     	if	0	;tblptru may be non-zero
  5107  001078                     	endif
  5108  001078  0008               	tblrd		*
  5109  00107A  50F5               	movf	tablat,w,c
  5110                           
  5111                           ; Switch size 1, requested type "space"
  5112                           ; Number of cases is 1, Range of values is 48 to 48
  5113                           ; switch strategies available:
  5114                           ; Name         Instructions Cycles
  5115                           ; simple_byte            4     3 (average)
  5116                           ;	Chosen strategy is simple_byte
  5117  00107C  0A30               	xorlw	48	; case 48
  5118  00107E  B4D8               	btfsc	status,2,c
  5119  001080  D7F3               	goto	l3058
  5120                           
  5121                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5122                           
  5123                           ;doprnt.c: 586: }
  5124                           
  5125                           ;doprnt.c: 585: break;
  5126  001082  C032  FFF6         	movff	sprintf@f,tblptrl
  5127  001086  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5128  00108A                     	if	0	;tblptru may be non-zero
  5129  00108A                     	endif
  5130  00108A                     	if	0	;tblptru may be non-zero
  5131  00108A                     	endif
  5132  00108A  0008               	tblrd		*
  5133  00108C  50F5               	movf	tablat,w,c
  5134  00108E  ECC1  F000         	call	_isdigit
  5135  001092  A0D8               	btfss	status,0,c
  5136  001094  D03E               	goto	l3078
  5137                           
  5138                           ;doprnt.c: 598: width = 0;
  5139  001096  0E00               	movlw	0
  5140  001098  0100               	movlb	0	; () banked
  5141  00109A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5142  00109C  0E00               	movlw	0
  5143  00109E  6F6A               	movwf	sprintf@width& (0+255),b
  5144  0010A0                     l3068:
  5145                           
  5146                           ;doprnt.c: 600: width *= 10;
  5147  0010A0  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5148  0010A4  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5149  0010A8  0E00               	movlw	0
  5150  0010AA  6E27               	movwf	___wmul@multiplicand+1,c
  5151  0010AC  0E0A               	movlw	10
  5152  0010AE  6E26               	movwf	___wmul@multiplicand,c
  5153  0010B0  EC9D  F000         	call	___wmul	;wreg free
  5154  0010B4  C024  F06A         	movff	?___wmul,sprintf@width
  5155  0010B8  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5156                           
  5157                           ;doprnt.c: 601: width += *f++ - '0';
  5158  0010BC  0ED0               	movlw	208
  5159  0010BE  0100               	movlb	0	; () banked
  5160  0010C0  6F60               	movwf	??_sprintf& (0+255),b
  5161  0010C2  0EFF               	movlw	255
  5162  0010C4  0100               	movlb	0	; () banked
  5163  0010C6  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5164  0010C8  C032  FFF6         	movff	sprintf@f,tblptrl
  5165  0010CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5166  0010D0                     	if	0	;tblptru may be non-zero
  5167  0010D0                     	endif
  5168  0010D0                     	if	0	;tblptru may be non-zero
  5169  0010D0                     	endif
  5170  0010D0  0008               	tblrd		*
  5171  0010D2  50F5               	movf	tablat,w,c
  5172  0010D4  0100               	movlb	0	; () banked
  5173  0010D6  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5174  0010D8  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5175  0010DA  0100               	movlb	0	; () banked
  5176  0010DC  5160               	movf	??_sprintf& (0+255),w,b
  5177  0010DE  0100               	movlb	0	; () banked
  5178  0010E0  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5179  0010E2  0100               	movlb	0	; () banked
  5180  0010E4  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5181  0010E6  0100               	movlb	0	; () banked
  5182  0010E8  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5183  0010EA  0100               	movlb	0	; () banked
  5184  0010EC  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5185  0010EE  0100               	movlb	0	; () banked
  5186  0010F0  276A               	addwf	sprintf@width& (0+255),f,b
  5187  0010F2  0100               	movlb	0	; () banked
  5188  0010F4  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5189  0010F6  0100               	movlb	0	; () banked
  5190  0010F8  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5191                           
  5192                           ; BSR set to: 0
  5193  0010FA  4A32               	infsnz	sprintf@f,f,c
  5194  0010FC  2A33               	incf	sprintf@f+1,f,c
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5198  0010FE  C032  FFF6         	movff	sprintf@f,tblptrl
  5199  001102  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5200  001106                     	if	0	;tblptru may be non-zero
  5201  001106                     	endif
  5202  001106                     	if	0	;tblptru may be non-zero
  5203  001106                     	endif
  5204  001106  0008               	tblrd		*
  5205  001108  50F5               	movf	tablat,w,c
  5206  00110A  ECC1  F000         	call	_isdigit
  5207  00110E  B0D8               	btfsc	status,0,c
  5208  001110  D7C7               	goto	l3068
  5209  001112                     l3078:
  5210  001112  C032  FFF6         	movff	sprintf@f,tblptrl
  5211  001116  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5212  00111A  4A32               	infsnz	sprintf@f,f,c
  5213  00111C  2A33               	incf	sprintf@f+1,f,c
  5214  00111E                     	if	0	;tblptru may be non-zero
  5215  00111E                     	endif
  5216  00111E                     	if	0	;tblptru may be non-zero
  5217  00111E                     	endif
  5218  00111E  0008               	tblrd		*
  5219  001120  CFF5 F06C          	movff	tablat,sprintf@c
  5220  001124  0100               	movlb	0	; () banked
  5221  001126  516C               	movf	sprintf@c& (0+255),w,b
  5222                           
  5223                           ; Switch size 1, requested type "space"
  5224                           ; Number of cases is 3, Range of values is 0 to 105
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte           10     6 (average)
  5228                           ;	Chosen strategy is simple_byte
  5229  001128  0A00               	xorlw	0	; case 0
  5230  00112A  B4D8               	btfsc	status,2,c
  5231  00112C  D0FB               	goto	l3158
  5232  00112E  0A64               	xorlw	100	; case 100
  5233  001130  B4D8               	btfsc	status,2,c
  5234  001132  D003               	goto	l3080
  5235  001134  0A0D               	xorlw	13	; case 105
  5236  001136  A4D8               	btfss	status,2,c
  5237  001138  D0E8               	goto	l3156
  5238  00113A                     l3080:
  5239                           
  5240                           ;doprnt.c: 1253: {
  5241                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5242  00113A  C064  FFD9         	movff	sprintf@ap,fsr2l
  5243  00113E  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5244  001142  CFDE F067          	movff	postinc2,sprintf@val
  5245  001146  CFDD F068          	movff	postdec2,sprintf@val+1
  5246  00114A  0E02               	movlw	2
  5247  00114C  0100               	movlb	0	; () banked
  5248  00114E  2764               	addwf	sprintf@ap& (0+255),f,b
  5249  001150  0E00               	movlw	0
  5250  001152  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;doprnt.c: 1261: if((int)val < 0) {
  5254  001154  0100               	movlb	0	; () banked
  5255  001156  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5256  001158  D008               	goto	l3090
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;doprnt.c: 1262: flag |= 0x03;
  5260  00115A  0E03               	movlw	3
  5261  00115C  0100               	movlb	0	; () banked
  5262  00115E  1369               	iorwf	sprintf@flag& (0+255),f,b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 1263: val = -val;
  5266  001160  0100               	movlb	0	; () banked
  5267  001162  6D67               	negf	sprintf@val& (0+255),b
  5268  001164  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5269  001166  B0D8               	btfsc	status,0,c
  5270  001168  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5271  00116A                     l3090:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;doprnt.c: 1264: }
  5275                           ;doprnt.c: 1266: }
  5276                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5277  00116A  0E01               	movlw	1
  5278  00116C  0100               	movlb	0	; () banked
  5279  00116E  6F6C               	movwf	sprintf@c& (0+255),b
  5280  001170                     l3092:
  5281                           
  5282                           ; BSR set to: 0
  5283  001170  0E05               	movlw	5
  5284  001172  0100               	movlb	0	; () banked
  5285  001174  196C               	xorwf	sprintf@c& (0+255),w,b
  5286  001176  B4D8               	btfsc	status,2,c
  5287  001178  D016               	goto	l3104
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 1306: if(val < dpowers[c])
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  00117A  0100               	movlb	0	; () banked
  5296  00117C  516C               	movf	sprintf@c& (0+255),w,b
  5297  00117E  0D02               	mullw	2
  5298  001180  0E01               	movlw	low _dpowers
  5299  001182  24F3               	addwf	prodl,w,c
  5300  001184  6EF6               	movwf	tblptrl,c
  5301  001186  0E03               	movlw	high _dpowers
  5302  001188  20F4               	addwfc	prodh,w,c
  5303  00118A  6EF7               	movwf	tblptrh,c
  5304  00118C                     	if	0	;There are less than 3 active tblptr bytes
  5305  00118C                     	endif
  5306  00118C  0009               	tblrd		*+
  5307  00118E  50F5               	movf	tablat,w,c
  5308  001190  0100               	movlb	0	; () banked
  5309  001192  5D67               	subwf	sprintf@val& (0+255),w,b
  5310  001194  0009               	tblrd		*+
  5311  001196  50F5               	movf	tablat,w,c
  5312  001198  0100               	movlb	0	; () banked
  5313  00119A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5314  00119C  A0D8               	btfss	status,0,c
  5315  00119E  D003               	goto	l3104
  5316                           
  5317                           ; BSR set to: 0
  5318                           
  5319                           ; BSR set to: 0
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;doprnt.c: 1307: break;
  5323  0011A0  0100               	movlb	0	; () banked
  5324  0011A2  2B6C               	incf	sprintf@c& (0+255),f,b
  5325  0011A4  D7E5               	goto	l3092
  5326  0011A6                     l3104:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5330  0011A6  0100               	movlb	0	; () banked
  5331  0011A8  516A               	movf	sprintf@width& (0+255),w,b
  5332  0011AA  0100               	movlb	0	; () banked
  5333  0011AC  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5334  0011AE  B4D8               	btfsc	status,2,c
  5335  0011B0  D00B               	goto	l3110
  5336                           
  5337                           ; BSR set to: 0
  5338  0011B2  C069  F060         	movff	sprintf@flag,??_sprintf
  5339  0011B6  0E03               	movlw	3
  5340  0011B8  0100               	movlb	0	; () banked
  5341  0011BA  1760               	andwf	??_sprintf& (0+255),f,b
  5342  0011BC  B4D8               	btfsc	status,2,c
  5343  0011BE  D004               	goto	l3110
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;doprnt.c: 1346: width--;
  5347  0011C0  0100               	movlb	0	; () banked
  5348  0011C2  076A               	decf	sprintf@width& (0+255),f,b
  5349  0011C4  A0D8               	btfss	status,0,c
  5350  0011C6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5351  0011C8                     l3110:
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;doprnt.c: 1381: if(width > c)
  5355  0011C8  0E80               	movlw	128
  5356  0011CA  0100               	movlb	0	; () banked
  5357  0011CC  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5358  0011CE  0E7F               	movlw	127
  5359  0011D0  0100               	movlb	0	; () banked
  5360  0011D2  6F60               	movwf	??_sprintf& (0+255),b
  5361  0011D4  0100               	movlb	0	; () banked
  5362  0011D6  516A               	movf	sprintf@width& (0+255),w,b
  5363  0011D8  0100               	movlb	0	; () banked
  5364  0011DA  5D6C               	subwf	sprintf@c& (0+255),w,b
  5365  0011DC  0100               	movlb	0	; () banked
  5366  0011DE  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5367  0011E0  0A80               	xorlw	128
  5368  0011E2  0100               	movlb	0	; () banked
  5369  0011E4  5960               	subwfb	??_sprintf& (0+255),w,b
  5370  0011E6  B0D8               	btfsc	status,0,c
  5371  0011E8  D00B               	goto	l3114
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1382: width -= c;
  5375  0011EA  0100               	movlb	0	; () banked
  5376  0011EC  516C               	movf	sprintf@c& (0+255),w,b
  5377  0011EE  0100               	movlb	0	; () banked
  5378  0011F0  5F6A               	subwf	sprintf@width& (0+255),f,b
  5379  0011F2  0E00               	movlw	0
  5380  0011F4  0100               	movlb	0	; () banked
  5381  0011F6  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5382  0011F8  0EFF               	movlw	255
  5383  0011FA  0100               	movlb	0	; () banked
  5384  0011FC  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5385  0011FE  D005               	goto	l3116
  5386  001200                     l3114:
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 1383: else
  5390                           ;doprnt.c: 1384: width = 0;
  5391  001200  0E00               	movlw	0
  5392  001202  0100               	movlb	0	; () banked
  5393  001204  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5394  001206  0E00               	movlw	0
  5395  001208  6F6A               	movwf	sprintf@width& (0+255),b
  5396  00120A                     l3116:
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 1387: if(flag & 0x04) {
  5400  00120A  0100               	movlb	0	; () banked
  5401  00120C  A569               	btfss	sprintf@flag& (0+255),2,b
  5402  00120E  D022               	goto	l3132
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;doprnt.c: 1392: if(flag & 0x03)
  5406  001210  C069  F060         	movff	sprintf@flag,??_sprintf
  5407  001214  0E03               	movlw	3
  5408  001216  0100               	movlb	0	; () banked
  5409  001218  1760               	andwf	??_sprintf& (0+255),f,b
  5410  00121A  B4D8               	btfsc	status,2,c
  5411  00121C  D008               	goto	l3124
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5415  00121E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5416  001222  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5417  001226  0E2D               	movlw	45
  5418  001228  6EDF               	movwf	indf2,c
  5419                           
  5420                           ; BSR set to: 0
  5421  00122A  4A30               	infsnz	sprintf@sp,f,c
  5422  00122C  2A31               	incf	sprintf@sp+1,f,c
  5423  00122E                     l3124:
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 1415: if(width)
  5427  00122E  0100               	movlb	0	; () banked
  5428  001230  516A               	movf	sprintf@width& (0+255),w,b
  5429  001232  0100               	movlb	0	; () banked
  5430  001234  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5431  001236  B4D8               	btfsc	status,2,c
  5432  001238  D034               	goto	l3146
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5436                           
  5437                           ; BSR set to: 0
  5438                           
  5439                           ;doprnt.c: 1416: do
  5440  00123A  C030  FFD9         	movff	sprintf@sp,fsr2l
  5441  00123E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5442  001242  0E30               	movlw	48
  5443  001244  6EDF               	movwf	indf2,c
  5444                           
  5445                           ; BSR set to: 0
  5446  001246  4A30               	infsnz	sprintf@sp,f,c
  5447  001248  2A31               	incf	sprintf@sp+1,f,c
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 1418: while(--width);
  5451  00124A  0100               	movlb	0	; () banked
  5452  00124C  076A               	decf	sprintf@width& (0+255),f,b
  5453  00124E  A0D8               	btfss	status,0,c
  5454  001250  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5455  001252  D7ED               	goto	l3124
  5456  001254                     l3132:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;doprnt.c: 1422: {
  5460                           ;doprnt.c: 1424: if(width
  5461                           ;doprnt.c: 1428: )
  5462  001254  0100               	movlb	0	; () banked
  5463  001256  516A               	movf	sprintf@width& (0+255),w,b
  5464  001258  0100               	movlb	0	; () banked
  5465  00125A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5466  00125C  B4D8               	btfsc	status,2,c
  5467  00125E  D012               	goto	l3140
  5468  001260                     l3134:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5472  001260  C030  FFD9         	movff	sprintf@sp,fsr2l
  5473  001264  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5474  001268  0E20               	movlw	32
  5475  00126A  6EDF               	movwf	indf2,c
  5476                           
  5477                           ; BSR set to: 0
  5478  00126C  4A30               	infsnz	sprintf@sp,f,c
  5479  00126E  2A31               	incf	sprintf@sp+1,f,c
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1431: while(--width);
  5483  001270  0100               	movlb	0	; () banked
  5484  001272  076A               	decf	sprintf@width& (0+255),f,b
  5485  001274  A0D8               	btfss	status,0,c
  5486  001276  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5487  001278  0100               	movlb	0	; () banked
  5488  00127A  516A               	movf	sprintf@width& (0+255),w,b
  5489  00127C  0100               	movlb	0	; () banked
  5490  00127E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5491  001280  A4D8               	btfss	status,2,c
  5492  001282  D7EE               	goto	l3134
  5493  001284                     l3140:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 1438: if(flag & 0x03)
  5497  001284  C069  F060         	movff	sprintf@flag,??_sprintf
  5498  001288  0E03               	movlw	3
  5499  00128A  0100               	movlb	0	; () banked
  5500  00128C  1760               	andwf	??_sprintf& (0+255),f,b
  5501  00128E  B4D8               	btfsc	status,2,c
  5502  001290  D008               	goto	l3146
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5506  001292  C030  FFD9         	movff	sprintf@sp,fsr2l
  5507  001296  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5508  00129A  0E2D               	movlw	45
  5509  00129C  6EDF               	movwf	indf2,c
  5510                           
  5511                           ; BSR set to: 0
  5512  00129E  4A30               	infsnz	sprintf@sp,f,c
  5513  0012A0  2A31               	incf	sprintf@sp+1,f,c
  5514  0012A2                     l3146:
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;doprnt.c: 1469: }
  5518                           ;doprnt.c: 1472: prec = c;
  5519  0012A2  C06C  F066         	movff	sprintf@c,sprintf@prec
  5520                           
  5521                           ;doprnt.c: 1474: while(prec--) {
  5522  0012A6  D02B               	goto	l3154
  5523  0012A8                     l3148:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;doprnt.c: 1478: {
  5527                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5528  0012A8  0100               	movlb	0	; () banked
  5529  0012AA  5166               	movf	sprintf@prec& (0+255),w,b
  5530  0012AC  0D02               	mullw	2
  5531  0012AE  0E01               	movlw	low _dpowers
  5532  0012B0  24F3               	addwf	prodl,w,c
  5533  0012B2  6EF6               	movwf	tblptrl,c
  5534  0012B4  0E03               	movlw	high _dpowers
  5535  0012B6  20F4               	addwfc	prodh,w,c
  5536  0012B8  6EF7               	movwf	tblptrh,c
  5537  0012BA                     	if	0	;There are less than 3 active tblptr bytes
  5538  0012BA                     	endif
  5539  0012BA  0009               	tblrd		*+
  5540  0012BC  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5541  0012C0  000A               	tblrd		*-
  5542  0012C2  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5543  0012C6  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5544  0012CA  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5545  0012CE  EC52  F00D         	call	___lwdiv	;wreg free
  5546  0012D2  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5547  0012D6  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5548  0012DA  0E00               	movlw	0
  5549  0012DC  6E2E               	movwf	___lwmod@divisor+1,c
  5550  0012DE  0E0A               	movlw	10
  5551  0012E0  6E2D               	movwf	___lwmod@divisor,c
  5552  0012E2  EC7B  F00D         	call	___lwmod	;wreg free
  5553  0012E6  502B               	movf	?___lwmod,w,c
  5554  0012E8  0F30               	addlw	48
  5555  0012EA  0100               	movlb	0	; () banked
  5556  0012EC  6F6C               	movwf	sprintf@c& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1523: }
  5560                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5561  0012EE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5562  0012F2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5563  0012F6  C06C  FFDF         	movff	sprintf@c,indf2
  5564                           
  5565                           ; BSR set to: 0
  5566  0012FA  4A30               	infsnz	sprintf@sp,f,c
  5567  0012FC  2A31               	incf	sprintf@sp+1,f,c
  5568  0012FE                     l3154:
  5569                           
  5570                           ; BSR set to: 0
  5571  0012FE  0100               	movlb	0	; () banked
  5572  001300  0766               	decf	sprintf@prec& (0+255),f,b
  5573  001302  0100               	movlb	0	; () banked
  5574  001304  2966               	incf	sprintf@prec& (0+255),w,b
  5575  001306  A4D8               	btfss	status,2,c
  5576  001308  D7CF               	goto	l3148
  5577  00130A                     l3156:
  5578  00130A  C032  FFF6         	movff	sprintf@f,tblptrl
  5579  00130E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5580  001312  4A32               	infsnz	sprintf@f,f,c
  5581  001314  2A33               	incf	sprintf@f+1,f,c
  5582  001316                     	if	0	;tblptru may be non-zero
  5583  001316                     	endif
  5584  001316                     	if	0	;tblptru may be non-zero
  5585  001316                     	endif
  5586  001316  0008               	tblrd		*
  5587  001318  CFF5 F06C          	movff	tablat,sprintf@c
  5588  00131C  0100               	movlb	0	; () banked
  5589  00131E  516C               	movf	sprintf@c& (0+255),w,b
  5590  001320  A4D8               	btfss	status,2,c
  5591  001322  D68B               	goto	l3050
  5592  001324                     l3158:
  5593                           
  5594                           ;doprnt.c: 1538: *sp = 0;
  5595  001324  C030  FFD9         	movff	sprintf@sp,fsr2l
  5596  001328  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5597  00132C  0E00               	movlw	0
  5598  00132E  6EDF               	movwf	indf2,c
  5599  001330  0012               	return	
  5600  001332                     __end_of_sprintf:
  5601                           	opt stack 0
  5602                           tblptru	equ	0xFF8
  5603                           tblptrh	equ	0xFF7
  5604                           tblptrl	equ	0xFF6
  5605                           tablat	equ	0xFF5
  5606                           prodh	equ	0xFF4
  5607                           prodl	equ	0xFF3
  5608                           intcon	equ	0xFF2
  5609                           postinc0	equ	0xFEE
  5610                           wreg	equ	0xFE8
  5611                           indf1	equ	0xFE7
  5612                           plusw1	equ	0xFE3
  5613                           fsr1h	equ	0xFE2
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           plusw2	equ	0xFDB
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _isdigit *****************
  5624 ;; Defined at:
  5625 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  c               1    wreg     unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  c               1   37[COMRAM] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5639 ;;      Params:         0       0       0       0
  5640 ;;      Locals:         2       0       0       0
  5641 ;;      Temps:          1       0       0       0
  5642 ;;      Totals:         3       0       0       0
  5643 ;;Total ram usage:        3 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    3
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_sprintf
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text19
  5654  000182                     __ptext19:
  5655                           	opt stack 0
  5656  000182                     _isdigit:
  5657                           	opt stack 26
  5658                           
  5659                           ;incstack = 0
  5660                           ;isdigit@c stored from wreg
  5661  000182  6E26               	movwf	isdigit@c,c
  5662  000184  0E00               	movlw	0
  5663  000186  6E25               	movwf	_isdigit$2085,c
  5664  000188  0E3A               	movlw	58
  5665  00018A  6026               	cpfslt	isdigit@c,c
  5666  00018C  D005               	goto	l2146
  5667  00018E  0E2F               	movlw	47
  5668  000190  6426               	cpfsgt	isdigit@c,c
  5669  000192  D002               	goto	l2146
  5670  000194  0E01               	movlw	1
  5671  000196  6E25               	movwf	_isdigit$2085,c
  5672  000198                     l2146:
  5673  000198  C025  F024         	movff	_isdigit$2085,??_isdigit
  5674  00019C  3024               	rrcf	??_isdigit,w,c
  5675  00019E  0012               	return	
  5676  0001A0                     __end_of_isdigit:
  5677                           	opt stack 0
  5678                           tblptru	equ	0xFF8
  5679                           tblptrh	equ	0xFF7
  5680                           tblptrl	equ	0xFF6
  5681                           tablat	equ	0xFF5
  5682                           prodh	equ	0xFF4
  5683                           prodl	equ	0xFF3
  5684                           intcon	equ	0xFF2
  5685                           postinc0	equ	0xFEE
  5686                           wreg	equ	0xFE8
  5687                           indf1	equ	0xFE7
  5688                           plusw1	equ	0xFE3
  5689                           fsr1h	equ	0xFE2
  5690                           fsr1l	equ	0xFE1
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           plusw2	equ	0xFDB
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function ___wmul *****************
  5700 ;; Defined at:
  5701 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  multiplier      2   35[COMRAM] unsigned int 
  5704 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  product         2   39[COMRAM] unsigned int 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  2   35[COMRAM] unsigned int 
  5709 ;; Registers used:
  5710 ;;		wreg, status,2, status,0, prodl, prodh
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5716 ;;      Params:         4       0       0       0
  5717 ;;      Locals:         2       0       0       0
  5718 ;;      Temps:          0       0       0       0
  5719 ;;      Totals:         6       0       0       0
  5720 ;;Total ram usage:        6 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    3
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_setMotorPWM
  5727 ;;		_sprintf
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text20
  5732  00013A                     __ptext20:
  5733                           	opt stack 0
  5734  00013A                     ___wmul:
  5735                           	opt stack 24
  5736                           
  5737                           ;incstack = 0
  5738  00013A  5024               	movf	___wmul@multiplier,w,c
  5739  00013C  0226               	mulwf	___wmul@multiplicand,c
  5740  00013E  CFF3 F028          	movff	prodl,___wmul@product
  5741  000142  CFF4 F029          	movff	prodh,___wmul@product+1
  5742  000146  5024               	movf	___wmul@multiplier,w,c
  5743  000148  0227               	mulwf	___wmul@multiplicand+1,c
  5744  00014A  50F3               	movf	prodl,w,c
  5745  00014C  2629               	addwf	___wmul@product+1,f,c
  5746  00014E  5025               	movf	___wmul@multiplier+1,w,c
  5747  000150  0226               	mulwf	___wmul@multiplicand,c
  5748  000152  50F3               	movf	prodl,w,c
  5749  000154  2629               	addwf	___wmul@product+1,f,c
  5750  000156  C028  F024         	movff	___wmul@product,?___wmul
  5751  00015A  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5752  00015E  0012               	return	
  5753  000160                     __end_of___wmul:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           intcon	equ	0xFF2
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           indf1	equ	0xFE7
  5765                           plusw1	equ	0xFE3
  5766                           fsr1h	equ	0xFE2
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           plusw2	equ	0xFDB
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function ___lwmod *****************
  5777 ;; Defined at:
  5778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  dividend        2   42[COMRAM] unsigned int 
  5781 ;;  divisor         2   44[COMRAM] unsigned int 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  counter         1   46[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2   42[COMRAM] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5793 ;;      Params:         4       0       0       0
  5794 ;;      Locals:         1       0       0       0
  5795 ;;      Temps:          0       0       0       0
  5796 ;;      Totals:         5       0       0       0
  5797 ;;Total ram usage:        5 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    3
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_sprintf
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text21
  5808  001AF6                     __ptext21:
  5809                           	opt stack 0
  5810  001AF6                     ___lwmod:
  5811                           	opt stack 26
  5812                           
  5813                           ;incstack = 0
  5814  001AF6  502D               	movf	___lwmod@divisor,w,c
  5815  001AF8  102E               	iorwf	___lwmod@divisor+1,w,c
  5816  001AFA  B4D8               	btfsc	status,2,c
  5817  001AFC  D018               	goto	l913
  5818  001AFE  0E01               	movlw	1
  5819  001B00  6E2F               	movwf	___lwmod@counter,c
  5820  001B02  D004               	goto	l2178
  5821  001B04                     l2176:
  5822  001B04  90D8               	bcf	status,0,c
  5823  001B06  362D               	rlcf	___lwmod@divisor,f,c
  5824  001B08  362E               	rlcf	___lwmod@divisor+1,f,c
  5825  001B0A  2A2F               	incf	___lwmod@counter,f,c
  5826  001B0C                     l2178:
  5827  001B0C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5828  001B0E  D7FA               	goto	l2176
  5829  001B10                     l2180:
  5830  001B10  502D               	movf	___lwmod@divisor,w,c
  5831  001B12  5C2B               	subwf	___lwmod@dividend,w,c
  5832  001B14  502E               	movf	___lwmod@divisor+1,w,c
  5833  001B16  582C               	subwfb	___lwmod@dividend+1,w,c
  5834  001B18  A0D8               	btfss	status,0,c
  5835  001B1A  D004               	goto	l2184
  5836  001B1C  502D               	movf	___lwmod@divisor,w,c
  5837  001B1E  5E2B               	subwf	___lwmod@dividend,f,c
  5838  001B20  502E               	movf	___lwmod@divisor+1,w,c
  5839  001B22  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5840  001B24                     l2184:
  5841  001B24  90D8               	bcf	status,0,c
  5842  001B26  322E               	rrcf	___lwmod@divisor+1,f,c
  5843  001B28  322D               	rrcf	___lwmod@divisor,f,c
  5844  001B2A  2E2F               	decfsz	___lwmod@counter,f,c
  5845  001B2C  D7F1               	goto	l2180
  5846  001B2E                     l913:
  5847  001B2E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5848  001B32  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5849  001B36  0012               	return		;funcret
  5850  001B38                     __end_of___lwmod:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           postinc0	equ	0xFEE
  5860                           wreg	equ	0xFE8
  5861                           indf1	equ	0xFE7
  5862                           plusw1	equ	0xFE3
  5863                           fsr1h	equ	0xFE2
  5864                           fsr1l	equ	0xFE1
  5865                           indf2	equ	0xFDF
  5866                           postinc2	equ	0xFDE
  5867                           postdec2	equ	0xFDD
  5868                           plusw2	equ	0xFDB
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function ___lwdiv *****************
  5874 ;; Defined at:
  5875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  dividend        2   35[COMRAM] unsigned int 
  5878 ;;  divisor         2   37[COMRAM] unsigned int 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  quotient        2   39[COMRAM] unsigned int 
  5881 ;;  counter         1   41[COMRAM] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  2   35[COMRAM] unsigned int 
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, status,0
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5891 ;;      Params:         4       0       0       0
  5892 ;;      Locals:         3       0       0       0
  5893 ;;      Temps:          0       0       0       0
  5894 ;;      Totals:         7       0       0       0
  5895 ;;Total ram usage:        7 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    3
  5898 ;; This function calls:
  5899 ;;		Nothing
  5900 ;; This function is called by:
  5901 ;;		_sprintf
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text22
  5906  001AA4                     __ptext22:
  5907                           	opt stack 0
  5908  001AA4                     ___lwdiv:
  5909                           	opt stack 26
  5910                           
  5911                           ;incstack = 0
  5912  001AA4  0E00               	movlw	0
  5913  001AA6  6E29               	movwf	___lwdiv@quotient+1,c
  5914  001AA8  0E00               	movlw	0
  5915  001AAA  6E28               	movwf	___lwdiv@quotient,c
  5916  001AAC  5026               	movf	___lwdiv@divisor,w,c
  5917  001AAE  1027               	iorwf	___lwdiv@divisor+1,w,c
  5918  001AB0  B4D8               	btfsc	status,2,c
  5919  001AB2  D01C               	goto	l903
  5920  001AB4  0E01               	movlw	1
  5921  001AB6  6E2A               	movwf	___lwdiv@counter,c
  5922  001AB8  D004               	goto	l2158
  5923  001ABA                     l2156:
  5924  001ABA  90D8               	bcf	status,0,c
  5925  001ABC  3626               	rlcf	___lwdiv@divisor,f,c
  5926  001ABE  3627               	rlcf	___lwdiv@divisor+1,f,c
  5927  001AC0  2A2A               	incf	___lwdiv@counter,f,c
  5928  001AC2                     l2158:
  5929  001AC2  AE27               	btfss	___lwdiv@divisor+1,7,c
  5930  001AC4  D7FA               	goto	l2156
  5931  001AC6                     l2160:
  5932  001AC6  90D8               	bcf	status,0,c
  5933  001AC8  3628               	rlcf	___lwdiv@quotient,f,c
  5934  001ACA  3629               	rlcf	___lwdiv@quotient+1,f,c
  5935  001ACC  5026               	movf	___lwdiv@divisor,w,c
  5936  001ACE  5C24               	subwf	___lwdiv@dividend,w,c
  5937  001AD0  5027               	movf	___lwdiv@divisor+1,w,c
  5938  001AD2  5825               	subwfb	___lwdiv@dividend+1,w,c
  5939  001AD4  A0D8               	btfss	status,0,c
  5940  001AD6  D005               	goto	l2168
  5941  001AD8  5026               	movf	___lwdiv@divisor,w,c
  5942  001ADA  5E24               	subwf	___lwdiv@dividend,f,c
  5943  001ADC  5027               	movf	___lwdiv@divisor+1,w,c
  5944  001ADE  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5945  001AE0  8028               	bsf	___lwdiv@quotient,0,c
  5946  001AE2                     l2168:
  5947  001AE2  90D8               	bcf	status,0,c
  5948  001AE4  3227               	rrcf	___lwdiv@divisor+1,f,c
  5949  001AE6  3226               	rrcf	___lwdiv@divisor,f,c
  5950  001AE8  2E2A               	decfsz	___lwdiv@counter,f,c
  5951  001AEA  D7ED               	goto	l2160
  5952  001AEC                     l903:
  5953  001AEC  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5954  001AF0  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5955  001AF4  0012               	return		;funcret
  5956  001AF6                     __end_of___lwdiv:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           indf1	equ	0xFE7
  5968                           plusw1	equ	0xFE3
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           postdec2	equ	0xFDD
  5974                           plusw2	equ	0xFDB
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _grabRightIR *****************
  5980 ;; Defined at:
  5981 ;;		line 74 in file "IR_Reading.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5986 ;;  i               1   42[COMRAM] unsigned char 
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  2   35[COMRAM] unsigned int 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5996 ;;      Params:         2       0       0       0
  5997 ;;      Locals:         3       0       0       0
  5998 ;;      Temps:          3       0       0       0
  5999 ;;      Totals:         8       0       0       0
  6000 ;;Total ram usage:        8 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    3
  6003 ;; This function calls:
  6004 ;;		Nothing
  6005 ;; This function is called by:
  6006 ;;		_ScanIR
  6007 ;;		_ScanWithRange
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text23
  6013  00190A                     __ptext23:
  6014                           	opt stack 0
  6015  00190A                     _grabRightIR:
  6016                           	opt stack 27
  6017                           
  6018                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6019                           
  6020                           ;incstack = 0
  6021  00190A  0E00               	movlw	0
  6022  00190C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6023  00190E  0E00               	movlw	0
  6024  001910  6E29               	movwf	grabRightIR@IR_signal,c
  6025                           
  6026                           ;IR_Reading.c: 77: unsigned char i=0;
  6027  001912  0E00               	movlw	0
  6028  001914  6E2B               	movwf	grabRightIR@i,c
  6029                           
  6030                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6031  001916  0E00               	movlw	0
  6032  001918  6E2B               	movwf	grabRightIR@i,c
  6033  00191A                     l2220:
  6034  00191A  0E03               	movlw	3
  6035  00191C  642B               	cpfsgt	grabRightIR@i,c
  6036  00191E  D001               	goto	l2224
  6037  001920  D01E               	goto	l2230
  6038  001922                     l2224:
  6039                           
  6040                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6041  001922  5069               	movf	3945,w,c	;volatile
  6042  001924  6E26               	movwf	??_grabRightIR& (0+255),c
  6043  001926  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6044  001928  0E07               	movlw	7
  6045  00192A                     u1535:
  6046  00192A  90D8               	bcf	status,0,c
  6047  00192C  3626               	rlcf	??_grabRightIR,f,c
  6048  00192E  3627               	rlcf	??_grabRightIR+1,f,c
  6049  001930  2EE8               	decfsz	wreg,f,c
  6050  001932  D7FB               	goto	u1535
  6051  001934  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6052  001938  90D8               	bcf	status,0,c
  6053  00193A  3228               	rrcf	??_grabRightIR+2,f,c
  6054  00193C  5028               	movf	??_grabRightIR+2,w,c
  6055  00193E  1226               	iorwf	??_grabRightIR,f,c
  6056  001940  0E00               	movlw	0
  6057  001942  1227               	iorwf	??_grabRightIR+1,f,c
  6058  001944  5026               	movf	??_grabRightIR,w,c
  6059  001946  2629               	addwf	grabRightIR@IR_signal,f,c
  6060  001948  5027               	movf	??_grabRightIR+1,w,c
  6061  00194A  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6062                           
  6063                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6064  00194C  0E82               	movlw	130
  6065  00194E  6E26               	movwf	??_grabRightIR& (0+255),c
  6066  001950  0EDE               	movlw	222
  6067  001952                     u3257:
  6068  001952  2EE8               	decfsz	wreg,f,c
  6069  001954  D7FE               	goto	u3257
  6070  001956  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6071  001958  D7FC               	goto	u3257
  6072  00195A  2A2B               	incf	grabRightIR@i,f,c
  6073  00195C  D7DE               	goto	l2220
  6074  00195E                     l2230:
  6075                           
  6076                           ;IR_Reading.c: 83: }
  6077                           ;IR_Reading.c: 85: return IR_signal>>2;
  6078  00195E  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6079  001962  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6080  001966  90D8               	bcf	status,0,c
  6081  001968  3227               	rrcf	??_grabRightIR+1,f,c
  6082  00196A  3226               	rrcf	??_grabRightIR,f,c
  6083  00196C  90D8               	bcf	status,0,c
  6084  00196E  3227               	rrcf	??_grabRightIR+1,f,c
  6085  001970  3226               	rrcf	??_grabRightIR,f,c
  6086  001972  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6087  001976  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6088  00197A  0012               	return	
  6089  00197C                     __end_of_grabRightIR:
  6090                           	opt stack 0
  6091                           tblptru	equ	0xFF8
  6092                           tblptrh	equ	0xFF7
  6093                           tblptrl	equ	0xFF6
  6094                           tablat	equ	0xFF5
  6095                           prodh	equ	0xFF4
  6096                           prodl	equ	0xFF3
  6097                           intcon	equ	0xFF2
  6098                           postinc0	equ	0xFEE
  6099                           wreg	equ	0xFE8
  6100                           indf1	equ	0xFE7
  6101                           plusw1	equ	0xFE3
  6102                           fsr1h	equ	0xFE2
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           plusw2	equ	0xFDB
  6108                           fsr2h	equ	0xFDA
  6109                           fsr2l	equ	0xFD9
  6110                           status	equ	0xFD8
  6111                           
  6112 ;; *************** function _grabLeftIR *****************
  6113 ;; Defined at:
  6114 ;;		line 90 in file "IR_Reading.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6119 ;;  i               1   42[COMRAM] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  2   35[COMRAM] unsigned int 
  6122 ;; Registers used:
  6123 ;;		wreg, status,2, status,0
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6129 ;;      Params:         2       0       0       0
  6130 ;;      Locals:         3       0       0       0
  6131 ;;      Temps:          3       0       0       0
  6132 ;;      Totals:         8       0       0       0
  6133 ;;Total ram usage:        8 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    3
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_ScanIR
  6140 ;;		_ScanWithRange
  6141 ;;		_main
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text24
  6146  00197C                     __ptext24:
  6147                           	opt stack 0
  6148  00197C                     _grabLeftIR:
  6149                           	opt stack 27
  6150                           
  6151                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6152                           
  6153                           ;incstack = 0
  6154  00197C  0E00               	movlw	0
  6155  00197E  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6156  001980  0E00               	movlw	0
  6157  001982  6E29               	movwf	grabLeftIR@IR_signal,c
  6158                           
  6159                           ;IR_Reading.c: 93: unsigned char i=0;
  6160  001984  0E00               	movlw	0
  6161  001986  6E2B               	movwf	grabLeftIR@i,c
  6162                           
  6163                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6164  001988  0E00               	movlw	0
  6165  00198A  6E2B               	movwf	grabLeftIR@i,c
  6166  00198C                     l2236:
  6167  00198C  0E03               	movlw	3
  6168  00198E  642B               	cpfsgt	grabLeftIR@i,c
  6169  001990  D001               	goto	l2240
  6170  001992  D01E               	goto	l2246
  6171  001994                     l2240:
  6172                           
  6173                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6174  001994  5067               	movf	3943,w,c	;volatile
  6175  001996  6E26               	movwf	??_grabLeftIR& (0+255),c
  6176  001998  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6177  00199A  0E07               	movlw	7
  6178  00199C                     u1565:
  6179  00199C  90D8               	bcf	status,0,c
  6180  00199E  3626               	rlcf	??_grabLeftIR,f,c
  6181  0019A0  3627               	rlcf	??_grabLeftIR+1,f,c
  6182  0019A2  2EE8               	decfsz	wreg,f,c
  6183  0019A4  D7FB               	goto	u1565
  6184  0019A6  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6185  0019AA  90D8               	bcf	status,0,c
  6186  0019AC  3228               	rrcf	??_grabLeftIR+2,f,c
  6187  0019AE  5028               	movf	??_grabLeftIR+2,w,c
  6188  0019B0  1226               	iorwf	??_grabLeftIR,f,c
  6189  0019B2  0E00               	movlw	0
  6190  0019B4  1227               	iorwf	??_grabLeftIR+1,f,c
  6191  0019B6  5026               	movf	??_grabLeftIR,w,c
  6192  0019B8  2629               	addwf	grabLeftIR@IR_signal,f,c
  6193  0019BA  5027               	movf	??_grabLeftIR+1,w,c
  6194  0019BC  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6195                           
  6196                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6197  0019BE  0E82               	movlw	130
  6198  0019C0  6E26               	movwf	??_grabLeftIR& (0+255),c
  6199  0019C2  0EDE               	movlw	222
  6200  0019C4                     u3267:
  6201  0019C4  2EE8               	decfsz	wreg,f,c
  6202  0019C6  D7FE               	goto	u3267
  6203  0019C8  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6204  0019CA  D7FC               	goto	u3267
  6205  0019CC  2A2B               	incf	grabLeftIR@i,f,c
  6206  0019CE  D7DE               	goto	l2236
  6207  0019D0                     l2246:
  6208                           
  6209                           ;IR_Reading.c: 99: }
  6210                           ;IR_Reading.c: 101: return IR_signal>>2;
  6211  0019D0  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6212  0019D4  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6213  0019D8  90D8               	bcf	status,0,c
  6214  0019DA  3227               	rrcf	??_grabLeftIR+1,f,c
  6215  0019DC  3226               	rrcf	??_grabLeftIR,f,c
  6216  0019DE  90D8               	bcf	status,0,c
  6217  0019E0  3227               	rrcf	??_grabLeftIR+1,f,c
  6218  0019E2  3226               	rrcf	??_grabLeftIR,f,c
  6219  0019E4  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6220  0019E8  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6221  0019EC  0012               	return	
  6222  0019EE                     __end_of_grabLeftIR:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           intcon	equ	0xFF2
  6231                           postinc0	equ	0xFEE
  6232                           wreg	equ	0xFE8
  6233                           indf1	equ	0xFE7
  6234                           plusw1	equ	0xFE3
  6235                           fsr1h	equ	0xFE2
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           postdec2	equ	0xFDD
  6240                           plusw2	equ	0xFDB
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _SetLine *****************
  6246 ;; Defined at:
  6247 ;;		line 74 in file "LCD.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  line            1    wreg     unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  line            1   41[COMRAM] unsigned char 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;		None               void
  6254 ;; Registers used:
  6255 ;;		wreg, status,2, status,0, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6261 ;;      Params:         0       0       0       0
  6262 ;;      Locals:         1       0       0       0
  6263 ;;      Temps:          0       0       0       0
  6264 ;;      Totals:         1       0       0       0
  6265 ;;Total ram usage:        1 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    6
  6268 ;; This function calls:
  6269 ;;		_SendLCD
  6270 ;; This function is called by:
  6271 ;;		_ScanIR
  6272 ;;		_ScanWithRange
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text25
  6278  0000DA                     __ptext25:
  6279                           	opt stack 0
  6280  0000DA                     _SetLine:
  6281                           	opt stack 24
  6282                           
  6283                           ;incstack = 0
  6284                           ;SetLine@line stored from wreg
  6285  0000DA  6E2A               	movwf	SetLine@line,c
  6286                           
  6287                           ;LCD.c: 75: if (line==1) {
  6288  0000DC  042A               	decf	SetLine@line,w,c
  6289  0000DE  A4D8               	btfss	status,2,c
  6290  0000E0  D006               	goto	l2254
  6291                           
  6292                           ;LCD.c: 76: SendLCD(0x80,0);
  6293  0000E2  0E00               	movlw	0
  6294  0000E4  6E28               	movwf	SendLCD@type,c
  6295  0000E6  0E80               	movlw	128
  6296  0000E8  EC85  F000         	call	_SendLCD
  6297                           
  6298                           ;LCD.c: 77: } else if (line==2) {
  6299  0000EC  D009               	goto	l2258
  6300  0000EE                     l2254:
  6301  0000EE  0E02               	movlw	2
  6302  0000F0  182A               	xorwf	SetLine@line,w,c
  6303  0000F2  A4D8               	btfss	status,2,c
  6304  0000F4  D005               	goto	l2258
  6305                           
  6306                           ;LCD.c: 78: SendLCD(0xC0,0);
  6307  0000F6  0E00               	movlw	0
  6308  0000F8  6E28               	movwf	SendLCD@type,c
  6309  0000FA  0EC0               	movlw	192
  6310  0000FC  EC85  F000         	call	_SendLCD
  6311  000100                     l2258:
  6312                           
  6313                           ;LCD.c: 79: }
  6314                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6315  000100  0E21               	movlw	33
  6316  000102                     u3277:
  6317  000102  2EE8               	decfsz	wreg,f,c
  6318  000104  D7FE               	goto	u3277
  6319  000106  F000               	nop	
  6320  000108  0012               	return		;funcret
  6321  00010A                     __end_of_SetLine:
  6322                           	opt stack 0
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           indf1	equ	0xFE7
  6333                           plusw1	equ	0xFE3
  6334                           fsr1h	equ	0xFE2
  6335                           fsr1l	equ	0xFE1
  6336                           indf2	equ	0xFDF
  6337                           postinc2	equ	0xFDE
  6338                           postdec2	equ	0xFDD
  6339                           plusw2	equ	0xFDB
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _LCD_String *****************
  6345 ;; Defined at:
  6346 ;;		line 83 in file "LCD.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  string          2   41[COMRAM] PTR unsigned char 
  6349 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6350 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6351 ;;		 -> STR_1(12), 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;		None               void
  6356 ;; Registers used:
  6357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6363 ;;      Params:         2       0       0       0
  6364 ;;      Locals:         0       0       0       0
  6365 ;;      Temps:          0       0       0       0
  6366 ;;      Totals:         2       0       0       0
  6367 ;;Total ram usage:        2 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    6
  6370 ;; This function calls:
  6371 ;;		_SendLCD
  6372 ;; This function is called by:
  6373 ;;		_ScanIR
  6374 ;;		_ScanWithRange
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text26
  6380  0019EE                     __ptext26:
  6381                           	opt stack 0
  6382  0019EE                     _LCD_String:
  6383                           	opt stack 23
  6384                           
  6385                           ;LCD.c: 85: while(*string != 0){
  6386                           
  6387                           ;incstack = 0
  6388  0019EE  D01A               	goto	l2268
  6389  0019F0                     l2262:
  6390                           
  6391                           ;LCD.c: 88: SendLCD(*string++,1);
  6392  0019F0  0E01               	movlw	1
  6393  0019F2  6E28               	movwf	SendLCD@type,c
  6394  0019F4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6395  0019F8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6396  0019FC  6AF8               	clrf	tblptru,c
  6397  0019FE  0E02               	movlw	(high __ramtop+-1)
  6398  001A00  64F7               	cpfsgt	tblptrh,c
  6399  001A02  D003               	bra	u1607
  6400  001A04  0008               	tblrd		*
  6401  001A06  50F5               	movf	tablat,w,c
  6402  001A08  D005               	bra	u1600
  6403  001A0A                     u1607:
  6404  001A0A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6405  001A0E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6406  001A12  50E7               	movf	indf1,w,c
  6407  001A14                     u1600:
  6408  001A14  EC85  F000         	call	_SendLCD
  6409  001A18  4A2A               	infsnz	LCD_String@string,f,c
  6410  001A1A  2A2B               	incf	LCD_String@string+1,f,c
  6411                           
  6412                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6413  001A1C  0E21               	movlw	33
  6414  001A1E                     u3287:
  6415  001A1E  2EE8               	decfsz	wreg,f,c
  6416  001A20  D7FE               	goto	u3287
  6417  001A22  F000               	nop	
  6418  001A24                     l2268:
  6419  001A24  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6420  001A28  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6421  001A2C  6AF8               	clrf	tblptru,c
  6422  001A2E  0E02               	movlw	(high __ramtop+-1)
  6423  001A30  64F7               	cpfsgt	tblptrh,c
  6424  001A32  D003               	bra	u1617
  6425  001A34  0008               	tblrd		*
  6426  001A36  50F5               	movf	tablat,w,c
  6427  001A38  D005               	bra	u1610
  6428  001A3A                     u1617:
  6429  001A3A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6430  001A3E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6431  001A42  50E7               	movf	indf1,w,c
  6432  001A44                     u1610:
  6433  001A44  0900               	iorlw	0
  6434  001A46  B4D8               	btfsc	status,2,c
  6435  001A48  0012               	return	
  6436  001A4A  D7D2               	goto	l2262
  6437  001A4C                     __end_of_LCD_String:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           plusw1	equ	0xFE3
  6450                           fsr1h	equ	0xFE2
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           plusw2	equ	0xFDB
  6456                           fsr2h	equ	0xFDA
  6457                           fsr2l	equ	0xFD9
  6458                           status	equ	0xFD8
  6459                           
  6460 ;; *************** function _SendLCD *****************
  6461 ;; Defined at:
  6462 ;;		line 27 in file "LCD.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;  Byte            1    wreg     unsigned char 
  6465 ;;  type            1   39[COMRAM] unsigned char 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  Byte            1   40[COMRAM] unsigned char 
  6468 ;; Return value:  Size  Location     Type
  6469 ;;		None               void
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6477 ;;      Params:         1       0       0       0
  6478 ;;      Locals:         1       0       0       0
  6479 ;;      Temps:          0       0       0       0
  6480 ;;      Totals:         2       0       0       0
  6481 ;;Total ram usage:        2 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    5
  6484 ;; This function calls:
  6485 ;;		_LCDout
  6486 ;; This function is called by:
  6487 ;;		_initLCD
  6488 ;;		_SetLine
  6489 ;;		_LCD_String
  6490 ;;		_ScanIR
  6491 ;;		_ScanWithRange
  6492 ;;		_main
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text27
  6497  00010A                     __ptext27:
  6498                           	opt stack 0
  6499  00010A                     _SendLCD:
  6500                           	opt stack 24
  6501                           
  6502                           ;incstack = 0
  6503                           ;SendLCD@Byte stored from wreg
  6504  00010A  6E29               	movwf	SendLCD@Byte,c
  6505                           
  6506                           ;LCD.c: 30: LATAbits.LATA6=type;
  6507  00010C  B028               	btfsc	SendLCD@type,0,c
  6508  00010E  D002               	bra	u1395
  6509  000110  9C89               	bcf	3977,6,c	;volatile
  6510  000112  D001               	bra	u1396
  6511  000114                     u1395:
  6512  000114  8C89               	bsf	3977,6,c	;volatile
  6513  000116                     u1396:
  6514                           
  6515                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6516  000116  3829               	swapf	SendLCD@Byte,w,c
  6517  000118  0B0F               	andlw	15
  6518  00011A  0B0F               	andlw	15
  6519  00011C  ECB3  F00A         	call	_LCDout
  6520                           
  6521                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6522  000120  0E06               	movlw	6
  6523  000122                     u3297:
  6524  000122  2EE8               	decfsz	wreg,f,c
  6525  000124  D7FE               	goto	u3297
  6526  000126  D000               	nop2		;nop
  6527                           
  6528                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6529  000128  5029               	movf	SendLCD@Byte,w,c
  6530  00012A  0B0F               	andlw	15
  6531  00012C  ECB3  F00A         	call	_LCDout
  6532                           
  6533                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6534  000130  0E21               	movlw	33
  6535  000132                     u3307:
  6536  000132  2EE8               	decfsz	wreg,f,c
  6537  000134  D7FE               	goto	u3307
  6538  000136  F000               	nop	
  6539  000138  0012               	return		;funcret
  6540  00013A                     __end_of_SendLCD:
  6541                           	opt stack 0
  6542                           tblptru	equ	0xFF8
  6543                           tblptrh	equ	0xFF7
  6544                           tblptrl	equ	0xFF6
  6545                           tablat	equ	0xFF5
  6546                           prodh	equ	0xFF4
  6547                           prodl	equ	0xFF3
  6548                           intcon	equ	0xFF2
  6549                           postinc0	equ	0xFEE
  6550                           wreg	equ	0xFE8
  6551                           indf1	equ	0xFE7
  6552                           plusw1	equ	0xFE3
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           plusw2	equ	0xFDB
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _LCDout *****************
  6564 ;; Defined at:
  6565 ;;		line 14 in file "LCD.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  number          1    wreg     unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  number          1   38[COMRAM] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6579 ;;      Params:         0       0       0       0
  6580 ;;      Locals:         1       0       0       0
  6581 ;;      Temps:          3       0       0       0
  6582 ;;      Totals:         4       0       0       0
  6583 ;;Total ram usage:        4 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    4
  6586 ;; This function calls:
  6587 ;;		_E_TOG
  6588 ;; This function is called by:
  6589 ;;		_SendLCD
  6590 ;;		_initLCD
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text28
  6595  001566                     __ptext28:
  6596                           	opt stack 0
  6597  001566                     _LCDout:
  6598                           	opt stack 24
  6599                           
  6600                           ;incstack = 0
  6601                           ;LCDout@number stored from wreg
  6602  001566  6E27               	movwf	LCDout@number,c
  6603                           
  6604                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6605  001568  5027               	movf	LCDout@number,w,c
  6606  00156A  6E24               	movwf	??_LCDout& (0+255),c
  6607  00156C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6608  00156E  0E07               	movlw	7
  6609  001570                     u1285:
  6610  001570  90D8               	bcf	status,0,c
  6611  001572  3624               	rlcf	??_LCDout,f,c
  6612  001574  3625               	rlcf	??_LCDout+1,f,c
  6613  001576  2EE8               	decfsz	wreg,f,c
  6614  001578  D7FB               	goto	u1285
  6615  00157A  0E07               	movlw	7
  6616  00157C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6617  00157E                     u1295:
  6618  00157E  3425               	rlcf	??_LCDout+1,w,c
  6619  001580  3225               	rrcf	??_LCDout+1,f,c
  6620  001582  3224               	rrcf	??_LCDout,f,c
  6621  001584  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6622  001586  D7FB               	goto	u1295
  6623  001588  4624               	rlncf	??_LCDout,f,c
  6624  00158A  508B               	movf	3979,w,c	;volatile
  6625  00158C  1824               	xorwf	??_LCDout,w,c
  6626  00158E  0BFD               	andlw	-3
  6627  001590  1824               	xorwf	??_LCDout,w,c
  6628  001592  6E8B               	movwf	3979,c	;volatile
  6629                           
  6630                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6631  001594  5027               	movf	LCDout@number,w,c
  6632  001596  6E24               	movwf	??_LCDout& (0+255),c
  6633  001598  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6634  00159A  0E06               	movlw	6
  6635  00159C                     u1305:
  6636  00159C  90D8               	bcf	status,0,c
  6637  00159E  3624               	rlcf	??_LCDout,f,c
  6638  0015A0  3625               	rlcf	??_LCDout+1,f,c
  6639  0015A2  2EE8               	decfsz	wreg,f,c
  6640  0015A4  D7FB               	goto	u1305
  6641  0015A6  0E07               	movlw	7
  6642  0015A8  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6643  0015AA                     u1315:
  6644  0015AA  3425               	rlcf	??_LCDout+1,w,c
  6645  0015AC  3225               	rrcf	??_LCDout+1,f,c
  6646  0015AE  3224               	rrcf	??_LCDout,f,c
  6647  0015B0  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6648  0015B2  D7FB               	goto	u1315
  6649  0015B4  4624               	rlncf	??_LCDout,f,c
  6650  0015B6  4624               	rlncf	??_LCDout,f,c
  6651  0015B8  508B               	movf	3979,w,c	;volatile
  6652  0015BA  1824               	xorwf	??_LCDout,w,c
  6653  0015BC  0BFB               	andlw	-5
  6654  0015BE  1824               	xorwf	??_LCDout,w,c
  6655  0015C0  6E8B               	movwf	3979,c	;volatile
  6656                           
  6657                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6658  0015C2  5027               	movf	LCDout@number,w,c
  6659  0015C4  6E24               	movwf	??_LCDout& (0+255),c
  6660  0015C6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6661  0015C8  0E05               	movlw	5
  6662  0015CA                     u1325:
  6663  0015CA  90D8               	bcf	status,0,c
  6664  0015CC  3624               	rlcf	??_LCDout,f,c
  6665  0015CE  3625               	rlcf	??_LCDout+1,f,c
  6666  0015D0  2EE8               	decfsz	wreg,f,c
  6667  0015D2  D7FB               	goto	u1325
  6668  0015D4  0E07               	movlw	7
  6669  0015D6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6670  0015D8                     u1335:
  6671  0015D8  3425               	rlcf	??_LCDout+1,w,c
  6672  0015DA  3225               	rrcf	??_LCDout+1,f,c
  6673  0015DC  3224               	rrcf	??_LCDout,f,c
  6674  0015DE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6675  0015E0  D7FB               	goto	u1335
  6676  0015E2  508C               	movf	3980,w,c	;volatile
  6677  0015E4  1824               	xorwf	??_LCDout,w,c
  6678  0015E6  0BFE               	andlw	-2
  6679  0015E8  1824               	xorwf	??_LCDout,w,c
  6680  0015EA  6E8C               	movwf	3980,c	;volatile
  6681                           
  6682                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6683  0015EC  5027               	movf	LCDout@number,w,c
  6684  0015EE  6E24               	movwf	??_LCDout& (0+255),c
  6685  0015F0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6686  0015F2  3A24               	swapf	??_LCDout,f,c
  6687  0015F4  3A25               	swapf	??_LCDout+1,f,c
  6688  0015F6  0EF0               	movlw	240
  6689  0015F8  1625               	andwf	??_LCDout+1,f,c
  6690  0015FA  5024               	movf	??_LCDout,w,c
  6691  0015FC  0B0F               	andlw	15
  6692  0015FE  1225               	iorwf	??_LCDout+1,f,c
  6693  001600  0EF0               	movlw	240
  6694  001602  1624               	andwf	??_LCDout,f,c
  6695  001604  0E07               	movlw	7
  6696  001606  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6697  001608                     u1345:
  6698  001608  3425               	rlcf	??_LCDout+1,w,c
  6699  00160A  3225               	rrcf	??_LCDout+1,f,c
  6700  00160C  3224               	rrcf	??_LCDout,f,c
  6701  00160E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6702  001610  D7FB               	goto	u1345
  6703  001612  4624               	rlncf	??_LCDout,f,c
  6704  001614  508C               	movf	3980,w,c	;volatile
  6705  001616  1824               	xorwf	??_LCDout,w,c
  6706  001618  0BFD               	andlw	-3
  6707  00161A  1824               	xorwf	??_LCDout,w,c
  6708  00161C  6E8C               	movwf	3980,c	;volatile
  6709                           
  6710                           ;LCD.c: 21: E_TOG();
  6711  00161E  ECE7  F000         	call	_E_TOG	;wreg free
  6712                           
  6713                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6714  001622  0E03               	movlw	3
  6715  001624                     u3317:
  6716  001624  2EE8               	decfsz	wreg,f,c
  6717  001626  D7FE               	goto	u3317
  6718  001628  F000               	nop	
  6719  00162A  0012               	return		;funcret
  6720  00162C                     __end_of_LCDout:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           plusw1	equ	0xFE3
  6733                           fsr1h	equ	0xFE2
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           plusw2	equ	0xFDB
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _E_TOG *****************
  6744 ;; Defined at:
  6745 ;;		line 5 in file "LCD.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6759 ;;      Params:         0       0       0       0
  6760 ;;      Locals:         0       0       0       0
  6761 ;;      Temps:          0       0       0       0
  6762 ;;      Totals:         0       0       0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    3
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_LCDout
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text29
  6774  0001CE                     __ptext29:
  6775                           	opt stack 0
  6776  0001CE                     _E_TOG:
  6777                           	opt stack 24
  6778                           
  6779                           ;LCD.c: 8: LATCbits.LATC0=1;
  6780                           
  6781                           ;incstack = 0
  6782  0001CE  808B               	bsf	3979,0,c	;volatile
  6783                           
  6784                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6785  0001D0  0E03               	movlw	3
  6786  0001D2                     u3327:
  6787  0001D2  2EE8               	decfsz	wreg,f,c
  6788  0001D4  D7FE               	goto	u3327
  6789  0001D6  F000               	nop	
  6790                           
  6791                           ;LCD.c: 10: LATCbits.LATC0=0;
  6792  0001D8  908B               	bcf	3979,0,c	;volatile
  6793  0001DA  0012               	return		;funcret
  6794  0001DC                     __end_of_E_TOG:
  6795                           	opt stack 0
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           indf1	equ	0xFE7
  6806                           plusw1	equ	0xFE3
  6807                           fsr1h	equ	0xFE2
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           plusw2	equ	0xFDB
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _InterruptHandlerLow *****************
  6818 ;; Defined at:
  6819 ;;		line 18 in file "main.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;		None
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;		None               void
  6826 ;; Registers used:
  6827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6833 ;;      Params:         0       0       0       0
  6834 ;;      Locals:         0       0       0       0
  6835 ;;      Temps:         17       0       0       0
  6836 ;;      Totals:        17       0       0       0
  6837 ;;Total ram usage:       17 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    2
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		Interrupt level 1
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	intcodelo
  6848  000018                     __pintcodelo:
  6849                           	opt stack 0
  6850  000018                     _InterruptHandlerLow:
  6851                           	opt stack 23
  6852                           
  6853                           ;incstack = 0
  6854  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6855  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6856  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6857  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6858  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6859  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6860  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6861  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6862  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6863  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6864  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6865  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6866  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6867  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6868  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6869  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6870  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6871  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6872                           
  6873                           ;main.c: 20: if (PIR1bits.RCIF) {
  6874  00005E  AA9E               	btfss	3998,5,c	;volatile
  6875  000060  D016               	goto	i1l378
  6876                           
  6877                           ;main.c: 21: ReceivedString[i]=RCREG;
  6878  000062  503A               	movf	_i,w,c	;volatile
  6879  000064  0D01               	mullw	1
  6880  000066  0EE6               	movlw	low _ReceivedString
  6881  000068  24F3               	addwf	prodl,w,c
  6882  00006A  6ED9               	movwf	fsr2l,c
  6883  00006C  0E01               	movlw	high _ReceivedString
  6884  00006E  20F4               	addwfc	prodh,w,c
  6885  000070  6EDA               	movwf	fsr2h,c
  6886  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6887                           
  6888                           ;main.c: 22: RFID_Read=1;
  6889  000076  0E01               	movlw	1
  6890  000078  0101               	movlb	1	; () banked
  6891  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6892                           
  6893                           ; BSR set to: 1
  6894                           ;main.c: 23: if (i==15){
  6895  00007C  0E0F               	movlw	15
  6896  00007E  183A               	xorwf	_i,w,c	;volatile
  6897  000080  A4D8               	btfss	status,2,c
  6898  000082  D003               	goto	i1l2684
  6899                           
  6900                           ; BSR set to: 1
  6901                           ;main.c: 24: i=0;
  6902  000084  0E00               	movlw	0
  6903  000086  6E3A               	movwf	_i,c	;volatile
  6904                           
  6905                           ;main.c: 25: }else{
  6906  000088  D001               	goto	i1l2686
  6907  00008A                     i1l2684:
  6908                           
  6909                           ; BSR set to: 1
  6910                           ;main.c: 26: i++;
  6911  00008A  2A3A               	incf	_i,f,c	;volatile
  6912  00008C                     i1l2686:
  6913                           
  6914                           ; BSR set to: 1
  6915                           ;main.c: 27: }
  6916                           ;main.c: 28: PIR1bits.RCIF=0;
  6917  00008C  9A9E               	bcf	3998,5,c	;volatile
  6918  00008E                     i1l378:
  6919  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6920  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6921  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6922  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6923  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6924  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6925  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6926  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6927  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6928  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6929  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6930  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6931  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6932  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6933  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6934  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6935  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6936  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6937  0000D4  0010               	retfie	
  6938  0000D6                     __end_of_InterruptHandlerLow:
  6939                           	opt stack 0
  6940                           pclatu	equ	0xFFB
  6941                           pclath	equ	0xFFA
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           prodh	equ	0xFF4
  6947                           prodl	equ	0xFF3
  6948                           intcon	equ	0xFF2
  6949                           postinc0	equ	0xFEE
  6950                           fsr0h	equ	0xFEA
  6951                           fsr0l	equ	0xFE9
  6952                           wreg	equ	0xFE8
  6953                           indf1	equ	0xFE7
  6954                           plusw1	equ	0xFE3
  6955                           fsr1h	equ	0xFE2
  6956                           fsr1l	equ	0xFE1
  6957                           bsr	equ	0xFE0
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           plusw2	equ	0xFDB
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _InterruptHandlerHigh *****************
  6967 ;; Defined at:
  6968 ;;		line 34 in file "main.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;		None
  6973 ;; Return value:  Size  Location     Type
  6974 ;;		None               void
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6982 ;;      Params:         0       0       0       0
  6983 ;;      Locals:         0       0       0       0
  6984 ;;      Temps:         14       0       0       0
  6985 ;;      Totals:        14       0       0       0
  6986 ;;Total ram usage:       14 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    1
  6989 ;; This function calls:
  6990 ;;		i2_delay_tenth_s
  6991 ;; This function is called by:
  6992 ;;		Interrupt level 2
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	intcode
  6997  000008                     __pintcode:
  6998                           	opt stack 0
  6999  000008                     _InterruptHandlerHigh:
  7000                           	opt stack 23
  7001                           
  7002                           ;incstack = 0
  7003  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7004  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7005  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7006  000012  EFBE  F00B         	goto	int_func
  7007                           pclatu	equ	0xFFB
  7008                           pclath	equ	0xFFA
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           postinc0	equ	0xFEE
  7017                           fsr0h	equ	0xFEA
  7018                           fsr0l	equ	0xFE9
  7019                           wreg	equ	0xFE8
  7020                           indf1	equ	0xFE7
  7021                           plusw1	equ	0xFE3
  7022                           fsr1h	equ	0xFE2
  7023                           fsr1l	equ	0xFE1
  7024                           bsr	equ	0xFE0
  7025                           indf2	equ	0xFDF
  7026                           postinc2	equ	0xFDE
  7027                           postdec2	equ	0xFDD
  7028                           plusw2	equ	0xFDB
  7029                           fsr2h	equ	0xFDA
  7030                           fsr2l	equ	0xFD9
  7031                           status	equ	0xFD8
  7032                           
  7033                           	psect	intcode_body
  7034  00177C                     __pintcode_body:
  7035                           	opt stack 23
  7036  00177C                     int_func:
  7037                           	opt stack 23
  7038  00177C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7039  001780  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7040  001784  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7041  001788  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7042  00178C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7043  001790  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7044  001794  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7045  001798  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7046  00179C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7047  0017A0  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7048  0017A4  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7049  0017A8  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7050                           
  7051                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7052  0017AC  A2F2               	btfss	intcon,1,c	;volatile
  7053  0017AE  D00D               	goto	i2l386
  7054                           
  7055                           ;main.c: 36: if (mode==-1) {
  7056  0017B0  283B               	incf	_mode,w,c	;volatile
  7057  0017B2  A4D8               	btfss	status,2,c
  7058  0017B4  D003               	goto	i2l2694
  7059                           
  7060                           ;main.c: 38: mode=1;
  7061  0017B6  0E01               	movlw	1
  7062  0017B8  6E3B               	movwf	_mode,c	;volatile
  7063                           
  7064                           ;main.c: 39: } else if (mode==0) {
  7065  0017BA  D003               	goto	i2l2698
  7066  0017BC                     i2l2694:
  7067  0017BC  503B               	movf	_mode,w,c	;volatile
  7068  0017BE  A4D8               	btfss	status,2,c
  7069                           
  7070                           ;main.c: 43: mode=-1;
  7071                           
  7072                           ;main.c: 41: } else {
  7073  0017C0  683B               	setf	_mode,c	;volatile
  7074  0017C2                     i2l2698:
  7075                           
  7076                           ;main.c: 44: }
  7077                           ;main.c: 46: delay_tenth_s(2);
  7078  0017C2  0E02               	movlw	2
  7079  0017C4  EC32  F00E         	call	i2_delay_tenth_s
  7080                           
  7081                           ;main.c: 47: INTCONbits.INT0IF=0;
  7082  0017C8  92F2               	bcf	intcon,1,c	;volatile
  7083  0017CA                     i2l386:
  7084  0017CA  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7085  0017CE  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7086  0017D2  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7087  0017D6  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7088  0017DA  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7089  0017DE  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7090  0017E2  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7091  0017E6  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7092  0017EA  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7093  0017EE  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7094  0017F2  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7095  0017F6  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7096  0017FA  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7097  0017FE  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7098  001802  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7099  001804  0011               	retfie		f
  7100  001806                     __end_of_InterruptHandlerHigh:
  7101                           	opt stack 0
  7102                           pclatu	equ	0xFFB
  7103                           pclath	equ	0xFFA
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           postinc0	equ	0xFEE
  7112                           fsr0h	equ	0xFEA
  7113                           fsr0l	equ	0xFE9
  7114                           wreg	equ	0xFE8
  7115                           indf1	equ	0xFE7
  7116                           plusw1	equ	0xFE3
  7117                           fsr1h	equ	0xFE2
  7118                           fsr1l	equ	0xFE1
  7119                           bsr	equ	0xFE0
  7120                           indf2	equ	0xFDF
  7121                           postinc2	equ	0xFDE
  7122                           postdec2	equ	0xFDD
  7123                           plusw2	equ	0xFDB
  7124                           fsr2h	equ	0xFDA
  7125                           fsr2l	equ	0xFD9
  7126                           status	equ	0xFD8
  7127                           
  7128 ;; *************** function i2_delay_tenth_s *****************
  7129 ;; Defined at:
  7130 ;;		line 32 in file "Movement.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  tenth_second    1    wreg     unsigned char 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7135 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7136 ;; Return value:  Size  Location     Type
  7137 ;;		None               void
  7138 ;; Registers used:
  7139 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7145 ;;      Params:         0       0       0       0
  7146 ;;      Locals:         3       0       0       0
  7147 ;;      Temps:          1       0       0       0
  7148 ;;      Totals:         4       0       0       0
  7149 ;;Total ram usage:        4 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; This function calls:
  7152 ;;		Nothing
  7153 ;; This function is called by:
  7154 ;;		_InterruptHandlerHigh
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text32
  7159  001C64                     __ptext32:
  7160                           	opt stack 0
  7161  001C64                     i2_delay_tenth_s:
  7162                           	opt stack 23
  7163                           
  7164                           ;incstack = 0
  7165                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7166  001C64  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7167                           
  7168                           ;Movement.c: 33: unsigned int i=0;
  7169  001C66  0E00               	movlw	0
  7170  001C68  6E04               	movwf	i2delay_tenth_s@i+1,c
  7171  001C6A  0E00               	movlw	0
  7172  001C6C  6E03               	movwf	i2delay_tenth_s@i,c
  7173                           
  7174                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7175  001C6E  0E00               	movlw	0
  7176  001C70  6E04               	movwf	i2delay_tenth_s@i+1,c
  7177  001C72  0E01               	movlw	1
  7178  001C74  6E03               	movwf	i2delay_tenth_s@i,c
  7179  001C76  D009               	goto	i2l2654
  7180  001C78                     i2l2650:
  7181                           
  7182                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7183  001C78  0E82               	movlw	130
  7184  001C7A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7185  001C7C  0EDE               	movlw	222
  7186  001C7E                     i2u333_47:
  7187  001C7E  2EE8               	decfsz	wreg,f,c
  7188  001C80  D7FE               	goto	i2u333_47
  7189  001C82  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7190  001C84  D7FC               	goto	i2u333_47
  7191  001C86  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7192  001C88  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7193  001C8A                     i2l2654:
  7194  001C8A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7195  001C8C  0D02               	mullw	2
  7196  001C8E  5003               	movf	i2delay_tenth_s@i,w,c
  7197  001C90  5CF3               	subwf	prodl,w,c
  7198  001C92  5004               	movf	i2delay_tenth_s@i+1,w,c
  7199  001C94  58F4               	subwfb	prodh,w,c
  7200  001C96  A0D8               	btfss	status,0,c
  7201  001C98  0012               	return	
  7202  001C9A  D7EE               	goto	i2l2650
  7203  001C9C                     __end_ofi2_delay_tenth_s:
  7204                           	opt stack 0
  7205                           pclatu	equ	0xFFB
  7206                           pclath	equ	0xFFA
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           prodh	equ	0xFF4
  7212                           prodl	equ	0xFF3
  7213                           intcon	equ	0xFF2
  7214                           postinc0	equ	0xFEE
  7215                           fsr0h	equ	0xFEA
  7216                           fsr0l	equ	0xFE9
  7217                           wreg	equ	0xFE8
  7218                           indf1	equ	0xFE7
  7219                           plusw1	equ	0xFE3
  7220                           fsr1h	equ	0xFE2
  7221                           fsr1l	equ	0xFE1
  7222                           bsr	equ	0xFE0
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           postdec2	equ	0xFDD
  7226                           plusw2	equ	0xFDB
  7227                           fsr2h	equ	0xFDA
  7228                           fsr2l	equ	0xFD9
  7229                           status	equ	0xFD8
  7230                           pclatu	equ	0xFFB
  7231                           pclath	equ	0xFFA
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           intcon	equ	0xFF2
  7239                           postinc0	equ	0xFEE
  7240                           fsr0h	equ	0xFEA
  7241                           fsr0l	equ	0xFE9
  7242                           wreg	equ	0xFE8
  7243                           indf1	equ	0xFE7
  7244                           plusw1	equ	0xFE3
  7245                           fsr1h	equ	0xFE2
  7246                           fsr1l	equ	0xFE1
  7247                           bsr	equ	0xFE0
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           plusw2	equ	0xFDB
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256                           	psect	rparam
  7257  0000                     pclatu	equ	0xFFB
  7258                           pclath	equ	0xFFA
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           postinc0	equ	0xFEE
  7267                           fsr0h	equ	0xFEA
  7268                           fsr0l	equ	0xFE9
  7269                           wreg	equ	0xFE8
  7270                           indf1	equ	0xFE7
  7271                           plusw1	equ	0xFE3
  7272                           fsr1h	equ	0xFE2
  7273                           fsr1l	equ	0xFE1
  7274                           bsr	equ	0xFE0
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           postdec2	equ	0xFDD
  7278                           plusw2	equ	0xFDB
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283                           	psect	temp
  7284  00003C                     btemp:
  7285                           	opt stack 0
  7286  00003C                     	ds	1
  7287  0000                     int$flags	set	btemp
  7288                           pclatu	equ	0xFFB
  7289                           pclath	equ	0xFFA
  7290                           tblptru	equ	0xFF8
  7291                           tblptrh	equ	0xFF7
  7292                           tblptrl	equ	0xFF6
  7293                           tablat	equ	0xFF5
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           intcon	equ	0xFF2
  7297                           postinc0	equ	0xFEE
  7298                           fsr0h	equ	0xFEA
  7299                           fsr0l	equ	0xFE9
  7300                           wreg	equ	0xFE8
  7301                           indf1	equ	0xFE7
  7302                           plusw1	equ	0xFE3
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           bsr	equ	0xFE0
  7306                           indf2	equ	0xFDF
  7307                           postinc2	equ	0xFDE
  7308                           postdec2	equ	0xFDD
  7309                           plusw2	equ	0xFDB
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           239      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   70906
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24035
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11548
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0      64       9       41.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5F      99       4       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       5        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 18:54:00 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 140E  
                                  l67 18E4                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l226 0D26                                   l227 0D56  
                                 l229 0EAC                                   l436 0A1C  
                                 l429 099A                                   l395 041C  
                                 l903 1AEC                                   l913 1B2E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3010 18C4                                  l3002 188C  
                                l2220 191A                                  l3020 16EA  
                                l2230 195E                                  l3110 11C8  
                                l3006 18A8                                  l2240 1994  
                                l2224 1922                                  l2160 1AC6  
                                l3104 11A6                                  l3024 1702  
                                l2146 0198                                  l3114 1200  
                                l3050 103A                                  l3034 173A  
                                l3202 154E                                  l2236 198C  
                                l2156 1ABA                                  l2180 1B10  
                                l3140 1284                                  l3124 122E  
                                l3132 1254                                  l3116 120A  
                                l3028 171A                                  l2262 19F0  
                                l2254 00EE                                  l2246 19D0  
                                l2158 1AC2                                  l3134 1260  
                                l3062 1070                                  l3302 0F58  
                                l3310 0F70                                  l2168 1AE2  
                                l2184 1B24                                  l2176 1B04  
                                l3080 113A                                  l3056 1056  
                                l2272 1C40                                  l2258 0100  
                                l2178 1B0C                                  l3154 12FE  
                                l3146 12A2                                  l3090 116A  
                                l3058 1068                                  l3234 0C58  
                                l2426 1CE6                                  l2268 1A24  
                                l3148 12A8                                  l3092 1170  
                                l3068 10A0                                  l3156 130A  
                                l2276 1C52                                  l3308 0F6A  
                                l3420 0500                                  l3158 1324  
                                l3078 1112                                  l3504 0776  
                                l3440 0552                                  l3416 04CE  
                                l3274 0D9A                                  l3506 077C  
                                l3514 07E4                                  l3276 0DB2  
                                l3532 0870                                  l3380 0422  
                                l3286 0EA8                                  l3542 08E6  
                                l3526 084C                                  l3462 0648  
                                l3560 0A20                                  l3472 0698  
                                l3554 0950                                  l3482 0700  
                                l3466 0672                                  l3458 05E8  
                                l3492 074A                                  l3566 0A9A  
                                l3558 09BE                                  l3494 0750  
                                l3486 070A                                  l3582 0AFE  
                                l3568 0AD4                                  l3576 0AE0  
                                l2970 1848                                  l2962 182A  
                                l3578 0AFC                                  l3498 075A  
                                l2980 1868                                  l2972 184C  
                                l2956 181A                                  l2968 1840  
                                l2984 1872                                  l2988 1880  
                                l2998 13E6                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1305 159C  
                                u1315 15AA                                  u1325 15CA  
                                u3030 0A5E                                  _LATB 000F8A  
                                u1335 15D8                                  u1600 1A14  
                                u1345 1608                                  u1610 1A44  
                                u3107 1664                                  u1285 1570  
                                u2405 145C                                  u3117 1672  
                                u1295 157E                                  u1607 1A0A  
                                u1535 192A                                  u3207 18DE  
                                u3127 1680                                  u1617 1A3A  
                                u3217 1C46                                  u3137 1692  
                                u3307 0132                                  u1395 0114  
                                u3227 14BA                                  u3147 16A4  
                                u3067 047E                                  u1396 0116  
                                u3317 1624                                  u1565 199C  
                                u3237 14D0                                  u3157 16BA  
                                u3077 0496                                  u3327 01D2  
                                u3247 1734                                  u3167 16CE  
                                u3087 163E                                  u2384 13A6  
                                u3257 1952                                  u2385 13A2  
                                u3177 16E0                                  u3097 1654  
                                u2801 0378                                  u2394 1402  
                                u3267 19C4                                  u2395 13FE  
                                u3187 0C8C                                  u3277 0102  
                                u3197 0CA4                                  u1845 1CE2  
                                u1846 1CE4                                  u3287 1A1E  
                                u3297 0122                                  u1865 1CF4  
                                u1866 1CF6                                  u2791 0366  
                                u2880 06CA                                  u2890 06DE  
                                u2882 06CC                                  u2892 06E0  
                                u2990 092C                                  _main 0350  
                                _mode 003B                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 16E8  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AF                          ___param_bank 000010  
                     i2_delay_tenth_s 1C64                       __end_of_SendLCD 013A  
                     __end_of_SetLine 010A                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 188A                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1AF6  
                     __end_of___lwmod 1B38                                 i1l378 008E  
                               i2l386 17CA                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 01CE  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 16E8  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 01A0                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 1332  
              __size_of_ScanWithRange 050C                        __CFG_MCLRE$OFF 000000  
                     __initialization 1C9C                          __end_of_main 0B20  
                        __end_of_stop 177C                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1CF8  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2684 008A  
                              i1l2686 008C                        __CFG_WDTEN$OFF 000000  
                              i2l2650 1C78                                i2l2654 1C8A  
                              i2l2694 17BC                                i2l2698 17C2  
               __end_of_delay_tenth_s 1C64                                _LCDout 1566  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AA  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1C9C                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 146C  
                           ??_SetLine 002A                           fullSpeed@mL 0062  
                         fullSpeed@mR 0064                                ___wmul 013A  
                           ??___awdiv 002E                      __end_of_initRFID 01BC  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 0160                  __size_of_grabRightIR 0072  
                              clear_0 1CA2                                clear_1 1CAE  
                              clear_2 1CBA                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B20                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1BF2  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1CC4  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 01DC                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1B38                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 17FE  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __size_of_fullSpeed 0080  
                  __end_of_LCD_String 1A4C                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 197C  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1CD2  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C2C  
              ScanWithRange@RFID_Read 0079                               _SendLCD 010A  
                             __Hparam 0000                               _SetLine 00DA  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1806                       __size_of___wmul 0026  
                             ___lwdiv 1AA4                               ___lwmod 1AF6  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1C9C                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 01BC  
                             __ptext2 01A0                               __ptext3 1BF2  
                             __ptext4 162C                               __ptext5 0160  
                             __ptext6 1B38                               __ptext7 1CD2  
                             __ptext8 1A4C                               __ptext9 0B20  
                           _T0CONbits 000FD5                               _initLCD 162C  
                   __end_of_initTimer 01CE                               _dpowers 0301  
                   __end_of_fullSpeed 190A                               _isdigit 0182  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 102C  
                      __pintcode_body 177C                  end_of_initialization 1CC4  
                      ScanWithRange@i 00AB                        ScanWithRange@n 00A8  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 177C  
                  ScanIR@SensorResult 009B                       ??_fullSpeedBack 003A  
                           _RFID_Read 01F6                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
              ScanWithRange@LeftFlick 00B0                     __end_of_turnRight 1BB4  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                ScanWithRange@RightFlag 00B8  
                      __end_of_LCDout 162C                             _TXSTAbits 000FAC  
                           ScanIR@buf 0071                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1566                        _ReceivedString 01E6  
                      __end_of___wmul 0160                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 0182  
              __size_of_delay_tenth_s 0038                   start_initialization 1C9C  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 003A  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1806  
                            ??_ScanIR 0039                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 197C                          _initMotorPWM 1BF2  
                         __pbssCOMRAM 003A                        fullSpeed@power 0066  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$2085 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1C2C                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                             __pintcode 0008  
                __end_of_VerifySignal 1AA4                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 01BC  
                           _fullSpeed 188A                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u333_47 1C7E                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 0200  
                           main@F3895 00BF                             main@F3898 01E2  
                         _grabRightIR 190A                 ScanWithRange@LeftFlag 00B1  
                grabRightIR@IR_signal 0029                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 102C                          setMotorPWM@m 0032  
               ScanWithRange@MoveTime 0073                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0077                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1B76  
                          ?_fullSpeed 0062                      ScanWithRange@buf 0080  
                 __end_of_setMotorPWM 146C                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1B76                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 19EE                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1B76  
                            __ptext11 1BB4                              __ptext20 013A  
                            __ptext12 188A                              __ptext21 1AF6  
                            __ptext13 1C2C                              __ptext22 1AA4  
                            __ptext14 146C                              __ptext23 190A  
                            __ptext15 16E8                              __ptext32 1C64  
                            __ptext24 197C                              __ptext16 1332  
                            __ptext25 00DA                              __ptext17 1806  
                            __ptext26 19EE                              __ptext18 102C  
                            __ptext27 010A                              __ptext19 0182  
                            __ptext28 1566                              __ptext29 01CE  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 01A0             ScanWithRange@SensorResult 00B4  
                      turnRight@power 006B                         __size_of_main 07D0  
                  main@DirectionFound 01CD                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 19EE  
                            _turnLeft 1BB4                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           ??_fullSpeed 0039  
                         _setMotorPWM 1332                          _VerifySignal 1A4C  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AD                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
