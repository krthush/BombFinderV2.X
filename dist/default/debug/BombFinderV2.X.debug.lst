

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 19:32:16 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  0018E2                     __pcinit:
   189                           	opt stack 0
   190  0018E2                     start_initialization:
   191                           	opt stack 0
   192  0018E2                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  0018E2  0101               	movlb	1
   197  0018E4  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  0018E6  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  0018E8  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  0018EA  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  0018EC  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  0018EE  EE00  F0C0         	lfsr	0,__pbssBANK0
   205  0018F2  0E18               	movlw	24
   206  0018F4                     clear_0:
   207  0018F4  6AEE               	clrf	postinc0,c
   208  0018F6  06E8               	decf	wreg,f,c
   209  0018F8  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  0018FA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  0018FC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  0018FE                     end_of_initialization:
   215                           	opt stack 0
   216  0018FE                     __end_of__initialization:
   217                           	opt stack 0
   218  0018FE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  001900  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  001902  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001904  6EF8               	movwf	tblptru,c
   222  001906  0100               	movlb	0
   223  001908  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000C0                     __pbssBANK0:
   243                           	opt stack 0
   244  0000C0                     ScanIR@F3884:
   245                           	opt stack 0
   246  0000C0                     	ds	4
   247  0000C4                     ScanWithRange@F3896:
   248                           	opt stack 0
   249  0000C4                     	ds	4
   250  0000C8                     _ReceivedString:
   251                           	opt stack 0
   252  0000C8                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3898:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
   275                           
   276                           ; 100 bytes @ 0x0
   277  000200                     	ds	100
   278  000264                     main@mL:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x64
   282  000264                     	ds	9
   283  00026D                     main@mR:
   284                           	opt stack 0
   285                           
   286                           ; 9 bytes @ 0x6D
   287  00026D                     	ds	9
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 200 bytes @ 0x0
   299  000100                     	ds	200
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ScanIR@MoveType:
   416                           	opt stack 0
   417  000075                     ScanWithRange@RFID_Read:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x15
   421  000075                     	ds	2
   422  000077                     ScanWithRange@mode:
   423                           	opt stack 0
   424  000077                     ScanIR@buf:
   425                           	opt stack 0
   426                           
   427                           ; 40 bytes @ 0x17
   428  000077                     	ds	2
   429  000079                     ??_ScanWithRange:
   430                           
   431                           ; 0 bytes @ 0x19
   432  000079                     	ds	5
   433  00007E                     ScanWithRange@buf:
   434                           	opt stack 0
   435                           
   436                           ; 40 bytes @ 0x1E
   437  00007E                     	ds	33
   438  00009F                     ScanIR@DirectionMoveThreshold:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x3F
   442  00009F                     	ds	2
   443  0000A1                     ScanIR@SensorResult:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x41
   447  0000A1                     	ds	5
   448  0000A6                     ScanWithRange@n:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x46
   452  0000A6                     	ds	2
   453  0000A8                     ScanWithRange@i:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x48
   457  0000A8                     	ds	2
   458  0000AA                     ScanWithRange@DirectionFoundThreshold:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x4A
   462  0000AA                     	ds	2
   463  0000AC                     ScanWithRange@power:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x4C
   467  0000AC                     	ds	1
   468  0000AD                     ScanWithRange@TimeAboveThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4D
   472  0000AD                     	ds	1
   473  0000AE                     ScanWithRange@SensorResult:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x4E
   477  0000AE                     	ds	4
   478  0000B2                     ScanWithRange@LeftFlag:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x52
   482  0000B2                     	ds	2
   483  0000B4                     ScanWithRange@RightFlag:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x54
   487  0000B4                     	ds	2
   488  0000B6                     ??_main:
   489                           
   490                           ; 0 bytes @ 0x56
   491  0000B6                     	ds	2
   492  0000B8                     main@ScanAngle:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x58
   496  0000B8                     	ds	1
   497  0000B9                     main@SensorResult:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x59
   501  0000B9                     	ds	4
   502  0000BD                     main@DirectionFound:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x5D
   506  0000BD                     	ds	1
   507  0000BE                     main@Move:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x5E
   511  0000BE                     	ds	1
   512  0000BF                     main@i:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x5F
   516  0000BF                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           
   521                           	psect	cstackCOMRAM
   522  000001                     __pcstackCOMRAM:
   523                           	opt stack 0
   524  000001                     ??i2_delay_tenth_s:
   525                           
   526                           ; 0 bytes @ 0x0
   527  000001                     	ds	1
   528  000002                     i2delay_tenth_s@tenth_seconds:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x1
   532  000002                     	ds	1
   533  000003                     i2delay_tenth_s@i:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x2
   537  000003                     	ds	2
   538  000005                     ??_InterruptHandlerHigh:
   539                           
   540                           ; 0 bytes @ 0x4
   541  000005                     	ds	14
   542  000013                     ??_InterruptHandlerLow:
   543                           
   544                           ; 0 bytes @ 0x12
   545  000013                     	ds	17
   546  000024                     ??_isdigit:
   547  000024                     ??_LCDout:
   548  000024                     ??_delay_tenth_s:
   549  000024                     ?_grabRightIR:
   550                           	opt stack 0
   551  000024                     ?_grabLeftIR:
   552                           	opt stack 0
   553  000024                     ?___wmul:
   554                           	opt stack 0
   555  000024                     ?___lwdiv:
   556                           	opt stack 0
   557  000024                     enableSensor@status:
   558                           	opt stack 0
   559  000024                     VerifySignal@Signal:
   560                           	opt stack 0
   561  000024                     ___wmul@multiplier:
   562                           	opt stack 0
   563  000024                     ___lwdiv@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x23
   567  000024                     	ds	1
   568  000025                     enableSensor@sensor:
   569                           	opt stack 0
   570  000025                     delay_tenth_s@tenth_seconds:
   571                           	opt stack 0
   572  000025                     _isdigit$1963:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x24
   576  000025                     	ds	1
   577  000026                     ??_grabRightIR:
   578  000026                     ??_grabLeftIR:
   579  000026                     ??_VerifySignal:
   580  000026                     isdigit@c:
   581                           	opt stack 0
   582  000026                     delay_tenth_s@i:
   583                           	opt stack 0
   584  000026                     ___wmul@multiplicand:
   585                           	opt stack 0
   586  000026                     ___lwdiv@divisor:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x25
   590  000026                     	ds	1
   591  000027                     LCDout@number:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x26
   595  000027                     	ds	1
   596  000028                     SendLCD@type:
   597                           	opt stack 0
   598  000028                     ___wmul@product:
   599                           	opt stack 0
   600  000028                     ___lwdiv@quotient:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x27
   604  000028                     	ds	1
   605  000029                     SendLCD@Byte:
   606                           	opt stack 0
   607  000029                     grabRightIR@IR_signal:
   608                           	opt stack 0
   609  000029                     grabLeftIR@IR_signal:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x28
   613  000029                     	ds	1
   614  00002A                     ??_initLCD:
   615  00002A                     ?___awdiv:
   616                           	opt stack 0
   617  00002A                     SetLine@line:
   618                           	opt stack 0
   619  00002A                     ___lwdiv@counter:
   620                           	opt stack 0
   621  00002A                     LCD_String@string:
   622                           	opt stack 0
   623  00002A                     ___awdiv@dividend:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x29
   627  00002A                     	ds	1
   628  00002B                     ?___lwmod:
   629                           	opt stack 0
   630  00002B                     grabRightIR@i:
   631                           	opt stack 0
   632  00002B                     grabLeftIR@i:
   633                           	opt stack 0
   634  00002B                     ___lwmod@dividend:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2A
   638  00002B                     	ds	1
   639  00002C                     VerifySignal@checksum:
   640                           	opt stack 0
   641  00002C                     ___awdiv@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2B
   645  00002C                     	ds	1
   646  00002D                     VerifySignal@hexByte:
   647                           	opt stack 0
   648  00002D                     ___lwmod@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2C
   652  00002D                     	ds	1
   653  00002E                     ___awdiv@counter:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x2D
   657  00002E                     	ds	1
   658  00002F                     VerifySignal@i:
   659                           	opt stack 0
   660  00002F                     ___awdiv@sign:
   661                           	opt stack 0
   662  00002F                     ___lwmod@counter:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x2E
   666  00002F                     	ds	1
   667  000030                     ?_sprintf:
   668                           	opt stack 0
   669  000030                     sprintf@sp:
   670                           	opt stack 0
   671  000030                     ___awdiv@quotient:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x2F
   675  000030                     	ds	2
   676  000032                     setMotorPWM@m:
   677                           	opt stack 0
   678  000032                     sprintf@f:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x31
   682  000032                     	ds	2
   683  000034                     ??_setMotorPWM:
   684                           
   685                           ; 0 bytes @ 0x33
   686  000034                     	ds	5
   687  000039                     ??_ScanIR:
   688                           
   689                           ; 0 bytes @ 0x38
   690  000039                     	ds	1
   691  00003A                     tblptru	equ	0xFF8
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           
   695                           ; 0 bytes @ 0x39
   696 ;;
   697 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   698 ;;
   699 ;; *************** function _main *****************
   700 ;; Defined at:
   701 ;;		line 51 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  MoveTime      200    0[BANK1 ] int [100]
   706 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   707 ;;  buf            40  200[BANK1 ] unsigned char [40]
   708 ;;  Message        10  240[BANK1 ] unsigned char [10]
   709 ;;  mR              9  109[BANK2 ] struct DC_motor
   710 ;;  mL              9  100[BANK2 ] struct DC_motor
   711 ;;  SensorResult    4   89[BANK0 ] unsigned int [2]
   712 ;;  i               1   95[BANK0 ] unsigned char 
   713 ;;  Move            1   94[BANK0 ] unsigned char 
   714 ;;  DirectionFou    1   93[BANK0 ] char 
   715 ;;  ScanAngle       1   88[BANK0 ] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;		None               void
   718 ;; Registers used:
   719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   725 ;;      Params:         0       0       0       0
   726 ;;      Locals:         0       8     250     118
   727 ;;      Temps:          0       2       0       0
   728 ;;      Totals:         0      10     250     118
   729 ;;Total ram usage:      378 bytes
   730 ;; Hardware stack levels required when called:    8
   731 ;; This function calls:
   732 ;;		_LCD_String
   733 ;;		_ScanIR
   734 ;;		_ScanWithRange
   735 ;;		_SendLCD
   736 ;;		_SetLine
   737 ;;		_VerifySignal
   738 ;;		_delay_tenth_s
   739 ;;		_enableSensor
   740 ;;		_fullSpeedAhead
   741 ;;		_fullSpeedBack
   742 ;;		_grabLeftIR
   743 ;;		_grabRightIR
   744 ;;		_initIR
   745 ;;		_initLCD
   746 ;;		_initMotorPWM
   747 ;;		_initRFID
   748 ;;		_initTimer
   749 ;;		_sprintf
   750 ;;		_stop
   751 ;; This function is called by:
   752 ;;		Startup code after reset
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text0
   757  000350                     __ptext0:
   758                           	opt stack 0
   759  000350                     _main:
   760                           	opt stack 23
   761                           
   762                           ;main.c: 54: unsigned char Message[10];
   763                           ;main.c: 55: unsigned char i=0;
   764                           
   765                           ;incstack = 0
   766  000350  0E00               	movlw	0
   767  000352  0100               	movlb	0	; () banked
   768  000354  6FBF               	movwf	main@i& (0+255),b
   769                           
   770                           ;main.c: 56: signed char DirectionFound=0;
   771  000356  0E00               	movlw	0
   772  000358  0100               	movlb	0	; () banked
   773  00035A  6FBD               	movwf	main@DirectionFound& (0+255),b
   774                           
   775                           ;main.c: 57: int MoveTime[100];
   776                           ;main.c: 58: char MoveType[100];
   777                           ;main.c: 59: char Move=0;
   778  00035C  0E00               	movlw	0
   779  00035E  0100               	movlb	0	; () banked
   780  000360  6FBE               	movwf	main@Move& (0+255),b
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   784  000362  C1FA  F0B9         	movff	main@F3898,main@SensorResult
   785  000366  C1FB  F0BA         	movff	main@F3898+1,main@SensorResult+1
   786  00036A  C1FC  F0BB         	movff	main@F3898+2,main@SensorResult+2
   787  00036E  C1FD  F0BC         	movff	main@F3898+3,main@SensorResult+3
   788                           
   789                           ;main.c: 61: char buf[40];
   790                           ;main.c: 63: unsigned char ScanAngle=60;
   791  000372  0E3C               	movlw	60
   792  000374  0100               	movlb	0	; () banked
   793  000376  6FB8               	movwf	main@ScanAngle& (0+255),b
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 66: INTCONbits.GIEH=1;
   797  000378  8EF2               	bsf	intcon,7,c	;volatile
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 67: INTCONbits.GIEL=1;
   801  00037A  8CF2               	bsf	intcon,6,c	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 68: INTCONbits.PEIE=1;
   805  00037C  8CF2               	bsf	intcon,6,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 69: RCONbits.IPEN=1;
   809  00037E  8ED0               	bsf	4048,7,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 72: IPR1bits.RCIP=0;
   813  000380  9A9F               	bcf	3999,5,c	;volatile
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 73: PIE1bits.RCIE=1;
   817  000382  8A9D               	bsf	3997,5,c	;volatile
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 76: TRISCbits.RC3=1;
   821  000384  8694               	bsf	3988,3,c	;volatile
   822                           
   823                           ; BSR set to: 0
   824                           ;main.c: 77: INTCONbits.INT0IE=1;
   825  000386  88F2               	bsf	intcon,4,c	;volatile
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 80: PIR1bits.RC1IF=0;
   829  000388  9A9E               	bcf	3998,5,c	;volatile
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 81: INTCONbits.INT0IF=0;
   833  00038A  92F2               	bcf	intcon,1,c	;volatile
   834                           
   835                           ;main.c: 84: struct DC_motor mL, mR;
   836                           ;main.c: 85: mL.power=0;
   837  00038C  0E00               	movlw	0
   838  00038E  0102               	movlb	2	; () banked
   839  000390  6F64               	movwf	main@mL& (0+255),b
   840                           
   841                           ;main.c: 86: mL.direction=1;
   842  000392  0E01               	movlw	1
   843  000394  0102               	movlb	2	; () banked
   844  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   845                           
   846                           ; BSR set to: 2
   847                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   848  000398  0E79               	movlw	121
   849  00039A  0102               	movlb	2	; () banked
   850  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   851  00039E  0E0F               	movlw	15
   852  0003A0  0102               	movlb	2	; () banked
   853  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   854                           
   855                           ; BSR set to: 2
   856                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   857  0003A4  0E78               	movlw	120
   858  0003A6  0102               	movlb	2	; () banked
   859  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   860  0003AA  0E0F               	movlw	15
   861  0003AC  0102               	movlb	2	; () banked
   862  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   863                           
   864                           ;main.c: 89: mL.dir_pin=0;
   865  0003B0  0E00               	movlw	0
   866  0003B2  0102               	movlb	2	; () banked
   867  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   868                           
   869                           ;main.c: 90: mL.PWMperiod=199;
   870  0003B6  0E00               	movlw	0
   871  0003B8  0102               	movlb	2	; () banked
   872  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   873  0003BC  0EC7               	movlw	199
   874  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   875                           
   876                           ;main.c: 92: mR.power=0;
   877  0003C0  0E00               	movlw	0
   878  0003C2  0102               	movlb	2	; () banked
   879  0003C4  6F6D               	movwf	main@mR& (0+255),b
   880                           
   881                           ;main.c: 93: mR.direction=1;
   882  0003C6  0E01               	movlw	1
   883  0003C8  0102               	movlb	2	; () banked
   884  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   885                           
   886                           ; BSR set to: 2
   887                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   888  0003CC  0E77               	movlw	119
   889  0003CE  0102               	movlb	2	; () banked
   890  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   891  0003D2  0E0F               	movlw	15
   892  0003D4  0102               	movlb	2	; () banked
   893  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   894                           
   895                           ; BSR set to: 2
   896                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   897  0003D8  0E76               	movlw	118
   898  0003DA  0102               	movlb	2	; () banked
   899  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   900  0003DE  0E0F               	movlw	15
   901  0003E0  0102               	movlb	2	; () banked
   902  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   903                           
   904                           ;main.c: 96: mR.dir_pin=2;
   905  0003E4  0E02               	movlw	2
   906  0003E6  0102               	movlb	2	; () banked
   907  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   908                           
   909                           ;main.c: 97: mR.PWMperiod=199;
   910  0003EA  0E00               	movlw	0
   911  0003EC  0102               	movlb	2	; () banked
   912  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   913  0003F0  0EC7               	movlw	199
   914  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   915                           
   916                           ;main.c: 99: OSCCON = 0x72;
   917  0003F4  0E72               	movlw	114
   918  0003F6  6ED3               	movwf	4051,c	;volatile
   919  0003F8                     l381:
   920  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   921  0003FA  D23F               	goto	l3386
   922  0003FC  D7FD               	goto	l381
   923  0003FE                     l3226:
   924                           
   925                           ;main.c: 112: stop(&mL, &mR);
   926  0003FE  0E64               	movlw	low main@mL
   927  000400  0100               	movlb	0	; () banked
   928  000402  6F62               	movwf	stop@mL& (0+255),b
   929  000404  0E02               	movlw	high main@mL
   930  000406  0100               	movlb	0	; () banked
   931  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   932  00040A  0E6D               	movlw	low main@mR
   933  00040C  0100               	movlb	0	; () banked
   934  00040E  6F64               	movwf	stop@mR& (0+255),b
   935  000410  0E02               	movlw	high main@mR
   936  000412  0100               	movlb	0	; () banked
   937  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   938  000416  EC9D  F009         	call	_stop	;wreg free
   939                           
   940                           ;main.c: 113: RFID_Read=0;
   941  00041A  0E00               	movlw	0
   942  00041C  0101               	movlb	1	; () banked
   943  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   944                           
   945                           ; BSR set to: 1
   946                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   947  000420  ECE1  F00A         	call	_grabLeftIR	;wreg free
   948  000424  C024  F0B9         	movff	?_grabLeftIR,main@SensorResult
   949  000428  C025  F0BA         	movff	?_grabLeftIR+1,main@SensorResult+1
   950                           
   951                           ;main.c: 117: SensorResult[1]=grabRightIR();
   952  00042C  ECA8  F00A         	call	_grabRightIR	;wreg free
   953  000430  C024  F0BB         	movff	?_grabRightIR,main@SensorResult+2
   954  000434  C025  F0BC         	movff	?_grabRightIR+1,main@SensorResult+3
   955                           
   956                           ;main.c: 121: CAP1BUFH=0;
   957  000438  0E00               	movlw	0
   958  00043A  6E69               	movwf	3945,c	;volatile
   959                           
   960                           ;main.c: 122: CAP1BUFL=0;
   961  00043C  0E00               	movlw	0
   962  00043E  6E68               	movwf	3944,c	;volatile
   963                           
   964                           ;main.c: 123: CAP2BUFH=0;
   965  000440  0E00               	movlw	0
   966  000442  6E67               	movwf	3943,c	;volatile
   967                           
   968                           ;main.c: 124: CAP2BUFL=0;
   969  000444  0E00               	movlw	0
   970  000446  6E66               	movwf	3942,c	;volatile
   971                           
   972                           ;main.c: 127: SendLCD(0b00000001,0);
   973  000448  0E00               	movlw	0
   974  00044A  6E28               	movwf	SendLCD@type,c
   975  00044C  0E01               	movlw	1
   976  00044E  EC59  F00C         	call	_SendLCD
   977                           
   978                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   979  000452  0E21               	movlw	33
   980  000454                     u2817:
   981  000454  2EE8               	decfsz	wreg,f,c
   982  000456  D7FE               	goto	u2817
   983  000458  F000               	nop	
   984                           
   985                           ;main.c: 129: SendLCD(0b00000010,0);
   986  00045A  0E00               	movlw	0
   987  00045C  6E28               	movwf	SendLCD@type,c
   988  00045E  0E02               	movlw	2
   989  000460  EC59  F00C         	call	_SendLCD
   990                           
   991                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   992  000464  0E06               	movlw	6
   993  000466  0100               	movlb	0	; () banked
   994  000468  6FB6               	movwf	??_main& (0+255),b
   995  00046A  0E30               	movlw	48
   996  00046C                     u2827:
   997  00046C  2EE8               	decfsz	wreg,f,c
   998  00046E  D7FE               	goto	u2827
   999  000470  2FB6               	decfsz	??_main& (0+255),f,b
  1000  000472  D7FC               	goto	u2827
  1001  000474  D000               	nop2	
  1002                           
  1003                           ;main.c: 131: SetLine(1);
  1004  000476  0E01               	movlw	1
  1005  000478  EC41  F00C         	call	_SetLine
  1006                           
  1007                           ;main.c: 132: LCD_String("      Inert Mode");
  1008  00047C  0E1C               	movlw	low STR_5
  1009  00047E  6E2A               	movwf	LCD_String@string,c
  1010  000480  0E03               	movlw	high STR_5
  1011  000482  6E2B               	movwf	LCD_String@string+1,c
  1012  000484  EC1A  F00B         	call	_LCD_String	;wreg free
  1013                           
  1014                           ;main.c: 133: SetLine(2);
  1015  000488  0E02               	movlw	2
  1016  00048A  EC41  F00C         	call	_SetLine
  1017                           
  1018                           ;main.c: 134: if (RFID_Read) {
  1019  00048E  0101               	movlb	1	; () banked
  1020  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1021  000492  B4D8               	btfsc	status,2,c
  1022  000494  D007               	goto	l3260
  1023                           
  1024                           ; BSR set to: 1
  1025                           ;main.c: 135: LCD_String(Message);
  1026  000496  0EF0               	movlw	low main@Message
  1027  000498  6E2A               	movwf	LCD_String@string,c
  1028  00049A  0E01               	movlw	high main@Message
  1029  00049C  6E2B               	movwf	LCD_String@string+1,c
  1030  00049E  EC1A  F00B         	call	_LCD_String	;wreg free
  1031                           
  1032                           ;main.c: 136: } else {
  1033  0004A2  D1EB               	goto	l3386
  1034  0004A4                     l3260:
  1035                           
  1036                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1037  0004A4  0EC8               	movlw	low main@buf
  1038  0004A6  6E30               	movwf	sprintf@sp,c
  1039  0004A8  0E01               	movlw	high main@buf
  1040  0004AA  6E31               	movwf	sprintf@sp+1,c
  1041  0004AC  0E0B               	movlw	low STR_6
  1042  0004AE  6E32               	movwf	sprintf@f,c
  1043  0004B0  0E03               	movlw	high STR_6
  1044  0004B2  6E33               	movwf	sprintf@f+1,c
  1045  0004B4  C0B9  F034         	movff	main@SensorResult,?_sprintf+4
  1046  0004B8  C0BA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1047  0004BC  C0BB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1048  0004C0  C0BC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1049  0004C4  ECE5  F005         	call	_sprintf	;wreg free
  1050                           
  1051                           ;main.c: 138: LCD_String(buf);
  1052  0004C8  0EC8               	movlw	low main@buf
  1053  0004CA  6E2A               	movwf	LCD_String@string,c
  1054  0004CC  0E01               	movlw	high main@buf
  1055  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1056  0004D0  EC1A  F00B         	call	_LCD_String	;wreg free
  1057                           
  1058                           ;main.c: 139: }
  1059                           ;main.c: 142: break;
  1060  0004D4  D1D2               	goto	l3386
  1061  0004D6                     l3264:
  1062                           
  1063                           ;main.c: 147: initMotorPWM();
  1064  0004D6  EC28  F00C         	call	_initMotorPWM	;wreg free
  1065                           
  1066                           ;main.c: 148: initTimer();
  1067  0004DA  ECDA  F00C         	call	_initTimer	;wreg free
  1068                           
  1069                           ;main.c: 149: initRFID();
  1070  0004DE  ECCC  F00C         	call	_initRFID	;wreg free
  1071                           
  1072                           ;main.c: 150: initLCD();
  1073  0004E2  ECE5  F008         	call	_initLCD	;wreg free
  1074                           
  1075                           ;main.c: 151: initIR();
  1076  0004E6  ECAC  F00C         	call	_initIR	;wreg free
  1077                           
  1078                           ;main.c: 153: enableSensor(0, 1);
  1079  0004EA  0E01               	movlw	1
  1080  0004EC  6E24               	movwf	enableSensor@status,c
  1081  0004EE  0E00               	movlw	0
  1082  0004F0  EC86  F00C         	call	_enableSensor
  1083                           
  1084                           ;main.c: 154: enableSensor(1, 1);
  1085  0004F4  0E01               	movlw	1
  1086  0004F6  6E24               	movwf	enableSensor@status,c
  1087  0004F8  0E01               	movlw	1
  1088  0004FA  EC86  F00C         	call	_enableSensor
  1089                           
  1090                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1091  0004FE  0E64               	movlw	low main@mL
  1092  000500  0100               	movlb	0	; () banked
  1093  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1094  000504  0E02               	movlw	high main@mL
  1095  000506  0100               	movlb	0	; () banked
  1096  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1097  00050A  0E6D               	movlw	low main@mR
  1098  00050C  0100               	movlb	0	; () banked
  1099  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1100  000510  0E02               	movlw	high main@mR
  1101  000512  0100               	movlb	0	; () banked
  1102  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1103  000516  0E64               	movlw	100
  1104  000518  0100               	movlb	0	; () banked
  1105  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1106  00051C  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  1107                           
  1108                           ;main.c: 158: delay_tenth_s(1);
  1109  000520  0E01               	movlw	1
  1110  000522  ECF0  F00B         	call	_delay_tenth_s
  1111                           
  1112                           ;main.c: 160: mode=-1;
  1113  000526  683B               	setf	_mode,c	;volatile
  1114                           
  1115                           ;main.c: 162: break;
  1116  000528  D1A8               	goto	l3386
  1117  00052A                     l3284:
  1118                           
  1119                           ;main.c: 170: SetLine(1);
  1120  00052A  0E01               	movlw	1
  1121  00052C  EC41  F00C         	call	_SetLine
  1122                           
  1123                           ;main.c: 171: LCD_String("Searching");
  1124  000530  0E44               	movlw	low STR_7
  1125  000532  6E2A               	movwf	LCD_String@string,c
  1126  000534  0E03               	movlw	high STR_7
  1127  000536  6E2B               	movwf	LCD_String@string+1,c
  1128  000538  EC1A  F00B         	call	_LCD_String	;wreg free
  1129                           
  1130                           ;main.c: 173: if (DirectionFound==-2) {
  1131  00053C  0EFE               	movlw	254
  1132  00053E  0100               	movlb	0	; () banked
  1133  000540  19BD               	xorwf	main@DirectionFound& (0+255),w,b
  1134  000542  B4D8               	btfsc	status,2,c
  1135  000544  D177               	goto	l3374
  1136                           
  1137                           ; BSR set to: 0
  1138                           
  1139                           ; BSR set to: 0
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 176: } else if (DirectionFound==-1) {
  1143  000546  0100               	movlb	0	; () banked
  1144  000548  29BD               	incf	main@DirectionFound& (0+255),w,b
  1145  00054A  A4D8               	btfss	status,2,c
  1146  00054C  D030               	goto	l3304
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 181: fullSpeedAhead(&mL, &mR, 100);
  1150  00054E  0E64               	movlw	low main@mL
  1151  000550  0100               	movlb	0	; () banked
  1152  000552  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1153  000554  0E02               	movlw	high main@mL
  1154  000556  0100               	movlb	0	; () banked
  1155  000558  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1156  00055A  0E6D               	movlw	low main@mR
  1157  00055C  0100               	movlb	0	; () banked
  1158  00055E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1159  000560  0E02               	movlw	high main@mR
  1160  000562  0100               	movlb	0	; () banked
  1161  000564  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1162  000566  0E64               	movlw	100
  1163  000568  0100               	movlb	0	; () banked
  1164  00056A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1165  00056C  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  1166                           
  1167                           ;main.c: 182: delay_tenth_s(6);
  1168  000570  0E06               	movlw	6
  1169  000572  ECF0  F00B         	call	_delay_tenth_s
  1170                           
  1171                           ;main.c: 183: stop(&mL,&mR);
  1172  000576  0E64               	movlw	low main@mL
  1173  000578  0100               	movlb	0	; () banked
  1174  00057A  6F62               	movwf	stop@mL& (0+255),b
  1175  00057C  0E02               	movlw	high main@mL
  1176  00057E  0100               	movlb	0	; () banked
  1177  000580  6F63               	movwf	(stop@mL+1)& (0+255),b
  1178  000582  0E6D               	movlw	low main@mR
  1179  000584  0100               	movlb	0	; () banked
  1180  000586  6F64               	movwf	stop@mR& (0+255),b
  1181  000588  0E02               	movlw	high main@mR
  1182  00058A  0100               	movlb	0	; () banked
  1183  00058C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1184  00058E  EC9D  F009         	call	_stop	;wreg free
  1185                           
  1186                           ;main.c: 184: DirectionFound=0;
  1187  000592  0E00               	movlw	0
  1188  000594  0100               	movlb	0	; () banked
  1189  000596  6FBD               	movwf	main@DirectionFound& (0+255),b
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;main.c: 185: MoveType[Move]=0;
  1193  000598  0100               	movlb	0	; () banked
  1194  00059A  51BE               	movf	main@Move& (0+255),w,b
  1195  00059C  0D01               	mullw	1
  1196  00059E  0E00               	movlw	low main@MoveType
  1197  0005A0  24F3               	addwf	prodl,w,c
  1198  0005A2  6ED9               	movwf	fsr2l,c
  1199  0005A4  0E02               	movlw	high main@MoveType
  1200  0005A6  20F4               	addwfc	prodh,w,c
  1201  0005A8  6EDA               	movwf	fsr2h,c
  1202  0005AA  0E00               	movlw	0
  1203  0005AC  D031               	goto	L1
  1204  0005AE                     l3304:
  1205                           
  1206                           ; BSR set to: 0
  1207  0005AE  0100               	movlb	0	; () banked
  1208  0005B0  51BD               	movf	main@DirectionFound& (0+255),w,b
  1209  0005B2  0100               	movlb	0	; () banked
  1210  0005B4  A4D8               	btfss	status,2,c
  1211  0005B6  D02E               	goto	l3310
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 188: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1215                           ;main.c: 189: &MoveTime[Move], &RFID_Read, &mode);
  1216  0005B8  0E64               	movlw	low main@mL
  1217  0005BA  0100               	movlb	0	; () banked
  1218  0005BC  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1219  0005BE  0E02               	movlw	high main@mL
  1220  0005C0  0100               	movlb	0	; () banked
  1221  0005C2  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1222  0005C4  0E6D               	movlw	low main@mR
  1223  0005C6  0100               	movlb	0	; () banked
  1224  0005C8  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1225  0005CA  0E02               	movlw	high main@mR
  1226  0005CC  0100               	movlb	0	; () banked
  1227  0005CE  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1228  0005D0  C0B8  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1229  0005D4  0100               	movlb	0	; () banked
  1230  0005D6  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1231  0005D8  0100               	movlb	0	; () banked
  1232  0005DA  51BE               	movf	main@Move& (0+255),w,b
  1233  0005DC  0D02               	mullw	2
  1234  0005DE  0E00               	movlw	low main@MoveTime
  1235  0005E0  24F3               	addwf	prodl,w,c
  1236  0005E2  0100               	movlb	0	; () banked
  1237  0005E4  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1238  0005E6  0E01               	movlw	high main@MoveTime
  1239  0005E8  20F4               	addwfc	prodh,w,c
  1240  0005EA  0100               	movlb	0	; () banked
  1241  0005EC  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1242  0005EE  0EFE               	movlw	low _RFID_Read
  1243  0005F0  0100               	movlb	0	; () banked
  1244  0005F2  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1245  0005F4  0E01               	movlw	high _RFID_Read
  1246  0005F6  0100               	movlb	0	; () banked
  1247  0005F8  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1248  0005FA  0E3B               	movlw	low _mode
  1249  0005FC  0100               	movlb	0	; () banked
  1250  0005FE  6F77               	movwf	ScanWithRange@mode& (0+255),b
  1251  000600  0E00               	movlw	high _mode
  1252  000602  0100               	movlb	0	; () banked
  1253  000604  6F78               	movwf	(ScanWithRange@mode+1)& (0+255),b
  1254  000606  EC4E  F004         	call	_ScanWithRange	;wreg free
  1255  00060A  0100               	movlb	0	; () banked
  1256  00060C  6FBD               	movwf	main@DirectionFound& (0+255),b
  1257  00060E  D030               	goto	l3318
  1258  000610                     L1:
  1259  000610  6EDF               	movwf	indf2,c
  1260                           
  1261                           ;main.c: 191: } else if (DirectionFound==1) {
  1262  000612  D110               	goto	l3374
  1263  000614                     l3310:
  1264                           
  1265                           ; BSR set to: 0
  1266  000614  0100               	movlb	0	; () banked
  1267  000616  05BD               	decf	main@DirectionFound& (0+255),w,b
  1268  000618  A4D8               	btfss	status,2,c
  1269  00061A  D023               	goto	l3314
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 193: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1273  00061C  0E64               	movlw	low main@mL
  1274  00061E  0100               	movlb	0	; () banked
  1275  000620  6F6D               	movwf	ScanIR@mL& (0+255),b
  1276  000622  0E02               	movlw	high main@mL
  1277  000624  0100               	movlb	0	; () banked
  1278  000626  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1279  000628  0E6D               	movlw	low main@mR
  1280  00062A  0100               	movlb	0	; () banked
  1281  00062C  6F6F               	movwf	ScanIR@mR& (0+255),b
  1282  00062E  0E02               	movlw	high main@mR
  1283  000630  0100               	movlb	0	; () banked
  1284  000632  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1285  000634  0EBE               	movlw	low main@Move
  1286  000636  0100               	movlb	0	; () banked
  1287  000638  6F71               	movwf	ScanIR@Move& (0+255),b
  1288  00063A  0E00               	movlw	high main@Move
  1289  00063C  0100               	movlb	0	; () banked
  1290  00063E  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1291  000640  0E00               	movlw	low main@MoveTime
  1292  000642  0100               	movlb	0	; () banked
  1293  000644  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1294  000646  0E01               	movlw	high main@MoveTime
  1295  000648  0100               	movlb	0	; () banked
  1296  00064A  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1297  00064C  0E00               	movlw	low main@MoveType
  1298  00064E  0100               	movlb	0	; () banked
  1299  000650  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1300  000652  0E02               	movlw	high main@MoveType
  1301  000654  0100               	movlb	0	; () banked
  1302  000656  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1303  000658  EC05  F008         	call	_ScanIR	;wreg free
  1304  00065C  0100               	movlb	0	; () banked
  1305  00065E  6FBD               	movwf	main@DirectionFound& (0+255),b
  1306                           
  1307                           ;main.c: 194: } else if (DirectionFound==2) {
  1308  000660  D0E9               	goto	l3374
  1309  000662                     l3314:
  1310                           
  1311                           ; BSR set to: 0
  1312  000662  0E02               	movlw	2
  1313  000664  0100               	movlb	0	; () banked
  1314  000666  19BD               	xorwf	main@DirectionFound& (0+255),w,b
  1315  000668  A4D8               	btfss	status,2,c
  1316  00066A  D0E4               	goto	l3374
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;main.c: 196: mode=2;
  1320  00066C  0E02               	movlw	2
  1321  00066E  6E3B               	movwf	_mode,c	;volatile
  1322  000670                     l3318:
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 197: MoveType[Move]=1;
  1326  000670  0100               	movlb	0	; () banked
  1327  000672  51BE               	movf	main@Move& (0+255),w,b
  1328  000674  0D01               	mullw	1
  1329  000676  0E00               	movlw	low main@MoveType
  1330  000678  24F3               	addwf	prodl,w,c
  1331  00067A  6ED9               	movwf	fsr2l,c
  1332  00067C  0E02               	movlw	high main@MoveType
  1333  00067E  20F4               	addwfc	prodh,w,c
  1334  000680  6EDA               	movwf	fsr2h,c
  1335  000682  0E01               	movlw	1
  1336  000684  D7C5               	goto	L1
  1337  000686                     l3322:
  1338                           
  1339                           ;main.c: 209: if (RFID_Read) {
  1340  000686  0101               	movlb	1	; () banked
  1341  000688  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1342  00068A  B4D8               	btfsc	status,2,c
  1343  00068C  D0A2               	goto	l3364
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 210: stop(&mL, &mR);
  1347  00068E  0E64               	movlw	low main@mL
  1348  000690  0100               	movlb	0	; () banked
  1349  000692  6F62               	movwf	stop@mL& (0+255),b
  1350  000694  0E02               	movlw	high main@mL
  1351  000696  0100               	movlb	0	; () banked
  1352  000698  6F63               	movwf	(stop@mL+1)& (0+255),b
  1353  00069A  0E6D               	movlw	low main@mR
  1354  00069C  0100               	movlb	0	; () banked
  1355  00069E  6F64               	movwf	stop@mR& (0+255),b
  1356  0006A0  0E02               	movlw	high main@mR
  1357  0006A2  0100               	movlb	0	; () banked
  1358  0006A4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1359  0006A6  EC9D  F009         	call	_stop	;wreg free
  1360                           
  1361                           ;main.c: 211: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1362  0006AA  0E03               	movlw	3
  1363  0006AC  0100               	movlb	0	; () banked
  1364  0006AE  19D7               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1365  0006B0  A4D8               	btfss	status,2,c
  1366  0006B2  D002               	goto	u2730
  1367  0006B4  0E01               	movlw	1
  1368  0006B6  D001               	goto	u2732
  1369  0006B8                     u2730:
  1370  0006B8  0E00               	movlw	0
  1371  0006BA                     u2732:
  1372  0006BA  0100               	movlb	0	; () banked
  1373  0006BC  6FB6               	movwf	??_main& (0+255),b
  1374  0006BE  0E02               	movlw	2
  1375  0006C0  0100               	movlb	0	; () banked
  1376  0006C2  19C8               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1377  0006C4  A4D8               	btfss	status,2,c
  1378  0006C6  D002               	goto	u2740
  1379  0006C8  0E01               	movlw	1
  1380  0006CA  D001               	goto	u2742
  1381  0006CC                     u2740:
  1382  0006CC  0E00               	movlw	0
  1383  0006CE                     u2742:
  1384  0006CE  0100               	movlb	0	; () banked
  1385  0006D0  15B6               	andwf	??_main& (0+255),w,b
  1386  0006D2  A0E8               	btfss	wreg,0,c
  1387  0006D4  D0D2               	goto	l3386
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 212: if (VerifySignal(ReceivedString)){
  1391  0006D6  0EC8               	movlw	low _ReceivedString
  1392  0006D8  6E24               	movwf	VerifySignal@Signal,c
  1393  0006DA  0E00               	movlw	high _ReceivedString
  1394  0006DC  6E25               	movwf	VerifySignal@Signal+1,c
  1395  0006DE  EC43  F009         	call	_VerifySignal	;wreg free
  1396  0006E2  0900               	iorlw	0
  1397  0006E4  B4D8               	btfsc	status,2,c
  1398  0006E6  D041               	goto	l3356
  1399                           
  1400                           ;main.c: 214: for (i=0; i<10; i++){
  1401  0006E8  0E00               	movlw	0
  1402  0006EA  0100               	movlb	0	; () banked
  1403  0006EC  6FBF               	movwf	main@i& (0+255),b
  1404  0006EE                     l3332:
  1405                           
  1406                           ; BSR set to: 0
  1407  0006EE  0E09               	movlw	9
  1408  0006F0  0100               	movlb	0	; () banked
  1409  0006F2  65BF               	cpfsgt	main@i& (0+255),b
  1410  0006F4  D001               	goto	l3336
  1411  0006F6  D020               	goto	l3342
  1412  0006F8                     l3336:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 215: Message[i] = ReceivedString[i+1];
  1416  0006F8  0100               	movlb	0	; () banked
  1417  0006FA  51BF               	movf	main@i& (0+255),w,b
  1418  0006FC  0100               	movlb	0	; () banked
  1419  0006FE  6FB6               	movwf	??_main& (0+255),b
  1420  000700  6BB7               	clrf	(??_main+1)& (0+255),b
  1421  000702  0E01               	movlw	1
  1422  000704  0100               	movlb	0	; () banked
  1423  000706  27B6               	addwf	??_main& (0+255),f,b
  1424  000708  0E00               	movlw	0
  1425  00070A  23B7               	addwfc	(??_main+1)& (0+255),f,b
  1426  00070C  0EC8               	movlw	low _ReceivedString
  1427  00070E  0100               	movlb	0	; () banked
  1428  000710  25B6               	addwf	??_main& (0+255),w,b
  1429  000712  6ED9               	movwf	fsr2l,c
  1430  000714  0E00               	movlw	high _ReceivedString
  1431  000716  0100               	movlb	0	; () banked
  1432  000718  21B7               	addwfc	(??_main+1)& (0+255),w,b
  1433  00071A  6EDA               	movwf	fsr2h,c
  1434  00071C  0100               	movlb	0	; () banked
  1435  00071E  51BF               	movf	main@i& (0+255),w,b
  1436  000720  0D01               	mullw	1
  1437  000722  0EF0               	movlw	low main@Message
  1438  000724  24F3               	addwf	prodl,w,c
  1439  000726  6EE1               	movwf	fsr1l,c
  1440  000728  0E01               	movlw	high main@Message
  1441  00072A  20F4               	addwfc	prodh,w,c
  1442  00072C  6EE2               	movwf	fsr1h,c
  1443  00072E  CFDF FFE7          	movff	indf2,indf1
  1444                           
  1445                           ; BSR set to: 0
  1446  000732  0100               	movlb	0	; () banked
  1447  000734  2BBF               	incf	main@i& (0+255),f,b
  1448  000736  D7DB               	goto	l3332
  1449  000738                     l3342:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 216: }
  1453                           ;main.c: 219: for (i=0; i<16; i++) {
  1454  000738  0E00               	movlw	0
  1455  00073A  0100               	movlb	0	; () banked
  1456  00073C  6FBF               	movwf	main@i& (0+255),b
  1457  00073E                     l3344:
  1458                           
  1459                           ; BSR set to: 0
  1460  00073E  0E0F               	movlw	15
  1461  000740  0100               	movlb	0	; () banked
  1462  000742  65BF               	cpfsgt	main@i& (0+255),b
  1463  000744  D001               	goto	l3348
  1464  000746  D00E               	goto	l3354
  1465  000748                     l3348:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 220: ReceivedString[i]=0;
  1469  000748  0100               	movlb	0	; () banked
  1470  00074A  51BF               	movf	main@i& (0+255),w,b
  1471  00074C  0D01               	mullw	1
  1472  00074E  0EC8               	movlw	low _ReceivedString
  1473  000750  24F3               	addwf	prodl,w,c
  1474  000752  6ED9               	movwf	fsr2l,c
  1475  000754  0E00               	movlw	high _ReceivedString
  1476  000756  20F4               	addwfc	prodh,w,c
  1477  000758  6EDA               	movwf	fsr2h,c
  1478  00075A  0E00               	movlw	0
  1479  00075C  6EDF               	movwf	indf2,c
  1480                           
  1481                           ; BSR set to: 0
  1482  00075E  0100               	movlb	0	; () banked
  1483  000760  2BBF               	incf	main@i& (0+255),f,b
  1484  000762  D7ED               	goto	l3344
  1485  000764                     l3354:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;main.c: 221: }
  1489                           ;main.c: 222: mode=3;
  1490  000764  0E03               	movlw	3
  1491  000766  6E3B               	movwf	_mode,c	;volatile
  1492                           
  1493                           ;main.c: 224: } else {
  1494  000768  D088               	goto	l3386
  1495  00076A                     l3356:
  1496                           
  1497                           ;main.c: 225: fullSpeedBack(&mL,&mR, 100);
  1498  00076A  0E64               	movlw	low main@mL
  1499  00076C  0100               	movlb	0	; () banked
  1500  00076E  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1501  000770  0E02               	movlw	high main@mL
  1502  000772  0100               	movlb	0	; () banked
  1503  000774  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1504  000776  0E6D               	movlw	low main@mR
  1505  000778  0100               	movlb	0	; () banked
  1506  00077A  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1507  00077C  0E02               	movlw	high main@mR
  1508  00077E  0100               	movlb	0	; () banked
  1509  000780  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1510  000782  0E64               	movlw	100
  1511  000784  0100               	movlb	0	; () banked
  1512  000786  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1513  000788  EC93  F00B         	call	_fullSpeedBack	;wreg free
  1514                           
  1515                           ;main.c: 226: delay_tenth_s(5);
  1516  00078C  0E05               	movlw	5
  1517  00078E  ECF0  F00B         	call	_delay_tenth_s
  1518                           
  1519                           ;main.c: 227: stop(&mL,&mR);
  1520  000792  0E64               	movlw	low main@mL
  1521  000794  0100               	movlb	0	; () banked
  1522  000796  6F62               	movwf	stop@mL& (0+255),b
  1523  000798  0E02               	movlw	high main@mL
  1524  00079A  0100               	movlb	0	; () banked
  1525  00079C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1526  00079E  0E6D               	movlw	low main@mR
  1527  0007A0  0100               	movlb	0	; () banked
  1528  0007A2  6F64               	movwf	stop@mR& (0+255),b
  1529  0007A4  0E02               	movlw	high main@mR
  1530  0007A6  0100               	movlb	0	; () banked
  1531  0007A8  6F65               	movwf	(stop@mR+1)& (0+255),b
  1532  0007AA  EC9D  F009         	call	_stop	;wreg free
  1533                           
  1534                           ;main.c: 228: fullSpeedAhead(&mL,&mR, 100);
  1535  0007AE  0E64               	movlw	low main@mL
  1536  0007B0  0100               	movlb	0	; () banked
  1537  0007B2  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1538  0007B4  0E02               	movlw	high main@mL
  1539  0007B6  0100               	movlb	0	; () banked
  1540  0007B8  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1541  0007BA  0E6D               	movlw	low main@mR
  1542  0007BC  0100               	movlb	0	; () banked
  1543  0007BE  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1544  0007C0  0E02               	movlw	high main@mR
  1545  0007C2  0100               	movlb	0	; () banked
  1546  0007C4  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1547  0007C6  0E64               	movlw	100
  1548  0007C8  0100               	movlb	0	; () banked
  1549  0007CA  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1550  0007CC  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  1551                           
  1552                           ;main.c: 229: }
  1553                           ;main.c: 230: }
  1554                           ;main.c: 231: } else {
  1555  0007D0  D054               	goto	l3386
  1556  0007D2                     l3364:
  1557                           
  1558                           ;main.c: 232: DirectionFound=1;
  1559  0007D2  0E01               	movlw	1
  1560  0007D4  0100               	movlb	0	; () banked
  1561  0007D6  6FBD               	movwf	main@DirectionFound& (0+255),b
  1562                           
  1563                           ;main.c: 233: mode=1;
  1564  0007D8  0E01               	movlw	1
  1565  0007DA  6E3B               	movwf	_mode,c	;volatile
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 235: fullSpeedAhead(&mL,&mR, 100);
  1569  0007DC  0E64               	movlw	low main@mL
  1570  0007DE  0100               	movlb	0	; () banked
  1571  0007E0  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1572  0007E2  0E02               	movlw	high main@mL
  1573  0007E4  0100               	movlb	0	; () banked
  1574  0007E6  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1575  0007E8  0E6D               	movlw	low main@mR
  1576  0007EA  0100               	movlb	0	; () banked
  1577  0007EC  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1578  0007EE  0E02               	movlw	high main@mR
  1579  0007F0  0100               	movlb	0	; () banked
  1580  0007F2  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1581  0007F4  0E64               	movlw	100
  1582  0007F6  0100               	movlb	0	; () banked
  1583  0007F8  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1584  0007FA  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  1585                           
  1586                           ;main.c: 236: delay_tenth_s(5);
  1587  0007FE  0E05               	movlw	5
  1588  000800  ECF0  F00B         	call	_delay_tenth_s
  1589                           
  1590                           ;main.c: 237: MoveType[Move] = 0;
  1591  000804  0100               	movlb	0	; () banked
  1592  000806  51BE               	movf	main@Move& (0+255),w,b
  1593  000808  0D01               	mullw	1
  1594  00080A  0E00               	movlw	low main@MoveType
  1595  00080C  24F3               	addwf	prodl,w,c
  1596  00080E  6ED9               	movwf	fsr2l,c
  1597  000810  0E02               	movlw	high main@MoveType
  1598  000812  20F4               	addwfc	prodh,w,c
  1599  000814  6EDA               	movwf	fsr2h,c
  1600  000816  0E00               	movlw	0
  1601  000818  6EDF               	movwf	indf2,c
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 238: MoveTime[Move] = 5;
  1605  00081A  0100               	movlb	0	; () banked
  1606  00081C  51BE               	movf	main@Move& (0+255),w,b
  1607  00081E  0D02               	mullw	2
  1608  000820  0E00               	movlw	low main@MoveTime
  1609  000822  24F3               	addwf	prodl,w,c
  1610  000824  6ED9               	movwf	fsr2l,c
  1611  000826  0E01               	movlw	high main@MoveTime
  1612  000828  20F4               	addwfc	prodh,w,c
  1613  00082A  6EDA               	movwf	fsr2h,c
  1614  00082C  0E05               	movlw	5
  1615  00082E  6EDE               	movwf	postinc2,c
  1616  000830  0E00               	movlw	0
  1617  000832  6EDD               	movwf	postdec2,c
  1618  000834                     l3374:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 239: Move++;
  1622  000834  0100               	movlb	0	; () banked
  1623  000836  2BBE               	incf	main@Move& (0+255),f,b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 240: }
  1627                           ;main.c: 242: break;
  1628  000838  D020               	goto	l3386
  1629  00083A                     l3376:
  1630                           
  1631                           ;main.c: 247: SetLine(1);
  1632  00083A  0E01               	movlw	1
  1633  00083C  EC41  F00C         	call	_SetLine
  1634                           
  1635                           ;main.c: 248: LCD_String(Message);
  1636  000840  0EF0               	movlw	low main@Message
  1637  000842  6E2A               	movwf	LCD_String@string,c
  1638  000844  0E01               	movlw	high main@Message
  1639  000846  6E2B               	movwf	LCD_String@string+1,c
  1640  000848  EC1A  F00B         	call	_LCD_String	;wreg free
  1641                           
  1642                           ;main.c: 249: SetLine(2);
  1643  00084C  0E02               	movlw	2
  1644  00084E  EC41  F00C         	call	_SetLine
  1645                           
  1646                           ;main.c: 250: LCD_String("Going Home");
  1647  000852  0E39               	movlw	low STR_8
  1648  000854  6E2A               	movwf	LCD_String@string,c
  1649  000856  0E03               	movlw	high STR_8
  1650  000858  6E2B               	movwf	LCD_String@string+1,c
  1651  00085A  EC1A  F00B         	call	_LCD_String	;wreg free
  1652                           
  1653                           ;main.c: 251: stop(&mL,&mR);
  1654  00085E  0E64               	movlw	low main@mL
  1655  000860  0100               	movlb	0	; () banked
  1656  000862  6F62               	movwf	stop@mL& (0+255),b
  1657  000864  0E02               	movlw	high main@mL
  1658  000866  0100               	movlb	0	; () banked
  1659  000868  6F63               	movwf	(stop@mL+1)& (0+255),b
  1660  00086A  0E6D               	movlw	low main@mR
  1661  00086C  0100               	movlb	0	; () banked
  1662  00086E  6F64               	movwf	stop@mR& (0+255),b
  1663  000870  0E02               	movlw	high main@mR
  1664  000872  0100               	movlb	0	; () banked
  1665  000874  6F65               	movwf	(stop@mR+1)& (0+255),b
  1666  000876  EC9D  F009         	call	_stop	;wreg free
  1667  00087A                     l3386:
  1668  00087A  503B               	movf	_mode,w,c	;volatile
  1669                           
  1670                           ; Switch size 1, requested type "space"
  1671                           ; Number of cases is 5, Range of values is 0 to 255
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte           16     9 (average)
  1675                           ;	Chosen strategy is simple_byte
  1676  00087C  0A00               	xorlw	0	; case 0
  1677  00087E  B4D8               	btfsc	status,2,c
  1678  000880  D62A               	goto	l3264
  1679  000882  0A01               	xorlw	1	; case 1
  1680  000884  B4D8               	btfsc	status,2,c
  1681  000886  D651               	goto	l3284
  1682  000888  0A03               	xorlw	3	; case 2
  1683  00088A  B4D8               	btfsc	status,2,c
  1684  00088C  D6FC               	goto	l3322
  1685  00088E  0A01               	xorlw	1	; case 3
  1686  000890  B4D8               	btfsc	status,2,c
  1687  000892  D7D3               	goto	l3376
  1688  000894  0AFC               	xorlw	252	; case 255
  1689  000896  B4D8               	btfsc	status,2,c
  1690  000898  D5B2               	goto	l3226
  1691  00089A  D7EF               	goto	l3386
  1692  00089C                     __end_of_main:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           prodh	equ	0xFF4
  1696                           prodl	equ	0xFF3
  1697                           intcon	equ	0xFF2
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           indf1	equ	0xFE7
  1701                           fsr1h	equ	0xFE2
  1702                           fsr1l	equ	0xFE1
  1703                           indf2	equ	0xFDF
  1704                           postinc2	equ	0xFDE
  1705                           postdec2	equ	0xFDD
  1706                           fsr2h	equ	0xFDA
  1707                           fsr2l	equ	0xFD9
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _initTimer *****************
  1711 ;; Defined at:
  1712 ;;		line 8 in file "Movement.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;		None               void
  1719 ;; Registers used:
  1720 ;;		None
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1726 ;;      Params:         0       0       0       0
  1727 ;;      Locals:         0       0       0       0
  1728 ;;      Temps:          0       0       0       0
  1729 ;;      Totals:         0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    3
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_main
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text1
  1741  0019B4                     __ptext1:
  1742                           	opt stack 0
  1743  0019B4                     _initTimer:
  1744                           	opt stack 27
  1745                           
  1746                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1747                           
  1748                           ;incstack = 0
  1749  0019B4  9ED5               	bcf	4053,7,c	;volatile
  1750                           
  1751                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1752  0019B6  9CD5               	bcf	4053,6,c	;volatile
  1753                           
  1754                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1755  0019B8  9AD5               	bcf	4053,5,c	;volatile
  1756                           
  1757                           ;Movement.c: 13: T0CONbits.PSA=0;
  1758  0019BA  96D5               	bcf	4053,3,c	;volatile
  1759                           
  1760                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1761  0019BC  80D5               	bsf	4053,0,c	;volatile
  1762  0019BE  82D5               	bsf	4053,1,c	;volatile
  1763  0019C0  84D5               	bsf	4053,2,c	;volatile
  1764                           
  1765                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1766  0019C2  9AF2               	bcf	intcon,5,c	;volatile
  1767  0019C4  0012               	return		;funcret
  1768  0019C6                     __end_of_initTimer:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           prodh	equ	0xFF4
  1772                           prodl	equ	0xFF3
  1773                           intcon	equ	0xFF2
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           indf1	equ	0xFE7
  1777                           fsr1h	equ	0xFE2
  1778                           fsr1l	equ	0xFE1
  1779                           indf2	equ	0xFDF
  1780                           postinc2	equ	0xFDE
  1781                           postdec2	equ	0xFDD
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _initRFID *****************
  1787 ;; Defined at:
  1788 ;;		line 5 in file "RFID_Reader.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;		None               void
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1802 ;;      Params:         0       0       0       0
  1803 ;;      Locals:         0       0       0       0
  1804 ;;      Temps:          0       0       0       0
  1805 ;;      Totals:         0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    3
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text2
  1817  001998                     __ptext2:
  1818                           	opt stack 0
  1819  001998                     _initRFID:
  1820                           	opt stack 27
  1821                           
  1822                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1823                           
  1824                           ;incstack = 0
  1825  001998  5094               	movf	3988,w,c	;volatile
  1826  00199A  09C0               	iorlw	192
  1827  00199C  6E94               	movwf	3988,c	;volatile
  1828                           
  1829                           ;RFID_Reader.c: 10: SPBRG=205;
  1830  00199E  0ECD               	movlw	205
  1831  0019A0  6EAF               	movwf	4015,c	;volatile
  1832                           
  1833                           ;RFID_Reader.c: 11: SPBRGH=0;
  1834  0019A2  0E00               	movlw	0
  1835  0019A4  6EB0               	movwf	4016,c	;volatile
  1836                           
  1837                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1838  0019A6  86AA               	bsf	4010,3,c	;volatile
  1839                           
  1840                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1841  0019A8  84AC               	bsf	4012,2,c	;volatile
  1842                           
  1843                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1844  0019AA  88AB               	bsf	4011,4,c	;volatile
  1845                           
  1846                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1847  0019AC  8EAB               	bsf	4011,7,c	;volatile
  1848                           
  1849                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1850  0019AE  98AC               	bcf	4012,4,c	;volatile
  1851                           
  1852                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1853  0019B0  9CAB               	bcf	4011,6,c	;volatile
  1854  0019B2  0012               	return		;funcret
  1855  0019B4                     __end_of_initRFID:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           prodh	equ	0xFF4
  1859                           prodl	equ	0xFF3
  1860                           intcon	equ	0xFF2
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           indf1	equ	0xFE7
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           postinc2	equ	0xFDE
  1868                           postdec2	equ	0xFDD
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _initMotorPWM *****************
  1874 ;; Defined at:
  1875 ;;		line 4 in file "dc_motor.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;		None               void
  1882 ;; Registers used:
  1883 ;;		wreg, status,2
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1889 ;;      Params:         0       0       0       0
  1890 ;;      Locals:         0       0       0       0
  1891 ;;      Temps:          0       0       0       0
  1892 ;;      Totals:         0       0       0       0
  1893 ;;Total ram usage:        0 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    3
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text3
  1904  001850                     __ptext3:
  1905                           	opt stack 0
  1906  001850                     _initMotorPWM:
  1907                           	opt stack 27
  1908                           
  1909                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1910                           
  1911                           ;incstack = 0
  1912  001850  0E00               	movlw	0
  1913  001852  6E7F               	movwf	3967,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1916  001854  0E80               	movlw	128
  1917  001856  6E7E               	movwf	3966,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1920  001858  0E6F               	movlw	111
  1921  00185A  6E6F               	movwf	3951,c	;volatile
  1922                           
  1923                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1924  00185C  0E00               	movlw	0
  1925  00185E  6E6E               	movwf	3950,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1928  001860  0EC7               	movlw	199
  1929  001862  6E7B               	movwf	3963,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1932  001864  0E00               	movlw	0
  1933  001866  6E7A               	movwf	3962,c	;volatile
  1934                           
  1935                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1936  001868  0E00               	movlw	0
  1937  00186A  6E79               	movwf	3961,c	;volatile
  1938                           
  1939                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1940  00186C  0E00               	movlw	0
  1941  00186E  6E78               	movwf	3960,c	;volatile
  1942                           
  1943                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1944  001870  0E00               	movlw	0
  1945  001872  6E77               	movwf	3959,c	;volatile
  1946                           
  1947                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1948  001874  0E00               	movlw	0
  1949  001876  6E76               	movwf	3958,c	;volatile
  1950                           
  1951                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1952  001878  9093               	bcf	3987,0,c	;volatile
  1953                           
  1954                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1955  00187A  9293               	bcf	3987,1,c	;volatile
  1956                           
  1957                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1958  00187C  9493               	bcf	3987,2,c	;volatile
  1959                           
  1960                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1961  00187E  9693               	bcf	3987,3,c	;volatile
  1962  001880  0012               	return		;funcret
  1963  001882                     __end_of_initMotorPWM:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           prodh	equ	0xFF4
  1967                           prodl	equ	0xFF3
  1968                           intcon	equ	0xFF2
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           indf1	equ	0xFE7
  1972                           fsr1h	equ	0xFE2
  1973                           fsr1l	equ	0xFE1
  1974                           indf2	equ	0xFDF
  1975                           postinc2	equ	0xFDE
  1976                           postdec2	equ	0xFDD
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _initLCD *****************
  1982 ;; Defined at:
  1983 ;;		line 38 in file "LCD.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;		None               void
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1997 ;;      Params:         0       0       0       0
  1998 ;;      Locals:         0       0       0       0
  1999 ;;      Temps:          1       0       0       0
  2000 ;;      Totals:         1       0       0       0
  2001 ;;Total ram usage:        1 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    6
  2004 ;; This function calls:
  2005 ;;		_LCDout
  2006 ;;		_SendLCD
  2007 ;; This function is called by:
  2008 ;;		_main
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text4
  2013  0011CA                     __ptext4:
  2014                           	opt stack 0
  2015  0011CA                     _initLCD:
  2016                           	opt stack 24
  2017                           
  2018                           ;LCD.c: 44: TRISAbits.RA6=0;
  2019                           
  2020                           ;incstack = 0
  2021  0011CA  9C92               	bcf	3986,6,c	;volatile
  2022                           
  2023                           ;LCD.c: 45: TRISCbits.RC0=0;
  2024  0011CC  9094               	bcf	3988,0,c	;volatile
  2025                           
  2026                           ;LCD.c: 46: TRISCbits.RC1=0;
  2027  0011CE  9294               	bcf	3988,1,c	;volatile
  2028                           
  2029                           ;LCD.c: 47: TRISCbits.RC2=0;
  2030  0011D0  9494               	bcf	3988,2,c	;volatile
  2031                           
  2032                           ;LCD.c: 48: TRISDbits.RD0=0;
  2033  0011D2  9095               	bcf	3989,0,c	;volatile
  2034                           
  2035                           ;LCD.c: 49: TRISDbits.RD1=0;
  2036  0011D4  9295               	bcf	3989,1,c	;volatile
  2037                           
  2038                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2039  0011D6  0E27               	movlw	39
  2040  0011D8  6E2A               	movwf	??_initLCD& (0+255),c
  2041  0011DA  0EF5               	movlw	245
  2042  0011DC                     u2837:
  2043  0011DC  2EE8               	decfsz	wreg,f,c
  2044  0011DE  D7FE               	goto	u2837
  2045  0011E0  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2046  0011E2  D7FC               	goto	u2837
  2047  0011E4  F000               	nop	
  2048                           
  2049                           ;LCD.c: 52: LCDout(0b0011);
  2050  0011E6  0E03               	movlw	3
  2051  0011E8  EC82  F008         	call	_LCDout
  2052                           
  2053                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2054  0011EC  0E0D               	movlw	13
  2055  0011EE  6E2A               	movwf	??_initLCD& (0+255),c
  2056  0011F0  0EFC               	movlw	252
  2057  0011F2                     u2847:
  2058  0011F2  2EE8               	decfsz	wreg,f,c
  2059  0011F4  D7FE               	goto	u2847
  2060  0011F6  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2061  0011F8  D7FC               	goto	u2847
  2062                           
  2063                           ;LCD.c: 54: LCDout(0b0011);
  2064  0011FA  0E03               	movlw	3
  2065  0011FC  EC82  F008         	call	_LCDout
  2066                           
  2067                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2068  001200  0E85               	movlw	133
  2069  001202                     u2857:
  2070  001202  2EE8               	decfsz	wreg,f,c
  2071  001204  D7FE               	goto	u2857
  2072  001206  F000               	nop	
  2073                           
  2074                           ;LCD.c: 56: LCDout(0b0011);
  2075  001208  0E03               	movlw	3
  2076  00120A  EC82  F008         	call	_LCDout
  2077                           
  2078                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2079  00120E  0E21               	movlw	33
  2080  001210                     u2867:
  2081  001210  2EE8               	decfsz	wreg,f,c
  2082  001212  D7FE               	goto	u2867
  2083  001214  F000               	nop	
  2084                           
  2085                           ;LCD.c: 58: LCDout(0b0010);
  2086  001216  0E02               	movlw	2
  2087  001218  EC82  F008         	call	_LCDout
  2088                           
  2089                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2090  00121C  0E21               	movlw	33
  2091  00121E                     u2877:
  2092  00121E  2EE8               	decfsz	wreg,f,c
  2093  001220  D7FE               	goto	u2877
  2094  001222  F000               	nop	
  2095                           
  2096                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2097  001224  0E00               	movlw	0
  2098  001226  6E28               	movwf	SendLCD@type,c
  2099  001228  0E28               	movlw	40
  2100  00122A  EC59  F00C         	call	_SendLCD
  2101                           
  2102                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2103  00122E  0E21               	movlw	33
  2104  001230                     u2887:
  2105  001230  2EE8               	decfsz	wreg,f,c
  2106  001232  D7FE               	goto	u2887
  2107  001234  F000               	nop	
  2108                           
  2109                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2110  001236  0E00               	movlw	0
  2111  001238  6E28               	movwf	SendLCD@type,c
  2112  00123A  0E08               	movlw	8
  2113  00123C  EC59  F00C         	call	_SendLCD
  2114                           
  2115                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2116  001240  0E21               	movlw	33
  2117  001242                     u2897:
  2118  001242  2EE8               	decfsz	wreg,f,c
  2119  001244  D7FE               	goto	u2897
  2120  001246  F000               	nop	
  2121                           
  2122                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2123  001248  0E00               	movlw	0
  2124  00124A  6E28               	movwf	SendLCD@type,c
  2125  00124C  0E01               	movlw	1
  2126  00124E  EC59  F00C         	call	_SendLCD
  2127                           
  2128                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2129  001252  0E0D               	movlw	13
  2130  001254  6E2A               	movwf	??_initLCD& (0+255),c
  2131  001256  0EFC               	movlw	252
  2132  001258                     u2907:
  2133  001258  2EE8               	decfsz	wreg,f,c
  2134  00125A  D7FE               	goto	u2907
  2135  00125C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2136  00125E  D7FC               	goto	u2907
  2137                           
  2138                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2139  001260  0E00               	movlw	0
  2140  001262  6E28               	movwf	SendLCD@type,c
  2141  001264  0E06               	movlw	6
  2142  001266  EC59  F00C         	call	_SendLCD
  2143                           
  2144                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2145  00126A  0E21               	movlw	33
  2146  00126C                     u2917:
  2147  00126C  2EE8               	decfsz	wreg,f,c
  2148  00126E  D7FE               	goto	u2917
  2149  001270  F000               	nop	
  2150                           
  2151                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2152  001272  0E00               	movlw	0
  2153  001274  6E28               	movwf	SendLCD@type,c
  2154  001276  0E0C               	movlw	12
  2155  001278  EC59  F00C         	call	_SendLCD
  2156                           
  2157                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2158  00127C  0E21               	movlw	33
  2159  00127E                     u2927:
  2160  00127E  2EE8               	decfsz	wreg,f,c
  2161  001280  D7FE               	goto	u2927
  2162  001282  F000               	nop	
  2163  001284  0012               	return		;funcret
  2164  001286                     __end_of_initLCD:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           postinc0	equ	0xFEE
  2171                           wreg	equ	0xFE8
  2172                           indf1	equ	0xFE7
  2173                           fsr1h	equ	0xFE2
  2174                           fsr1l	equ	0xFE1
  2175                           indf2	equ	0xFDF
  2176                           postinc2	equ	0xFDE
  2177                           postdec2	equ	0xFDD
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _initIR *****************
  2183 ;; Defined at:
  2184 ;;		line 30 in file "IR_Reading.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;		None               void
  2191 ;; Registers used:
  2192 ;;		wreg, status,2
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2198 ;;      Params:         0       0       0       0
  2199 ;;      Locals:         0       0       0       0
  2200 ;;      Temps:          0       0       0       0
  2201 ;;      Totals:         0       0       0       0
  2202 ;;Total ram usage:        0 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    3
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text5
  2213  001958                     __ptext5:
  2214                           	opt stack 0
  2215  001958                     _initIR:
  2216                           	opt stack 27
  2217                           
  2218                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2219                           
  2220                           ;incstack = 0
  2221  001958  9489               	bcf	3977,2,c	;volatile
  2222                           
  2223                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2224  00195A  9689               	bcf	3977,3,c	;volatile
  2225                           
  2226                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2227  00195C  8492               	bsf	3986,2,c	;volatile
  2228                           
  2229                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2230  00195E  8692               	bsf	3986,3,c	;volatile
  2231                           
  2232                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2233  001960  94B8               	bcf	4024,2,c	;volatile
  2234                           
  2235                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2236  001962  96B8               	bcf	4024,3,c	;volatile
  2237                           
  2238                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2239  001964  9CB8               	bcf	4024,6,c	;volatile
  2240                           
  2241                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2242  001966  9EB8               	bcf	4024,7,c	;volatile
  2243                           
  2244                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2245  001968  0E06               	movlw	6
  2246  00196A  6E63               	movwf	3939,c	;volatile
  2247                           
  2248                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2249  00196C  0E06               	movlw	6
  2250  00196E  6E62               	movwf	3938,c	;volatile
  2251                           
  2252                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2253  001970  9096               	bcf	3990,0,c	;volatile
  2254                           
  2255                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2256  001972  9296               	bcf	3990,1,c	;volatile
  2257                           
  2258                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2259  001974  0E59               	movlw	89
  2260  001976  6EB7               	movwf	4023,c	;volatile
  2261  001978  0012               	return		;funcret
  2262  00197A                     __end_of_initIR:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           prodh	equ	0xFF4
  2266                           prodl	equ	0xFF3
  2267                           intcon	equ	0xFF2
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf1	equ	0xFE7
  2271                           fsr1h	equ	0xFE2
  2272                           fsr1l	equ	0xFE1
  2273                           indf2	equ	0xFDF
  2274                           postinc2	equ	0xFDE
  2275                           postdec2	equ	0xFDD
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _fullSpeedBack *****************
  2281 ;; Defined at:
  2282 ;;		line 125 in file "dc_motor.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2285 ;;		 -> main@mL(9), 
  2286 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2287 ;;		 -> main@mR(9), 
  2288 ;;  power           1   11[BANK0 ] unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;		None               void
  2293 ;; Registers used:
  2294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2300 ;;      Params:         0       5       0       0
  2301 ;;      Locals:         0       0       0       0
  2302 ;;      Temps:          0       0       0       0
  2303 ;;      Totals:         0       5       0       0
  2304 ;;Total ram usage:        5 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    6
  2307 ;; This function calls:
  2308 ;;		_fullSpeedAhead
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text6
  2315  001726                     __ptext6:
  2316                           	opt stack 0
  2317  001726                     _fullSpeedBack:
  2318                           	opt stack 24
  2319                           
  2320                           ;dc_motor.c: 128: mL->direction=0;
  2321                           
  2322                           ;incstack = 0
  2323  001726  0100               	movlb	0	; () banked
  2324  001728  EE20 F001          	lfsr	2,1
  2325  00172C  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2326  00172E  26D9               	addwf	fsr2l,f,c
  2327  001730  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2328  001732  22DA               	addwfc	fsr2h,f,c
  2329  001734  0E00               	movlw	0
  2330  001736  6EDF               	movwf	indf2,c
  2331                           
  2332                           ;dc_motor.c: 129: mR->direction=0;
  2333  001738  0100               	movlb	0	; () banked
  2334  00173A  EE20 F001          	lfsr	2,1
  2335  00173E  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2336  001740  26D9               	addwf	fsr2l,f,c
  2337  001742  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2338  001744  22DA               	addwfc	fsr2h,f,c
  2339  001746  0E00               	movlw	0
  2340  001748  6EDF               	movwf	indf2,c
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2344  00174A  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2345  00174E  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2346  001752  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2347  001756  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2348  00175A  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2349  00175E  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  2350  001762  0012               	return		;funcret
  2351  001764                     __end_of_fullSpeedBack:
  2352                           	opt stack 0
  2353                           tblptru	equ	0xFF8
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           intcon	equ	0xFF2
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           indf1	equ	0xFE7
  2360                           fsr1h	equ	0xFE2
  2361                           fsr1l	equ	0xFE1
  2362                           indf2	equ	0xFDF
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _enableSensor *****************
  2370 ;; Defined at:
  2371 ;;		line 106 in file "IR_Reading.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  sensor          1    wreg     unsigned char 
  2374 ;;  status          1   35[COMRAM] unsigned char 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  sensor          1   36[COMRAM] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;		None               void
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2386 ;;      Params:         1       0       0       0
  2387 ;;      Locals:         1       0       0       0
  2388 ;;      Temps:          0       0       0       0
  2389 ;;      Totals:         2       0       0       0
  2390 ;;Total ram usage:        2 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    3
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text7
  2401  00190C                     __ptext7:
  2402                           	opt stack 0
  2403  00190C                     _enableSensor:
  2404                           	opt stack 27
  2405                           
  2406                           ;incstack = 0
  2407                           ;enableSensor@sensor stored from wreg
  2408  00190C  6E25               	movwf	enableSensor@sensor,c
  2409                           
  2410                           ;IR_Reading.c: 108: if (sensor==0){
  2411  00190E  5025               	movf	enableSensor@sensor,w,c
  2412  001910  A4D8               	btfss	status,2,c
  2413  001912  D006               	goto	l2334
  2414                           
  2415                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2416  001914  B024               	btfsc	enableSensor@status,0,c
  2417  001916  D002               	bra	u1765
  2418  001918  908D               	bcf	3981,0,c	;volatile
  2419  00191A  D001               	bra	u1766
  2420  00191C                     u1765:
  2421  00191C  808D               	bsf	3981,0,c	;volatile
  2422  00191E                     u1766:
  2423                           
  2424                           ;IR_Reading.c: 110: } else if (sensor==1){
  2425  00191E  0012               	return	
  2426  001920                     l2334:
  2427  001920  0425               	decf	enableSensor@sensor,w,c
  2428  001922  A4D8               	btfss	status,2,c
  2429  001924  0012               	return	
  2430                           
  2431                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2432  001926  B024               	btfsc	enableSensor@status,0,c
  2433  001928  D002               	bra	u1785
  2434  00192A  928D               	bcf	3981,1,c	;volatile
  2435  00192C  D001               	bra	u1786
  2436  00192E                     u1785:
  2437  00192E  828D               	bsf	3981,1,c	;volatile
  2438  001930                     u1786:
  2439  001930  0012               	return	
  2440  001932                     __end_of_enableSensor:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           prodh	equ	0xFF4
  2444                           prodl	equ	0xFF3
  2445                           intcon	equ	0xFF2
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           indf1	equ	0xFE7
  2449                           fsr1h	equ	0xFE2
  2450                           fsr1l	equ	0xFE1
  2451                           indf2	equ	0xFDF
  2452                           postinc2	equ	0xFDE
  2453                           postdec2	equ	0xFDD
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _VerifySignal *****************
  2459 ;; Defined at:
  2460 ;;		line 55 in file "RFID_Reader.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2463 ;;		 -> ReceivedString(16), 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  hexByte         2   44[COMRAM] unsigned int 
  2466 ;;  i               1   46[COMRAM] unsigned char 
  2467 ;;  checksum        1   43[COMRAM] unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      unsigned char 
  2470 ;; Registers used:
  2471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2477 ;;      Params:         2       0       0       0
  2478 ;;      Locals:         4       0       0       0
  2479 ;;      Temps:          6       0       0       0
  2480 ;;      Totals:        12       0       0       0
  2481 ;;Total ram usage:       12 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    3
  2484 ;; This function calls:
  2485 ;;		Nothing
  2486 ;; This function is called by:
  2487 ;;		_main
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text8
  2492  001286                     __ptext8:
  2493                           	opt stack 0
  2494  001286                     _VerifySignal:
  2495                           	opt stack 27
  2496                           
  2497                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2498                           
  2499                           ;incstack = 0
  2500  001286  0E00               	movlw	0
  2501  001288  6E2C               	movwf	VerifySignal@checksum,c
  2502                           
  2503                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2504  00128A  0E00               	movlw	0
  2505  00128C  6E2E               	movwf	VerifySignal@hexByte+1,c
  2506  00128E  0E00               	movlw	0
  2507  001290  6E2D               	movwf	VerifySignal@hexByte,c
  2508                           
  2509                           ;RFID_Reader.c: 58: unsigned char i=0;
  2510  001292  0E00               	movlw	0
  2511  001294  6E2F               	movwf	VerifySignal@i,c
  2512                           
  2513                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2514  001296  EE20 F004          	lfsr	2,4
  2515  00129A  5024               	movf	VerifySignal@Signal,w,c
  2516  00129C  26D9               	addwf	fsr2l,f,c
  2517  00129E  5025               	movf	VerifySignal@Signal+1,w,c
  2518  0012A0  22DA               	addwfc	fsr2h,f,c
  2519  0012A2  50DF               	movf	indf2,w,c
  2520  0012A4  6E26               	movwf	??_VerifySignal& (0+255),c
  2521  0012A6  EE20 F003          	lfsr	2,3
  2522  0012AA  5024               	movf	VerifySignal@Signal,w,c
  2523  0012AC  26D9               	addwf	fsr2l,f,c
  2524  0012AE  5025               	movf	VerifySignal@Signal+1,w,c
  2525  0012B0  22DA               	addwfc	fsr2h,f,c
  2526  0012B2  50DF               	movf	indf2,w,c
  2527  0012B4  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2528  0012B6  5027               	movf	??_VerifySignal+1,w,c
  2529  0012B8  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2530  0012BA  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2531  0012BC  5026               	movf	??_VerifySignal,w,c
  2532  0012BE  2428               	addwf	??_VerifySignal+2,w,c
  2533  0012C0  6E2D               	movwf	VerifySignal@hexByte,c
  2534  0012C2  0E00               	movlw	0
  2535  0012C4  2029               	addwfc	??_VerifySignal+3,w,c
  2536  0012C6  6E2E               	movwf	VerifySignal@hexByte+1,c
  2537                           
  2538                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2539  0012C8  EE20 F002          	lfsr	2,2
  2540  0012CC  5024               	movf	VerifySignal@Signal,w,c
  2541  0012CE  26D9               	addwf	fsr2l,f,c
  2542  0012D0  5025               	movf	VerifySignal@Signal+1,w,c
  2543  0012D2  22DA               	addwfc	fsr2h,f,c
  2544  0012D4  50DF               	movf	indf2,w,c
  2545  0012D6  182D               	xorwf	VerifySignal@hexByte,w,c
  2546  0012D8  6E2C               	movwf	VerifySignal@checksum,c
  2547                           
  2548                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2549  0012DA  0E05               	movlw	5
  2550  0012DC  6E2F               	movwf	VerifySignal@i,c
  2551  0012DE                     l2542:
  2552  0012DE  0E09               	movlw	9
  2553  0012E0  642F               	cpfsgt	VerifySignal@i,c
  2554  0012E2  D001               	goto	l2546
  2555  0012E4  D028               	goto	l2554
  2556  0012E6                     l2546:
  2557                           
  2558                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2559  0012E6  502F               	movf	VerifySignal@i,w,c
  2560  0012E8  6E26               	movwf	??_VerifySignal& (0+255),c
  2561  0012EA  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2562  0012EC  0E01               	movlw	1
  2563  0012EE  2626               	addwf	??_VerifySignal,f,c
  2564  0012F0  0E00               	movlw	0
  2565  0012F2  2227               	addwfc	??_VerifySignal+1,f,c
  2566  0012F4  5026               	movf	??_VerifySignal,w,c
  2567  0012F6  2424               	addwf	VerifySignal@Signal,w,c
  2568  0012F8  6ED9               	movwf	fsr2l,c
  2569  0012FA  5027               	movf	??_VerifySignal+1,w,c
  2570  0012FC  2025               	addwfc	VerifySignal@Signal+1,w,c
  2571  0012FE  6EDA               	movwf	fsr2h,c
  2572  001300  50DF               	movf	indf2,w,c
  2573  001302  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2574  001304  502F               	movf	VerifySignal@i,w,c
  2575  001306  0D01               	mullw	1
  2576  001308  50F3               	movf	prodl,w,c
  2577  00130A  2424               	addwf	VerifySignal@Signal,w,c
  2578  00130C  6ED9               	movwf	fsr2l,c
  2579  00130E  50F4               	movf	prodh,w,c
  2580  001310  2025               	addwfc	VerifySignal@Signal+1,w,c
  2581  001312  6EDA               	movwf	fsr2h,c
  2582  001314  50DF               	movf	indf2,w,c
  2583  001316  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2584  001318  5029               	movf	??_VerifySignal+3,w,c
  2585  00131A  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2586  00131C  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2587  00131E  5028               	movf	??_VerifySignal+2,w,c
  2588  001320  242A               	addwf	??_VerifySignal+4,w,c
  2589  001322  6E2D               	movwf	VerifySignal@hexByte,c
  2590  001324  0E00               	movlw	0
  2591  001326  202B               	addwfc	??_VerifySignal+5,w,c
  2592  001328  6E2E               	movwf	VerifySignal@hexByte+1,c
  2593                           
  2594                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2595  00132A  502C               	movf	VerifySignal@checksum,w,c
  2596  00132C  182D               	xorwf	VerifySignal@hexByte,w,c
  2597  00132E  6E2C               	movwf	VerifySignal@checksum,c
  2598  001330  0E02               	movlw	2
  2599  001332  262F               	addwf	VerifySignal@i,f,c
  2600  001334  D7D4               	goto	l2542
  2601  001336                     l2554:
  2602                           
  2603                           ;RFID_Reader.c: 68: }
  2604                           ;RFID_Reader.c: 71: return 1;
  2605  001336  0E01               	movlw	1
  2606  001338  0012               	return	
  2607  00133A                     __end_of_VerifySignal:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           intcon	equ	0xFF2
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           indf1	equ	0xFE7
  2616                           fsr1h	equ	0xFE2
  2617                           fsr1l	equ	0xFE1
  2618                           indf2	equ	0xFDF
  2619                           postinc2	equ	0xFDE
  2620                           postdec2	equ	0xFDD
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625 ;; *************** function _ScanWithRange *****************
  2626 ;; Defined at:
  2627 ;;		line 91 in file "Movement.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2630 ;;		 -> main@mL(9), 
  2631 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2632 ;;		 -> main@mR(9), 
  2633 ;;  milliseconds    2   17[BANK0 ] int 
  2634 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2635 ;;		 -> main@MoveTime(200), 
  2636 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2637 ;;		 -> RFID_Read(1), 
  2638 ;;  mode            2   23[BANK0 ] PTR unsigned char 
  2639 ;;		 -> mode(1), 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  buf            40   30[BANK0 ] unsigned char [40]
  2642 ;;  SensorResult    4   78[BANK0 ] unsigned int [2]
  2643 ;;  RightFlag       2   84[BANK0 ] unsigned int 
  2644 ;;  LeftFlag        2   82[BANK0 ] unsigned int 
  2645 ;;  DirectionFou    2   74[BANK0 ] const unsigned int 
  2646 ;;  i               2   72[BANK0 ] unsigned int 
  2647 ;;  n               2   70[BANK0 ] unsigned int 
  2648 ;;  TimeAboveThr    1   77[BANK0 ] unsigned char 
  2649 ;;  power           1   76[BANK0 ] const unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      unsigned char 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2659 ;;      Params:         0      12       0       0
  2660 ;;      Locals:         0      56       0       0
  2661 ;;      Temps:          0       5       0       0
  2662 ;;      Totals:         0      73       0       0
  2663 ;;Total ram usage:       73 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    7
  2666 ;; This function calls:
  2667 ;;		_LCD_String
  2668 ;;		_SendLCD
  2669 ;;		_SetLine
  2670 ;;		_delay_tenth_s
  2671 ;;		_grabLeftIR
  2672 ;;		_grabRightIR
  2673 ;;		_sprintf
  2674 ;;		_stop
  2675 ;;		_turnLeft
  2676 ;;		_turnRight
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text9
  2683  00089C                     __ptext9:
  2684                           	opt stack 0
  2685  00089C                     _ScanWithRange:
  2686                           	opt stack 23
  2687                           
  2688                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2689                           
  2690                           ;incstack = 0
  2691  00089C  C0C4  F0AE         	movff	ScanWithRange@F3896,ScanWithRange@SensorResult
  2692  0008A0  C0C5  F0AF         	movff	ScanWithRange@F3896+1,ScanWithRange@SensorResult+1
  2693  0008A4  C0C6  F0B0         	movff	ScanWithRange@F3896+2,ScanWithRange@SensorResult+2
  2694  0008A8  C0C7  F0B1         	movff	ScanWithRange@F3896+3,ScanWithRange@SensorResult+3
  2695                           
  2696                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2697  0008AC  0E00               	movlw	0
  2698  0008AE  0100               	movlb	0	; () banked
  2699  0008B0  6FB3               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2700  0008B2  0E00               	movlw	0
  2701  0008B4  6FB2               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2702                           
  2703                           ;Movement.c: 97: unsigned int RightFlag=0;
  2704  0008B6  0E00               	movlw	0
  2705  0008B8  0100               	movlb	0	; () banked
  2706  0008BA  6FB5               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2707  0008BC  0E00               	movlw	0
  2708  0008BE  6FB4               	movwf	ScanWithRange@RightFlag& (0+255),b
  2709                           
  2710                           ;Movement.c: 98: char buf[40];
  2711                           ;Movement.c: 99: unsigned int i=0;
  2712  0008C0  0E00               	movlw	0
  2713  0008C2  0100               	movlb	0	; () banked
  2714  0008C4  6FA9               	movwf	(ScanWithRange@i+1)& (0+255),b
  2715  0008C6  0E00               	movlw	0
  2716  0008C8  6FA8               	movwf	ScanWithRange@i& (0+255),b
  2717                           
  2718                           ;Movement.c: 100: unsigned int n=0;
  2719  0008CA  0E00               	movlw	0
  2720  0008CC  0100               	movlb	0	; () banked
  2721  0008CE  6FA7               	movwf	(ScanWithRange@n+1)& (0+255),b
  2722  0008D0  0E00               	movlw	0
  2723  0008D2  6FA6               	movwf	ScanWithRange@n& (0+255),b
  2724                           
  2725                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2726  0008D4  0E00               	movlw	0
  2727  0008D6  0100               	movlb	0	; () banked
  2728  0008D8  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2729                           
  2730                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2731  0008DA  0E0B               	movlw	11
  2732  0008DC  0100               	movlb	0	; () banked
  2733  0008DE  6FAB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2734  0008E0  0EB8               	movlw	184
  2735  0008E2  6FAA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2736                           
  2737                           ;Movement.c: 105: const unsigned char power=40;
  2738  0008E4  0E28               	movlw	40
  2739  0008E6  0100               	movlb	0	; () banked
  2740  0008E8  6FAC               	movwf	ScanWithRange@power& (0+255),b
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2744  0008EA  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2745  0008EE  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2746  0008F2  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2747  0008F6  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2748  0008FA  0E64               	movlw	100
  2749  0008FC  0100               	movlb	0	; () banked
  2750  0008FE  6F6B               	movwf	turnLeft@power& (0+255),b
  2751  000900  ECD1  F00B         	call	_turnLeft	;wreg free
  2752                           
  2753                           ;Movement.c: 115: delay_tenth_s(3);
  2754  000904  0E03               	movlw	3
  2755  000906  ECF0  F00B         	call	_delay_tenth_s
  2756                           
  2757                           ;Movement.c: 116: stop(mL,mR);
  2758  00090A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2759  00090E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2760  000912  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2761  000916  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2762  00091A  EC9D  F009         	call	_stop	;wreg free
  2763                           
  2764                           ;Movement.c: 119: turnRight(mL,mR, power);
  2765  00091E  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2766  000922  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2767  000926  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2768  00092A  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2769  00092E  C0AC  F06B         	movff	ScanWithRange@power,turnRight@power
  2770  000932  ECB2  F00B         	call	_turnRight	;wreg free
  2771                           
  2772                           ;Movement.c: 122: TMR0L = 0;
  2773  000936  0E00               	movlw	0
  2774  000938  6ED6               	movwf	4054,c	;volatile
  2775                           
  2776                           ;Movement.c: 123: TMR0H = 0;
  2777  00093A  0E00               	movlw	0
  2778  00093C  6ED7               	movwf	4055,c	;volatile
  2779                           
  2780                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2781  00093E  8ED5               	bsf	4053,7,c	;volatile
  2782                           
  2783                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2784  000940  0E00               	movlw	0
  2785  000942  0100               	movlb	0	; () banked
  2786  000944  6FA9               	movwf	(ScanWithRange@i+1)& (0+255),b
  2787  000946  0E01               	movlw	1
  2788  000948  6FA8               	movwf	ScanWithRange@i& (0+255),b
  2789  00094A  D119               	goto	l3166
  2790  00094C                     l3090:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2794  00094C  ECE1  F00A         	call	_grabLeftIR	;wreg free
  2795  000950  C024  F0AE         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2796  000954  C025  F0AF         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2797                           
  2798                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2799  000958  ECA8  F00A         	call	_grabRightIR	;wreg free
  2800  00095C  C024  F0B0         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2801  000960  C025  F0B1         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2802                           
  2803                           ;Movement.c: 134: CAP1BUFH=0;
  2804  000964  0E00               	movlw	0
  2805  000966  6E69               	movwf	3945,c	;volatile
  2806                           
  2807                           ;Movement.c: 135: CAP1BUFL=0;
  2808  000968  0E00               	movlw	0
  2809  00096A  6E68               	movwf	3944,c	;volatile
  2810                           
  2811                           ;Movement.c: 136: CAP2BUFH=0;
  2812  00096C  0E00               	movlw	0
  2813  00096E  6E67               	movwf	3943,c	;volatile
  2814                           
  2815                           ;Movement.c: 137: CAP2BUFL=0;
  2816  000970  0E00               	movlw	0
  2817  000972  6E66               	movwf	3942,c	;volatile
  2818                           
  2819                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2820  000974  0E00               	movlw	0
  2821  000976  6E28               	movwf	SendLCD@type,c
  2822  000978  0E01               	movlw	1
  2823  00097A  EC59  F00C         	call	_SendLCD
  2824                           
  2825                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2826  00097E  0E21               	movlw	33
  2827  000980                     u2937:
  2828  000980  2EE8               	decfsz	wreg,f,c
  2829  000982  D7FE               	goto	u2937
  2830  000984  F000               	nop	
  2831                           
  2832                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2833  000986  0E00               	movlw	0
  2834  000988  6E28               	movwf	SendLCD@type,c
  2835  00098A  0E02               	movlw	2
  2836  00098C  EC59  F00C         	call	_SendLCD
  2837                           
  2838                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2839  000990  0E06               	movlw	6
  2840  000992  0100               	movlb	0	; () banked
  2841  000994  6F79               	movwf	??_ScanWithRange& (0+255),b
  2842  000996  0E30               	movlw	48
  2843  000998                     u2947:
  2844  000998  2EE8               	decfsz	wreg,f,c
  2845  00099A  D7FE               	goto	u2947
  2846  00099C  2F79               	decfsz	??_ScanWithRange& (0+255),f,b
  2847  00099E  D7FC               	goto	u2947
  2848  0009A0  D000               	nop2	
  2849                           
  2850                           ;Movement.c: 145: SetLine(1);
  2851  0009A2  0E01               	movlw	1
  2852  0009A4  EC41  F00C         	call	_SetLine
  2853                           
  2854                           ;Movement.c: 146: LCD_String("     ScanIR");
  2855  0009A8  0E2D               	movlw	low STR_1
  2856  0009AA  6E2A               	movwf	LCD_String@string,c
  2857  0009AC  0E03               	movlw	high STR_1
  2858  0009AE  6E2B               	movwf	LCD_String@string+1,c
  2859  0009B0  EC1A  F00B         	call	_LCD_String	;wreg free
  2860                           
  2861                           ;Movement.c: 147: SetLine(2);
  2862  0009B4  0E02               	movlw	2
  2863  0009B6  EC41  F00C         	call	_SetLine
  2864                           
  2865                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2866  0009BA  0E7E               	movlw	low ScanWithRange@buf
  2867  0009BC  6E30               	movwf	sprintf@sp,c
  2868  0009BE  0E00               	movlw	high ScanWithRange@buf
  2869  0009C0  6E31               	movwf	sprintf@sp+1,c
  2870  0009C2  0E0C               	movlw	low (STR_6+1)
  2871  0009C4  6E32               	movwf	sprintf@f,c
  2872  0009C6  0E03               	movlw	high (STR_6+1)
  2873  0009C8  6E33               	movwf	sprintf@f+1,c
  2874  0009CA  C0AE  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2875  0009CE  C0AF  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2876  0009D2  C0B0  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2877  0009D6  C0B1  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2878  0009DA  ECE5  F005         	call	_sprintf	;wreg free
  2879                           
  2880                           ;Movement.c: 149: LCD_String(buf);
  2881  0009DE  0E7E               	movlw	low ScanWithRange@buf
  2882  0009E0  6E2A               	movwf	LCD_String@string,c
  2883  0009E2  0E00               	movlw	high ScanWithRange@buf
  2884  0009E4  6E2B               	movwf	LCD_String@string+1,c
  2885  0009E6  EC1A  F00B         	call	_LCD_String	;wreg free
  2886                           
  2887                           ;Movement.c: 151: if (RightFlag==0){
  2888  0009EA  0100               	movlb	0	; () banked
  2889  0009EC  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2890  0009EE  0100               	movlb	0	; () banked
  2891  0009F0  11B5               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2892  0009F2  A4D8               	btfss	status,2,c
  2893  0009F4  D018               	goto	l221
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2897  0009F6  0100               	movlb	0	; () banked
  2898  0009F8  51B0               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2899  0009FA  0100               	movlb	0	; () banked
  2900  0009FC  5DAA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2901  0009FE  0100               	movlb	0	; () banked
  2902  000A00  51B1               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2903  000A02  0100               	movlb	0	; () banked
  2904  000A04  59AB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2905  000A06  B0D8               	btfsc	status,0,c
  2906  000A08  D00E               	goto	l221
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2910  000A0A  50D7               	movf	4055,w,c	;volatile
  2911  000A0C  0100               	movlb	0	; () banked
  2912  000A0E  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  2913  000A10  6B79               	clrf	??_ScanWithRange& (0+255),b
  2914  000A12  50D6               	movf	4054,w,c	;volatile
  2915  000A14  0100               	movlb	0	; () banked
  2916  000A16  2579               	addwf	??_ScanWithRange& (0+255),w,b
  2917  000A18  0100               	movlb	0	; () banked
  2918  000A1A  6FB4               	movwf	ScanWithRange@RightFlag& (0+255),b
  2919  000A1C  0E00               	movlw	0
  2920  000A1E  0100               	movlb	0	; () banked
  2921  000A20  217A               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2922  000A22  0100               	movlb	0	; () banked
  2923  000A24  6FB5               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2924  000A26                     l221:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;Movement.c: 154: }
  2928                           ;Movement.c: 155: }
  2929                           ;Movement.c: 157: if (LeftFlag==0){
  2930  000A26  0100               	movlb	0	; () banked
  2931  000A28  51B2               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2932  000A2A  0100               	movlb	0	; () banked
  2933  000A2C  11B3               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2934  000A2E  A4D8               	btfss	status,2,c
  2935  000A30  D018               	goto	l223
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2939  000A32  0100               	movlb	0	; () banked
  2940  000A34  51AE               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2941  000A36  0100               	movlb	0	; () banked
  2942  000A38  5DAA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2943  000A3A  0100               	movlb	0	; () banked
  2944  000A3C  51AF               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2945  000A3E  0100               	movlb	0	; () banked
  2946  000A40  59AB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2947  000A42  B0D8               	btfsc	status,0,c
  2948  000A44  D00E               	goto	l223
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2952  000A46  50D7               	movf	4055,w,c	;volatile
  2953  000A48  0100               	movlb	0	; () banked
  2954  000A4A  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  2955  000A4C  6B79               	clrf	??_ScanWithRange& (0+255),b
  2956  000A4E  50D6               	movf	4054,w,c	;volatile
  2957  000A50  0100               	movlb	0	; () banked
  2958  000A52  2579               	addwf	??_ScanWithRange& (0+255),w,b
  2959  000A54  0100               	movlb	0	; () banked
  2960  000A56  6FB2               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2961  000A58  0E00               	movlw	0
  2962  000A5A  0100               	movlb	0	; () banked
  2963  000A5C  217A               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2964  000A5E  0100               	movlb	0	; () banked
  2965  000A60  6FB3               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2966  000A62                     l223:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;Movement.c: 160: }
  2970                           ;Movement.c: 161: }
  2971                           ;Movement.c: 168: if (LeftFlag>0) {
  2972  000A62  0100               	movlb	0	; () banked
  2973  000A64  51B2               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2974  000A66  0100               	movlb	0	; () banked
  2975  000A68  11B3               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2976  000A6A  B4D8               	btfsc	status,2,c
  2977  000A6C  D07C               	goto	l3154
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;Movement.c: 171: if (RightFlag>0) {
  2981  000A6E  0100               	movlb	0	; () banked
  2982  000A70  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2983  000A72  0100               	movlb	0	; () banked
  2984  000A74  11B5               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2985  000A76  B4D8               	btfsc	status,2,c
  2986  000A78  D06A               	goto	l226
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  2990  000A7A  0100               	movlb	0	; () banked
  2991  000A7C  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2992  000A7E  0800               	sublw	0
  2993  000A80  0100               	movlb	0	; () banked
  2994  000A82  25B2               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2995  000A84  0100               	movlb	0	; () banked
  2996  000A86  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;Movement.c: 173: TMR0L = 0;
  3000  000A88  0E00               	movlw	0
  3001  000A8A  6ED6               	movwf	4054,c	;volatile
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;Movement.c: 174: TMR0H = 0;
  3005  000A8C  0E00               	movlw	0
  3006  000A8E  6ED7               	movwf	4055,c	;volatile
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;Movement.c: 175: stop(mL,mR);
  3010  000A90  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3011  000A94  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3012  000A98  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3013  000A9C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3014  000AA0  EC9D  F009         	call	_stop	;wreg free
  3015                           
  3016                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3017  000AA4  D00C               	goto	l3136
  3018  000AA6                     l3134:
  3019                           
  3020                           ;Movement.c: 177: turnLeft(mL,mR, power);
  3021  000AA6  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3022  000AAA  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3023  000AAE  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3024  000AB2  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3025  000AB6  C0AC  F06B         	movff	ScanWithRange@power,turnLeft@power
  3026  000ABA  ECD1  F00B         	call	_turnLeft	;wreg free
  3027  000ABE                     l3136:
  3028  000ABE  0100               	movlb	0	; () banked
  3029  000AC0  90D8               	bcf	status,0,c
  3030  000AC2  31AD               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3031  000AC4  0100               	movlb	0	; () banked
  3032  000AC6  6F79               	movwf	??_ScanWithRange& (0+255),b
  3033  000AC8  6B7A               	clrf	(??_ScanWithRange+1)& (0+255),b
  3034  000ACA  50D6               	movf	4054,w,c	;volatile
  3035  000ACC  CFD7 F07B          	movff	4055,??_ScanWithRange+2	;volatile
  3036  000AD0  0100               	movlb	0	; () banked
  3037  000AD2  6B7C               	clrf	(??_ScanWithRange+3)& (0+255),b
  3038  000AD4  C07B  F07C         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3039  000AD8  0100               	movlb	0	; () banked
  3040  000ADA  6B7B               	clrf	(??_ScanWithRange+2)& (0+255),b
  3041  000ADC  0100               	movlb	0	; () banked
  3042  000ADE  277B               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3043  000AE0  0E00               	movlw	0
  3044  000AE2  237C               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3045  000AE4  0100               	movlb	0	; () banked
  3046  000AE6  5179               	movf	??_ScanWithRange& (0+255),w,b
  3047  000AE8  0100               	movlb	0	; () banked
  3048  000AEA  5D7B               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3049  000AEC  0100               	movlb	0	; () banked
  3050  000AEE  517C               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3051  000AF0  0A80               	xorlw	128
  3052  000AF2  0100               	movlb	0	; () banked
  3053  000AF4  6F7D               	movwf	(??_ScanWithRange+4)& (0+255),b
  3054  000AF6  0100               	movlb	0	; () banked
  3055  000AF8  517A               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3056  000AFA  0A80               	xorlw	128
  3057  000AFC  0100               	movlb	0	; () banked
  3058  000AFE  597D               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3059  000B00  A0D8               	btfss	status,0,c
  3060  000B02  D7D1               	goto	l3134
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;Movement.c: 178: }
  3064                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3065  000B04  9ED5               	bcf	4053,7,c	;volatile
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;Movement.c: 180: stop(mL,mR);
  3069  000B06  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3070  000B0A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3071  000B0E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3072  000B12  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3073  000B16  EC9D  F009         	call	_stop	;wreg free
  3074                           
  3075                           ;Movement.c: 181: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3076  000B1A  C0AD  F079         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3077  000B1E  0100               	movlb	0	; () banked
  3078  000B20  90D8               	bcf	status,0,c
  3079  000B22  3379               	rrcf	??_ScanWithRange& (0+255),f,b
  3080  000B24  0100               	movlb	0	; () banked
  3081  000B26  5179               	movf	??_ScanWithRange& (0+255),w,b
  3082  000B28  0100               	movlb	0	; () banked
  3083  000B2A  25B4               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3084  000B2C  0100               	movlb	0	; () banked
  3085  000B2E  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  3086  000B30  0E00               	movlw	0
  3087  000B32  0100               	movlb	0	; () banked
  3088  000B34  21B5               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3089  000B36  0100               	movlb	0	; () banked
  3090  000B38  6F7B               	movwf	(??_ScanWithRange+2)& (0+255),b
  3091  000B3A  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3092  000B3E  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3093  000B42  C07A  FFDE         	movff	??_ScanWithRange+1,postinc2
  3094  000B46  C07B  FFDD         	movff	??_ScanWithRange+2,postdec2
  3095  000B4A                     l3142:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;Movement.c: 182: return 2;
  3099  000B4A  0E02               	movlw	2
  3100                           
  3101                           ; BSR set to: 0
  3102  000B4C  0012               	return	
  3103  000B4E                     l226:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;Movement.c: 185: T0CONbits.TMR0ON=0;
  3107  000B4E  9ED5               	bcf	4053,7,c	;volatile
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;Movement.c: 186: stop(mL,mR);
  3111  000B50  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3112  000B54  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3113  000B58  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3114  000B5C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3115  000B60  EC9D  F009         	call	_stop	;wreg free
  3116  000B64  D7F2               	goto	l3142
  3117  000B66                     l3154:
  3118                           
  3119                           ;Movement.c: 188: }
  3120                           ;Movement.c: 189: }
  3121                           ;Movement.c: 191: if (*RFID_Read==1) {
  3122  000B66  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3123  000B6A  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3124  000B6E  04DE               	decf	postinc2,w,c
  3125  000B70  A4D8               	btfss	status,2,c
  3126  000B72  D002               	goto	l3164
  3127                           
  3128                           ;Movement.c: 192: return 2;
  3129  000B74  0E02               	movlw	2
  3130  000B76  0012               	return	
  3131  000B78                     l3164:
  3132  000B78  0100               	movlb	0	; () banked
  3133  000B7A  4BA8               	infsnz	ScanWithRange@i& (0+255),f,b
  3134  000B7C  2BA9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3135  000B7E                     l3166:
  3136                           
  3137                           ; BSR set to: 0
  3138  000B7E  0100               	movlb	0	; () banked
  3139  000B80  51A8               	movf	ScanWithRange@i& (0+255),w,b
  3140  000B82  0100               	movlb	0	; () banked
  3141  000B84  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3142  000B86  0100               	movlb	0	; () banked
  3143  000B88  51A9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3144  000B8A  0100               	movlb	0	; () banked
  3145  000B8C  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3146  000B8E  B0D8               	btfsc	status,0,c
  3147  000B90  D6DD               	goto	l3090
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;Movement.c: 196: }
  3151                           ;Movement.c: 197: }
  3152                           ;Movement.c: 200: turnRight(mL,mR, 100);
  3153                           
  3154                           ; BSR set to: 0
  3155  000B92  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3156  000B96  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3157  000B9A  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3158  000B9E  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3159  000BA2  0E64               	movlw	100
  3160  000BA4  0100               	movlb	0	; () banked
  3161  000BA6  6F6B               	movwf	turnRight@power& (0+255),b
  3162  000BA8  ECB2  F00B         	call	_turnRight	;wreg free
  3163                           
  3164                           ;Movement.c: 201: delay_tenth_s(2);
  3165  000BAC  0E02               	movlw	2
  3166  000BAE  ECF0  F00B         	call	_delay_tenth_s
  3167                           
  3168                           ;Movement.c: 202: stop(mL,mR);
  3169  000BB2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3170  000BB6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3171  000BBA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3172  000BBE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3173  000BC2  EC9D  F009         	call	_stop	;wreg free
  3174                           
  3175                           ;Movement.c: 203: return -1;
  3176  000BC6  0EFF               	movlw	255
  3177  000BC8  0012               	return	
  3178  000BCA                     __end_of_ScanWithRange:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           intcon	equ	0xFF2
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           indf1	equ	0xFE7
  3187                           fsr1h	equ	0xFE2
  3188                           fsr1l	equ	0xFE1
  3189                           indf2	equ	0xFDF
  3190                           postinc2	equ	0xFDE
  3191                           postdec2	equ	0xFDD
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _turnRight *****************
  3197 ;; Defined at:
  3198 ;;		line 98 in file "dc_motor.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3201 ;;		 -> main@mL(9), 
  3202 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3203 ;;		 -> main@mR(9), 
  3204 ;;  power           1   11[BANK0 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;		None               void
  3209 ;; Registers used:
  3210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3216 ;;      Params:         0       5       0       0
  3217 ;;      Locals:         0       0       0       0
  3218 ;;      Temps:          0       0       0       0
  3219 ;;      Totals:         0       5       0       0
  3220 ;;Total ram usage:        5 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    6
  3223 ;; This function calls:
  3224 ;;		_fullSpeedAhead
  3225 ;; This function is called by:
  3226 ;;		_ScanWithRange
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text10
  3231  001764                     __ptext10:
  3232                           	opt stack 0
  3233  001764                     _turnRight:
  3234                           	opt stack 23
  3235                           
  3236                           ;dc_motor.c: 102: mL->direction=0;
  3237                           
  3238                           ;incstack = 0
  3239  001764  0100               	movlb	0	; () banked
  3240  001766  EE20 F001          	lfsr	2,1
  3241  00176A  5167               	movf	turnRight@mL& (0+255),w,b
  3242  00176C  26D9               	addwf	fsr2l,f,c
  3243  00176E  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3244  001770  22DA               	addwfc	fsr2h,f,c
  3245  001772  0E00               	movlw	0
  3246  001774  6EDF               	movwf	indf2,c
  3247                           
  3248                           ;dc_motor.c: 103: mR->direction=1;
  3249  001776  0100               	movlb	0	; () banked
  3250  001778  EE20 F001          	lfsr	2,1
  3251  00177C  5169               	movf	turnRight@mR& (0+255),w,b
  3252  00177E  26D9               	addwf	fsr2l,f,c
  3253  001780  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3254  001782  22DA               	addwfc	fsr2h,f,c
  3255  001784  0E01               	movlw	1
  3256  001786  6EDF               	movwf	indf2,c
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3260  001788  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3261  00178C  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3262  001790  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3263  001794  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3264  001798  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3265  00179C  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  3266  0017A0  0012               	return		;funcret
  3267  0017A2                     __end_of_turnRight:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           postinc0	equ	0xFEE
  3274                           wreg	equ	0xFE8
  3275                           indf1	equ	0xFE7
  3276                           fsr1h	equ	0xFE2
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _turnLeft *****************
  3286 ;; Defined at:
  3287 ;;		line 87 in file "dc_motor.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3290 ;;		 -> main@mL(9), 
  3291 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3292 ;;		 -> main@mR(9), 
  3293 ;;  power           1   11[BANK0 ] unsigned char 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;		None               void
  3298 ;; Registers used:
  3299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3305 ;;      Params:         0       5       0       0
  3306 ;;      Locals:         0       0       0       0
  3307 ;;      Temps:          0       0       0       0
  3308 ;;      Totals:         0       5       0       0
  3309 ;;Total ram usage:        5 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    6
  3312 ;; This function calls:
  3313 ;;		_fullSpeedAhead
  3314 ;; This function is called by:
  3315 ;;		_ScanWithRange
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text11
  3320  0017A2                     __ptext11:
  3321                           	opt stack 0
  3322  0017A2                     _turnLeft:
  3323                           	opt stack 23
  3324                           
  3325                           ;dc_motor.c: 91: mL->direction=1;
  3326                           
  3327                           ;incstack = 0
  3328  0017A2  0100               	movlb	0	; () banked
  3329  0017A4  EE20 F001          	lfsr	2,1
  3330  0017A8  5167               	movf	turnLeft@mL& (0+255),w,b
  3331  0017AA  26D9               	addwf	fsr2l,f,c
  3332  0017AC  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3333  0017AE  22DA               	addwfc	fsr2h,f,c
  3334  0017B0  0E01               	movlw	1
  3335  0017B2  6EDF               	movwf	indf2,c
  3336                           
  3337                           ;dc_motor.c: 92: mR->direction=0;
  3338  0017B4  0100               	movlb	0	; () banked
  3339  0017B6  EE20 F001          	lfsr	2,1
  3340  0017BA  5169               	movf	turnLeft@mR& (0+255),w,b
  3341  0017BC  26D9               	addwf	fsr2l,f,c
  3342  0017BE  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3343  0017C0  22DA               	addwfc	fsr2h,f,c
  3344  0017C2  0E00               	movlw	0
  3345  0017C4  6EDF               	movwf	indf2,c
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3349  0017C6  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3350  0017CA  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3351  0017CE  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3352  0017D2  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3353  0017D6  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3354  0017DA  EC29  F00A         	call	_fullSpeedAhead	;wreg free
  3355  0017DE  0012               	return		;funcret
  3356  0017E0                     __end_of_turnLeft:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           indf1	equ	0xFE7
  3365                           fsr1h	equ	0xFE2
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _fullSpeedAhead *****************
  3375 ;; Defined at:
  3376 ;;		line 108 in file "dc_motor.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3379 ;;		 -> main@mL(9), 
  3380 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3381 ;;		 -> main@mR(9), 
  3382 ;;  power           1    6[BANK0 ] unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;		None               void
  3387 ;; Registers used:
  3388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3394 ;;      Params:         0       5       0       0
  3395 ;;      Locals:         0       0       0       0
  3396 ;;      Temps:          1       0       0       0
  3397 ;;      Totals:         1       5       0       0
  3398 ;;Total ram usage:        6 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    5
  3401 ;; This function calls:
  3402 ;;		_setMotorPWM
  3403 ;; This function is called by:
  3404 ;;		_turnLeft
  3405 ;;		_turnRight
  3406 ;;		_fullSpeedBack
  3407 ;;		_main
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text12
  3412  001452                     __ptext12:
  3413                           	opt stack 0
  3414  001452                     _fullSpeedAhead:
  3415                           	opt stack 24
  3416                           
  3417                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3418                           
  3419                           ;incstack = 0
  3420  001452  D02C               	goto	l65
  3421  001454                     l2864:
  3422                           
  3423                           ;dc_motor.c: 112: if(mL->power<power){
  3424  001454  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3425  001458  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3426  00145C  0100               	movlb	0	; () banked
  3427  00145E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3428  001460  5CDE               	subwf	postinc2,w,c
  3429  001462  B0D8               	btfsc	status,0,c
  3430  001464  D005               	goto	l2868
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;dc_motor.c: 113: mL->power++;
  3434  001466  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3435  00146A  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3436  00146E  2ADF               	incf	indf2,f,c
  3437  001470                     l2868:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;dc_motor.c: 114: }
  3441                           ;dc_motor.c: 115: if(mR->power<power){
  3442  001470  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3443  001474  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3444  001478  0100               	movlb	0	; () banked
  3445  00147A  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3446  00147C  5CDE               	subwf	postinc2,w,c
  3447  00147E  B0D8               	btfsc	status,0,c
  3448  001480  D005               	goto	l2872
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;dc_motor.c: 116: mR->power++;
  3452  001482  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3453  001486  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3454  00148A  2ADF               	incf	indf2,f,c
  3455  00148C                     l2872:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;dc_motor.c: 117: }
  3459                           ;dc_motor.c: 118: setMotorPWM(mL);
  3460  00148C  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3461  001490  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3462  001494  EC68  F007         	call	_setMotorPWM	;wreg free
  3463                           
  3464                           ;dc_motor.c: 119: setMotorPWM(mR);
  3465  001498  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3466  00149C  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3467  0014A0  EC68  F007         	call	_setMotorPWM	;wreg free
  3468                           
  3469                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3470  0014A4  0E21               	movlw	33
  3471  0014A6                     u2957:
  3472  0014A6  2EE8               	decfsz	wreg,f,c
  3473  0014A8  D7FE               	goto	u2957
  3474  0014AA  F000               	nop	
  3475  0014AC                     l65:
  3476  0014AC  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3477  0014B0  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3478  0014B4  0100               	movlb	0	; () banked
  3479  0014B6  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3480  0014B8  5CDE               	subwf	postinc2,w,c
  3481  0014BA  A0D8               	btfss	status,0,c
  3482  0014BC  D7CB               	goto	l2864
  3483                           
  3484                           ; BSR set to: 0
  3485  0014BE  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3486  0014C2  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3487  0014C6  0100               	movlb	0	; () banked
  3488  0014C8  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3489  0014CA  5CDE               	subwf	postinc2,w,c
  3490  0014CC  B0D8               	btfsc	status,0,c
  3491  0014CE  0012               	return	
  3492  0014D0  D7C1               	goto	l2864
  3493  0014D2                     __end_of_fullSpeedAhead:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           indf1	equ	0xFE7
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           postdec2	equ	0xFDD
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _delay_tenth_s *****************
  3512 ;; Defined at:
  3513 ;;		line 32 in file "Movement.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  tenth_second    1    wreg     unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3518 ;;  i               2   37[COMRAM] unsigned int 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3528 ;;      Params:         0       0       0       0
  3529 ;;      Locals:         3       0       0       0
  3530 ;;      Temps:          1       0       0       0
  3531 ;;      Totals:         4       0       0       0
  3532 ;;Total ram usage:        4 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    3
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		_ScanWithRange
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text13
  3544  0017E0                     __ptext13:
  3545                           	opt stack 0
  3546  0017E0                     _delay_tenth_s:
  3547                           	opt stack 27
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;incstack = 0
  3551                           ;delay_tenth_s@tenth_seconds stored from wreg
  3552  0017E0  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3553                           
  3554                           ;Movement.c: 33: unsigned int i=0;
  3555  0017E2  0E00               	movlw	0
  3556  0017E4  6E27               	movwf	delay_tenth_s@i+1,c
  3557  0017E6  0E00               	movlw	0
  3558  0017E8  6E26               	movwf	delay_tenth_s@i,c
  3559                           
  3560                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3561  0017EA  0E00               	movlw	0
  3562  0017EC  6E27               	movwf	delay_tenth_s@i+1,c
  3563  0017EE  0E01               	movlw	1
  3564  0017F0  6E26               	movwf	delay_tenth_s@i,c
  3565  0017F2  D009               	goto	l2192
  3566  0017F4                     l2188:
  3567                           
  3568                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3569  0017F4  0E82               	movlw	130
  3570  0017F6  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3571  0017F8  0EDE               	movlw	222
  3572  0017FA                     u2967:
  3573  0017FA  2EE8               	decfsz	wreg,f,c
  3574  0017FC  D7FE               	goto	u2967
  3575  0017FE  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3576  001800  D7FC               	goto	u2967
  3577  001802  4A26               	infsnz	delay_tenth_s@i,f,c
  3578  001804  2A27               	incf	delay_tenth_s@i+1,f,c
  3579  001806                     l2192:
  3580  001806  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3581  001808  0D02               	mullw	2
  3582  00180A  5026               	movf	delay_tenth_s@i,w,c
  3583  00180C  5CF3               	subwf	prodl,w,c
  3584  00180E  5027               	movf	delay_tenth_s@i+1,w,c
  3585  001810  58F4               	subwfb	prodh,w,c
  3586  001812  A0D8               	btfss	status,0,c
  3587  001814  0012               	return	
  3588  001816  D7EE               	goto	l2188
  3589  001818                     __end_of_delay_tenth_s:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           prodh	equ	0xFF4
  3593                           prodl	equ	0xFF3
  3594                           intcon	equ	0xFF2
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf1	equ	0xFE7
  3598                           fsr1h	equ	0xFE2
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _ScanIR *****************
  3608 ;; Defined at:
  3609 ;;		line 45 in file "Movement.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3612 ;;		 -> main@mL(9), 
  3613 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3614 ;;		 -> main@mR(9), 
  3615 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3616 ;;		 -> main@Move(1), 
  3617 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3618 ;;		 -> main@MoveTime(200), 
  3619 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3620 ;;		 -> main@MoveType(100), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3623 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3624 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      unsigned char 
  3627 ;; Registers used:
  3628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3634 ;;      Params:         0      10       0       0
  3635 ;;      Locals:         0      46       0       0
  3636 ;;      Temps:          1       0       0       0
  3637 ;;      Totals:         1      56       0       0
  3638 ;;Total ram usage:       57 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    7
  3641 ;; This function calls:
  3642 ;;		_LCD_String
  3643 ;;		_SendLCD
  3644 ;;		_SetLine
  3645 ;;		_grabLeftIR
  3646 ;;		_grabRightIR
  3647 ;;		_sprintf
  3648 ;;		_stop
  3649 ;; This function is called by:
  3650 ;;		_main
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text14
  3655  00100A                     __ptext14:
  3656                           	opt stack 0
  3657  00100A                     _ScanIR:
  3658                           	opt stack 23
  3659                           
  3660                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3661                           
  3662                           ;incstack = 0
  3663  00100A  C0C0  F0A1         	movff	ScanIR@F3884,ScanIR@SensorResult
  3664  00100E  C0C1  F0A2         	movff	ScanIR@F3884+1,ScanIR@SensorResult+1
  3665  001012  C0C2  F0A3         	movff	ScanIR@F3884+2,ScanIR@SensorResult+2
  3666  001016  C0C3  F0A4         	movff	ScanIR@F3884+3,ScanIR@SensorResult+3
  3667                           
  3668                           ;Movement.c: 50: char buf[40];
  3669                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3670  00101A  0E09               	movlw	9
  3671  00101C  0100               	movlb	0	; () banked
  3672  00101E  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3673  001020  0EC4               	movlw	196
  3674  001022  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3678  001024  ECE1  F00A         	call	_grabLeftIR	;wreg free
  3679  001028  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3680  00102C  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3681                           
  3682                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3683  001030  ECA8  F00A         	call	_grabRightIR	;wreg free
  3684  001034  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3685  001038  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3686                           
  3687                           ;Movement.c: 62: CAP1BUFH=0;
  3688  00103C  0E00               	movlw	0
  3689  00103E  6E69               	movwf	3945,c	;volatile
  3690                           
  3691                           ;Movement.c: 63: CAP1BUFL=0;
  3692  001040  0E00               	movlw	0
  3693  001042  6E68               	movwf	3944,c	;volatile
  3694                           
  3695                           ;Movement.c: 64: CAP2BUFH=0;
  3696  001044  0E00               	movlw	0
  3697  001046  6E67               	movwf	3943,c	;volatile
  3698                           
  3699                           ;Movement.c: 65: CAP2BUFL=0;
  3700  001048  0E00               	movlw	0
  3701  00104A  6E66               	movwf	3942,c	;volatile
  3702                           
  3703                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3704  00104C  0E00               	movlw	0
  3705  00104E  6E28               	movwf	SendLCD@type,c
  3706  001050  0E01               	movlw	1
  3707  001052  EC59  F00C         	call	_SendLCD
  3708                           
  3709                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3710  001056  0E21               	movlw	33
  3711  001058                     u2977:
  3712  001058  2EE8               	decfsz	wreg,f,c
  3713  00105A  D7FE               	goto	u2977
  3714  00105C  F000               	nop	
  3715                           
  3716                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3717  00105E  0E00               	movlw	0
  3718  001060  6E28               	movwf	SendLCD@type,c
  3719  001062  0E02               	movlw	2
  3720  001064  EC59  F00C         	call	_SendLCD
  3721                           
  3722                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3723  001068  0E06               	movlw	6
  3724  00106A  6E39               	movwf	??_ScanIR& (0+255),c
  3725  00106C  0E30               	movlw	48
  3726  00106E                     u2987:
  3727  00106E  2EE8               	decfsz	wreg,f,c
  3728  001070  D7FE               	goto	u2987
  3729  001072  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3730  001074  D7FC               	goto	u2987
  3731  001076  D000               	nop2	
  3732                           
  3733                           ;Movement.c: 72: SetLine(1);
  3734  001078  0E01               	movlw	1
  3735  00107A  EC41  F00C         	call	_SetLine
  3736                           
  3737                           ;Movement.c: 73: LCD_String("     ScanIR");
  3738  00107E  0E2D               	movlw	low STR_1
  3739  001080  6E2A               	movwf	LCD_String@string,c
  3740  001082  0E03               	movlw	high STR_1
  3741  001084  6E2B               	movwf	LCD_String@string+1,c
  3742  001086  EC1A  F00B         	call	_LCD_String	;wreg free
  3743                           
  3744                           ;Movement.c: 74: SetLine(2);
  3745  00108A  0E02               	movlw	2
  3746  00108C  EC41  F00C         	call	_SetLine
  3747                           
  3748                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3749  001090  0E77               	movlw	low ScanIR@buf
  3750  001092  6E30               	movwf	sprintf@sp,c
  3751  001094  0E00               	movlw	high ScanIR@buf
  3752  001096  6E31               	movwf	sprintf@sp+1,c
  3753  001098  0E0C               	movlw	low (STR_6+1)
  3754  00109A  6E32               	movwf	sprintf@f,c
  3755  00109C  0E03               	movlw	high (STR_6+1)
  3756  00109E  6E33               	movwf	sprintf@f+1,c
  3757  0010A0  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3758  0010A4  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3759  0010A8  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3760  0010AC  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3761  0010B0  ECE5  F005         	call	_sprintf	;wreg free
  3762                           
  3763                           ;Movement.c: 76: LCD_String(buf);
  3764  0010B4  0E77               	movlw	low ScanIR@buf
  3765  0010B6  6E2A               	movwf	LCD_String@string,c
  3766  0010B8  0E00               	movlw	high ScanIR@buf
  3767  0010BA  6E2B               	movwf	LCD_String@string+1,c
  3768  0010BC  EC1A  F00B         	call	_LCD_String	;wreg free
  3769                           
  3770                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3771                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3772  0010C0  0100               	movlb	0	; () banked
  3773  0010C2  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3774  0010C4  0100               	movlb	0	; () banked
  3775  0010C6  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3776  0010C8  0100               	movlb	0	; () banked
  3777  0010CA  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3778  0010CC  0100               	movlb	0	; () banked
  3779  0010CE  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3780  0010D0  B0D8               	btfsc	status,0,c
  3781  0010D2  D00C               	goto	l3064
  3782                           
  3783                           ; BSR set to: 0
  3784  0010D4  0100               	movlb	0	; () banked
  3785  0010D6  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3786  0010D8  0100               	movlb	0	; () banked
  3787  0010DA  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3788  0010DC  0100               	movlb	0	; () banked
  3789  0010DE  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3790  0010E0  0100               	movlb	0	; () banked
  3791  0010E2  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3792  0010E4  B0D8               	btfsc	status,0,c
  3793  0010E6  D002               	goto	l3064
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;Movement.c: 82: return 2;
  3797  0010E8  0E02               	movlw	2
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;Movement.c: 83: } else {
  3801                           
  3802                           ; BSR set to: 0
  3803  0010EA  0012               	return	
  3804  0010EC                     l3064:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;Movement.c: 84: stop(mL,mR);
  3808  0010EC  C06D  F062         	movff	ScanIR@mL,stop@mL
  3809  0010F0  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3810  0010F4  C06F  F064         	movff	ScanIR@mR,stop@mR
  3811  0010F8  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3812  0010FC  EC9D  F009         	call	_stop	;wreg free
  3813                           
  3814                           ;Movement.c: 85: return 0;
  3815  001100  0E00               	movlw	0
  3816  001102  0012               	return	
  3817  001104                     __end_of_ScanIR:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           prodh	equ	0xFF4
  3821                           prodl	equ	0xFF3
  3822                           intcon	equ	0xFF2
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           indf1	equ	0xFE7
  3826                           fsr1h	equ	0xFE2
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           postdec2	equ	0xFDD
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _stop *****************
  3836 ;; Defined at:
  3837 ;;		line 67 in file "dc_motor.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3840 ;;		 -> main@mL(9), 
  3841 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3842 ;;		 -> main@mR(9), 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       4       0       0
  3855 ;;      Locals:         0       0       0       0
  3856 ;;      Temps:          0       0       0       0
  3857 ;;      Totals:         0       4       0       0
  3858 ;;Total ram usage:        4 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    5
  3861 ;; This function calls:
  3862 ;;		_setMotorPWM
  3863 ;; This function is called by:
  3864 ;;		_ScanIR
  3865 ;;		_ScanWithRange
  3866 ;;		_main
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text15
  3871  00133A                     __ptext15:
  3872                           	opt stack 0
  3873  00133A                     _stop:
  3874                           	opt stack 25
  3875                           
  3876                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3877                           
  3878                           ;incstack = 0
  3879  00133A  D028               	goto	l2896
  3880  00133C                     l2882:
  3881                           
  3882                           ;dc_motor.c: 71: if(mL->power>0){
  3883  00133C  C062  FFD9         	movff	stop@mL,fsr2l
  3884  001340  C063  FFDA         	movff	stop@mL+1,fsr2h
  3885  001344  50DF               	movf	indf2,w,c
  3886  001346  B4D8               	btfsc	status,2,c
  3887  001348  D005               	goto	l2886
  3888                           
  3889                           ;dc_motor.c: 72: mL->power--;
  3890  00134A  C062  FFD9         	movff	stop@mL,fsr2l
  3891  00134E  C063  FFDA         	movff	stop@mL+1,fsr2h
  3892  001352  06DF               	decf	indf2,f,c
  3893  001354                     l2886:
  3894                           
  3895                           ;dc_motor.c: 73: }
  3896                           ;dc_motor.c: 74: if(mR->power>0){
  3897  001354  C064  FFD9         	movff	stop@mR,fsr2l
  3898  001358  C065  FFDA         	movff	stop@mR+1,fsr2h
  3899  00135C  50DF               	movf	indf2,w,c
  3900  00135E  B4D8               	btfsc	status,2,c
  3901  001360  D005               	goto	l2890
  3902                           
  3903                           ;dc_motor.c: 75: mR->power--;
  3904  001362  C064  FFD9         	movff	stop@mR,fsr2l
  3905  001366  C065  FFDA         	movff	stop@mR+1,fsr2h
  3906  00136A  06DF               	decf	indf2,f,c
  3907  00136C                     l2890:
  3908                           
  3909                           ;dc_motor.c: 76: }
  3910                           ;dc_motor.c: 77: setMotorPWM(mL);
  3911  00136C  C062  F032         	movff	stop@mL,setMotorPWM@m
  3912  001370  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3913  001374  EC68  F007         	call	_setMotorPWM	;wreg free
  3914                           
  3915                           ;dc_motor.c: 78: setMotorPWM(mR);
  3916  001378  C064  F032         	movff	stop@mR,setMotorPWM@m
  3917  00137C  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3918  001380  EC68  F007         	call	_setMotorPWM	;wreg free
  3919                           
  3920                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3921  001384  0E21               	movlw	33
  3922  001386                     u2997:
  3923  001386  2EE8               	decfsz	wreg,f,c
  3924  001388  D7FE               	goto	u2997
  3925  00138A  F000               	nop	
  3926  00138C                     l2896:
  3927  00138C  C062  FFD9         	movff	stop@mL,fsr2l
  3928  001390  C063  FFDA         	movff	stop@mL+1,fsr2h
  3929  001394  50DF               	movf	indf2,w,c
  3930  001396  A4D8               	btfss	status,2,c
  3931  001398  D7D1               	goto	l2882
  3932  00139A  C064  FFD9         	movff	stop@mR,fsr2l
  3933  00139E  C065  FFDA         	movff	stop@mR+1,fsr2h
  3934  0013A2  50DF               	movf	indf2,w,c
  3935  0013A4  A4D8               	btfss	status,2,c
  3936  0013A6  D7CA               	goto	l2882
  3937                           
  3938                           ;dc_motor.c: 80: }
  3939                           ;dc_motor.c: 81: mL->direction=1;
  3940  0013A8  0100               	movlb	0	; () banked
  3941  0013AA  EE20 F001          	lfsr	2,1
  3942  0013AE  5162               	movf	stop@mL& (0+255),w,b
  3943  0013B0  26D9               	addwf	fsr2l,f,c
  3944  0013B2  5163               	movf	(stop@mL+1)& (0+255),w,b
  3945  0013B4  22DA               	addwfc	fsr2h,f,c
  3946  0013B6  0E01               	movlw	1
  3947  0013B8  6EDF               	movwf	indf2,c
  3948                           
  3949                           ;dc_motor.c: 82: mR->direction=1;
  3950  0013BA  0100               	movlb	0	; () banked
  3951  0013BC  EE20 F001          	lfsr	2,1
  3952  0013C0  5164               	movf	stop@mR& (0+255),w,b
  3953  0013C2  26D9               	addwf	fsr2l,f,c
  3954  0013C4  5165               	movf	(stop@mR+1)& (0+255),w,b
  3955  0013C6  22DA               	addwfc	fsr2h,f,c
  3956  0013C8  0E01               	movlw	1
  3957  0013CA  6EDF               	movwf	indf2,c
  3958                           
  3959                           ; BSR set to: 0
  3960  0013CC  0012               	return		;funcret
  3961  0013CE                     __end_of_stop:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           prodh	equ	0xFF4
  3965                           prodl	equ	0xFF3
  3966                           intcon	equ	0xFF2
  3967                           postinc0	equ	0xFEE
  3968                           wreg	equ	0xFE8
  3969                           indf1	equ	0xFE7
  3970                           fsr1h	equ	0xFE2
  3971                           fsr1l	equ	0xFE1
  3972                           indf2	equ	0xFDF
  3973                           postinc2	equ	0xFDE
  3974                           postdec2	equ	0xFDD
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _setMotorPWM *****************
  3980 ;; Defined at:
  3981 ;;		line 26 in file "dc_motor.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3984 ;;		 -> main@mR(9), main@mL(9), 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  PWMduty         2    0[BANK0 ] int 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;		None               void
  3989 ;; Registers used:
  3990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3996 ;;      Params:         2       0       0       0
  3997 ;;      Locals:         0       2       0       0
  3998 ;;      Temps:          5       0       0       0
  3999 ;;      Totals:         7       2       0       0
  4000 ;;Total ram usage:        9 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    4
  4003 ;; This function calls:
  4004 ;;		___awdiv
  4005 ;;		___wmul
  4006 ;; This function is called by:
  4007 ;;		_stop
  4008 ;;		_fullSpeedAhead
  4009 ;;		_setMotorFullSpeed
  4010 ;;		_stopMotor
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text16
  4015  000ED0                     __ptext16:
  4016                           	opt stack 0
  4017  000ED0                     _setMotorPWM:
  4018                           	opt stack 25
  4019                           
  4020                           ;dc_motor.c: 28: int PWMduty;
  4021                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;incstack = 0
  4025  000ED0  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4026  000ED4  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4027  000ED8  50DF               	movf	indf2,w,c
  4028  000EDA  6E34               	movwf	??_setMotorPWM& (0+255),c
  4029  000EDC  5034               	movf	??_setMotorPWM,w,c
  4030  000EDE  6E24               	movwf	___wmul@multiplier,c
  4031  000EE0  6A25               	clrf	___wmul@multiplier+1,c
  4032  000EE2  EE20 F007          	lfsr	2,7
  4033  000EE6  5032               	movf	setMotorPWM@m,w,c
  4034  000EE8  26D9               	addwf	fsr2l,f,c
  4035  000EEA  5033               	movf	setMotorPWM@m+1,w,c
  4036  000EEC  22DA               	addwfc	fsr2h,f,c
  4037  000EEE  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4038  000EF2  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4039  000EF6  EC99  F00C         	call	___wmul	;wreg free
  4040  000EFA  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4041  000EFE  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4042  000F02  0E00               	movlw	0
  4043  000F04  6E2D               	movwf	___awdiv@divisor+1,c
  4044  000F06  0E64               	movlw	100
  4045  000F08  6E2C               	movwf	___awdiv@divisor,c
  4046  000F0A  ECE7  F009         	call	___awdiv	;wreg free
  4047  000F0E  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4048  000F12  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4049                           
  4050                           ;dc_motor.c: 32: if (m->direction)
  4051  000F16  EE20 F001          	lfsr	2,1
  4052  000F1A  5032               	movf	setMotorPWM@m,w,c
  4053  000F1C  26D9               	addwf	fsr2l,f,c
  4054  000F1E  5033               	movf	setMotorPWM@m+1,w,c
  4055  000F20  22DA               	addwfc	fsr2h,f,c
  4056  000F22  50DF               	movf	indf2,w,c
  4057  000F24  B4D8               	btfsc	status,2,c
  4058  000F26  D02E               	goto	l2860
  4059                           
  4060                           ;dc_motor.c: 33: {
  4061                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4062  000F28  EE20 F006          	lfsr	2,6
  4063  000F2C  5032               	movf	setMotorPWM@m,w,c
  4064  000F2E  26D9               	addwf	fsr2l,f,c
  4065  000F30  5033               	movf	setMotorPWM@m+1,w,c
  4066  000F32  22DA               	addwfc	fsr2h,f,c
  4067  000F34  50DF               	movf	indf2,w,c
  4068  000F36  6E34               	movwf	??_setMotorPWM& (0+255),c
  4069  000F38  0E01               	movlw	1
  4070  000F3A  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4071  000F3C  2A34               	incf	??_setMotorPWM,f,c
  4072  000F3E  D002               	goto	u2224
  4073  000F40                     u2225:
  4074  000F40  90D8               	bcf	status,0,c
  4075  000F42  3635               	rlcf	??_setMotorPWM+1,f,c
  4076  000F44                     u2224:
  4077  000F44  2E34               	decfsz	??_setMotorPWM,f,c
  4078  000F46  D7FC               	goto	u2225
  4079  000F48  5035               	movf	??_setMotorPWM+1,w,c
  4080  000F4A  108A               	iorwf	3978,w,c	;volatile
  4081  000F4C  6E8A               	movwf	3978,c	;volatile
  4082                           
  4083                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4084  000F4E  EE20 F007          	lfsr	2,7
  4085  000F52  5032               	movf	setMotorPWM@m,w,c
  4086  000F54  26D9               	addwf	fsr2l,f,c
  4087  000F56  5033               	movf	setMotorPWM@m+1,w,c
  4088  000F58  22DA               	addwfc	fsr2h,f,c
  4089  000F5A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4090  000F5E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4091  000F62  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4092  000F66  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4093  000F6A  1E36               	comf	??_setMotorPWM+2,f,c
  4094  000F6C  1E37               	comf	??_setMotorPWM+3,f,c
  4095  000F6E  4A36               	infsnz	??_setMotorPWM+2,f,c
  4096  000F70  2A37               	incf	??_setMotorPWM+3,f,c
  4097  000F72  5034               	movf	??_setMotorPWM,w,c
  4098  000F74  2436               	addwf	??_setMotorPWM+2,w,c
  4099  000F76  0100               	movlb	0	; () banked
  4100  000F78  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4101  000F7A  5035               	movf	??_setMotorPWM+1,w,c
  4102  000F7C  2037               	addwfc	??_setMotorPWM+3,w,c
  4103  000F7E  0100               	movlb	0	; () banked
  4104  000F80  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4105                           
  4106                           ;dc_motor.c: 36: }
  4107  000F82  D014               	goto	l35
  4108  000F84                     l2860:
  4109                           
  4110                           ;dc_motor.c: 37: else
  4111                           ;dc_motor.c: 38: {
  4112                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4113  000F84  EE20 F006          	lfsr	2,6
  4114  000F88  5032               	movf	setMotorPWM@m,w,c
  4115  000F8A  26D9               	addwf	fsr2l,f,c
  4116  000F8C  5033               	movf	setMotorPWM@m+1,w,c
  4117  000F8E  22DA               	addwfc	fsr2h,f,c
  4118  000F90  50DF               	movf	indf2,w,c
  4119  000F92  6E34               	movwf	??_setMotorPWM& (0+255),c
  4120  000F94  0E01               	movlw	1
  4121  000F96  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4122  000F98  2A34               	incf	??_setMotorPWM,f,c
  4123  000F9A  D002               	goto	u2234
  4124  000F9C                     u2235:
  4125  000F9C  90D8               	bcf	status,0,c
  4126  000F9E  3635               	rlcf	??_setMotorPWM+1,f,c
  4127  000FA0                     u2234:
  4128  000FA0  2E34               	decfsz	??_setMotorPWM,f,c
  4129  000FA2  D7FC               	goto	u2235
  4130  000FA4  5035               	movf	??_setMotorPWM+1,w,c
  4131  000FA6  0AFF               	xorlw	255
  4132  000FA8  148A               	andwf	3978,w,c	;volatile
  4133  000FAA  6E8A               	movwf	3978,c	;volatile
  4134  000FAC                     l35:
  4135                           
  4136                           ;dc_motor.c: 40: }
  4137                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4138  000FAC  EE20 F002          	lfsr	2,2
  4139  000FB0  5032               	movf	setMotorPWM@m,w,c
  4140  000FB2  26D9               	addwf	fsr2l,f,c
  4141  000FB4  5033               	movf	setMotorPWM@m+1,w,c
  4142  000FB6  22DA               	addwfc	fsr2h,f,c
  4143  000FB8  CFDE F034          	movff	postinc2,??_setMotorPWM
  4144  000FBC  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4145  000FC0  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4146  000FC4  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4147  000FC8  0100               	movlb	0	; () banked
  4148  000FCA  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4149  000FCC  46E8               	rlncf	wreg,f,c
  4150  000FCE  0BFC               	andlw	252
  4151  000FD0  6EDF               	movwf	indf2,c
  4152                           
  4153                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4154  000FD2  EE20 F004          	lfsr	2,4
  4155  000FD6  5032               	movf	setMotorPWM@m,w,c
  4156  000FD8  26D9               	addwf	fsr2l,f,c
  4157  000FDA  5033               	movf	setMotorPWM@m+1,w,c
  4158  000FDC  22DA               	addwfc	fsr2h,f,c
  4159  000FDE  CFDE F034          	movff	postinc2,??_setMotorPWM
  4160  000FE2  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4161  000FE6  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4162  000FEA  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4163  000FEE  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4164  000FF2  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4165  000FF6  0E06               	movlw	6
  4166  000FF8  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4167  000FFA                     u2245:
  4168  000FFA  3437               	rlcf	??_setMotorPWM+3,w,c
  4169  000FFC  3237               	rrcf	??_setMotorPWM+3,f,c
  4170  000FFE  3236               	rrcf	??_setMotorPWM+2,f,c
  4171  001000  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4172  001002  D7FB               	goto	u2245
  4173  001004  5036               	movf	??_setMotorPWM+2,w,c
  4174  001006  6EDF               	movwf	indf2,c
  4175                           
  4176                           ; BSR set to: 0
  4177  001008  0012               	return		;funcret
  4178  00100A                     __end_of_setMotorPWM:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           intcon	equ	0xFF2
  4184                           postinc0	equ	0xFEE
  4185                           wreg	equ	0xFE8
  4186                           indf1	equ	0xFE7
  4187                           fsr1h	equ	0xFE2
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function ___awdiv *****************
  4197 ;; Defined at:
  4198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  dividend        2   41[COMRAM] int 
  4201 ;;  divisor         2   43[COMRAM] int 
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  quotient        2   47[COMRAM] int 
  4204 ;;  sign            1   46[COMRAM] unsigned char 
  4205 ;;  counter         1   45[COMRAM] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  2   41[COMRAM] int 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4215 ;;      Params:         4       0       0       0
  4216 ;;      Locals:         4       0       0       0
  4217 ;;      Temps:          0       0       0       0
  4218 ;;      Totals:         8       0       0       0
  4219 ;;Total ram usage:        8 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    3
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_setMotorPWM
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text17
  4230  0013CE                     __ptext17:
  4231                           	opt stack 0
  4232  0013CE                     ___awdiv:
  4233                           	opt stack 25
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;incstack = 0
  4237  0013CE  0E00               	movlw	0
  4238  0013D0  6E2F               	movwf	___awdiv@sign,c
  4239  0013D2  AE2D               	btfss	___awdiv@divisor+1,7,c
  4240  0013D4  D006               	goto	l2818
  4241  0013D6  6C2C               	negf	___awdiv@divisor,c
  4242  0013D8  1E2D               	comf	___awdiv@divisor+1,f,c
  4243  0013DA  B0D8               	btfsc	status,0,c
  4244  0013DC  2A2D               	incf	___awdiv@divisor+1,f,c
  4245  0013DE  0E01               	movlw	1
  4246  0013E0  6E2F               	movwf	___awdiv@sign,c
  4247  0013E2                     l2818:
  4248  0013E2  AE2B               	btfss	___awdiv@dividend+1,7,c
  4249  0013E4  D006               	goto	l2824
  4250  0013E6  6C2A               	negf	___awdiv@dividend,c
  4251  0013E8  1E2B               	comf	___awdiv@dividend+1,f,c
  4252  0013EA  B0D8               	btfsc	status,0,c
  4253  0013EC  2A2B               	incf	___awdiv@dividend+1,f,c
  4254  0013EE  0E01               	movlw	1
  4255  0013F0  1A2F               	xorwf	___awdiv@sign,f,c
  4256  0013F2                     l2824:
  4257  0013F2  0E00               	movlw	0
  4258  0013F4  6E31               	movwf	___awdiv@quotient+1,c
  4259  0013F6  0E00               	movlw	0
  4260  0013F8  6E30               	movwf	___awdiv@quotient,c
  4261  0013FA  502C               	movf	___awdiv@divisor,w,c
  4262  0013FC  102D               	iorwf	___awdiv@divisor+1,w,c
  4263  0013FE  B4D8               	btfsc	status,2,c
  4264  001400  D01C               	goto	l2846
  4265  001402  0E01               	movlw	1
  4266  001404  6E2E               	movwf	___awdiv@counter,c
  4267  001406  D004               	goto	l2832
  4268  001408                     l2830:
  4269  001408  90D8               	bcf	status,0,c
  4270  00140A  362C               	rlcf	___awdiv@divisor,f,c
  4271  00140C  362D               	rlcf	___awdiv@divisor+1,f,c
  4272  00140E  2A2E               	incf	___awdiv@counter,f,c
  4273  001410                     l2832:
  4274  001410  AE2D               	btfss	___awdiv@divisor+1,7,c
  4275  001412  D7FA               	goto	l2830
  4276  001414                     l2834:
  4277  001414  90D8               	bcf	status,0,c
  4278  001416  3630               	rlcf	___awdiv@quotient,f,c
  4279  001418  3631               	rlcf	___awdiv@quotient+1,f,c
  4280  00141A  502C               	movf	___awdiv@divisor,w,c
  4281  00141C  5C2A               	subwf	___awdiv@dividend,w,c
  4282  00141E  502D               	movf	___awdiv@divisor+1,w,c
  4283  001420  582B               	subwfb	___awdiv@dividend+1,w,c
  4284  001422  A0D8               	btfss	status,0,c
  4285  001424  D005               	goto	l2842
  4286  001426  502C               	movf	___awdiv@divisor,w,c
  4287  001428  5E2A               	subwf	___awdiv@dividend,f,c
  4288  00142A  502D               	movf	___awdiv@divisor+1,w,c
  4289  00142C  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4290  00142E  8030               	bsf	___awdiv@quotient,0,c
  4291  001430                     l2842:
  4292  001430  90D8               	bcf	status,0,c
  4293  001432  322D               	rrcf	___awdiv@divisor+1,f,c
  4294  001434  322C               	rrcf	___awdiv@divisor,f,c
  4295  001436  2E2E               	decfsz	___awdiv@counter,f,c
  4296  001438  D7ED               	goto	l2834
  4297  00143A                     l2846:
  4298  00143A  502F               	movf	___awdiv@sign,w,c
  4299  00143C  B4D8               	btfsc	status,2,c
  4300  00143E  D004               	goto	l2850
  4301  001440  6C30               	negf	___awdiv@quotient,c
  4302  001442  1E31               	comf	___awdiv@quotient+1,f,c
  4303  001444  B0D8               	btfsc	status,0,c
  4304  001446  2A31               	incf	___awdiv@quotient+1,f,c
  4305  001448                     l2850:
  4306  001448  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4307  00144C  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4308  001450  0012               	return	
  4309  001452                     __end_of___awdiv:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           indf1	equ	0xFE7
  4318                           fsr1h	equ	0xFE2
  4319                           fsr1l	equ	0xFE1
  4320                           indf2	equ	0xFDF
  4321                           postinc2	equ	0xFDE
  4322                           postdec2	equ	0xFDD
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _sprintf *****************
  4328 ;; Defined at:
  4329 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4332 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4333 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4334 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  tmpval          4    0        struct .
  4337 ;;  cp              3    0        PTR const unsigned char 
  4338 ;;  width           2   10[BANK0 ] int 
  4339 ;;  val             2    7[BANK0 ] unsigned int 
  4340 ;;  ap              2    4[BANK0 ] PTR void [1]
  4341 ;;		 -> ?_sprintf(2), 
  4342 ;;  len             2    0        unsigned int 
  4343 ;;  c               1   12[BANK0 ] char 
  4344 ;;  flag            1    9[BANK0 ] unsigned char 
  4345 ;;  prec            1    6[BANK0 ] char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  2   47[COMRAM] int 
  4348 ;; Registers used:
  4349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4355 ;;      Params:         8       0       0       0
  4356 ;;      Locals:         0       9       0       0
  4357 ;;      Temps:          0       4       0       0
  4358 ;;      Totals:         8      13       0       0
  4359 ;;Total ram usage:       21 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    4
  4362 ;; This function calls:
  4363 ;;		___lwdiv
  4364 ;;		___lwmod
  4365 ;;		___wmul
  4366 ;;		_isdigit
  4367 ;; This function is called by:
  4368 ;;		_ScanIR
  4369 ;;		_ScanWithRange
  4370 ;;		_main
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text18
  4375  000BCA                     __ptext18:
  4376                           	opt stack 0
  4377  000BCA                     _sprintf:
  4378                           	opt stack 26
  4379                           
  4380                           ;doprnt.c: 494: va_list ap;
  4381                           ;doprnt.c: 499: signed char c;
  4382                           ;doprnt.c: 501: int width;
  4383                           ;doprnt.c: 506: signed char prec;
  4384                           ;doprnt.c: 508: unsigned char flag;
  4385                           ;doprnt.c: 523: union {
  4386                           ;doprnt.c: 524: unsigned long vd;
  4387                           ;doprnt.c: 525: double integ;
  4388                           ;doprnt.c: 526: } tmpval;
  4389                           ;doprnt.c: 528: unsigned int val;
  4390                           ;doprnt.c: 529: unsigned len;
  4391                           ;doprnt.c: 530: const char * cp;
  4392                           ;doprnt.c: 533: *ap = __va_start();
  4393                           
  4394                           ;incstack = 0
  4395  000BCA  0E34               	movlw	low (?_sprintf+4)
  4396  000BCC  0100               	movlb	0	; () banked
  4397  000BCE  6F64               	movwf	sprintf@ap& (0+255),b
  4398  000BD0  0E00               	movlw	high (?_sprintf+4)
  4399  000BD2  0100               	movlb	0	; () banked
  4400  000BD4  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4401                           
  4402                           ;doprnt.c: 536: while(c = *f++) {
  4403  000BD6  D168               	goto	l3018
  4404  000BD8                     l2912:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;doprnt.c: 538: if(c != '%')
  4408  000BD8  0E25               	movlw	37
  4409  000BDA  0100               	movlb	0	; () banked
  4410  000BDC  196C               	xorwf	sprintf@c& (0+255),w,b
  4411  000BDE  B4D8               	btfsc	status,2,c
  4412  000BE0  D009               	goto	l2918
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;doprnt.c: 540: {
  4416                           ;doprnt.c: 541: ((*sp++ = (c)));
  4417  000BE2  C030  FFD9         	movff	sprintf@sp,fsr2l
  4418  000BE6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4419  000BEA  C06C  FFDF         	movff	sprintf@c,indf2
  4420                           
  4421                           ; BSR set to: 0
  4422  000BEE  4A30               	infsnz	sprintf@sp,f,c
  4423  000BF0  2A31               	incf	sprintf@sp+1,f,c
  4424                           
  4425                           ;doprnt.c: 542: continue;
  4426  000BF2  D15A               	goto	l3018
  4427  000BF4                     l2918:
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 543: }
  4431                           ;doprnt.c: 546: width = 0;
  4432  000BF4  0E00               	movlw	0
  4433  000BF6  0100               	movlb	0	; () banked
  4434  000BF8  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4435  000BFA  0E00               	movlw	0
  4436  000BFC  6F6A               	movwf	sprintf@width& (0+255),b
  4437                           
  4438                           ;doprnt.c: 548: flag = 0;
  4439  000BFE  0E00               	movlw	0
  4440  000C00  0100               	movlb	0	; () banked
  4441  000C02  6F69               	movwf	sprintf@flag& (0+255),b
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 551: switch(*f) {
  4445                           
  4446                           ;doprnt.c: 550: for(;;) {
  4447  000C04  D004               	goto	l2924
  4448  000C06                     l2920:
  4449                           
  4450                           ;doprnt.c: 580: flag |= 0x04;
  4451  000C06  0100               	movlb	0	; () banked
  4452  000C08  8569               	bsf	sprintf@flag& (0+255),2,b
  4453                           
  4454                           ;doprnt.c: 581: f++;
  4455  000C0A  4A32               	infsnz	sprintf@f,f,c
  4456  000C0C  2A33               	incf	sprintf@f+1,f,c
  4457  000C0E                     l2924:
  4458  000C0E  C032  FFF6         	movff	sprintf@f,tblptrl
  4459  000C12  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4460  000C16                     	if	0	;tblptru may be non-zero
  4461  000C16                     	endif
  4462  000C16                     	if	0	;tblptru may be non-zero
  4463  000C16                     	endif
  4464  000C16  0008               	tblrd		*
  4465  000C18  50F5               	movf	tablat,w,c
  4466                           
  4467                           ; Switch size 1, requested type "space"
  4468                           ; Number of cases is 1, Range of values is 48 to 48
  4469                           ; switch strategies available:
  4470                           ; Name         Instructions Cycles
  4471                           ; simple_byte            4     3 (average)
  4472                           ;	Chosen strategy is simple_byte
  4473  000C1A  0A30               	xorlw	48	; case 48
  4474  000C1C  B4D8               	btfsc	status,2,c
  4475  000C1E  D7F3               	goto	l2920
  4476                           
  4477                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4478                           
  4479                           ;doprnt.c: 586: }
  4480                           
  4481                           ;doprnt.c: 585: break;
  4482  000C20  C032  FFF6         	movff	sprintf@f,tblptrl
  4483  000C24  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4484  000C28                     	if	0	;tblptru may be non-zero
  4485  000C28                     	endif
  4486  000C28                     	if	0	;tblptru may be non-zero
  4487  000C28                     	endif
  4488  000C28  0008               	tblrd		*
  4489  000C2A  50F5               	movf	tablat,w,c
  4490  000C2C  ECBD  F00C         	call	_isdigit
  4491  000C30  A0D8               	btfss	status,0,c
  4492  000C32  D03E               	goto	l2940
  4493                           
  4494                           ;doprnt.c: 598: width = 0;
  4495  000C34  0E00               	movlw	0
  4496  000C36  0100               	movlb	0	; () banked
  4497  000C38  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4498  000C3A  0E00               	movlw	0
  4499  000C3C  6F6A               	movwf	sprintf@width& (0+255),b
  4500  000C3E                     l2930:
  4501                           
  4502                           ;doprnt.c: 600: width *= 10;
  4503  000C3E  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4504  000C42  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4505  000C46  0E00               	movlw	0
  4506  000C48  6E27               	movwf	___wmul@multiplicand+1,c
  4507  000C4A  0E0A               	movlw	10
  4508  000C4C  6E26               	movwf	___wmul@multiplicand,c
  4509  000C4E  EC99  F00C         	call	___wmul	;wreg free
  4510  000C52  C024  F06A         	movff	?___wmul,sprintf@width
  4511  000C56  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4512                           
  4513                           ;doprnt.c: 601: width += *f++ - '0';
  4514  000C5A  0ED0               	movlw	208
  4515  000C5C  0100               	movlb	0	; () banked
  4516  000C5E  6F60               	movwf	??_sprintf& (0+255),b
  4517  000C60  0EFF               	movlw	255
  4518  000C62  0100               	movlb	0	; () banked
  4519  000C64  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4520  000C66  C032  FFF6         	movff	sprintf@f,tblptrl
  4521  000C6A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4522  000C6E                     	if	0	;tblptru may be non-zero
  4523  000C6E                     	endif
  4524  000C6E                     	if	0	;tblptru may be non-zero
  4525  000C6E                     	endif
  4526  000C6E  0008               	tblrd		*
  4527  000C70  50F5               	movf	tablat,w,c
  4528  000C72  0100               	movlb	0	; () banked
  4529  000C74  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4530  000C76  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4531  000C78  0100               	movlb	0	; () banked
  4532  000C7A  5160               	movf	??_sprintf& (0+255),w,b
  4533  000C7C  0100               	movlb	0	; () banked
  4534  000C7E  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4535  000C80  0100               	movlb	0	; () banked
  4536  000C82  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4537  000C84  0100               	movlb	0	; () banked
  4538  000C86  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4539  000C88  0100               	movlb	0	; () banked
  4540  000C8A  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4541  000C8C  0100               	movlb	0	; () banked
  4542  000C8E  276A               	addwf	sprintf@width& (0+255),f,b
  4543  000C90  0100               	movlb	0	; () banked
  4544  000C92  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4545  000C94  0100               	movlb	0	; () banked
  4546  000C96  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4547                           
  4548                           ; BSR set to: 0
  4549  000C98  4A32               	infsnz	sprintf@f,f,c
  4550  000C9A  2A33               	incf	sprintf@f+1,f,c
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4554  000C9C  C032  FFF6         	movff	sprintf@f,tblptrl
  4555  000CA0  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4556  000CA4                     	if	0	;tblptru may be non-zero
  4557  000CA4                     	endif
  4558  000CA4                     	if	0	;tblptru may be non-zero
  4559  000CA4                     	endif
  4560  000CA4  0008               	tblrd		*
  4561  000CA6  50F5               	movf	tablat,w,c
  4562  000CA8  ECBD  F00C         	call	_isdigit
  4563  000CAC  B0D8               	btfsc	status,0,c
  4564  000CAE  D7C7               	goto	l2930
  4565  000CB0                     l2940:
  4566  000CB0  C032  FFF6         	movff	sprintf@f,tblptrl
  4567  000CB4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4568  000CB8  4A32               	infsnz	sprintf@f,f,c
  4569  000CBA  2A33               	incf	sprintf@f+1,f,c
  4570  000CBC                     	if	0	;tblptru may be non-zero
  4571  000CBC                     	endif
  4572  000CBC                     	if	0	;tblptru may be non-zero
  4573  000CBC                     	endif
  4574  000CBC  0008               	tblrd		*
  4575  000CBE  CFF5 F06C          	movff	tablat,sprintf@c
  4576  000CC2  0100               	movlb	0	; () banked
  4577  000CC4  516C               	movf	sprintf@c& (0+255),w,b
  4578                           
  4579                           ; Switch size 1, requested type "space"
  4580                           ; Number of cases is 3, Range of values is 0 to 105
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte           10     6 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  000CC6  0A00               	xorlw	0	; case 0
  4586  000CC8  B4D8               	btfsc	status,2,c
  4587  000CCA  D0FB               	goto	l3020
  4588  000CCC  0A64               	xorlw	100	; case 100
  4589  000CCE  B4D8               	btfsc	status,2,c
  4590  000CD0  D003               	goto	l2942
  4591  000CD2  0A0D               	xorlw	13	; case 105
  4592  000CD4  A4D8               	btfss	status,2,c
  4593  000CD6  D0E8               	goto	l3018
  4594  000CD8                     l2942:
  4595                           
  4596                           ;doprnt.c: 1253: {
  4597                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4598  000CD8  C064  FFD9         	movff	sprintf@ap,fsr2l
  4599  000CDC  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4600  000CE0  CFDE F067          	movff	postinc2,sprintf@val
  4601  000CE4  CFDD F068          	movff	postdec2,sprintf@val+1
  4602  000CE8  0E02               	movlw	2
  4603  000CEA  0100               	movlb	0	; () banked
  4604  000CEC  2764               	addwf	sprintf@ap& (0+255),f,b
  4605  000CEE  0E00               	movlw	0
  4606  000CF0  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1261: if((int)val < 0) {
  4610  000CF2  0100               	movlb	0	; () banked
  4611  000CF4  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4612  000CF6  D008               	goto	l2952
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1262: flag |= 0x03;
  4616  000CF8  0E03               	movlw	3
  4617  000CFA  0100               	movlb	0	; () banked
  4618  000CFC  1369               	iorwf	sprintf@flag& (0+255),f,b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;doprnt.c: 1263: val = -val;
  4622  000CFE  0100               	movlb	0	; () banked
  4623  000D00  6D67               	negf	sprintf@val& (0+255),b
  4624  000D02  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4625  000D04  B0D8               	btfsc	status,0,c
  4626  000D06  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4627  000D08                     l2952:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;doprnt.c: 1264: }
  4631                           ;doprnt.c: 1266: }
  4632                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4633  000D08  0E01               	movlw	1
  4634  000D0A  0100               	movlb	0	; () banked
  4635  000D0C  6F6C               	movwf	sprintf@c& (0+255),b
  4636  000D0E                     l2954:
  4637                           
  4638                           ; BSR set to: 0
  4639  000D0E  0E05               	movlw	5
  4640  000D10  0100               	movlb	0	; () banked
  4641  000D12  196C               	xorwf	sprintf@c& (0+255),w,b
  4642  000D14  B4D8               	btfsc	status,2,c
  4643  000D16  D016               	goto	l2966
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;doprnt.c: 1306: if(val < dpowers[c])
  4647                           
  4648                           ; BSR set to: 0
  4649                           
  4650                           ; BSR set to: 0
  4651  000D18  0100               	movlb	0	; () banked
  4652  000D1A  516C               	movf	sprintf@c& (0+255),w,b
  4653  000D1C  0D02               	mullw	2
  4654  000D1E  0E01               	movlw	low _dpowers
  4655  000D20  24F3               	addwf	prodl,w,c
  4656  000D22  6EF6               	movwf	tblptrl,c
  4657  000D24  0E03               	movlw	high _dpowers
  4658  000D26  20F4               	addwfc	prodh,w,c
  4659  000D28  6EF7               	movwf	tblptrh,c
  4660  000D2A                     	if	0	;There are less than 3 active tblptr bytes
  4661  000D2A                     	endif
  4662  000D2A  0009               	tblrd		*+
  4663  000D2C  50F5               	movf	tablat,w,c
  4664  000D2E  0100               	movlb	0	; () banked
  4665  000D30  5D67               	subwf	sprintf@val& (0+255),w,b
  4666  000D32  0009               	tblrd		*+
  4667  000D34  50F5               	movf	tablat,w,c
  4668  000D36  0100               	movlb	0	; () banked
  4669  000D38  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4670  000D3A  A0D8               	btfss	status,0,c
  4671  000D3C  D003               	goto	l2966
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 1307: break;
  4679  000D3E  0100               	movlb	0	; () banked
  4680  000D40  2B6C               	incf	sprintf@c& (0+255),f,b
  4681  000D42  D7E5               	goto	l2954
  4682  000D44                     l2966:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4686  000D44  0100               	movlb	0	; () banked
  4687  000D46  516A               	movf	sprintf@width& (0+255),w,b
  4688  000D48  0100               	movlb	0	; () banked
  4689  000D4A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4690  000D4C  B4D8               	btfsc	status,2,c
  4691  000D4E  D00B               	goto	l2972
  4692                           
  4693                           ; BSR set to: 0
  4694  000D50  C069  F060         	movff	sprintf@flag,??_sprintf
  4695  000D54  0E03               	movlw	3
  4696  000D56  0100               	movlb	0	; () banked
  4697  000D58  1760               	andwf	??_sprintf& (0+255),f,b
  4698  000D5A  B4D8               	btfsc	status,2,c
  4699  000D5C  D004               	goto	l2972
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;doprnt.c: 1346: width--;
  4703  000D5E  0100               	movlb	0	; () banked
  4704  000D60  076A               	decf	sprintf@width& (0+255),f,b
  4705  000D62  A0D8               	btfss	status,0,c
  4706  000D64  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4707  000D66                     l2972:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;doprnt.c: 1381: if(width > c)
  4711  000D66  0E80               	movlw	128
  4712  000D68  0100               	movlb	0	; () banked
  4713  000D6A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4714  000D6C  0E7F               	movlw	127
  4715  000D6E  0100               	movlb	0	; () banked
  4716  000D70  6F60               	movwf	??_sprintf& (0+255),b
  4717  000D72  0100               	movlb	0	; () banked
  4718  000D74  516A               	movf	sprintf@width& (0+255),w,b
  4719  000D76  0100               	movlb	0	; () banked
  4720  000D78  5D6C               	subwf	sprintf@c& (0+255),w,b
  4721  000D7A  0100               	movlb	0	; () banked
  4722  000D7C  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4723  000D7E  0A80               	xorlw	128
  4724  000D80  0100               	movlb	0	; () banked
  4725  000D82  5960               	subwfb	??_sprintf& (0+255),w,b
  4726  000D84  B0D8               	btfsc	status,0,c
  4727  000D86  D00B               	goto	l2976
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;doprnt.c: 1382: width -= c;
  4731  000D88  0100               	movlb	0	; () banked
  4732  000D8A  516C               	movf	sprintf@c& (0+255),w,b
  4733  000D8C  0100               	movlb	0	; () banked
  4734  000D8E  5F6A               	subwf	sprintf@width& (0+255),f,b
  4735  000D90  0E00               	movlw	0
  4736  000D92  0100               	movlb	0	; () banked
  4737  000D94  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4738  000D96  0EFF               	movlw	255
  4739  000D98  0100               	movlb	0	; () banked
  4740  000D9A  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4741  000D9C  D005               	goto	l2978
  4742  000D9E                     l2976:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 1383: else
  4746                           ;doprnt.c: 1384: width = 0;
  4747  000D9E  0E00               	movlw	0
  4748  000DA0  0100               	movlb	0	; () banked
  4749  000DA2  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4750  000DA4  0E00               	movlw	0
  4751  000DA6  6F6A               	movwf	sprintf@width& (0+255),b
  4752  000DA8                     l2978:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 1387: if(flag & 0x04) {
  4756  000DA8  0100               	movlb	0	; () banked
  4757  000DAA  A569               	btfss	sprintf@flag& (0+255),2,b
  4758  000DAC  D022               	goto	l2994
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;doprnt.c: 1392: if(flag & 0x03)
  4762  000DAE  C069  F060         	movff	sprintf@flag,??_sprintf
  4763  000DB2  0E03               	movlw	3
  4764  000DB4  0100               	movlb	0	; () banked
  4765  000DB6  1760               	andwf	??_sprintf& (0+255),f,b
  4766  000DB8  B4D8               	btfsc	status,2,c
  4767  000DBA  D008               	goto	l2986
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4771  000DBC  C030  FFD9         	movff	sprintf@sp,fsr2l
  4772  000DC0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4773  000DC4  0E2D               	movlw	45
  4774  000DC6  6EDF               	movwf	indf2,c
  4775                           
  4776                           ; BSR set to: 0
  4777  000DC8  4A30               	infsnz	sprintf@sp,f,c
  4778  000DCA  2A31               	incf	sprintf@sp+1,f,c
  4779  000DCC                     l2986:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 1415: if(width)
  4783  000DCC  0100               	movlb	0	; () banked
  4784  000DCE  516A               	movf	sprintf@width& (0+255),w,b
  4785  000DD0  0100               	movlb	0	; () banked
  4786  000DD2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4787  000DD4  B4D8               	btfsc	status,2,c
  4788  000DD6  D034               	goto	l3008
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ;doprnt.c: 1416: do
  4796  000DD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4797  000DDC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4798  000DE0  0E30               	movlw	48
  4799  000DE2  6EDF               	movwf	indf2,c
  4800                           
  4801                           ; BSR set to: 0
  4802  000DE4  4A30               	infsnz	sprintf@sp,f,c
  4803  000DE6  2A31               	incf	sprintf@sp+1,f,c
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;doprnt.c: 1418: while(--width);
  4807  000DE8  0100               	movlb	0	; () banked
  4808  000DEA  076A               	decf	sprintf@width& (0+255),f,b
  4809  000DEC  A0D8               	btfss	status,0,c
  4810  000DEE  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4811  000DF0  D7ED               	goto	l2986
  4812  000DF2                     l2994:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 1422: {
  4816                           ;doprnt.c: 1424: if(width
  4817                           ;doprnt.c: 1428: )
  4818  000DF2  0100               	movlb	0	; () banked
  4819  000DF4  516A               	movf	sprintf@width& (0+255),w,b
  4820  000DF6  0100               	movlb	0	; () banked
  4821  000DF8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4822  000DFA  B4D8               	btfsc	status,2,c
  4823  000DFC  D012               	goto	l3002
  4824  000DFE                     l2996:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4828  000DFE  C030  FFD9         	movff	sprintf@sp,fsr2l
  4829  000E02  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4830  000E06  0E20               	movlw	32
  4831  000E08  6EDF               	movwf	indf2,c
  4832                           
  4833                           ; BSR set to: 0
  4834  000E0A  4A30               	infsnz	sprintf@sp,f,c
  4835  000E0C  2A31               	incf	sprintf@sp+1,f,c
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;doprnt.c: 1431: while(--width);
  4839  000E0E  0100               	movlb	0	; () banked
  4840  000E10  076A               	decf	sprintf@width& (0+255),f,b
  4841  000E12  A0D8               	btfss	status,0,c
  4842  000E14  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4843  000E16  0100               	movlb	0	; () banked
  4844  000E18  516A               	movf	sprintf@width& (0+255),w,b
  4845  000E1A  0100               	movlb	0	; () banked
  4846  000E1C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4847  000E1E  A4D8               	btfss	status,2,c
  4848  000E20  D7EE               	goto	l2996
  4849  000E22                     l3002:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;doprnt.c: 1438: if(flag & 0x03)
  4853  000E22  C069  F060         	movff	sprintf@flag,??_sprintf
  4854  000E26  0E03               	movlw	3
  4855  000E28  0100               	movlb	0	; () banked
  4856  000E2A  1760               	andwf	??_sprintf& (0+255),f,b
  4857  000E2C  B4D8               	btfsc	status,2,c
  4858  000E2E  D008               	goto	l3008
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4862  000E30  C030  FFD9         	movff	sprintf@sp,fsr2l
  4863  000E34  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4864  000E38  0E2D               	movlw	45
  4865  000E3A  6EDF               	movwf	indf2,c
  4866                           
  4867                           ; BSR set to: 0
  4868  000E3C  4A30               	infsnz	sprintf@sp,f,c
  4869  000E3E  2A31               	incf	sprintf@sp+1,f,c
  4870  000E40                     l3008:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;doprnt.c: 1469: }
  4874                           ;doprnt.c: 1472: prec = c;
  4875  000E40  C06C  F066         	movff	sprintf@c,sprintf@prec
  4876                           
  4877                           ;doprnt.c: 1474: while(prec--) {
  4878  000E44  D02B               	goto	l3016
  4879  000E46                     l3010:
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;doprnt.c: 1478: {
  4883                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4884  000E46  0100               	movlb	0	; () banked
  4885  000E48  5166               	movf	sprintf@prec& (0+255),w,b
  4886  000E4A  0D02               	mullw	2
  4887  000E4C  0E01               	movlw	low _dpowers
  4888  000E4E  24F3               	addwf	prodl,w,c
  4889  000E50  6EF6               	movwf	tblptrl,c
  4890  000E52  0E03               	movlw	high _dpowers
  4891  000E54  20F4               	addwfc	prodh,w,c
  4892  000E56  6EF7               	movwf	tblptrh,c
  4893  000E58                     	if	0	;There are less than 3 active tblptr bytes
  4894  000E58                     	endif
  4895  000E58  0009               	tblrd		*+
  4896  000E5A  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4897  000E5E  000A               	tblrd		*-
  4898  000E60  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4899  000E64  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4900  000E68  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4901  000E6C  EC49  F00B         	call	___lwdiv	;wreg free
  4902  000E70  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4903  000E74  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4904  000E78  0E00               	movlw	0
  4905  000E7A  6E2E               	movwf	___lwmod@divisor+1,c
  4906  000E7C  0E0A               	movlw	10
  4907  000E7E  6E2D               	movwf	___lwmod@divisor,c
  4908  000E80  EC72  F00B         	call	___lwmod	;wreg free
  4909  000E84  502B               	movf	?___lwmod,w,c
  4910  000E86  0F30               	addlw	48
  4911  000E88  0100               	movlb	0	; () banked
  4912  000E8A  6F6C               	movwf	sprintf@c& (0+255),b
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;doprnt.c: 1523: }
  4916                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4917  000E8C  C030  FFD9         	movff	sprintf@sp,fsr2l
  4918  000E90  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4919  000E94  C06C  FFDF         	movff	sprintf@c,indf2
  4920                           
  4921                           ; BSR set to: 0
  4922  000E98  4A30               	infsnz	sprintf@sp,f,c
  4923  000E9A  2A31               	incf	sprintf@sp+1,f,c
  4924  000E9C                     l3016:
  4925                           
  4926                           ; BSR set to: 0
  4927  000E9C  0100               	movlb	0	; () banked
  4928  000E9E  0766               	decf	sprintf@prec& (0+255),f,b
  4929  000EA0  0100               	movlb	0	; () banked
  4930  000EA2  2966               	incf	sprintf@prec& (0+255),w,b
  4931  000EA4  A4D8               	btfss	status,2,c
  4932  000EA6  D7CF               	goto	l3010
  4933  000EA8                     l3018:
  4934  000EA8  C032  FFF6         	movff	sprintf@f,tblptrl
  4935  000EAC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4936  000EB0  4A32               	infsnz	sprintf@f,f,c
  4937  000EB2  2A33               	incf	sprintf@f+1,f,c
  4938  000EB4                     	if	0	;tblptru may be non-zero
  4939  000EB4                     	endif
  4940  000EB4                     	if	0	;tblptru may be non-zero
  4941  000EB4                     	endif
  4942  000EB4  0008               	tblrd		*
  4943  000EB6  CFF5 F06C          	movff	tablat,sprintf@c
  4944  000EBA  0100               	movlb	0	; () banked
  4945  000EBC  516C               	movf	sprintf@c& (0+255),w,b
  4946  000EBE  A4D8               	btfss	status,2,c
  4947  000EC0  D68B               	goto	l2912
  4948  000EC2                     l3020:
  4949                           
  4950                           ;doprnt.c: 1538: *sp = 0;
  4951  000EC2  C030  FFD9         	movff	sprintf@sp,fsr2l
  4952  000EC6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4953  000ECA  0E00               	movlw	0
  4954  000ECC  6EDF               	movwf	indf2,c
  4955  000ECE  0012               	return	
  4956  000ED0                     __end_of_sprintf:
  4957                           	opt stack 0
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           intcon	equ	0xFF2
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           indf1	equ	0xFE7
  4968                           fsr1h	equ	0xFE2
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           fsr2h	equ	0xFDA
  4974                           fsr2l	equ	0xFD9
  4975                           status	equ	0xFD8
  4976                           
  4977 ;; *************** function _isdigit *****************
  4978 ;; Defined at:
  4979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  c               1    wreg     unsigned char 
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  c               1   37[COMRAM] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4993 ;;      Params:         0       0       0       0
  4994 ;;      Locals:         2       0       0       0
  4995 ;;      Temps:          1       0       0       0
  4996 ;;      Totals:         3       0       0       0
  4997 ;;Total ram usage:        3 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    3
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_sprintf
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text19
  5008  00197A                     __ptext19:
  5009                           	opt stack 0
  5010  00197A                     _isdigit:
  5011                           	opt stack 26
  5012                           
  5013                           ;incstack = 0
  5014                           ;isdigit@c stored from wreg
  5015  00197A  6E26               	movwf	isdigit@c,c
  5016  00197C  0E00               	movlw	0
  5017  00197E  6E25               	movwf	_isdigit$1963,c
  5018  001980  0E3A               	movlw	58
  5019  001982  6026               	cpfslt	isdigit@c,c
  5020  001984  D005               	goto	l2062
  5021  001986  0E2F               	movlw	47
  5022  001988  6426               	cpfsgt	isdigit@c,c
  5023  00198A  D002               	goto	l2062
  5024  00198C  0E01               	movlw	1
  5025  00198E  6E25               	movwf	_isdigit$1963,c
  5026  001990                     l2062:
  5027  001990  C025  F024         	movff	_isdigit$1963,??_isdigit
  5028  001994  3024               	rrcf	??_isdigit,w,c
  5029  001996  0012               	return	
  5030  001998                     __end_of_isdigit:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           indf1	equ	0xFE7
  5042                           fsr1h	equ	0xFE2
  5043                           fsr1l	equ	0xFE1
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function ___wmul *****************
  5052 ;; Defined at:
  5053 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  multiplier      2   35[COMRAM] unsigned int 
  5056 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  product         2   39[COMRAM] unsigned int 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  2   35[COMRAM] unsigned int 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0, prodl, prodh
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5068 ;;      Params:         4       0       0       0
  5069 ;;      Locals:         2       0       0       0
  5070 ;;      Temps:          0       0       0       0
  5071 ;;      Totals:         6       0       0       0
  5072 ;;Total ram usage:        6 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    3
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_setMotorPWM
  5079 ;;		_sprintf
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text20
  5084  001932                     __ptext20:
  5085                           	opt stack 0
  5086  001932                     ___wmul:
  5087                           	opt stack 25
  5088                           
  5089                           ;incstack = 0
  5090  001932  5024               	movf	___wmul@multiplier,w,c
  5091  001934  0226               	mulwf	___wmul@multiplicand,c
  5092  001936  CFF3 F028          	movff	prodl,___wmul@product
  5093  00193A  CFF4 F029          	movff	prodh,___wmul@product+1
  5094  00193E  5024               	movf	___wmul@multiplier,w,c
  5095  001940  0227               	mulwf	___wmul@multiplicand+1,c
  5096  001942  50F3               	movf	prodl,w,c
  5097  001944  2629               	addwf	___wmul@product+1,f,c
  5098  001946  5025               	movf	___wmul@multiplier+1,w,c
  5099  001948  0226               	mulwf	___wmul@multiplicand,c
  5100  00194A  50F3               	movf	prodl,w,c
  5101  00194C  2629               	addwf	___wmul@product+1,f,c
  5102  00194E  C028  F024         	movff	___wmul@product,?___wmul
  5103  001952  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5104  001956  0012               	return	
  5105  001958                     __end_of___wmul:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           indf1	equ	0xFE7
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function ___lwmod *****************
  5127 ;; Defined at:
  5128 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  dividend        2   42[COMRAM] unsigned int 
  5131 ;;  divisor         2   44[COMRAM] unsigned int 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  counter         1   46[COMRAM] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  2   42[COMRAM] unsigned int 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5143 ;;      Params:         4       0       0       0
  5144 ;;      Locals:         1       0       0       0
  5145 ;;      Temps:          0       0       0       0
  5146 ;;      Totals:         5       0       0       0
  5147 ;;Total ram usage:        5 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    3
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_sprintf
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text21
  5158  0016E4                     __ptext21:
  5159                           	opt stack 0
  5160  0016E4                     ___lwmod:
  5161                           	opt stack 26
  5162                           
  5163                           ;incstack = 0
  5164  0016E4  502D               	movf	___lwmod@divisor,w,c
  5165  0016E6  102E               	iorwf	___lwmod@divisor+1,w,c
  5166  0016E8  B4D8               	btfsc	status,2,c
  5167  0016EA  D018               	goto	l883
  5168  0016EC  0E01               	movlw	1
  5169  0016EE  6E2F               	movwf	___lwmod@counter,c
  5170  0016F0  D004               	goto	l2094
  5171  0016F2                     l2092:
  5172  0016F2  90D8               	bcf	status,0,c
  5173  0016F4  362D               	rlcf	___lwmod@divisor,f,c
  5174  0016F6  362E               	rlcf	___lwmod@divisor+1,f,c
  5175  0016F8  2A2F               	incf	___lwmod@counter,f,c
  5176  0016FA                     l2094:
  5177  0016FA  AE2E               	btfss	___lwmod@divisor+1,7,c
  5178  0016FC  D7FA               	goto	l2092
  5179  0016FE                     l2096:
  5180  0016FE  502D               	movf	___lwmod@divisor,w,c
  5181  001700  5C2B               	subwf	___lwmod@dividend,w,c
  5182  001702  502E               	movf	___lwmod@divisor+1,w,c
  5183  001704  582C               	subwfb	___lwmod@dividend+1,w,c
  5184  001706  A0D8               	btfss	status,0,c
  5185  001708  D004               	goto	l2100
  5186  00170A  502D               	movf	___lwmod@divisor,w,c
  5187  00170C  5E2B               	subwf	___lwmod@dividend,f,c
  5188  00170E  502E               	movf	___lwmod@divisor+1,w,c
  5189  001710  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5190  001712                     l2100:
  5191  001712  90D8               	bcf	status,0,c
  5192  001714  322E               	rrcf	___lwmod@divisor+1,f,c
  5193  001716  322D               	rrcf	___lwmod@divisor,f,c
  5194  001718  2E2F               	decfsz	___lwmod@counter,f,c
  5195  00171A  D7F1               	goto	l2096
  5196  00171C                     l883:
  5197  00171C  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5198  001720  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5199  001724  0012               	return		;funcret
  5200  001726                     __end_of___lwmod:
  5201                           	opt stack 0
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           prodh	equ	0xFF4
  5207                           prodl	equ	0xFF3
  5208                           intcon	equ	0xFF2
  5209                           postinc0	equ	0xFEE
  5210                           wreg	equ	0xFE8
  5211                           indf1	equ	0xFE7
  5212                           fsr1h	equ	0xFE2
  5213                           fsr1l	equ	0xFE1
  5214                           indf2	equ	0xFDF
  5215                           postinc2	equ	0xFDE
  5216                           postdec2	equ	0xFDD
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function ___lwdiv *****************
  5222 ;; Defined at:
  5223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  dividend        2   35[COMRAM] unsigned int 
  5226 ;;  divisor         2   37[COMRAM] unsigned int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  quotient        2   39[COMRAM] unsigned int 
  5229 ;;  counter         1   41[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2   35[COMRAM] unsigned int 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5239 ;;      Params:         4       0       0       0
  5240 ;;      Locals:         3       0       0       0
  5241 ;;      Temps:          0       0       0       0
  5242 ;;      Totals:         7       0       0       0
  5243 ;;Total ram usage:        7 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    3
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_sprintf
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text22
  5254  001692                     __ptext22:
  5255                           	opt stack 0
  5256  001692                     ___lwdiv:
  5257                           	opt stack 26
  5258                           
  5259                           ;incstack = 0
  5260  001692  0E00               	movlw	0
  5261  001694  6E29               	movwf	___lwdiv@quotient+1,c
  5262  001696  0E00               	movlw	0
  5263  001698  6E28               	movwf	___lwdiv@quotient,c
  5264  00169A  5026               	movf	___lwdiv@divisor,w,c
  5265  00169C  1027               	iorwf	___lwdiv@divisor+1,w,c
  5266  00169E  B4D8               	btfsc	status,2,c
  5267  0016A0  D01C               	goto	l873
  5268  0016A2  0E01               	movlw	1
  5269  0016A4  6E2A               	movwf	___lwdiv@counter,c
  5270  0016A6  D004               	goto	l2074
  5271  0016A8                     l2072:
  5272  0016A8  90D8               	bcf	status,0,c
  5273  0016AA  3626               	rlcf	___lwdiv@divisor,f,c
  5274  0016AC  3627               	rlcf	___lwdiv@divisor+1,f,c
  5275  0016AE  2A2A               	incf	___lwdiv@counter,f,c
  5276  0016B0                     l2074:
  5277  0016B0  AE27               	btfss	___lwdiv@divisor+1,7,c
  5278  0016B2  D7FA               	goto	l2072
  5279  0016B4                     l2076:
  5280  0016B4  90D8               	bcf	status,0,c
  5281  0016B6  3628               	rlcf	___lwdiv@quotient,f,c
  5282  0016B8  3629               	rlcf	___lwdiv@quotient+1,f,c
  5283  0016BA  5026               	movf	___lwdiv@divisor,w,c
  5284  0016BC  5C24               	subwf	___lwdiv@dividend,w,c
  5285  0016BE  5027               	movf	___lwdiv@divisor+1,w,c
  5286  0016C0  5825               	subwfb	___lwdiv@dividend+1,w,c
  5287  0016C2  A0D8               	btfss	status,0,c
  5288  0016C4  D005               	goto	l2084
  5289  0016C6  5026               	movf	___lwdiv@divisor,w,c
  5290  0016C8  5E24               	subwf	___lwdiv@dividend,f,c
  5291  0016CA  5027               	movf	___lwdiv@divisor+1,w,c
  5292  0016CC  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5293  0016CE  8028               	bsf	___lwdiv@quotient,0,c
  5294  0016D0                     l2084:
  5295  0016D0  90D8               	bcf	status,0,c
  5296  0016D2  3227               	rrcf	___lwdiv@divisor+1,f,c
  5297  0016D4  3226               	rrcf	___lwdiv@divisor,f,c
  5298  0016D6  2E2A               	decfsz	___lwdiv@counter,f,c
  5299  0016D8  D7ED               	goto	l2076
  5300  0016DA                     l873:
  5301  0016DA  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5302  0016DE  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5303  0016E2  0012               	return		;funcret
  5304  0016E4                     __end_of___lwdiv:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           indf1	equ	0xFE7
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _grabRightIR *****************
  5326 ;; Defined at:
  5327 ;;		line 74 in file "IR_Reading.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5332 ;;  i               1   42[COMRAM] unsigned char 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  2   35[COMRAM] unsigned int 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5342 ;;      Params:         2       0       0       0
  5343 ;;      Locals:         3       0       0       0
  5344 ;;      Temps:          3       0       0       0
  5345 ;;      Totals:         8       0       0       0
  5346 ;;Total ram usage:        8 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    3
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_ScanIR
  5353 ;;		_ScanWithRange
  5354 ;;		_main
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text23
  5359  001550                     __ptext23:
  5360                           	opt stack 0
  5361  001550                     _grabRightIR:
  5362                           	opt stack 27
  5363                           
  5364                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5365                           
  5366                           ;incstack = 0
  5367  001550  0E00               	movlw	0
  5368  001552  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5369  001554  0E00               	movlw	0
  5370  001556  6E29               	movwf	grabRightIR@IR_signal,c
  5371                           
  5372                           ;IR_Reading.c: 77: unsigned char i=0;
  5373  001558  0E00               	movlw	0
  5374  00155A  6E2B               	movwf	grabRightIR@i,c
  5375                           
  5376                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5377  00155C  0E00               	movlw	0
  5378  00155E  6E2B               	movwf	grabRightIR@i,c
  5379  001560                     l2136:
  5380  001560  0E03               	movlw	3
  5381  001562  642B               	cpfsgt	grabRightIR@i,c
  5382  001564  D001               	goto	l2140
  5383  001566  D01E               	goto	l2146
  5384  001568                     l2140:
  5385                           
  5386                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5387  001568  5069               	movf	3945,w,c	;volatile
  5388  00156A  6E26               	movwf	??_grabRightIR& (0+255),c
  5389  00156C  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5390  00156E  0E07               	movlw	7
  5391  001570                     u1455:
  5392  001570  90D8               	bcf	status,0,c
  5393  001572  3626               	rlcf	??_grabRightIR,f,c
  5394  001574  3627               	rlcf	??_grabRightIR+1,f,c
  5395  001576  2EE8               	decfsz	wreg,f,c
  5396  001578  D7FB               	goto	u1455
  5397  00157A  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5398  00157E  90D8               	bcf	status,0,c
  5399  001580  3228               	rrcf	??_grabRightIR+2,f,c
  5400  001582  5028               	movf	??_grabRightIR+2,w,c
  5401  001584  1226               	iorwf	??_grabRightIR,f,c
  5402  001586  0E00               	movlw	0
  5403  001588  1227               	iorwf	??_grabRightIR+1,f,c
  5404  00158A  5026               	movf	??_grabRightIR,w,c
  5405  00158C  2629               	addwf	grabRightIR@IR_signal,f,c
  5406  00158E  5027               	movf	??_grabRightIR+1,w,c
  5407  001590  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5408                           
  5409                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5410  001592  0E82               	movlw	130
  5411  001594  6E26               	movwf	??_grabRightIR& (0+255),c
  5412  001596  0EDE               	movlw	222
  5413  001598                     u3007:
  5414  001598  2EE8               	decfsz	wreg,f,c
  5415  00159A  D7FE               	goto	u3007
  5416  00159C  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5417  00159E  D7FC               	goto	u3007
  5418  0015A0  2A2B               	incf	grabRightIR@i,f,c
  5419  0015A2  D7DE               	goto	l2136
  5420  0015A4                     l2146:
  5421                           
  5422                           ;IR_Reading.c: 83: }
  5423                           ;IR_Reading.c: 85: return IR_signal>>2;
  5424  0015A4  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5425  0015A8  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5426  0015AC  90D8               	bcf	status,0,c
  5427  0015AE  3227               	rrcf	??_grabRightIR+1,f,c
  5428  0015B0  3226               	rrcf	??_grabRightIR,f,c
  5429  0015B2  90D8               	bcf	status,0,c
  5430  0015B4  3227               	rrcf	??_grabRightIR+1,f,c
  5431  0015B6  3226               	rrcf	??_grabRightIR,f,c
  5432  0015B8  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5433  0015BC  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5434  0015C0  0012               	return	
  5435  0015C2                     __end_of_grabRightIR:
  5436                           	opt stack 0
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           indf1	equ	0xFE7
  5447                           fsr1h	equ	0xFE2
  5448                           fsr1l	equ	0xFE1
  5449                           indf2	equ	0xFDF
  5450                           postinc2	equ	0xFDE
  5451                           postdec2	equ	0xFDD
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _grabLeftIR *****************
  5457 ;; Defined at:
  5458 ;;		line 90 in file "IR_Reading.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5463 ;;  i               1   42[COMRAM] unsigned char 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  2   35[COMRAM] unsigned int 
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5473 ;;      Params:         2       0       0       0
  5474 ;;      Locals:         3       0       0       0
  5475 ;;      Temps:          3       0       0       0
  5476 ;;      Totals:         8       0       0       0
  5477 ;;Total ram usage:        8 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    3
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_ScanIR
  5484 ;;		_ScanWithRange
  5485 ;;		_main
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text24
  5490  0015C2                     __ptext24:
  5491                           	opt stack 0
  5492  0015C2                     _grabLeftIR:
  5493                           	opt stack 27
  5494                           
  5495                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5496                           
  5497                           ;incstack = 0
  5498  0015C2  0E00               	movlw	0
  5499  0015C4  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5500  0015C6  0E00               	movlw	0
  5501  0015C8  6E29               	movwf	grabLeftIR@IR_signal,c
  5502                           
  5503                           ;IR_Reading.c: 93: unsigned char i=0;
  5504  0015CA  0E00               	movlw	0
  5505  0015CC  6E2B               	movwf	grabLeftIR@i,c
  5506                           
  5507                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5508  0015CE  0E00               	movlw	0
  5509  0015D0  6E2B               	movwf	grabLeftIR@i,c
  5510  0015D2                     l2152:
  5511  0015D2  0E03               	movlw	3
  5512  0015D4  642B               	cpfsgt	grabLeftIR@i,c
  5513  0015D6  D001               	goto	l2156
  5514  0015D8  D01E               	goto	l2162
  5515  0015DA                     l2156:
  5516                           
  5517                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5518  0015DA  5067               	movf	3943,w,c	;volatile
  5519  0015DC  6E26               	movwf	??_grabLeftIR& (0+255),c
  5520  0015DE  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5521  0015E0  0E07               	movlw	7
  5522  0015E2                     u1485:
  5523  0015E2  90D8               	bcf	status,0,c
  5524  0015E4  3626               	rlcf	??_grabLeftIR,f,c
  5525  0015E6  3627               	rlcf	??_grabLeftIR+1,f,c
  5526  0015E8  2EE8               	decfsz	wreg,f,c
  5527  0015EA  D7FB               	goto	u1485
  5528  0015EC  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5529  0015F0  90D8               	bcf	status,0,c
  5530  0015F2  3228               	rrcf	??_grabLeftIR+2,f,c
  5531  0015F4  5028               	movf	??_grabLeftIR+2,w,c
  5532  0015F6  1226               	iorwf	??_grabLeftIR,f,c
  5533  0015F8  0E00               	movlw	0
  5534  0015FA  1227               	iorwf	??_grabLeftIR+1,f,c
  5535  0015FC  5026               	movf	??_grabLeftIR,w,c
  5536  0015FE  2629               	addwf	grabLeftIR@IR_signal,f,c
  5537  001600  5027               	movf	??_grabLeftIR+1,w,c
  5538  001602  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5539                           
  5540                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5541  001604  0E82               	movlw	130
  5542  001606  6E26               	movwf	??_grabLeftIR& (0+255),c
  5543  001608  0EDE               	movlw	222
  5544  00160A                     u3017:
  5545  00160A  2EE8               	decfsz	wreg,f,c
  5546  00160C  D7FE               	goto	u3017
  5547  00160E  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5548  001610  D7FC               	goto	u3017
  5549  001612  2A2B               	incf	grabLeftIR@i,f,c
  5550  001614  D7DE               	goto	l2152
  5551  001616                     l2162:
  5552                           
  5553                           ;IR_Reading.c: 99: }
  5554                           ;IR_Reading.c: 101: return IR_signal>>2;
  5555  001616  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5556  00161A  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5557  00161E  90D8               	bcf	status,0,c
  5558  001620  3227               	rrcf	??_grabLeftIR+1,f,c
  5559  001622  3226               	rrcf	??_grabLeftIR,f,c
  5560  001624  90D8               	bcf	status,0,c
  5561  001626  3227               	rrcf	??_grabLeftIR+1,f,c
  5562  001628  3226               	rrcf	??_grabLeftIR,f,c
  5563  00162A  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5564  00162E  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5565  001632  0012               	return	
  5566  001634                     __end_of_grabLeftIR:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           indf1	equ	0xFE7
  5578                           fsr1h	equ	0xFE2
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function _SetLine *****************
  5588 ;; Defined at:
  5589 ;;		line 74 in file "LCD.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  line            1    wreg     unsigned char 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  line            1   41[COMRAM] unsigned char 
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, status,2, status,0, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5603 ;;      Params:         0       0       0       0
  5604 ;;      Locals:         1       0       0       0
  5605 ;;      Temps:          0       0       0       0
  5606 ;;      Totals:         1       0       0       0
  5607 ;;Total ram usage:        1 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    6
  5610 ;; This function calls:
  5611 ;;		_SendLCD
  5612 ;; This function is called by:
  5613 ;;		_ScanIR
  5614 ;;		_ScanWithRange
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text25
  5620  001882                     __ptext25:
  5621                           	opt stack 0
  5622  001882                     _SetLine:
  5623                           	opt stack 24
  5624                           
  5625                           ;incstack = 0
  5626                           ;SetLine@line stored from wreg
  5627  001882  6E2A               	movwf	SetLine@line,c
  5628                           
  5629                           ;LCD.c: 75: if (line==1) {
  5630  001884  042A               	decf	SetLine@line,w,c
  5631  001886  A4D8               	btfss	status,2,c
  5632  001888  D006               	goto	l2170
  5633                           
  5634                           ;LCD.c: 76: SendLCD(0x80,0);
  5635  00188A  0E00               	movlw	0
  5636  00188C  6E28               	movwf	SendLCD@type,c
  5637  00188E  0E80               	movlw	128
  5638  001890  EC59  F00C         	call	_SendLCD
  5639                           
  5640                           ;LCD.c: 77: } else if (line==2) {
  5641  001894  D009               	goto	l2174
  5642  001896                     l2170:
  5643  001896  0E02               	movlw	2
  5644  001898  182A               	xorwf	SetLine@line,w,c
  5645  00189A  A4D8               	btfss	status,2,c
  5646  00189C  D005               	goto	l2174
  5647                           
  5648                           ;LCD.c: 78: SendLCD(0xC0,0);
  5649  00189E  0E00               	movlw	0
  5650  0018A0  6E28               	movwf	SendLCD@type,c
  5651  0018A2  0EC0               	movlw	192
  5652  0018A4  EC59  F00C         	call	_SendLCD
  5653  0018A8                     l2174:
  5654                           
  5655                           ;LCD.c: 79: }
  5656                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5657  0018A8  0E21               	movlw	33
  5658  0018AA                     u3027:
  5659  0018AA  2EE8               	decfsz	wreg,f,c
  5660  0018AC  D7FE               	goto	u3027
  5661  0018AE  F000               	nop	
  5662  0018B0  0012               	return		;funcret
  5663  0018B2                     __end_of_SetLine:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           intcon	equ	0xFF2
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           indf1	equ	0xFE7
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _LCD_String *****************
  5685 ;; Defined at:
  5686 ;;		line 83 in file "LCD.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  string          2   41[COMRAM] PTR unsigned char 
  5689 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5690 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5691 ;;		 -> STR_1(12), 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;		None               void
  5696 ;; Registers used:
  5697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5703 ;;      Params:         2       0       0       0
  5704 ;;      Locals:         0       0       0       0
  5705 ;;      Temps:          0       0       0       0
  5706 ;;      Totals:         2       0       0       0
  5707 ;;Total ram usage:        2 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    6
  5710 ;; This function calls:
  5711 ;;		_SendLCD
  5712 ;; This function is called by:
  5713 ;;		_ScanIR
  5714 ;;		_ScanWithRange
  5715 ;;		_main
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text26
  5720  001634                     __ptext26:
  5721                           	opt stack 0
  5722  001634                     _LCD_String:
  5723                           	opt stack 23
  5724                           
  5725                           ;LCD.c: 85: while(*string != 0){
  5726                           
  5727                           ;incstack = 0
  5728  001634  D01A               	goto	l2184
  5729  001636                     l2178:
  5730                           
  5731                           ;LCD.c: 88: SendLCD(*string++,1);
  5732  001636  0E01               	movlw	1
  5733  001638  6E28               	movwf	SendLCD@type,c
  5734  00163A  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5735  00163E  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5736  001642  6AF8               	clrf	tblptru,c
  5737  001644  0E02               	movlw	(high __ramtop+-1)
  5738  001646  64F7               	cpfsgt	tblptrh,c
  5739  001648  D003               	bra	u1527
  5740  00164A  0008               	tblrd		*
  5741  00164C  50F5               	movf	tablat,w,c
  5742  00164E  D005               	bra	u1520
  5743  001650                     u1527:
  5744  001650  CFF6 FFE1          	movff	tblptrl,fsr1l
  5745  001654  CFF7 FFE2          	movff	tblptrh,fsr1h
  5746  001658  50E7               	movf	indf1,w,c
  5747  00165A                     u1520:
  5748  00165A  EC59  F00C         	call	_SendLCD
  5749  00165E  4A2A               	infsnz	LCD_String@string,f,c
  5750  001660  2A2B               	incf	LCD_String@string+1,f,c
  5751                           
  5752                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5753  001662  0E21               	movlw	33
  5754  001664                     u3037:
  5755  001664  2EE8               	decfsz	wreg,f,c
  5756  001666  D7FE               	goto	u3037
  5757  001668  F000               	nop	
  5758  00166A                     l2184:
  5759  00166A  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5760  00166E  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5761  001672  6AF8               	clrf	tblptru,c
  5762  001674  0E02               	movlw	(high __ramtop+-1)
  5763  001676  64F7               	cpfsgt	tblptrh,c
  5764  001678  D003               	bra	u1537
  5765  00167A  0008               	tblrd		*
  5766  00167C  50F5               	movf	tablat,w,c
  5767  00167E  D005               	bra	u1530
  5768  001680                     u1537:
  5769  001680  CFF6 FFE1          	movff	tblptrl,fsr1l
  5770  001684  CFF7 FFE2          	movff	tblptrh,fsr1h
  5771  001688  50E7               	movf	indf1,w,c
  5772  00168A                     u1530:
  5773  00168A  0900               	iorlw	0
  5774  00168C  B4D8               	btfsc	status,2,c
  5775  00168E  0012               	return	
  5776  001690  D7D2               	goto	l2178
  5777  001692                     __end_of_LCD_String:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           indf1	equ	0xFE7
  5789                           fsr1h	equ	0xFE2
  5790                           fsr1l	equ	0xFE1
  5791                           indf2	equ	0xFDF
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _SendLCD *****************
  5799 ;; Defined at:
  5800 ;;		line 27 in file "LCD.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  Byte            1    wreg     unsigned char 
  5803 ;;  type            1   39[COMRAM] unsigned char 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;  Byte            1   40[COMRAM] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;		None               void
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5815 ;;      Params:         1       0       0       0
  5816 ;;      Locals:         1       0       0       0
  5817 ;;      Temps:          0       0       0       0
  5818 ;;      Totals:         2       0       0       0
  5819 ;;Total ram usage:        2 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    5
  5822 ;; This function calls:
  5823 ;;		_LCDout
  5824 ;; This function is called by:
  5825 ;;		_initLCD
  5826 ;;		_SetLine
  5827 ;;		_LCD_String
  5828 ;;		_ScanIR
  5829 ;;		_ScanWithRange
  5830 ;;		_main
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text27
  5835  0018B2                     __ptext27:
  5836                           	opt stack 0
  5837  0018B2                     _SendLCD:
  5838                           	opt stack 24
  5839                           
  5840                           ;incstack = 0
  5841                           ;SendLCD@Byte stored from wreg
  5842  0018B2  6E29               	movwf	SendLCD@Byte,c
  5843                           
  5844                           ;LCD.c: 30: LATAbits.LATA6=type;
  5845  0018B4  B028               	btfsc	SendLCD@type,0,c
  5846  0018B6  D002               	bra	u1315
  5847  0018B8  9C89               	bcf	3977,6,c	;volatile
  5848  0018BA  D001               	bra	u1316
  5849  0018BC                     u1315:
  5850  0018BC  8C89               	bsf	3977,6,c	;volatile
  5851  0018BE                     u1316:
  5852                           
  5853                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5854  0018BE  3829               	swapf	SendLCD@Byte,w,c
  5855  0018C0  0B0F               	andlw	15
  5856  0018C2  0B0F               	andlw	15
  5857  0018C4  EC82  F008         	call	_LCDout
  5858                           
  5859                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5860  0018C8  0E06               	movlw	6
  5861  0018CA                     u3047:
  5862  0018CA  2EE8               	decfsz	wreg,f,c
  5863  0018CC  D7FE               	goto	u3047
  5864  0018CE  D000               	nop2		;nop
  5865                           
  5866                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5867  0018D0  5029               	movf	SendLCD@Byte,w,c
  5868  0018D2  0B0F               	andlw	15
  5869  0018D4  EC82  F008         	call	_LCDout
  5870                           
  5871                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5872  0018D8  0E21               	movlw	33
  5873  0018DA                     u3057:
  5874  0018DA  2EE8               	decfsz	wreg,f,c
  5875  0018DC  D7FE               	goto	u3057
  5876  0018DE  F000               	nop	
  5877  0018E0  0012               	return		;funcret
  5878  0018E2                     __end_of_SendLCD:
  5879                           	opt stack 0
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           postinc0	equ	0xFEE
  5888                           wreg	equ	0xFE8
  5889                           indf1	equ	0xFE7
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _LCDout *****************
  5900 ;; Defined at:
  5901 ;;		line 14 in file "LCD.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  number          1    wreg     unsigned char 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  number          1   38[COMRAM] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;		None               void
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5915 ;;      Params:         0       0       0       0
  5916 ;;      Locals:         1       0       0       0
  5917 ;;      Temps:          3       0       0       0
  5918 ;;      Totals:         4       0       0       0
  5919 ;;Total ram usage:        4 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    4
  5922 ;; This function calls:
  5923 ;;		_E_TOG
  5924 ;; This function is called by:
  5925 ;;		_SendLCD
  5926 ;;		_initLCD
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text28
  5931  001104                     __ptext28:
  5932                           	opt stack 0
  5933  001104                     _LCDout:
  5934                           	opt stack 24
  5935                           
  5936                           ;incstack = 0
  5937                           ;LCDout@number stored from wreg
  5938  001104  6E27               	movwf	LCDout@number,c
  5939                           
  5940                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5941  001106  5027               	movf	LCDout@number,w,c
  5942  001108  6E24               	movwf	??_LCDout& (0+255),c
  5943  00110A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5944  00110C  0E07               	movlw	7
  5945  00110E                     u1205:
  5946  00110E  90D8               	bcf	status,0,c
  5947  001110  3624               	rlcf	??_LCDout,f,c
  5948  001112  3625               	rlcf	??_LCDout+1,f,c
  5949  001114  2EE8               	decfsz	wreg,f,c
  5950  001116  D7FB               	goto	u1205
  5951  001118  0E07               	movlw	7
  5952  00111A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5953  00111C                     u1215:
  5954  00111C  3425               	rlcf	??_LCDout+1,w,c
  5955  00111E  3225               	rrcf	??_LCDout+1,f,c
  5956  001120  3224               	rrcf	??_LCDout,f,c
  5957  001122  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5958  001124  D7FB               	goto	u1215
  5959  001126  4624               	rlncf	??_LCDout,f,c
  5960  001128  508B               	movf	3979,w,c	;volatile
  5961  00112A  1824               	xorwf	??_LCDout,w,c
  5962  00112C  0BFD               	andlw	-3
  5963  00112E  1824               	xorwf	??_LCDout,w,c
  5964  001130  6E8B               	movwf	3979,c	;volatile
  5965                           
  5966                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5967  001132  5027               	movf	LCDout@number,w,c
  5968  001134  6E24               	movwf	??_LCDout& (0+255),c
  5969  001136  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5970  001138  0E06               	movlw	6
  5971  00113A                     u1225:
  5972  00113A  90D8               	bcf	status,0,c
  5973  00113C  3624               	rlcf	??_LCDout,f,c
  5974  00113E  3625               	rlcf	??_LCDout+1,f,c
  5975  001140  2EE8               	decfsz	wreg,f,c
  5976  001142  D7FB               	goto	u1225
  5977  001144  0E07               	movlw	7
  5978  001146  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5979  001148                     u1235:
  5980  001148  3425               	rlcf	??_LCDout+1,w,c
  5981  00114A  3225               	rrcf	??_LCDout+1,f,c
  5982  00114C  3224               	rrcf	??_LCDout,f,c
  5983  00114E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5984  001150  D7FB               	goto	u1235
  5985  001152  4624               	rlncf	??_LCDout,f,c
  5986  001154  4624               	rlncf	??_LCDout,f,c
  5987  001156  508B               	movf	3979,w,c	;volatile
  5988  001158  1824               	xorwf	??_LCDout,w,c
  5989  00115A  0BFB               	andlw	-5
  5990  00115C  1824               	xorwf	??_LCDout,w,c
  5991  00115E  6E8B               	movwf	3979,c	;volatile
  5992                           
  5993                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5994  001160  5027               	movf	LCDout@number,w,c
  5995  001162  6E24               	movwf	??_LCDout& (0+255),c
  5996  001164  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5997  001166  0E05               	movlw	5
  5998  001168                     u1245:
  5999  001168  90D8               	bcf	status,0,c
  6000  00116A  3624               	rlcf	??_LCDout,f,c
  6001  00116C  3625               	rlcf	??_LCDout+1,f,c
  6002  00116E  2EE8               	decfsz	wreg,f,c
  6003  001170  D7FB               	goto	u1245
  6004  001172  0E07               	movlw	7
  6005  001174  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6006  001176                     u1255:
  6007  001176  3425               	rlcf	??_LCDout+1,w,c
  6008  001178  3225               	rrcf	??_LCDout+1,f,c
  6009  00117A  3224               	rrcf	??_LCDout,f,c
  6010  00117C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6011  00117E  D7FB               	goto	u1255
  6012  001180  508C               	movf	3980,w,c	;volatile
  6013  001182  1824               	xorwf	??_LCDout,w,c
  6014  001184  0BFE               	andlw	-2
  6015  001186  1824               	xorwf	??_LCDout,w,c
  6016  001188  6E8C               	movwf	3980,c	;volatile
  6017                           
  6018                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6019  00118A  5027               	movf	LCDout@number,w,c
  6020  00118C  6E24               	movwf	??_LCDout& (0+255),c
  6021  00118E  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6022  001190  3A24               	swapf	??_LCDout,f,c
  6023  001192  3A25               	swapf	??_LCDout+1,f,c
  6024  001194  0EF0               	movlw	240
  6025  001196  1625               	andwf	??_LCDout+1,f,c
  6026  001198  5024               	movf	??_LCDout,w,c
  6027  00119A  0B0F               	andlw	15
  6028  00119C  1225               	iorwf	??_LCDout+1,f,c
  6029  00119E  0EF0               	movlw	240
  6030  0011A0  1624               	andwf	??_LCDout,f,c
  6031  0011A2  0E07               	movlw	7
  6032  0011A4  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6033  0011A6                     u1265:
  6034  0011A6  3425               	rlcf	??_LCDout+1,w,c
  6035  0011A8  3225               	rrcf	??_LCDout+1,f,c
  6036  0011AA  3224               	rrcf	??_LCDout,f,c
  6037  0011AC  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6038  0011AE  D7FB               	goto	u1265
  6039  0011B0  4624               	rlncf	??_LCDout,f,c
  6040  0011B2  508C               	movf	3980,w,c	;volatile
  6041  0011B4  1824               	xorwf	??_LCDout,w,c
  6042  0011B6  0BFD               	andlw	-3
  6043  0011B8  1824               	xorwf	??_LCDout,w,c
  6044  0011BA  6E8C               	movwf	3980,c	;volatile
  6045                           
  6046                           ;LCD.c: 21: E_TOG();
  6047  0011BC  ECE3  F00C         	call	_E_TOG	;wreg free
  6048                           
  6049                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6050  0011C0  0E03               	movlw	3
  6051  0011C2                     u3067:
  6052  0011C2  2EE8               	decfsz	wreg,f,c
  6053  0011C4  D7FE               	goto	u3067
  6054  0011C6  F000               	nop	
  6055  0011C8  0012               	return		;funcret
  6056  0011CA                     __end_of_LCDout:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           indf1	equ	0xFE7
  6068                           fsr1h	equ	0xFE2
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _E_TOG *****************
  6078 ;; Defined at:
  6079 ;;		line 5 in file "LCD.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6093 ;;      Params:         0       0       0       0
  6094 ;;      Locals:         0       0       0       0
  6095 ;;      Temps:          0       0       0       0
  6096 ;;      Totals:         0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    3
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_LCDout
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text29
  6108  0019C6                     __ptext29:
  6109                           	opt stack 0
  6110  0019C6                     _E_TOG:
  6111                           	opt stack 24
  6112                           
  6113                           ;LCD.c: 8: LATCbits.LATC0=1;
  6114                           
  6115                           ;incstack = 0
  6116  0019C6  808B               	bsf	3979,0,c	;volatile
  6117                           
  6118                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6119  0019C8  0E03               	movlw	3
  6120  0019CA                     u3077:
  6121  0019CA  2EE8               	decfsz	wreg,f,c
  6122  0019CC  D7FE               	goto	u3077
  6123  0019CE  F000               	nop	
  6124                           
  6125                           ;LCD.c: 10: LATCbits.LATC0=0;
  6126  0019D0  908B               	bcf	3979,0,c	;volatile
  6127  0019D2  0012               	return		;funcret
  6128  0019D4                     __end_of_E_TOG:
  6129                           	opt stack 0
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           intcon	equ	0xFF2
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           indf1	equ	0xFE7
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _InterruptHandlerLow *****************
  6150 ;; Defined at:
  6151 ;;		line 18 in file "main.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;		None
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;		None
  6156 ;; Return value:  Size  Location     Type
  6157 ;;		None               void
  6158 ;; Registers used:
  6159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6165 ;;      Params:         0       0       0       0
  6166 ;;      Locals:         0       0       0       0
  6167 ;;      Temps:         17       0       0       0
  6168 ;;      Totals:        17       0       0       0
  6169 ;;Total ram usage:       17 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    2
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		Interrupt level 1
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	intcodelo
  6180  000018                     __pintcodelo:
  6181                           	opt stack 0
  6182  000018                     _InterruptHandlerLow:
  6183                           	opt stack 23
  6184                           
  6185                           ;incstack = 0
  6186  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6187  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6188  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6189  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6190  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6191  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6192  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6193  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6194  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6195  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6196  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6197  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6198  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6199  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6200  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6201  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6202  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6203  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6204                           
  6205                           ;main.c: 20: if (PIR1bits.RCIF) {
  6206  00005E  AA9E               	btfss	3998,5,c	;volatile
  6207  000060  D016               	goto	i1l368
  6208                           
  6209                           ;main.c: 21: ReceivedString[i]=RCREG;
  6210  000062  503A               	movf	_i,w,c	;volatile
  6211  000064  0D01               	mullw	1
  6212  000066  0EC8               	movlw	low _ReceivedString
  6213  000068  24F3               	addwf	prodl,w,c
  6214  00006A  6ED9               	movwf	fsr2l,c
  6215  00006C  0E00               	movlw	high _ReceivedString
  6216  00006E  20F4               	addwfc	prodh,w,c
  6217  000070  6EDA               	movwf	fsr2h,c
  6218  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6219                           
  6220                           ;main.c: 22: RFID_Read=1;
  6221  000076  0E01               	movlw	1
  6222  000078  0101               	movlb	1	; () banked
  6223  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6224                           
  6225                           ; BSR set to: 1
  6226                           ;main.c: 23: if (i==15){
  6227  00007C  0E0F               	movlw	15
  6228  00007E  183A               	xorwf	_i,w,c	;volatile
  6229  000080  A4D8               	btfss	status,2,c
  6230  000082  D003               	goto	i1l2592
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;main.c: 24: i=0;
  6234  000084  0E00               	movlw	0
  6235  000086  6E3A               	movwf	_i,c	;volatile
  6236                           
  6237                           ;main.c: 25: }else{
  6238  000088  D001               	goto	i1l2594
  6239  00008A                     i1l2592:
  6240                           
  6241                           ; BSR set to: 1
  6242                           ;main.c: 26: i++;
  6243  00008A  2A3A               	incf	_i,f,c	;volatile
  6244  00008C                     i1l2594:
  6245                           
  6246                           ; BSR set to: 1
  6247                           ;main.c: 27: }
  6248                           ;main.c: 28: PIR1bits.RCIF=0;
  6249  00008C  9A9E               	bcf	3998,5,c	;volatile
  6250  00008E                     i1l368:
  6251  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6252  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6253  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6254  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6255  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6256  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6257  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6258  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6259  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6260  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6261  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6262  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6263  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6264  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6265  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6266  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6267  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6268  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6269  0000D4  0010               	retfie	
  6270  0000D6                     __end_of_InterruptHandlerLow:
  6271                           	opt stack 0
  6272                           pclatu	equ	0xFFB
  6273                           pclath	equ	0xFFA
  6274                           tblptru	equ	0xFF8
  6275                           tblptrh	equ	0xFF7
  6276                           tblptrl	equ	0xFF6
  6277                           tablat	equ	0xFF5
  6278                           prodh	equ	0xFF4
  6279                           prodl	equ	0xFF3
  6280                           intcon	equ	0xFF2
  6281                           postinc0	equ	0xFEE
  6282                           fsr0h	equ	0xFEA
  6283                           fsr0l	equ	0xFE9
  6284                           wreg	equ	0xFE8
  6285                           indf1	equ	0xFE7
  6286                           fsr1h	equ	0xFE2
  6287                           fsr1l	equ	0xFE1
  6288                           bsr	equ	0xFE0
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function _InterruptHandlerHigh *****************
  6297 ;; Defined at:
  6298 ;;		line 34 in file "main.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;		None               void
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6312 ;;      Params:         0       0       0       0
  6313 ;;      Locals:         0       0       0       0
  6314 ;;      Temps:         14       0       0       0
  6315 ;;      Totals:        14       0       0       0
  6316 ;;Total ram usage:       14 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    1
  6319 ;; This function calls:
  6320 ;;		i2_delay_tenth_s
  6321 ;; This function is called by:
  6322 ;;		Interrupt level 2
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	intcode
  6327  000008                     __pintcode:
  6328                           	opt stack 0
  6329  000008                     _InterruptHandlerHigh:
  6330                           	opt stack 23
  6331                           
  6332                           ;incstack = 0
  6333  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6334  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6335  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6336  000012  EF69  F00A         	goto	int_func
  6337                           pclatu	equ	0xFFB
  6338                           pclath	equ	0xFFA
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           postinc0	equ	0xFEE
  6347                           fsr0h	equ	0xFEA
  6348                           fsr0l	equ	0xFE9
  6349                           wreg	equ	0xFE8
  6350                           indf1	equ	0xFE7
  6351                           fsr1h	equ	0xFE2
  6352                           fsr1l	equ	0xFE1
  6353                           bsr	equ	0xFE0
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361                           	psect	intcode_body
  6362  0014D2                     __pintcode_body:
  6363                           	opt stack 23
  6364  0014D2                     int_func:
  6365                           	opt stack 23
  6366  0014D2  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6367  0014D6  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6368  0014DA  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6369  0014DE  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6370  0014E2  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6371  0014E6  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6372  0014EA  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6373  0014EE  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6374  0014F2  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6375  0014F6  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6376  0014FA  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6377  0014FE  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6378                           
  6379                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6380  001502  A2F2               	btfss	intcon,1,c	;volatile
  6381  001504  D007               	goto	i2l376
  6382                           
  6383                           ;main.c: 39: } else if (mode==0) {
  6384                           
  6385                           ;main.c: 38: mode=1;
  6386                           
  6387                           ;main.c: 36: if (mode==-1) {
  6388  001506  503B               	movf	_mode,w,c	;volatile
  6389  001508  A4D8               	btfss	status,2,c
  6390                           
  6391                           ;main.c: 43: mode=-1;
  6392                           
  6393                           ;main.c: 41: } else {
  6394  00150A  683B               	setf	_mode,c	;volatile
  6395                           
  6396                           ;main.c: 44: }
  6397                           ;main.c: 46: delay_tenth_s(2);
  6398  00150C  0E02               	movlw	2
  6399  00150E  EC0C  F00C         	call	i2_delay_tenth_s
  6400                           
  6401                           ;main.c: 47: INTCONbits.INT0IF=0;
  6402  001512  92F2               	bcf	intcon,1,c	;volatile
  6403  001514                     i2l376:
  6404  001514  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6405  001518  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6406  00151C  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6407  001520  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6408  001524  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6409  001528  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6410  00152C  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6411  001530  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6412  001534  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6413  001538  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6414  00153C  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6415  001540  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6416  001544  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6417  001548  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6418  00154C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6419  00154E  0011               	retfie		f
  6420  001550                     __end_of_InterruptHandlerHigh:
  6421                           	opt stack 0
  6422                           pclatu	equ	0xFFB
  6423                           pclath	equ	0xFFA
  6424                           tblptru	equ	0xFF8
  6425                           tblptrh	equ	0xFF7
  6426                           tblptrl	equ	0xFF6
  6427                           tablat	equ	0xFF5
  6428                           prodh	equ	0xFF4
  6429                           prodl	equ	0xFF3
  6430                           intcon	equ	0xFF2
  6431                           postinc0	equ	0xFEE
  6432                           fsr0h	equ	0xFEA
  6433                           fsr0l	equ	0xFE9
  6434                           wreg	equ	0xFE8
  6435                           indf1	equ	0xFE7
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           bsr	equ	0xFE0
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function i2_delay_tenth_s *****************
  6447 ;; Defined at:
  6448 ;;		line 32 in file "Movement.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  tenth_second    1    wreg     unsigned char 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6453 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6463 ;;      Params:         0       0       0       0
  6464 ;;      Locals:         3       0       0       0
  6465 ;;      Temps:          1       0       0       0
  6466 ;;      Totals:         4       0       0       0
  6467 ;;Total ram usage:        4 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_InterruptHandlerHigh
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text32
  6477  001818                     __ptext32:
  6478                           	opt stack 0
  6479  001818                     i2_delay_tenth_s:
  6480                           	opt stack 23
  6481                           
  6482                           ;incstack = 0
  6483                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6484  001818  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6485                           
  6486                           ;Movement.c: 33: unsigned int i=0;
  6487  00181A  0E00               	movlw	0
  6488  00181C  6E04               	movwf	i2delay_tenth_s@i+1,c
  6489  00181E  0E00               	movlw	0
  6490  001820  6E03               	movwf	i2delay_tenth_s@i,c
  6491                           
  6492                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6493  001822  0E00               	movlw	0
  6494  001824  6E04               	movwf	i2delay_tenth_s@i+1,c
  6495  001826  0E01               	movlw	1
  6496  001828  6E03               	movwf	i2delay_tenth_s@i,c
  6497  00182A  D009               	goto	i2l2564
  6498  00182C                     i2l2560:
  6499                           
  6500                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6501  00182C  0E82               	movlw	130
  6502  00182E  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6503  001830  0EDE               	movlw	222
  6504  001832                     i2u308_47:
  6505  001832  2EE8               	decfsz	wreg,f,c
  6506  001834  D7FE               	goto	i2u308_47
  6507  001836  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6508  001838  D7FC               	goto	i2u308_47
  6509  00183A  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6510  00183C  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6511  00183E                     i2l2564:
  6512  00183E  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6513  001840  0D02               	mullw	2
  6514  001842  5003               	movf	i2delay_tenth_s@i,w,c
  6515  001844  5CF3               	subwf	prodl,w,c
  6516  001846  5004               	movf	i2delay_tenth_s@i+1,w,c
  6517  001848  58F4               	subwfb	prodh,w,c
  6518  00184A  A0D8               	btfss	status,0,c
  6519  00184C  0012               	return	
  6520  00184E  D7EE               	goto	i2l2560
  6521  001850                     __end_ofi2_delay_tenth_s:
  6522                           	opt stack 0
  6523                           pclatu	equ	0xFFB
  6524                           pclath	equ	0xFFA
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodh	equ	0xFF4
  6530                           prodl	equ	0xFF3
  6531                           intcon	equ	0xFF2
  6532                           postinc0	equ	0xFEE
  6533                           fsr0h	equ	0xFEA
  6534                           fsr0l	equ	0xFE9
  6535                           wreg	equ	0xFE8
  6536                           indf1	equ	0xFE7
  6537                           fsr1h	equ	0xFE2
  6538                           fsr1l	equ	0xFE1
  6539                           bsr	equ	0xFE0
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           pclatu	equ	0xFFB
  6547                           pclath	equ	0xFFA
  6548                           tblptru	equ	0xFF8
  6549                           tblptrh	equ	0xFF7
  6550                           tblptrl	equ	0xFF6
  6551                           tablat	equ	0xFF5
  6552                           prodh	equ	0xFF4
  6553                           prodl	equ	0xFF3
  6554                           intcon	equ	0xFF2
  6555                           postinc0	equ	0xFEE
  6556                           fsr0h	equ	0xFEA
  6557                           fsr0l	equ	0xFE9
  6558                           wreg	equ	0xFE8
  6559                           indf1	equ	0xFE7
  6560                           fsr1h	equ	0xFE2
  6561                           fsr1l	equ	0xFE1
  6562                           bsr	equ	0xFE0
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570                           	psect	rparam
  6571  0000                     pclatu	equ	0xFFB
  6572                           pclath	equ	0xFFA
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           postinc0	equ	0xFEE
  6581                           fsr0h	equ	0xFEA
  6582                           fsr0l	equ	0xFE9
  6583                           wreg	equ	0xFE8
  6584                           indf1	equ	0xFE7
  6585                           fsr1h	equ	0xFE2
  6586                           fsr1l	equ	0xFE1
  6587                           bsr	equ	0xFE0
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           fsr2h	equ	0xFDA
  6592                           fsr2l	equ	0xFD9
  6593                           status	equ	0xFD8
  6594                           
  6595                           	psect	temp
  6596  00003C                     btemp:
  6597                           	opt stack 0
  6598  00003C                     	ds	1
  6599  0000                     int$flags	set	btemp
  6600                           pclatu	equ	0xFFB
  6601                           pclath	equ	0xFFA
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           postinc0	equ	0xFEE
  6610                           fsr0h	equ	0xFEA
  6611                           fsr0l	equ	0xFE9
  6612                           wreg	equ	0xFE8
  6613                           indf1	equ	0xFE7
  6614                           fsr1h	equ	0xFE2
  6615                           fsr1l	equ	0xFE1
  6616                           bsr	equ	0xFE0
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     96     120
    BANK1           256    250     255
    BANK2           239    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mode	PTR unsigned char  size(2) Largest target is 1
		 -> mode(COMRAM[1]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   56533
                                             86 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       73    61     12   21699
                                             13 BANK0     73    61     12
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF     76      76       9       49.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     60      78       4       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     228       5        0.0%
DATA                 0      0     228      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 19:32:16 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0FAC  
                                  l65 14AC                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A26                                   l223 0A62  
                                 l226 0B4E                                   l381 03F8  
                                 l873 16DA                                   l883 171C  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l2100 1712                                  l3010 0E46  
                                l3002 0E22                                  l2140 1568  
                                l3020 0EC2                                  l2062 1990  
                                l2152 15D2                                  l2136 1560  
                                l2072 16A8                                  l3016 0E9C  
                                l3008 0E40                                  l2170 1896  
                                l2162 1616                                  l2146 15A4  
                                l2074 16B0                                  l3018 0EA8  
                                l2156 15DA                                  l2084 16D0  
                                l2076 16B4                                  l2092 16F2  
                                l2174 18A8                                  l2094 16FA  
                                l3142 0B4A                                  l3134 0AA6  
                                l2334 1920                                  l3310 0614  
                                l2184 166A                                  l2096 16FE  
                                l3064 10EC                                  l2192 1806  
                                l3136 0ABE                                  l3304 05AE  
                                l2178 1636                                  l3154 0B66  
                                l3090 094C                                  l3322 0686  
                                l3314 0662                                  l3226 03FE  
                                l2188 17F4                                  l3164 0B78  
                                l3332 06EE                                  l3260 04A4  
                                l3166 0B7E                                  l2542 12DE  
                                l3342 0738                                  l3318 0670  
                                l3344 073E                                  l3336 06F8  
                                l3264 04D6                                  l2554 1336  
                                l2546 12E6                                  l3354 0764  
                                l3348 0748                                  l3356 076A  
                                l3364 07D2                                  l3284 052A  
                                l2830 1408                                  l3374 0834  
                                l2920 0C06                                  l2912 0BD8  
                                l2832 1410                                  l2824 13F2  
                                l3376 083A                                  l2930 0C3E  
                                l2850 1448                                  l2842 1430  
                                l2834 1414                                  l2818 13E2  
                                l3386 087A                                  l2940 0CB0  
                                l2924 0C0E                                  l2860 0F84  
                                l2942 0CD8                                  l2918 0BF4  
                                l2846 143A                                  l2952 0D08  
                                l2872 148C                                  l2864 1454  
                                l2954 0D0E                                  l2890 136C  
                                l2882 133C                                  l2972 0D66  
                                l2868 1470                                  l2966 0D44  
                                l2886 1354                                  l2976 0D9E  
                                l2896 138C                                  l2986 0DCC  
                                l2994 0DF2                                  l2978 0DA8  
                                l2996 0DFE                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 110E  
                                u1215 111C                                  u1225 113A  
                                u1235 1148                                  u1315 18BC  
                                u1316 18BE                                  u1245 1168  
                                _LATB 000F8A                                  u1255 1176  
                                u3007 1598                                  u1520 165A  
                                u2224 0F44                                  u1265 11A6  
                                u3017 160A                                  u2225 0F40  
                                u1530 168A                                  u2234 0FA0  
                                u3027 18AA                                  u2235 0F9C  
                                u3037 1664                                  u2245 0FFA  
                                u3047 18CA                                  u1527 1650  
                                u1455 1570                                  u3057 18DA  
                                u1537 1680                                  u3067 11C2  
                                u3077 19CA                                  u1485 15E2  
                                u2730 06B8                                  u2740 06CC  
                                u2732 06BA                                  u1765 191C  
                                u1766 191E                                  u2742 06CE  
                                u1785 192E                                  u2817 0454  
                                u1786 1930                                  u2907 1258  
                                u2827 046C                                  u2917 126C  
                                u2837 11DC                                  u2927 127E  
                                u2847 11F2                                  u2937 0980  
                                u2857 1202                                  u2947 0998  
                                u2867 1210                                  u2957 14A6  
                                u2877 121E                                  u2967 17FA  
                                u2887 1230                                  u2977 1058  
                                u2897 1242                                  u2987 106E  
                                u2997 1386                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 133A                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 1818  
                     __end_of_SendLCD 18E2                       __end_of_SetLine 18B2  
                  ScanWithRange@F3896 00C4                           ScanIR@F3884 00C0  
                               ?_main 0001                       __end_of___awdiv 1452  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 16E4                       __end_of___lwmod 1726  
                               i1l368 008E                                 i2l376 1514  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 19C6                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1286                    ScanWithRange@power 00AC  
                     __end_of_dpowers 030B                       __end_of_isdigit 1998  
                               main@i 00BF                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0ED0                __size_of_ScanWithRange 032E  
                      __CFG_MCLRE$OFF 000000                       __initialization 18E2  
                        __end_of_main 089C                          __end_of_stop 13CE  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 1932                   VerifySignal@hexByte 002D  
                              ??_main 00B6                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2592 008A                                i1l2594 008C  
                      __CFG_WDTEN$OFF 000000                                i2l2560 182C  
                              i2l2564 183E                 __end_of_delay_tenth_s 1818  
                              _LCDout 1104                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1850                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 100A  
                           ??_SetLine 002A                                ___wmul 1932  
                           ??___awdiv 002E                      __end_of_initRFID 19B4  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1958                  __size_of_grabRightIR 0072  
                              clear_0 18F4                      ___awdiv@quotient 0030  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 089C                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AD                      __end_of_turnLeft 17E0  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 18FE  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 19D4                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1726                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002C  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 1548  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00C0  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 1692                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15C2                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 190C                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 1882                ScanWithRange@RFID_Read 0075  
                             _SendLCD 18B2                               __Hparam 0000  
                             _SetLine 1882                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 13CE  
                     __size_of___wmul 0026                               ___lwdiv 1692  
                             ___lwmod 16E4                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 18E2  
                     ??_ScanWithRange 0079                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 19B4                               __ptext2 1998  
                             __ptext3 1850                               __ptext4 11CA  
                             __ptext5 1958                               __ptext6 1726  
                             __ptext7 190C                               __ptext8 1286  
                             __ptext9 089C                             _T0CONbits 000FD5  
                             _initLCD 11CA                     __end_of_initTimer 19C6  
                             _dpowers 0301                               _isdigit 197A  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0BCA  
                      __pintcode_body 14D2                  end_of_initialization 18FE  
                      ScanWithRange@i 00A8                        ScanWithRange@n 00A6  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 14D2  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 17A2                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B4                        __end_of_LCDout 11CA  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1104                        _fullSpeedAhead 1452  
                      _ReceivedString 00C8                        __end_of___wmul 1958  
                         _BAUDCONbits 000FAA                     ScanWithRange@mode 0077  
                      __end_of_initIR 197A                __size_of_delay_tenth_s 0038  
                 start_initialization 18E2                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 1550                              ??_ScanIR 0039  
              __end_of_fullSpeedAhead 14D2                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 15C2                          _initMotorPWM 1850  
                         __pbssCOMRAM 003A                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1963 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 17E0                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 133A  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 00B9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 19B4                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u308_47 1832  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3898 01FA                           _grabRightIR 1550  
               ScanWithRange@LeftFlag 00B2                  grabRightIR@IR_signal 0029  
           ScanWithRange@milliseconds 0071                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0BCA                          setMotorPWM@m 0032  
                _InterruptHandlerHigh 0008                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1764  
                      ScanIR@MoveTime 0073                        ScanIR@MoveType 0075  
                    ScanWithRange@buf 007E                   __end_of_setMotorPWM 100A  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1764  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1634  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1764                              __ptext11 17A2  
                            __ptext20 1932                              __ptext12 1452  
                            __ptext21 16E4                              __ptext13 17E0  
                            __ptext22 1692                              __ptext14 100A  
                            __ptext23 1550                              __ptext15 133A  
                            __ptext32 1818                              __ptext24 15C2  
                            __ptext16 0ED0                              __ptext25 1882  
                            __ptext17 13CE                              __ptext26 1634  
                            __ptext18 0BCA                              __ptext27 18B2  
                            __ptext19 197A                              __ptext28 1104  
                            __ptext29 19C6                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 1998  
           ScanWithRange@SensorResult 00AE                        turnRight@power 006B  
                       __size_of_main 054C                    main@DirectionFound 00BD  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 00B4                              int$flags 003C  
                            main@Move 00BE                   _InterruptHandlerLow 0018  
                          _LCD_String 1634                              _turnLeft 17A2  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002F                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         _setMotorPWM 0ED0                          _VerifySignal 1286  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AA  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
