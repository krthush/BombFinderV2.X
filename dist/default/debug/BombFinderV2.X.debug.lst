

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 23:15:34 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATB	set	3978
    73  0000                     _LATCbits	set	3979
    74  0000                     _LATDbits	set	3980
    75  0000                     _LATEbits	set	3981
    76  0000                     _PTCON0	set	3967
    77  0000                     _PTCON1	set	3966
    78  0000                     _PTPERH	set	3962
    79  0000                     _PTPERL	set	3963
    80  0000                     _PWMCON0	set	3951
    81  0000                     _PWMCON1	set	3950
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISDbits	set	3989
    87  0000                     _TRISEbits	set	3990
    88  0000                     _PDC0H	set	3960
    89  0000                     _PDC0L	set	3961
    90  0000                     _PDC1H	set	3958
    91  0000                     _PDC1L	set	3959
    92  0000                     _ANSEL0bits	set	4024
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _IPR1bits	set	3999
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _RCONbits	set	4048
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _SPBRGH	set	4016
   104  0000                     _T5CON	set	4023
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _T0CONbits	set	4053
   108  0000                     _TMR0H	set	4055
   109  0000                     _TMR0L	set	4054
   110  0000                     _INTCONbits	set	4082
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001AB8                     __pcinit:
   189                           	opt stack 0
   190  001AB8                     start_initialization:
   191                           	opt stack 0
   192  001AB8                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (20 bytes)
   196  001AB8  EE01  F0DA         	lfsr	0,__pbssBANK1
   197  001ABC  0E14               	movlw	20
   198  001ABE                     clear_0:
   199  001ABE  6AEE               	clrf	postinc0,c
   200  001AC0  06E8               	decf	wreg,f,c
   201  001AC2  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK0 (5 bytes)
   204  001AC4  0100               	movlb	0
   205  001AC6  6BFC               	clrf	(__pbssBANK0+4)& (0+255),b
   206  001AC8  6BFB               	clrf	(__pbssBANK0+3)& (0+255),b
   207  001ACA  6BFA               	clrf	(__pbssBANK0+2)& (0+255),b
   208  001ACC  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
   209  001ACE  6BF8               	clrf	__pbssBANK0& (0+255),b
   210                           
   211                           ; Clear objects allocated to COMRAM (6 bytes)
   212  001AD0  6A3B               	clrf	(__pbssCOMRAM+5)& (0+255),c
   213  001AD2  6A3A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   214  001AD4  6A39               	clrf	(__pbssCOMRAM+3)& (0+255),c
   215  001AD6  6A38               	clrf	(__pbssCOMRAM+2)& (0+255),c
   216  001AD8  6A37               	clrf	(__pbssCOMRAM+1)& (0+255),c
   217  001ADA  6A36               	clrf	__pbssCOMRAM& (0+255),c
   218  001ADC                     end_of_initialization:
   219                           	opt stack 0
   220  001ADC                     __end_of__initialization:
   221                           	opt stack 0
   222  001ADC  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   223  001ADE  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   224  001AE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   225  001AE2  6EF8               	movwf	tblptru,c
   226  001AE4  0100               	movlb	0
   227  001AE6  EFA8  F001         	goto	_main	;jump to C main() function
   228                           tblptru	equ	0xFF8
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           
   232                           	psect	bssCOMRAM
   233  000036                     __pbssCOMRAM:
   234                           	opt stack 0
   235  000036                     ScanWithRange@F3892:
   236                           	opt stack 0
   237  000036                     	ds	4
   238  00003A                     _i:
   239                           	opt stack 0
   240  00003A                     	ds	1
   241  00003B                     _mode:
   242                           	opt stack 0
   243  00003B                     	ds	1
   244                           tblptru	equ	0xFF8
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           
   248                           	psect	bssBANK0
   249  0000F8                     __pbssBANK0:
   250                           	opt stack 0
   251  0000F8                     ScanIR@F3879:
   252                           	opt stack 0
   253  0000F8                     	ds	4
   254  0000FC                     _RFID_Read:
   255                           	opt stack 0
   256  0000FC                     	ds	1
   257                           tblptru	equ	0xFF8
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssBANK1
   262  0001DA                     __pbssBANK1:
   263                           	opt stack 0
   264  0001DA                     main@F3896:
   265                           	opt stack 0
   266  0001DA                     	ds	4
   267  0001DE                     _ReceivedString:
   268                           	opt stack 0
   269  0001DE                     	ds	16
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	cstackBANK2
   275  000200                     __pcstackBANK2:
   276                           	opt stack 0
   277  000200                     main@MoveType:
   278                           	opt stack 0
   279                           
   280                           ; 100 bytes @ 0x0
   281  000200                     	ds	100
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	cstackBANK1
   287  000100                     __pcstackBANK1:
   288                           	opt stack 0
   289  000100                     main@MoveTime:
   290                           	opt stack 0
   291                           
   292                           ; 200 bytes @ 0x0
   293  000100                     	ds	200
   294  0001C8                     main@mL:
   295                           	opt stack 0
   296                           
   297                           ; 9 bytes @ 0xC8
   298  0001C8                     	ds	9
   299  0001D1                     main@mR:
   300                           	opt stack 0
   301                           
   302                           ; 9 bytes @ 0xD1
   303  0001D1                     	ds	9
   304                           tblptru	equ	0xFF8
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	cstackBANK0
   309  000060                     __pcstackBANK0:
   310                           	opt stack 0
   311  000060                     ??_setMotorPWM:
   312  000060                     ?_sprintf:
   313                           	opt stack 0
   314  000060                     sprintf@sp:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x0
   318  000060                     	ds	2
   319  000062                     sprintf@f:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2
   323  000062                     	ds	3
   324  000065                     stop@mL:
   325                           	opt stack 0
   326  000065                     fullSpeedAhead@mL:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x5
   330  000065                     	ds	2
   331  000067                     stop@mR:
   332                           	opt stack 0
   333  000067                     fullSpeedAhead@mR:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x7
   337  000067                     	ds	1
   338  000068                     sprintf@ap:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x8
   342  000068                     	ds	1
   343  000069                     fullSpeedAhead@power:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x9
   347  000069                     	ds	1
   348  00006A                     sprintf@prec:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0xA
   352  00006A                     	ds	1
   353  00006B                     turnLeft@mL:
   354                           	opt stack 0
   355  00006B                     turnRight@mL:
   356                           	opt stack 0
   357  00006B                     fullSpeedBack@mL:
   358                           	opt stack 0
   359  00006B                     sprintf@val:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0xB
   363  00006B                     	ds	2
   364  00006D                     sprintf@flag:
   365                           	opt stack 0
   366  00006D                     turnLeft@mR:
   367                           	opt stack 0
   368  00006D                     turnRight@mR:
   369                           	opt stack 0
   370  00006D                     fullSpeedBack@mR:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0xD
   374  00006D                     	ds	1
   375  00006E                     sprintf@width:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xE
   379  00006E                     	ds	1
   380  00006F                     turnLeft@power:
   381                           	opt stack 0
   382  00006F                     turnRight@power:
   383                           	opt stack 0
   384  00006F                     fullSpeedBack@power:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0xF
   388  00006F                     	ds	1
   389  000070                     sprintf@c:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x10
   393  000070                     	ds	1
   394  000071                     ScanIR@mL:
   395                           	opt stack 0
   396  000071                     ScanWithRange@mL:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x11
   400  000071                     	ds	2
   401  000073                     ScanIR@mR:
   402                           	opt stack 0
   403  000073                     ScanWithRange@mR:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x13
   407  000073                     	ds	2
   408  000075                     ??_ScanIR:
   409  000075                     ScanWithRange@loops:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x15
   413  000075                     	ds	1
   414  000076                     ScanIR@buf:
   415                           	opt stack 0
   416                           
   417                           ; 40 bytes @ 0x16
   418  000076                     	ds	1
   419  000077                     ScanWithRange@MoveTime:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x17
   423  000077                     	ds	2
   424  000079                     ScanWithRange@Move:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x19
   428  000079                     	ds	2
   429  00007B                     ScanWithRange@MoveType:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x1B
   433  00007B                     	ds	2
   434  00007D                     ScanWithRange@RFID_Read:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x1D
   438  00007D                     	ds	2
   439  00007F                     ??_ScanWithRange:
   440                           
   441                           ; 0 bytes @ 0x1F
   442  00007F                     	ds	5
   443  000084                     ScanWithRange@buf:
   444                           	opt stack 0
   445                           
   446                           ; 40 bytes @ 0x24
   447  000084                     	ds	26
   448  00009E                     ScanIR@DirectionMoveThreshold:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x3E
   452  00009E                     	ds	2
   453  0000A0                     ScanIR@SensorResult:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x40
   457  0000A0                     	ds	12
   458  0000AC                     ScanWithRange@n:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x4C
   462  0000AC                     	ds	2
   463  0000AE                     ScanWithRange@i:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4E
   467  0000AE                     	ds	2
   468  0000B0                     ScanWithRange@DirectionFoundThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x50
   472  0000B0                     	ds	2
   473  0000B2                     ScanWithRange@power:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x52
   477  0000B2                     	ds	1
   478  0000B3                     ScanWithRange@LeftFlag:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x53
   482  0000B3                     	ds	2
   483  0000B5                     ScanWithRange@TimeAboveThreshold:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x55
   487  0000B5                     	ds	1
   488  0000B6                     ScanWithRange@SensorResult:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x56
   492  0000B6                     	ds	4
   493  0000BA                     ScanWithRange@RightFlag:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x5A
   497  0000BA                     	ds	2
   498  0000BC                     ??_main:
   499                           
   500                           ; 0 bytes @ 0x5C
   501  0000BC                     	ds	2
   502  0000BE                     main@buf:
   503                           	opt stack 0
   504                           
   505                           ; 40 bytes @ 0x5E
   506  0000BE                     	ds	40
   507  0000E6                     main@Message:
   508                           	opt stack 0
   509                           
   510                           ; 10 bytes @ 0x86
   511  0000E6                     	ds	10
   512  0000F0                     main@ScanAngle:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x90
   516  0000F0                     	ds	1
   517  0000F1                     main@SensorResult:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x91
   521  0000F1                     	ds	4
   522  0000F5                     main@DirectionFound:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x95
   526  0000F5                     	ds	1
   527  0000F6                     main@i:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x96
   531  0000F6                     	ds	1
   532  0000F7                     main@Move:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x97
   536  0000F7                     	ds	1
   537                           tblptru	equ	0xFF8
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           
   541                           	psect	cstackCOMRAM
   542  000001                     __pcstackCOMRAM:
   543                           	opt stack 0
   544  000001                     ??i2_delay_tenth_s:
   545                           
   546                           ; 0 bytes @ 0x0
   547  000001                     	ds	1
   548  000002                     i2delay_tenth_s@tenth_seconds:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x1
   552  000002                     	ds	1
   553  000003                     i2delay_tenth_s@i:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x2
   557  000003                     	ds	2
   558  000005                     ??_InterruptHandlerHigh:
   559                           
   560                           ; 0 bytes @ 0x4
   561  000005                     	ds	14
   562  000013                     ??_InterruptHandlerLow:
   563                           
   564                           ; 0 bytes @ 0x12
   565  000013                     	ds	17
   566  000024                     ??_isdigit:
   567  000024                     ??_LCDout:
   568  000024                     ??_delay_tenth_s:
   569  000024                     ?_grabRightIR:
   570                           	opt stack 0
   571  000024                     ?_grabLeftIR:
   572                           	opt stack 0
   573  000024                     ?___wmul:
   574                           	opt stack 0
   575  000024                     ?___lwdiv:
   576                           	opt stack 0
   577  000024                     enableSensor@status:
   578                           	opt stack 0
   579  000024                     VerifySignal@Signal:
   580                           	opt stack 0
   581  000024                     ___wmul@multiplier:
   582                           	opt stack 0
   583  000024                     ___lwdiv@dividend:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x23
   587  000024                     	ds	1
   588  000025                     enableSensor@sensor:
   589                           	opt stack 0
   590  000025                     delay_tenth_s@tenth_seconds:
   591                           	opt stack 0
   592  000025                     _isdigit$1963:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x24
   596  000025                     	ds	1
   597  000026                     ??_grabRightIR:
   598  000026                     ??_grabLeftIR:
   599  000026                     ??_VerifySignal:
   600  000026                     isdigit@c:
   601                           	opt stack 0
   602  000026                     delay_tenth_s@i:
   603                           	opt stack 0
   604  000026                     ___wmul@multiplicand:
   605                           	opt stack 0
   606  000026                     ___lwdiv@divisor:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x25
   610  000026                     	ds	1
   611  000027                     LCDout@number:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x26
   615  000027                     	ds	1
   616  000028                     SendLCD@type:
   617                           	opt stack 0
   618  000028                     ___lwdiv@counter:
   619                           	opt stack 0
   620  000028                     ___wmul@product:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x27
   624  000028                     	ds	1
   625  000029                     SendLCD@Byte:
   626                           	opt stack 0
   627  000029                     grabRightIR@IR_signal:
   628                           	opt stack 0
   629  000029                     grabLeftIR@IR_signal:
   630                           	opt stack 0
   631  000029                     ___lwdiv@quotient:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x28
   635  000029                     	ds	1
   636  00002A                     ??_initLCD:
   637  00002A                     ?___awdiv:
   638                           	opt stack 0
   639  00002A                     SetLine@line:
   640                           	opt stack 0
   641  00002A                     LCD_String@string:
   642                           	opt stack 0
   643  00002A                     ___awdiv@dividend:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x29
   647  00002A                     	ds	1
   648  00002B                     ?___lwmod:
   649                           	opt stack 0
   650  00002B                     grabRightIR@i:
   651                           	opt stack 0
   652  00002B                     grabLeftIR@i:
   653                           	opt stack 0
   654  00002B                     ___lwmod@dividend:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x2A
   658  00002B                     	ds	1
   659  00002C                     VerifySignal@hexByte:
   660                           	opt stack 0
   661  00002C                     ___awdiv@divisor:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2B
   665  00002C                     	ds	1
   666  00002D                     ___lwmod@divisor:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2C
   670  00002D                     	ds	1
   671  00002E                     VerifySignal@checksum:
   672                           	opt stack 0
   673  00002E                     ___awdiv@counter:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x2D
   677  00002E                     	ds	1
   678  00002F                     VerifySignal@i:
   679                           	opt stack 0
   680  00002F                     ___awdiv@sign:
   681                           	opt stack 0
   682  00002F                     ___lwmod@counter:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x2E
   686  00002F                     	ds	1
   687  000030                     ??_sprintf:
   688  000030                     ___awdiv@quotient:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x2F
   692  000030                     	ds	2
   693  000032                     setMotorPWM@m:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x31
   697  000032                     	ds	2
   698  000034                     setMotorPWM@PWMduty:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x33
   702  000034                     	ds	2
   703  000036                     tblptru	equ	0xFF8
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           
   707                           ; 0 bytes @ 0x35
   708 ;;
   709 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   710 ;;
   711 ;; *************** function _main *****************
   712 ;; Defined at:
   713 ;;		line 51 in file "main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;  MoveTime      200    0[BANK1 ] int [100]
   718 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   719 ;;  buf            40   94[BANK0 ] unsigned char [40]
   720 ;;  Message        10  134[BANK0 ] unsigned char [10]
   721 ;;  mR              9  209[BANK1 ] struct DC_motor
   722 ;;  mL              9  200[BANK1 ] struct DC_motor
   723 ;;  SensorResult    4  145[BANK0 ] unsigned int [2]
   724 ;;  Move            1  151[BANK0 ] unsigned char 
   725 ;;  i               1  150[BANK0 ] unsigned char 
   726 ;;  DirectionFou    1  149[BANK0 ] char 
   727 ;;  ScanAngle       1  144[BANK0 ] unsigned char 
   728 ;; Return value:  Size  Location     Type
   729 ;;		None               void
   730 ;; Registers used:
   731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   737 ;;      Params:         0       0       0       0
   738 ;;      Locals:         0      58     218     100
   739 ;;      Temps:          0       2       0       0
   740 ;;      Totals:         0      60     218     100
   741 ;;Total ram usage:      378 bytes
   742 ;; Hardware stack levels required when called:    8
   743 ;; This function calls:
   744 ;;		_LCD_String
   745 ;;		_ScanIR
   746 ;;		_ScanWithRange
   747 ;;		_SendLCD
   748 ;;		_SetLine
   749 ;;		_VerifySignal
   750 ;;		_delay_tenth_s
   751 ;;		_enableSensor
   752 ;;		_fullSpeedAhead
   753 ;;		_fullSpeedBack
   754 ;;		_grabLeftIR
   755 ;;		_grabRightIR
   756 ;;		_initIR
   757 ;;		_initLCD
   758 ;;		_initMotorPWM
   759 ;;		_initRFID
   760 ;;		_initTimer
   761 ;;		_sprintf
   762 ;;		_stop
   763 ;;		_turnLeft
   764 ;;		_turnRight
   765 ;; This function is called by:
   766 ;;		Startup code after reset
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text0
   771  000350                     __ptext0:
   772                           	opt stack 0
   773  000350                     _main:
   774                           	opt stack 23
   775                           
   776                           ;main.c: 54: unsigned char Message[10];
   777                           ;main.c: 55: unsigned char i=0;
   778                           
   779                           ;incstack = 0
   780  000350  0E00               	movlw	0
   781  000352  0100               	movlb	0	; () banked
   782  000354  6FF6               	movwf	main@i& (0+255),b
   783                           
   784                           ;main.c: 56: signed char DirectionFound=0;
   785  000356  0E00               	movlw	0
   786  000358  0100               	movlb	0	; () banked
   787  00035A  6FF5               	movwf	main@DirectionFound& (0+255),b
   788                           
   789                           ;main.c: 57: int MoveTime[100];
   790                           ;main.c: 60: char MoveType[100];
   791                           ;main.c: 63: char Move=0;
   792  00035C  0E00               	movlw	0
   793  00035E  0100               	movlb	0	; () banked
   794  000360  6FF7               	movwf	main@Move& (0+255),b
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   798  000362  C1DA  F0F1         	movff	main@F3896,main@SensorResult
   799  000366  C1DB  F0F2         	movff	main@F3896+1,main@SensorResult+1
   800  00036A  C1DC  F0F3         	movff	main@F3896+2,main@SensorResult+2
   801  00036E  C1DD  F0F4         	movff	main@F3896+3,main@SensorResult+3
   802                           
   803                           ;main.c: 65: char buf[40];
   804                           ;main.c: 67: unsigned char ScanAngle=60;
   805  000372  0E3C               	movlw	60
   806  000374  0100               	movlb	0	; () banked
   807  000376  6FF0               	movwf	main@ScanAngle& (0+255),b
   808                           
   809                           ; BSR set to: 0
   810                           ;main.c: 76: INTCONbits.GIEH=1;
   811  000378  8EF2               	bsf	intcon,7,c	;volatile
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 77: INTCONbits.GIEL=1;
   815  00037A  8CF2               	bsf	intcon,6,c	;volatile
   816                           
   817                           ; BSR set to: 0
   818                           ;main.c: 78: INTCONbits.PEIE=1;
   819  00037C  8CF2               	bsf	intcon,6,c	;volatile
   820                           
   821                           ; BSR set to: 0
   822                           ;main.c: 79: RCONbits.IPEN=1;
   823  00037E  8ED0               	bsf	4048,7,c	;volatile
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 82: IPR1bits.RCIP=0;
   827  000380  9A9F               	bcf	3999,5,c	;volatile
   828                           
   829                           ; BSR set to: 0
   830                           ;main.c: 83: PIE1bits.RCIE=1;
   831  000382  8A9D               	bsf	3997,5,c	;volatile
   832                           
   833                           ; BSR set to: 0
   834                           ;main.c: 86: TRISCbits.RC3=1;
   835  000384  8694               	bsf	3988,3,c	;volatile
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 87: INTCONbits.INT0IE=1;
   839  000386  88F2               	bsf	intcon,4,c	;volatile
   840                           
   841                           ; BSR set to: 0
   842                           ;main.c: 90: PIR1bits.RC1IF=0;
   843  000388  9A9E               	bcf	3998,5,c	;volatile
   844                           
   845                           ; BSR set to: 0
   846                           ;main.c: 91: INTCONbits.INT0IF=0;
   847  00038A  92F2               	bcf	intcon,1,c	;volatile
   848                           
   849                           ;main.c: 94: struct DC_motor mL, mR;
   850                           ;main.c: 95: mL.power=0;
   851  00038C  0E00               	movlw	0
   852  00038E  0101               	movlb	1	; () banked
   853  000390  6FC8               	movwf	main@mL& (0+255),b
   854                           
   855                           ;main.c: 96: mL.direction=1;
   856  000392  0E01               	movlw	1
   857  000394  0101               	movlb	1	; () banked
   858  000396  6FC9               	movwf	(main@mL+1)& (0+255),b
   859                           
   860                           ; BSR set to: 1
   861                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   862  000398  0E79               	movlw	121
   863  00039A  0101               	movlb	1	; () banked
   864  00039C  6FCA               	movwf	(main@mL+2)& (0+255),b
   865  00039E  0E0F               	movlw	15
   866  0003A0  0101               	movlb	1	; () banked
   867  0003A2  6FCB               	movwf	(main@mL+3)& (0+255),b
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   871  0003A4  0E78               	movlw	120
   872  0003A6  0101               	movlb	1	; () banked
   873  0003A8  6FCC               	movwf	(main@mL+4)& (0+255),b
   874  0003AA  0E0F               	movlw	15
   875  0003AC  0101               	movlb	1	; () banked
   876  0003AE  6FCD               	movwf	(main@mL+5)& (0+255),b
   877                           
   878                           ;main.c: 99: mL.dir_pin=0;
   879  0003B0  0E00               	movlw	0
   880  0003B2  0101               	movlb	1	; () banked
   881  0003B4  6FCE               	movwf	(main@mL+6)& (0+255),b
   882                           
   883                           ;main.c: 100: mL.PWMperiod=199;
   884  0003B6  0E00               	movlw	0
   885  0003B8  0101               	movlb	1	; () banked
   886  0003BA  6FD0               	movwf	(main@mL+8)& (0+255),b
   887  0003BC  0EC7               	movlw	199
   888  0003BE  6FCF               	movwf	(main@mL+7)& (0+255),b
   889                           
   890                           ;main.c: 102: mR.power=0;
   891  0003C0  0E00               	movlw	0
   892  0003C2  0101               	movlb	1	; () banked
   893  0003C4  6FD1               	movwf	main@mR& (0+255),b
   894                           
   895                           ;main.c: 103: mR.direction=1;
   896  0003C6  0E01               	movlw	1
   897  0003C8  0101               	movlb	1	; () banked
   898  0003CA  6FD2               	movwf	(main@mR+1)& (0+255),b
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   902  0003CC  0E77               	movlw	119
   903  0003CE  0101               	movlb	1	; () banked
   904  0003D0  6FD3               	movwf	(main@mR+2)& (0+255),b
   905  0003D2  0E0F               	movlw	15
   906  0003D4  0101               	movlb	1	; () banked
   907  0003D6  6FD4               	movwf	(main@mR+3)& (0+255),b
   908                           
   909                           ; BSR set to: 1
   910                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   911  0003D8  0E76               	movlw	118
   912  0003DA  0101               	movlb	1	; () banked
   913  0003DC  6FD5               	movwf	(main@mR+4)& (0+255),b
   914  0003DE  0E0F               	movlw	15
   915  0003E0  0101               	movlb	1	; () banked
   916  0003E2  6FD6               	movwf	(main@mR+5)& (0+255),b
   917                           
   918                           ;main.c: 106: mR.dir_pin=2;
   919  0003E4  0E02               	movlw	2
   920  0003E6  0101               	movlb	1	; () banked
   921  0003E8  6FD7               	movwf	(main@mR+6)& (0+255),b
   922                           
   923                           ;main.c: 107: mR.PWMperiod=199;
   924  0003EA  0E00               	movlw	0
   925  0003EC  0101               	movlb	1	; () banked
   926  0003EE  6FD9               	movwf	(main@mR+8)& (0+255),b
   927  0003F0  0EC7               	movlw	199
   928  0003F2  6FD8               	movwf	(main@mR+7)& (0+255),b
   929                           
   930                           ;main.c: 109: OSCCON = 0x72;
   931  0003F4  0E72               	movlw	114
   932  0003F6  6ED3               	movwf	4051,c	;volatile
   933  0003F8                     l384:
   934  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   935  0003FA  D2BE               	goto	l3704
   936  0003FC  D7FD               	goto	l384
   937  0003FE                     l3532:
   938                           
   939                           ;main.c: 122: stop(&mL, &mR);
   940  0003FE  0EC8               	movlw	low main@mL
   941  000400  0100               	movlb	0	; () banked
   942  000402  6F65               	movwf	stop@mL& (0+255),b
   943  000404  0E01               	movlw	high main@mL
   944  000406  0100               	movlb	0	; () banked
   945  000408  6F66               	movwf	(stop@mL+1)& (0+255),b
   946  00040A  0ED1               	movlw	low main@mR
   947  00040C  0100               	movlb	0	; () banked
   948  00040E  6F67               	movwf	stop@mR& (0+255),b
   949  000410  0E01               	movlw	high main@mR
   950  000412  0100               	movlb	0	; () banked
   951  000414  6F68               	movwf	(stop@mR+1)& (0+255),b
   952  000416  ECCB  F00A         	call	_stop	;wreg free
   953                           
   954                           ;main.c: 123: RFID_Read=0;
   955  00041A  0E00               	movlw	0
   956  00041C  0100               	movlb	0	; () banked
   957  00041E  6FFC               	movwf	_RFID_Read& (0+255),b	;volatile
   958                           
   959                           ; BSR set to: 0
   960                           ;main.c: 126: SensorResult[0]=grabLeftIR();
   961  000420  EC15  F00C         	call	_grabLeftIR	;wreg free
   962  000424  C024  F0F1         	movff	?_grabLeftIR,main@SensorResult
   963  000428  C025  F0F2         	movff	?_grabLeftIR+1,main@SensorResult+1
   964                           
   965                           ;main.c: 127: SensorResult[1]=grabRightIR();
   966  00042C  ECDC  F00B         	call	_grabRightIR	;wreg free
   967  000430  C024  F0F3         	movff	?_grabRightIR,main@SensorResult+2
   968  000434  C025  F0F4         	movff	?_grabRightIR+1,main@SensorResult+3
   969                           
   970                           ;main.c: 131: CAP1BUFH=0;
   971  000438  0E00               	movlw	0
   972  00043A  6E69               	movwf	3945,c	;volatile
   973                           
   974                           ;main.c: 132: CAP1BUFL=0;
   975  00043C  0E00               	movlw	0
   976  00043E  6E68               	movwf	3944,c	;volatile
   977                           
   978                           ;main.c: 133: CAP2BUFH=0;
   979  000440  0E00               	movlw	0
   980  000442  6E67               	movwf	3943,c	;volatile
   981                           
   982                           ;main.c: 134: CAP2BUFL=0;
   983  000444  0E00               	movlw	0
   984  000446  6E66               	movwf	3942,c	;volatile
   985                           
   986                           ;main.c: 137: SendLCD(0b00000001,0);
   987  000448  0E00               	movlw	0
   988  00044A  6E28               	movwf	SendLCD@type,c
   989  00044C  0E01               	movlw	1
   990  00044E  ECA6  F00D         	call	_SendLCD
   991                           
   992                           ;main.c: 138: _delay((unsigned long)((50)*(8000000/4000000.0)));
   993  000452  0E21               	movlw	33
   994  000454                     u3207:
   995  000454  2EE8               	decfsz	wreg,f,c
   996  000456  D7FE               	goto	u3207
   997  000458  F000               	nop	
   998                           
   999                           ;main.c: 139: SendLCD(0b00000010,0);
  1000  00045A  0E00               	movlw	0
  1001  00045C  6E28               	movwf	SendLCD@type,c
  1002  00045E  0E02               	movlw	2
  1003  000460  ECA6  F00D         	call	_SendLCD
  1004                           
  1005                           ;main.c: 140: _delay((unsigned long)((2)*(8000000/4000.0)));
  1006  000464  0E06               	movlw	6
  1007  000466  0100               	movlb	0	; () banked
  1008  000468  6FBC               	movwf	??_main& (0+255),b
  1009  00046A  0E30               	movlw	48
  1010  00046C                     u3217:
  1011  00046C  2EE8               	decfsz	wreg,f,c
  1012  00046E  D7FE               	goto	u3217
  1013  000470  2FBC               	decfsz	??_main& (0+255),f,b
  1014  000472  D7FC               	goto	u3217
  1015  000474  D000               	nop2	
  1016                           
  1017                           ;main.c: 141: SetLine(1);
  1018  000476  0E01               	movlw	1
  1019  000478  EC8E  F00D         	call	_SetLine
  1020                           
  1021                           ;main.c: 142: LCD_String("      Inert Mode");
  1022  00047C  0E1C               	movlw	low STR_5
  1023  00047E  6E2A               	movwf	LCD_String@string,c
  1024  000480  0E03               	movlw	high STR_5
  1025  000482  6E2B               	movwf	LCD_String@string+1,c
  1026  000484  EC4E  F00C         	call	_LCD_String	;wreg free
  1027                           
  1028                           ;main.c: 143: SetLine(2);
  1029  000488  0E02               	movlw	2
  1030  00048A  EC8E  F00D         	call	_SetLine
  1031                           
  1032                           ;main.c: 144: if (RFID_Read) {
  1033  00048E  0100               	movlb	0	; () banked
  1034  000490  51FC               	movf	_RFID_Read& (0+255),w,b	;volatile
  1035  000492  B4D8               	btfsc	status,2,c
  1036  000494  D007               	goto	l3566
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 145: LCD_String(Message);
  1040  000496  0EE6               	movlw	low main@Message
  1041  000498  6E2A               	movwf	LCD_String@string,c
  1042  00049A  0E00               	movlw	high main@Message
  1043  00049C  6E2B               	movwf	LCD_String@string+1,c
  1044  00049E  EC4E  F00C         	call	_LCD_String	;wreg free
  1045                           
  1046                           ;main.c: 146: } else {
  1047  0004A2  D26A               	goto	l3704
  1048  0004A4                     l3566:
  1049                           
  1050                           ;main.c: 147: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1051  0004A4  0EBE               	movlw	low main@buf
  1052  0004A6  0100               	movlb	0	; () banked
  1053  0004A8  6F60               	movwf	sprintf@sp& (0+255),b
  1054  0004AA  0E00               	movlw	high main@buf
  1055  0004AC  0100               	movlb	0	; () banked
  1056  0004AE  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1057  0004B0  0E0B               	movlw	low STR_6
  1058  0004B2  0100               	movlb	0	; () banked
  1059  0004B4  6F62               	movwf	sprintf@f& (0+255),b
  1060  0004B6  0E03               	movlw	high STR_6
  1061  0004B8  0100               	movlb	0	; () banked
  1062  0004BA  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1063  0004BC  C0F1  F064         	movff	main@SensorResult,?_sprintf+4
  1064  0004C0  C0F2  F065         	movff	main@SensorResult+1,?_sprintf+5
  1065  0004C4  C0F3  F066         	movff	main@SensorResult+2,?_sprintf+6
  1066  0004C8  C0F4  F067         	movff	main@SensorResult+3,?_sprintf+7
  1067  0004CC  ECDB  F006         	call	_sprintf	;wreg free
  1068                           
  1069                           ;main.c: 148: LCD_String(buf);
  1070  0004D0  0EBE               	movlw	low main@buf
  1071  0004D2  6E2A               	movwf	LCD_String@string,c
  1072  0004D4  0E00               	movlw	high main@buf
  1073  0004D6  6E2B               	movwf	LCD_String@string+1,c
  1074  0004D8  EC4E  F00C         	call	_LCD_String	;wreg free
  1075                           
  1076                           ;main.c: 149: }
  1077                           ;main.c: 152: break;
  1078  0004DC  D24D               	goto	l3704
  1079  0004DE                     l3570:
  1080                           
  1081                           ;main.c: 157: initMotorPWM();
  1082  0004DE  EC75  F00D         	call	_initMotorPWM	;wreg free
  1083                           
  1084                           ;main.c: 158: initTimer();
  1085  0004E2  EC12  F00E         	call	_initTimer	;wreg free
  1086                           
  1087                           ;main.c: 159: initRFID();
  1088  0004E6  EC04  F00E         	call	_initRFID	;wreg free
  1089                           
  1090                           ;main.c: 160: initLCD();
  1091  0004EA  EC6D  F00A         	call	_initLCD	;wreg free
  1092                           
  1093                           ;main.c: 161: initIR();
  1094  0004EE  ECE4  F00D         	call	_initIR	;wreg free
  1095                           
  1096                           ;main.c: 163: enableSensor(0, 1);
  1097  0004F2  0E01               	movlw	1
  1098  0004F4  6E24               	movwf	enableSensor@status,c
  1099  0004F6  0E00               	movlw	0
  1100  0004F8  ECBE  F00D         	call	_enableSensor
  1101                           
  1102                           ;main.c: 164: enableSensor(1, 1);
  1103  0004FC  0E01               	movlw	1
  1104  0004FE  6E24               	movwf	enableSensor@status,c
  1105  000500  0E01               	movlw	1
  1106  000502  ECBE  F00D         	call	_enableSensor
  1107                           
  1108                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1109  000506  0EC8               	movlw	low main@mL
  1110  000508  0100               	movlb	0	; () banked
  1111  00050A  6F65               	movwf	fullSpeedAhead@mL& (0+255),b
  1112  00050C  0E01               	movlw	high main@mL
  1113  00050E  0100               	movlb	0	; () banked
  1114  000510  6F66               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1115  000512  0ED1               	movlw	low main@mR
  1116  000514  0100               	movlb	0	; () banked
  1117  000516  6F67               	movwf	fullSpeedAhead@mR& (0+255),b
  1118  000518  0E01               	movlw	high main@mR
  1119  00051A  0100               	movlb	0	; () banked
  1120  00051C  6F68               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1121  00051E  0E64               	movlw	100
  1122  000520  0100               	movlb	0	; () banked
  1123  000522  6F69               	movwf	fullSpeedAhead@power& (0+255),b
  1124  000524  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  1125                           
  1126                           ;main.c: 168: delay_tenth_s(1);
  1127  000528  0E01               	movlw	1
  1128  00052A  EC24  F00D         	call	_delay_tenth_s
  1129  00052E  D223               	goto	l414
  1130  000530                     l3590:
  1131                           
  1132                           ;main.c: 180: SetLine(1);
  1133  000530  0E01               	movlw	1
  1134  000532  EC8E  F00D         	call	_SetLine
  1135                           
  1136                           ;main.c: 181: LCD_String("Searching");
  1137  000536  0E44               	movlw	low STR_7
  1138  000538  6E2A               	movwf	LCD_String@string,c
  1139  00053A  0E03               	movlw	high STR_7
  1140  00053C  6E2B               	movwf	LCD_String@string+1,c
  1141  00053E  EC4E  F00C         	call	_LCD_String	;wreg free
  1142                           
  1143                           ;main.c: 183: if (DirectionFound==-1) {
  1144  000542  0100               	movlb	0	; () banked
  1145  000544  29F5               	incf	main@DirectionFound& (0+255),w,b
  1146  000546  A4D8               	btfss	status,2,c
  1147  000548  D03E               	goto	l3610
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 188: Move++;
  1151  00054A  0100               	movlb	0	; () banked
  1152  00054C  2BF7               	incf	main@Move& (0+255),f,b
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 189: MoveType[Move]=0;
  1156  00054E  0100               	movlb	0	; () banked
  1157  000550  51F7               	movf	main@Move& (0+255),w,b
  1158  000552  0D01               	mullw	1
  1159  000554  0E00               	movlw	low main@MoveType
  1160  000556  24F3               	addwf	prodl,w,c
  1161  000558  6ED9               	movwf	fsr2l,c
  1162  00055A  0E02               	movlw	high main@MoveType
  1163  00055C  20F4               	addwfc	prodh,w,c
  1164  00055E  6EDA               	movwf	fsr2h,c
  1165  000560  0E00               	movlw	0
  1166  000562  6EDF               	movwf	indf2,c
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 190: MoveTime[Move]=6;
  1170  000564  0100               	movlb	0	; () banked
  1171  000566  51F7               	movf	main@Move& (0+255),w,b
  1172  000568  0D02               	mullw	2
  1173  00056A  0E00               	movlw	low main@MoveTime
  1174  00056C  24F3               	addwf	prodl,w,c
  1175  00056E  6ED9               	movwf	fsr2l,c
  1176  000570  0E01               	movlw	high main@MoveTime
  1177  000572  20F4               	addwfc	prodh,w,c
  1178  000574  6EDA               	movwf	fsr2h,c
  1179  000576  0E06               	movlw	6
  1180  000578  6EDE               	movwf	postinc2,c
  1181  00057A  0E00               	movlw	0
  1182  00057C  6EDD               	movwf	postdec2,c
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 191: fullSpeedAhead(&mL, &mR, 100);
  1186  00057E  0EC8               	movlw	low main@mL
  1187  000580  0100               	movlb	0	; () banked
  1188  000582  6F65               	movwf	fullSpeedAhead@mL& (0+255),b
  1189  000584  0E01               	movlw	high main@mL
  1190  000586  0100               	movlb	0	; () banked
  1191  000588  6F66               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1192  00058A  0ED1               	movlw	low main@mR
  1193  00058C  0100               	movlb	0	; () banked
  1194  00058E  6F67               	movwf	fullSpeedAhead@mR& (0+255),b
  1195  000590  0E01               	movlw	high main@mR
  1196  000592  0100               	movlb	0	; () banked
  1197  000594  6F68               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1198  000596  0E64               	movlw	100
  1199  000598  0100               	movlb	0	; () banked
  1200  00059A  6F69               	movwf	fullSpeedAhead@power& (0+255),b
  1201  00059C  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  1202                           
  1203                           ;main.c: 192: delay_tenth_s(6);
  1204  0005A0  0E06               	movlw	6
  1205  0005A2  EC24  F00D         	call	_delay_tenth_s
  1206                           
  1207                           ;main.c: 193: stop(&mL,&mR);
  1208  0005A6  0EC8               	movlw	low main@mL
  1209  0005A8  0100               	movlb	0	; () banked
  1210  0005AA  6F65               	movwf	stop@mL& (0+255),b
  1211  0005AC  0E01               	movlw	high main@mL
  1212  0005AE  0100               	movlb	0	; () banked
  1213  0005B0  6F66               	movwf	(stop@mL+1)& (0+255),b
  1214  0005B2  0ED1               	movlw	low main@mR
  1215  0005B4  0100               	movlb	0	; () banked
  1216  0005B6  6F67               	movwf	stop@mR& (0+255),b
  1217  0005B8  0E01               	movlw	high main@mR
  1218  0005BA  0100               	movlb	0	; () banked
  1219  0005BC  6F68               	movwf	(stop@mR+1)& (0+255),b
  1220  0005BE  ECCB  F00A         	call	_stop	;wreg free
  1221                           
  1222                           ;main.c: 194: DirectionFound=0;
  1223  0005C2  0E00               	movlw	0
  1224  0005C4  D044               	goto	L1
  1225  0005C6                     l3610:
  1226                           
  1227                           ; BSR set to: 0
  1228  0005C6  0100               	movlb	0	; () banked
  1229  0005C8  51F5               	movf	main@DirectionFound& (0+255),w,b
  1230  0005CA  0100               	movlb	0	; () banked
  1231  0005CC  A4D8               	btfss	status,2,c
  1232  0005CE  D02D               	goto	l3616
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1236                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read);
  1237  0005D0  0EC8               	movlw	low main@mL
  1238  0005D2  0100               	movlb	0	; () banked
  1239  0005D4  6F71               	movwf	ScanWithRange@mL& (0+255),b
  1240  0005D6  0E01               	movlw	high main@mL
  1241  0005D8  0100               	movlb	0	; () banked
  1242  0005DA  6F72               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1243  0005DC  0ED1               	movlw	low main@mR
  1244  0005DE  0100               	movlb	0	; () banked
  1245  0005E0  6F73               	movwf	ScanWithRange@mR& (0+255),b
  1246  0005E2  0E01               	movlw	high main@mR
  1247  0005E4  0100               	movlb	0	; () banked
  1248  0005E6  6F74               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1249  0005E8  C0F0  F075         	movff	main@ScanAngle,ScanWithRange@loops
  1250  0005EC  0100               	movlb	0	; () banked
  1251  0005EE  6B76               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1252  0005F0  0E00               	movlw	low main@MoveTime
  1253  0005F2  0100               	movlb	0	; () banked
  1254  0005F4  6F77               	movwf	ScanWithRange@MoveTime& (0+255),b
  1255  0005F6  0E01               	movlw	high main@MoveTime
  1256  0005F8  0100               	movlb	0	; () banked
  1257  0005FA  6F78               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1258  0005FC  0EF7               	movlw	low main@Move
  1259  0005FE  0100               	movlb	0	; () banked
  1260  000600  6F79               	movwf	ScanWithRange@Move& (0+255),b
  1261  000602  0E00               	movlw	high main@Move
  1262  000604  0100               	movlb	0	; () banked
  1263  000606  6F7A               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1264  000608  0E00               	movlw	low main@MoveType
  1265  00060A  0100               	movlb	0	; () banked
  1266  00060C  6F7B               	movwf	ScanWithRange@MoveType& (0+255),b
  1267  00060E  0E02               	movlw	high main@MoveType
  1268  000610  0100               	movlb	0	; () banked
  1269  000612  6F7C               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1270  000614  0EFC               	movlw	low _RFID_Read
  1271  000616  0100               	movlb	0	; () banked
  1272  000618  6F7D               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1273  00061A  0E00               	movlw	high _RFID_Read
  1274  00061C  0100               	movlb	0	; () banked
  1275  00061E  6F7E               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1276  000620  ECCD  F004         	call	_ScanWithRange	;wreg free
  1277  000624  0100               	movlb	0	; () banked
  1278  000626  6FF5               	movwf	main@DirectionFound& (0+255),b
  1279  000628  D01C               	goto	l3624
  1280  00062A                     l3616:
  1281                           
  1282                           ; BSR set to: 0
  1283  00062A  0100               	movlb	0	; () banked
  1284  00062C  05F5               	decf	main@DirectionFound& (0+255),w,b
  1285  00062E  A4D8               	btfss	status,2,c
  1286  000630  D011               	goto	l3620
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 202: DirectionFound=ScanIR(&mL, &mR);
  1290  000632  0EC8               	movlw	low main@mL
  1291  000634  0100               	movlb	0	; () banked
  1292  000636  6F71               	movwf	ScanIR@mL& (0+255),b
  1293  000638  0E01               	movlw	high main@mL
  1294  00063A  0100               	movlb	0	; () banked
  1295  00063C  6F72               	movwf	(ScanIR@mL+1)& (0+255),b
  1296  00063E  0ED1               	movlw	low main@mR
  1297  000640  0100               	movlb	0	; () banked
  1298  000642  6F73               	movwf	ScanIR@mR& (0+255),b
  1299  000644  0E01               	movlw	high main@mR
  1300  000646  0100               	movlb	0	; () banked
  1301  000648  6F74               	movwf	(ScanIR@mR+1)& (0+255),b
  1302  00064A  EC0B  F009         	call	_ScanIR	;wreg free
  1303  00064E                     L1:
  1304  00064E  0100               	movlb	0	; () banked
  1305  000650  6FF5               	movwf	main@DirectionFound& (0+255),b
  1306                           
  1307                           ;main.c: 203: } else if (DirectionFound==2) {
  1308  000652  D192               	goto	l3704
  1309  000654                     l3620:
  1310                           
  1311                           ; BSR set to: 0
  1312  000654  0E02               	movlw	2
  1313  000656  0100               	movlb	0	; () banked
  1314  000658  19F5               	xorwf	main@DirectionFound& (0+255),w,b
  1315  00065A  A4D8               	btfss	status,2,c
  1316  00065C  D18D               	goto	l3704
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;main.c: 205: mode=2;
  1320  00065E  0E02               	movlw	2
  1321  000660  6E3B               	movwf	_mode,c	;volatile
  1322  000662                     l3624:
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 206: MoveType[Move]=1;
  1326  000662  0100               	movlb	0	; () banked
  1327  000664  51F7               	movf	main@Move& (0+255),w,b
  1328  000666  0D01               	mullw	1
  1329  000668  0E00               	movlw	low main@MoveType
  1330  00066A  24F3               	addwf	prodl,w,c
  1331  00066C  6ED9               	movwf	fsr2l,c
  1332  00066E  0E02               	movlw	high main@MoveType
  1333  000670  20F4               	addwfc	prodh,w,c
  1334  000672  6EDA               	movwf	fsr2h,c
  1335  000674  0E01               	movlw	1
  1336  000676  6EDF               	movwf	indf2,c
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 207: }
  1340                           ;main.c: 209: break;
  1341                           
  1342                           ; BSR set to: 0
  1343                           
  1344                           ; BSR set to: 0
  1345                           
  1346                           ; BSR set to: 0
  1347  000678  D17F               	goto	l3704
  1348  00067A                     l3626:
  1349                           
  1350                           ;main.c: 216: if (RFID_Read) {
  1351  00067A  0100               	movlb	0	; () banked
  1352  00067C  51FC               	movf	_RFID_Read& (0+255),w,b	;volatile
  1353  00067E  B4D8               	btfsc	status,2,c
  1354  000680  D0A2               	goto	l3668
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 217: stop(&mL, &mR);
  1358  000682  0EC8               	movlw	low main@mL
  1359  000684  0100               	movlb	0	; () banked
  1360  000686  6F65               	movwf	stop@mL& (0+255),b
  1361  000688  0E01               	movlw	high main@mL
  1362  00068A  0100               	movlb	0	; () banked
  1363  00068C  6F66               	movwf	(stop@mL+1)& (0+255),b
  1364  00068E  0ED1               	movlw	low main@mR
  1365  000690  0100               	movlb	0	; () banked
  1366  000692  6F67               	movwf	stop@mR& (0+255),b
  1367  000694  0E01               	movlw	high main@mR
  1368  000696  0100               	movlb	0	; () banked
  1369  000698  6F68               	movwf	(stop@mR+1)& (0+255),b
  1370  00069A  ECCB  F00A         	call	_stop	;wreg free
  1371                           
  1372                           ;main.c: 218: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1373  00069E  0E03               	movlw	3
  1374  0006A0  0101               	movlb	1	; () banked
  1375  0006A2  19ED               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1376  0006A4  A4D8               	btfss	status,2,c
  1377  0006A6  D002               	goto	u3090
  1378  0006A8  0E01               	movlw	1
  1379  0006AA  D001               	goto	u3092
  1380  0006AC                     u3090:
  1381  0006AC  0E00               	movlw	0
  1382  0006AE                     u3092:
  1383  0006AE  0100               	movlb	0	; () banked
  1384  0006B0  6FBC               	movwf	??_main& (0+255),b
  1385  0006B2  0E02               	movlw	2
  1386  0006B4  0101               	movlb	1	; () banked
  1387  0006B6  19DE               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1388  0006B8  A4D8               	btfss	status,2,c
  1389  0006BA  D002               	goto	u3100
  1390  0006BC  0E01               	movlw	1
  1391  0006BE  D001               	goto	u3102
  1392  0006C0                     u3100:
  1393  0006C0  0E00               	movlw	0
  1394  0006C2                     u3102:
  1395  0006C2  0100               	movlb	0	; () banked
  1396  0006C4  15BC               	andwf	??_main& (0+255),w,b
  1397  0006C6  A0E8               	btfss	wreg,0,c
  1398  0006C8  D157               	goto	l3704
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 219: if (VerifySignal(ReceivedString)){
  1402  0006CA  0EDE               	movlw	low _ReceivedString
  1403  0006CC  6E24               	movwf	VerifySignal@Signal,c
  1404  0006CE  0E01               	movlw	high _ReceivedString
  1405  0006D0  6E25               	movwf	VerifySignal@Signal+1,c
  1406  0006D2  EC8D  F009         	call	_VerifySignal	;wreg free
  1407  0006D6  0900               	iorlw	0
  1408  0006D8  B4D8               	btfsc	status,2,c
  1409  0006DA  D041               	goto	l3660
  1410                           
  1411                           ;main.c: 221: for (i=0; i<10; i++){
  1412  0006DC  0E00               	movlw	0
  1413  0006DE  0100               	movlb	0	; () banked
  1414  0006E0  6FF6               	movwf	main@i& (0+255),b
  1415  0006E2                     l3636:
  1416                           
  1417                           ; BSR set to: 0
  1418  0006E2  0E09               	movlw	9
  1419  0006E4  0100               	movlb	0	; () banked
  1420  0006E6  65F6               	cpfsgt	main@i& (0+255),b
  1421  0006E8  D001               	goto	l3640
  1422  0006EA  D020               	goto	l3646
  1423  0006EC                     l3640:
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 222: Message[i] = ReceivedString[i+1];
  1427  0006EC  0100               	movlb	0	; () banked
  1428  0006EE  51F6               	movf	main@i& (0+255),w,b
  1429  0006F0  0100               	movlb	0	; () banked
  1430  0006F2  6FBC               	movwf	??_main& (0+255),b
  1431  0006F4  6BBD               	clrf	(??_main+1)& (0+255),b
  1432  0006F6  0E01               	movlw	1
  1433  0006F8  0100               	movlb	0	; () banked
  1434  0006FA  27BC               	addwf	??_main& (0+255),f,b
  1435  0006FC  0E00               	movlw	0
  1436  0006FE  23BD               	addwfc	(??_main+1)& (0+255),f,b
  1437  000700  0EDE               	movlw	low _ReceivedString
  1438  000702  0100               	movlb	0	; () banked
  1439  000704  25BC               	addwf	??_main& (0+255),w,b
  1440  000706  6ED9               	movwf	fsr2l,c
  1441  000708  0E01               	movlw	high _ReceivedString
  1442  00070A  0100               	movlb	0	; () banked
  1443  00070C  21BD               	addwfc	(??_main+1)& (0+255),w,b
  1444  00070E  6EDA               	movwf	fsr2h,c
  1445  000710  0100               	movlb	0	; () banked
  1446  000712  51F6               	movf	main@i& (0+255),w,b
  1447  000714  0D01               	mullw	1
  1448  000716  0EE6               	movlw	low main@Message
  1449  000718  24F3               	addwf	prodl,w,c
  1450  00071A  6EE1               	movwf	fsr1l,c
  1451  00071C  0E00               	movlw	high main@Message
  1452  00071E  20F4               	addwfc	prodh,w,c
  1453  000720  6EE2               	movwf	fsr1h,c
  1454  000722  CFDF FFE7          	movff	indf2,indf1
  1455                           
  1456                           ; BSR set to: 0
  1457  000726  0100               	movlb	0	; () banked
  1458  000728  2BF6               	incf	main@i& (0+255),f,b
  1459  00072A  D7DB               	goto	l3636
  1460  00072C                     l3646:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;main.c: 223: }
  1464                           ;main.c: 226: for (i=0; i<16; i++) {
  1465  00072C  0E00               	movlw	0
  1466  00072E  0100               	movlb	0	; () banked
  1467  000730  6FF6               	movwf	main@i& (0+255),b
  1468  000732                     l3648:
  1469                           
  1470                           ; BSR set to: 0
  1471  000732  0E0F               	movlw	15
  1472  000734  0100               	movlb	0	; () banked
  1473  000736  65F6               	cpfsgt	main@i& (0+255),b
  1474  000738  D001               	goto	l3652
  1475  00073A  D00E               	goto	l3658
  1476  00073C                     l3652:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 227: ReceivedString[i]=0;
  1480  00073C  0100               	movlb	0	; () banked
  1481  00073E  51F6               	movf	main@i& (0+255),w,b
  1482  000740  0D01               	mullw	1
  1483  000742  0EDE               	movlw	low _ReceivedString
  1484  000744  24F3               	addwf	prodl,w,c
  1485  000746  6ED9               	movwf	fsr2l,c
  1486  000748  0E01               	movlw	high _ReceivedString
  1487  00074A  20F4               	addwfc	prodh,w,c
  1488  00074C  6EDA               	movwf	fsr2h,c
  1489  00074E  0E00               	movlw	0
  1490  000750  6EDF               	movwf	indf2,c
  1491                           
  1492                           ; BSR set to: 0
  1493  000752  0100               	movlb	0	; () banked
  1494  000754  2BF6               	incf	main@i& (0+255),f,b
  1495  000756  D7ED               	goto	l3648
  1496  000758                     l3658:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 228: }
  1500                           ;main.c: 229: mode=3;
  1501  000758  0E03               	movlw	3
  1502  00075A  6E3B               	movwf	_mode,c	;volatile
  1503                           
  1504                           ;main.c: 231: } else {
  1505  00075C  D10D               	goto	l3704
  1506  00075E                     l3660:
  1507                           
  1508                           ;main.c: 232: fullSpeedBack(&mL,&mR, 100);
  1509  00075E  0EC8               	movlw	low main@mL
  1510  000760  0100               	movlb	0	; () banked
  1511  000762  6F6B               	movwf	fullSpeedBack@mL& (0+255),b
  1512  000764  0E01               	movlw	high main@mL
  1513  000766  0100               	movlb	0	; () banked
  1514  000768  6F6C               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1515  00076A  0ED1               	movlw	low main@mR
  1516  00076C  0100               	movlb	0	; () banked
  1517  00076E  6F6D               	movwf	fullSpeedBack@mR& (0+255),b
  1518  000770  0E01               	movlw	high main@mR
  1519  000772  0100               	movlb	0	; () banked
  1520  000774  6F6E               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1521  000776  0E64               	movlw	100
  1522  000778  0100               	movlb	0	; () banked
  1523  00077A  6F6F               	movwf	fullSpeedBack@power& (0+255),b
  1524  00077C  ECC7  F00C         	call	_fullSpeedBack	;wreg free
  1525                           
  1526                           ;main.c: 233: delay_tenth_s(5);
  1527  000780  0E05               	movlw	5
  1528  000782  EC24  F00D         	call	_delay_tenth_s
  1529                           
  1530                           ;main.c: 234: stop(&mL,&mR);
  1531  000786  0EC8               	movlw	low main@mL
  1532  000788  0100               	movlb	0	; () banked
  1533  00078A  6F65               	movwf	stop@mL& (0+255),b
  1534  00078C  0E01               	movlw	high main@mL
  1535  00078E  0100               	movlb	0	; () banked
  1536  000790  6F66               	movwf	(stop@mL+1)& (0+255),b
  1537  000792  0ED1               	movlw	low main@mR
  1538  000794  0100               	movlb	0	; () banked
  1539  000796  6F67               	movwf	stop@mR& (0+255),b
  1540  000798  0E01               	movlw	high main@mR
  1541  00079A  0100               	movlb	0	; () banked
  1542  00079C  6F68               	movwf	(stop@mR+1)& (0+255),b
  1543  00079E  ECCB  F00A         	call	_stop	;wreg free
  1544                           
  1545                           ;main.c: 235: fullSpeedAhead(&mL,&mR, 100);
  1546  0007A2  0EC8               	movlw	low main@mL
  1547  0007A4  0100               	movlb	0	; () banked
  1548  0007A6  6F65               	movwf	fullSpeedAhead@mL& (0+255),b
  1549  0007A8  0E01               	movlw	high main@mL
  1550  0007AA  0100               	movlb	0	; () banked
  1551  0007AC  6F66               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1552  0007AE  0ED1               	movlw	low main@mR
  1553  0007B0  0100               	movlb	0	; () banked
  1554  0007B2  6F67               	movwf	fullSpeedAhead@mR& (0+255),b
  1555  0007B4  0E01               	movlw	high main@mR
  1556  0007B6  0100               	movlb	0	; () banked
  1557  0007B8  6F68               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1558  0007BA  0E64               	movlw	100
  1559  0007BC  0100               	movlb	0	; () banked
  1560  0007BE  6F69               	movwf	fullSpeedAhead@power& (0+255),b
  1561  0007C0  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  1562                           
  1563                           ;main.c: 236: }
  1564                           ;main.c: 237: }
  1565                           ;main.c: 238: } else {
  1566  0007C4  D0D9               	goto	l3704
  1567  0007C6                     l3668:
  1568                           
  1569                           ;main.c: 239: DirectionFound=1;
  1570  0007C6  0E01               	movlw	1
  1571  0007C8  0100               	movlb	0	; () banked
  1572  0007CA  6FF5               	movwf	main@DirectionFound& (0+255),b
  1573                           
  1574                           ;main.c: 240: mode=1;
  1575  0007CC  0E01               	movlw	1
  1576  0007CE  6E3B               	movwf	_mode,c	;volatile
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;main.c: 242: fullSpeedAhead(&mL,&mR, 100);
  1580  0007D0  0EC8               	movlw	low main@mL
  1581  0007D2  0100               	movlb	0	; () banked
  1582  0007D4  6F65               	movwf	fullSpeedAhead@mL& (0+255),b
  1583  0007D6  0E01               	movlw	high main@mL
  1584  0007D8  0100               	movlb	0	; () banked
  1585  0007DA  6F66               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1586  0007DC  0ED1               	movlw	low main@mR
  1587  0007DE  0100               	movlb	0	; () banked
  1588  0007E0  6F67               	movwf	fullSpeedAhead@mR& (0+255),b
  1589  0007E2  0E01               	movlw	high main@mR
  1590  0007E4  0100               	movlb	0	; () banked
  1591  0007E6  6F68               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1592  0007E8  0E64               	movlw	100
  1593  0007EA  0100               	movlb	0	; () banked
  1594  0007EC  6F69               	movwf	fullSpeedAhead@power& (0+255),b
  1595  0007EE  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  1596                           
  1597                           ;main.c: 243: delay_tenth_s(5);
  1598  0007F2  0E05               	movlw	5
  1599  0007F4  EC24  F00D         	call	_delay_tenth_s
  1600                           
  1601                           ;main.c: 244: MoveType[Move] = 0;
  1602  0007F8  0100               	movlb	0	; () banked
  1603  0007FA  51F7               	movf	main@Move& (0+255),w,b
  1604  0007FC  0D01               	mullw	1
  1605  0007FE  0E00               	movlw	low main@MoveType
  1606  000800  24F3               	addwf	prodl,w,c
  1607  000802  6ED9               	movwf	fsr2l,c
  1608  000804  0E02               	movlw	high main@MoveType
  1609  000806  20F4               	addwfc	prodh,w,c
  1610  000808  6EDA               	movwf	fsr2h,c
  1611  00080A  0E00               	movlw	0
  1612  00080C  6EDF               	movwf	indf2,c
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 245: MoveTime[Move] = 5;
  1616  00080E  0100               	movlb	0	; () banked
  1617  000810  51F7               	movf	main@Move& (0+255),w,b
  1618  000812  0D02               	mullw	2
  1619  000814  0E00               	movlw	low main@MoveTime
  1620  000816  24F3               	addwf	prodl,w,c
  1621  000818  6ED9               	movwf	fsr2l,c
  1622  00081A  0E01               	movlw	high main@MoveTime
  1623  00081C  20F4               	addwfc	prodh,w,c
  1624  00081E  6EDA               	movwf	fsr2h,c
  1625  000820  0E05               	movlw	5
  1626  000822  6EDE               	movwf	postinc2,c
  1627  000824  0E00               	movlw	0
  1628  000826  6EDD               	movwf	postdec2,c
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 246: }
  1632                           ;main.c: 248: break;
  1633  000828  D0A7               	goto	l3704
  1634  00082A                     l3678:
  1635                           
  1636                           ;main.c: 253: SetLine(1);
  1637  00082A  0E01               	movlw	1
  1638  00082C  EC8E  F00D         	call	_SetLine
  1639                           
  1640                           ;main.c: 254: LCD_String(Message);
  1641  000830  0EE6               	movlw	low main@Message
  1642  000832  6E2A               	movwf	LCD_String@string,c
  1643  000834  0E00               	movlw	high main@Message
  1644  000836  6E2B               	movwf	LCD_String@string+1,c
  1645  000838  EC4E  F00C         	call	_LCD_String	;wreg free
  1646                           
  1647                           ;main.c: 255: SetLine(2);
  1648  00083C  0E02               	movlw	2
  1649  00083E  EC8E  F00D         	call	_SetLine
  1650                           
  1651                           ;main.c: 256: LCD_String("Going Home");
  1652  000842  0E39               	movlw	low STR_8
  1653  000844  6E2A               	movwf	LCD_String@string,c
  1654  000846  0E03               	movlw	high STR_8
  1655  000848  6E2B               	movwf	LCD_String@string+1,c
  1656  00084A  EC4E  F00C         	call	_LCD_String	;wreg free
  1657                           
  1658                           ;main.c: 257: stop(&mL,&mR);
  1659  00084E  0EC8               	movlw	low main@mL
  1660  000850  0100               	movlb	0	; () banked
  1661  000852  6F65               	movwf	stop@mL& (0+255),b
  1662  000854  0E01               	movlw	high main@mL
  1663  000856  0100               	movlb	0	; () banked
  1664  000858  6F66               	movwf	(stop@mL+1)& (0+255),b
  1665  00085A  0ED1               	movlw	low main@mR
  1666  00085C  0100               	movlb	0	; () banked
  1667  00085E  6F67               	movwf	stop@mR& (0+255),b
  1668  000860  0E01               	movlw	high main@mR
  1669  000862  0100               	movlb	0	; () banked
  1670  000864  6F68               	movwf	(stop@mR+1)& (0+255),b
  1671  000866  ECCB  F00A         	call	_stop	;wreg free
  1672  00086A                     l3688:
  1673                           
  1674                           ;main.c: 260: if (MoveType[Move]==0) {
  1675  00086A  0100               	movlb	0	; () banked
  1676  00086C  51F7               	movf	main@Move& (0+255),w,b
  1677  00086E  0D01               	mullw	1
  1678  000870  0E00               	movlw	low main@MoveType
  1679  000872  24F3               	addwf	prodl,w,c
  1680  000874  6ED9               	movwf	fsr2l,c
  1681  000876  0E02               	movlw	high main@MoveType
  1682  000878  20F4               	addwfc	prodh,w,c
  1683  00087A  6EDA               	movwf	fsr2h,c
  1684  00087C  50DF               	movf	indf2,w,c
  1685  00087E  A4D8               	btfss	status,2,c
  1686  000880  D01E               	goto	l3692
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1690  000882  0EC8               	movlw	low main@mL
  1691  000884  0100               	movlb	0	; () banked
  1692  000886  6F6B               	movwf	fullSpeedBack@mL& (0+255),b
  1693  000888  0E01               	movlw	high main@mL
  1694  00088A  0100               	movlb	0	; () banked
  1695  00088C  6F6C               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1696  00088E  0ED1               	movlw	low main@mR
  1697  000890  0100               	movlb	0	; () banked
  1698  000892  6F6D               	movwf	fullSpeedBack@mR& (0+255),b
  1699  000894  0E01               	movlw	high main@mR
  1700  000896  0100               	movlb	0	; () banked
  1701  000898  6F6E               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1702  00089A  0E64               	movlw	100
  1703  00089C  0100               	movlb	0	; () banked
  1704  00089E  6F6F               	movwf	fullSpeedBack@power& (0+255),b
  1705  0008A0  ECC7  F00C         	call	_fullSpeedBack	;wreg free
  1706                           
  1707                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1708  0008A4  0100               	movlb	0	; () banked
  1709  0008A6  51F7               	movf	main@Move& (0+255),w,b
  1710  0008A8  0D02               	mullw	2
  1711  0008AA  0E00               	movlw	low main@MoveTime
  1712  0008AC  24F3               	addwf	prodl,w,c
  1713  0008AE  6ED9               	movwf	fsr2l,c
  1714  0008B0  0E01               	movlw	high main@MoveTime
  1715  0008B2  20F4               	addwfc	prodh,w,c
  1716  0008B4  6EDA               	movwf	fsr2h,c
  1717  0008B6  50DF               	movf	indf2,w,c
  1718  0008B8  EC24  F00D         	call	_delay_tenth_s
  1719                           
  1720                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1721  0008BC  D059               	goto	l3700
  1722  0008BE                     l3692:
  1723  0008BE  0100               	movlb	0	; () banked
  1724  0008C0  51F7               	movf	main@Move& (0+255),w,b
  1725  0008C2  0D01               	mullw	1
  1726  0008C4  0E00               	movlw	low main@MoveType
  1727  0008C6  24F3               	addwf	prodl,w,c
  1728  0008C8  6ED9               	movwf	fsr2l,c
  1729  0008CA  0E02               	movlw	high main@MoveType
  1730  0008CC  20F4               	addwfc	prodh,w,c
  1731  0008CE  6EDA               	movwf	fsr2h,c
  1732  0008D0  04DE               	decf	postinc2,w,c
  1733  0008D2  A4D8               	btfss	status,2,c
  1734  0008D4  D04D               	goto	l3700
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 264: if (MoveTime[Move]>0) {
  1738  0008D6  0100               	movlb	0	; () banked
  1739  0008D8  51F7               	movf	main@Move& (0+255),w,b
  1740  0008DA  0D02               	mullw	2
  1741  0008DC  0E00               	movlw	low main@MoveTime
  1742  0008DE  24F3               	addwf	prodl,w,c
  1743  0008E0  6ED9               	movwf	fsr2l,c
  1744  0008E2  0E01               	movlw	high main@MoveTime
  1745  0008E4  20F4               	addwfc	prodh,w,c
  1746  0008E6  6EDA               	movwf	fsr2h,c
  1747  0008E8  0E01               	movlw	1
  1748  0008EA  BEDB               	btfsc	plusw2,7,c
  1749  0008EC  D024               	goto	l3698
  1750  0008EE  0E01               	movlw	1
  1751  0008F0  50DB               	movf	plusw2,w,c
  1752  0008F2  E103               	bnz	u3190
  1753  0008F4  04DE               	decf	postinc2,w,c
  1754  0008F6  A0D8               	btfss	status,0,c
  1755  0008F8  D01E               	goto	l3698
  1756  0008FA                     u3190:
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 265: turnRight(&mL,&mR,100);
  1760  0008FA  0EC8               	movlw	low main@mL
  1761  0008FC  0100               	movlb	0	; () banked
  1762  0008FE  6F6B               	movwf	turnRight@mL& (0+255),b
  1763  000900  0E01               	movlw	high main@mL
  1764  000902  0100               	movlb	0	; () banked
  1765  000904  6F6C               	movwf	(turnRight@mL+1)& (0+255),b
  1766  000906  0ED1               	movlw	low main@mR
  1767  000908  0100               	movlb	0	; () banked
  1768  00090A  6F6D               	movwf	turnRight@mR& (0+255),b
  1769  00090C  0E01               	movlw	high main@mR
  1770  00090E  0100               	movlb	0	; () banked
  1771  000910  6F6E               	movwf	(turnRight@mR+1)& (0+255),b
  1772  000912  0E64               	movlw	100
  1773  000914  0100               	movlb	0	; () banked
  1774  000916  6F6F               	movwf	turnRight@power& (0+255),b
  1775  000918  ECE6  F00C         	call	_turnRight	;wreg free
  1776                           
  1777                           ;main.c: 266: delay_tenth_s(MoveTime[Move]);
  1778  00091C  0100               	movlb	0	; () banked
  1779  00091E  51F7               	movf	main@Move& (0+255),w,b
  1780  000920  0D02               	mullw	2
  1781  000922  0E00               	movlw	low main@MoveTime
  1782  000924  24F3               	addwf	prodl,w,c
  1783  000926  6ED9               	movwf	fsr2l,c
  1784  000928  0E01               	movlw	high main@MoveTime
  1785  00092A  20F4               	addwfc	prodh,w,c
  1786  00092C  6EDA               	movwf	fsr2h,c
  1787  00092E  50DF               	movf	indf2,w,c
  1788  000930  EC24  F00D         	call	_delay_tenth_s
  1789                           
  1790                           ;main.c: 267: } else {
  1791  000934  D01D               	goto	l3700
  1792  000936                     l3698:
  1793                           
  1794                           ;main.c: 268: turnLeft(&mL,&mR,100);
  1795  000936  0EC8               	movlw	low main@mL
  1796  000938  0100               	movlb	0	; () banked
  1797  00093A  6F6B               	movwf	turnLeft@mL& (0+255),b
  1798  00093C  0E01               	movlw	high main@mL
  1799  00093E  0100               	movlb	0	; () banked
  1800  000940  6F6C               	movwf	(turnLeft@mL+1)& (0+255),b
  1801  000942  0ED1               	movlw	low main@mR
  1802  000944  0100               	movlb	0	; () banked
  1803  000946  6F6D               	movwf	turnLeft@mR& (0+255),b
  1804  000948  0E01               	movlw	high main@mR
  1805  00094A  0100               	movlb	0	; () banked
  1806  00094C  6F6E               	movwf	(turnLeft@mR+1)& (0+255),b
  1807  00094E  0E64               	movlw	100
  1808  000950  0100               	movlb	0	; () banked
  1809  000952  6F6F               	movwf	turnLeft@power& (0+255),b
  1810  000954  EC05  F00D         	call	_turnLeft	;wreg free
  1811                           
  1812                           ;main.c: 269: delay_tenth_s(MoveTime[Move]);
  1813  000958  0100               	movlb	0	; () banked
  1814  00095A  51F7               	movf	main@Move& (0+255),w,b
  1815  00095C  0D02               	mullw	2
  1816  00095E  0E00               	movlw	low main@MoveTime
  1817  000960  24F3               	addwf	prodl,w,c
  1818  000962  6ED9               	movwf	fsr2l,c
  1819  000964  0E01               	movlw	high main@MoveTime
  1820  000966  20F4               	addwfc	prodh,w,c
  1821  000968  6EDA               	movwf	fsr2h,c
  1822  00096A  50DF               	movf	indf2,w,c
  1823  00096C  EC24  F00D         	call	_delay_tenth_s
  1824  000970                     l3700:
  1825  000970  0100               	movlb	0	; () banked
  1826  000972  07F7               	decf	main@Move& (0+255),f,b
  1827  000974  D77A               	goto	l3688
  1828  000976                     l414:
  1829                           
  1830                           ;main.c: 270: }
  1831                           ;main.c: 271: }
  1832                           ;main.c: 272: }
  1833                           ;main.c: 273: mode=-1;
  1834  000976  683B               	setf	_mode,c	;volatile
  1835  000978                     l3704:
  1836  000978  503B               	movf	_mode,w,c	;volatile
  1837                           
  1838                           ; Switch size 1, requested type "space"
  1839                           ; Number of cases is 5, Range of values is 0 to 255
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte           16     9 (average)
  1843                           ;	Chosen strategy is simple_byte
  1844  00097A  0A00               	xorlw	0	; case 0
  1845  00097C  B4D8               	btfsc	status,2,c
  1846  00097E  D5AF               	goto	l3570
  1847  000980  0A01               	xorlw	1	; case 1
  1848  000982  B4D8               	btfsc	status,2,c
  1849  000984  D5D5               	goto	l3590
  1850  000986  0A03               	xorlw	3	; case 2
  1851  000988  B4D8               	btfsc	status,2,c
  1852  00098A  D677               	goto	l3626
  1853  00098C  0A01               	xorlw	1	; case 3
  1854  00098E  B4D8               	btfsc	status,2,c
  1855  000990  D74C               	goto	l3678
  1856  000992  0AFC               	xorlw	252	; case 255
  1857  000994  B4D8               	btfsc	status,2,c
  1858  000996  D533               	goto	l3532
  1859  000998  D7EF               	goto	l3704
  1860  00099A                     __end_of_main:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           indf1	equ	0xFE7
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _initTimer *****************
  1880 ;; Defined at:
  1881 ;;		line 8 in file "Movement.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		None
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1895 ;;      Params:         0       0       0       0
  1896 ;;      Locals:         0       0       0       0
  1897 ;;      Temps:          0       0       0       0
  1898 ;;      Totals:         0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    3
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text1
  1910  001C24                     __ptext1:
  1911                           	opt stack 0
  1912  001C24                     _initTimer:
  1913                           	opt stack 27
  1914                           
  1915                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1916                           
  1917                           ;incstack = 0
  1918  001C24  9ED5               	bcf	4053,7,c	;volatile
  1919                           
  1920                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1921  001C26  9CD5               	bcf	4053,6,c	;volatile
  1922                           
  1923                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1924  001C28  9AD5               	bcf	4053,5,c	;volatile
  1925                           
  1926                           ;Movement.c: 13: T0CONbits.PSA=0;
  1927  001C2A  96D5               	bcf	4053,3,c	;volatile
  1928                           
  1929                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1930  001C2C  80D5               	bsf	4053,0,c	;volatile
  1931  001C2E  82D5               	bsf	4053,1,c	;volatile
  1932  001C30  84D5               	bsf	4053,2,c	;volatile
  1933                           
  1934                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1935  001C32  9AF2               	bcf	intcon,5,c	;volatile
  1936  001C34  0012               	return		;funcret
  1937  001C36                     __end_of_initTimer:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           prodh	equ	0xFF4
  1941                           prodl	equ	0xFF3
  1942                           intcon	equ	0xFF2
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           indf1	equ	0xFE7
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           postinc2	equ	0xFDE
  1950                           postdec2	equ	0xFDD
  1951                           plusw2	equ	0xFDB
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _initRFID *****************
  1957 ;; Defined at:
  1958 ;;		line 5 in file "RFID_Reader.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1972 ;;      Params:         0       0       0       0
  1973 ;;      Locals:         0       0       0       0
  1974 ;;      Temps:          0       0       0       0
  1975 ;;      Totals:         0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    3
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text2
  1987  001C08                     __ptext2:
  1988                           	opt stack 0
  1989  001C08                     _initRFID:
  1990                           	opt stack 27
  1991                           
  1992                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1993                           
  1994                           ;incstack = 0
  1995  001C08  5094               	movf	3988,w,c	;volatile
  1996  001C0A  09C0               	iorlw	192
  1997  001C0C  6E94               	movwf	3988,c	;volatile
  1998                           
  1999                           ;RFID_Reader.c: 10: SPBRG=205;
  2000  001C0E  0ECD               	movlw	205
  2001  001C10  6EAF               	movwf	4015,c	;volatile
  2002                           
  2003                           ;RFID_Reader.c: 11: SPBRGH=0;
  2004  001C12  0E00               	movlw	0
  2005  001C14  6EB0               	movwf	4016,c	;volatile
  2006                           
  2007                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  2008  001C16  86AA               	bsf	4010,3,c	;volatile
  2009                           
  2010                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  2011  001C18  84AC               	bsf	4012,2,c	;volatile
  2012                           
  2013                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  2014  001C1A  88AB               	bsf	4011,4,c	;volatile
  2015                           
  2016                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  2017  001C1C  8EAB               	bsf	4011,7,c	;volatile
  2018                           
  2019                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  2020  001C1E  98AC               	bcf	4012,4,c	;volatile
  2021                           
  2022                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  2023  001C20  9CAB               	bcf	4011,6,c	;volatile
  2024  001C22  0012               	return		;funcret
  2025  001C24                     __end_of_initRFID:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           intcon	equ	0xFF2
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           indf1	equ	0xFE7
  2034                           fsr1h	equ	0xFE2
  2035                           fsr1l	equ	0xFE1
  2036                           indf2	equ	0xFDF
  2037                           postinc2	equ	0xFDE
  2038                           postdec2	equ	0xFDD
  2039                           plusw2	equ	0xFDB
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _initMotorPWM *****************
  2045 ;; Defined at:
  2046 ;;		line 4 in file "dc_motor.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, status,2
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2060 ;;      Params:         0       0       0       0
  2061 ;;      Locals:         0       0       0       0
  2062 ;;      Temps:          0       0       0       0
  2063 ;;      Totals:         0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    3
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text3
  2075  001AEA                     __ptext3:
  2076                           	opt stack 0
  2077  001AEA                     _initMotorPWM:
  2078                           	opt stack 27
  2079                           
  2080                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2081                           
  2082                           ;incstack = 0
  2083  001AEA  0E00               	movlw	0
  2084  001AEC  6E7F               	movwf	3967,c	;volatile
  2085                           
  2086                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2087  001AEE  0E80               	movlw	128
  2088  001AF0  6E7E               	movwf	3966,c	;volatile
  2089                           
  2090                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2091  001AF2  0E6F               	movlw	111
  2092  001AF4  6E6F               	movwf	3951,c	;volatile
  2093                           
  2094                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2095  001AF6  0E00               	movlw	0
  2096  001AF8  6E6E               	movwf	3950,c	;volatile
  2097                           
  2098                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2099  001AFA  0EC7               	movlw	199
  2100  001AFC  6E7B               	movwf	3963,c	;volatile
  2101                           
  2102                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2103  001AFE  0E00               	movlw	0
  2104  001B00  6E7A               	movwf	3962,c	;volatile
  2105                           
  2106                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2107  001B02  0E00               	movlw	0
  2108  001B04  6E79               	movwf	3961,c	;volatile
  2109                           
  2110                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2111  001B06  0E00               	movlw	0
  2112  001B08  6E78               	movwf	3960,c	;volatile
  2113                           
  2114                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2115  001B0A  0E00               	movlw	0
  2116  001B0C  6E77               	movwf	3959,c	;volatile
  2117                           
  2118                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2119  001B0E  0E00               	movlw	0
  2120  001B10  6E76               	movwf	3958,c	;volatile
  2121                           
  2122                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2123  001B12  9093               	bcf	3987,0,c	;volatile
  2124                           
  2125                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2126  001B14  9293               	bcf	3987,1,c	;volatile
  2127                           
  2128                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2129  001B16  9493               	bcf	3987,2,c	;volatile
  2130                           
  2131                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2132  001B18  9693               	bcf	3987,3,c	;volatile
  2133  001B1A  0012               	return		;funcret
  2134  001B1C                     __end_of_initMotorPWM:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           postinc0	equ	0xFEE
  2141                           wreg	equ	0xFE8
  2142                           indf1	equ	0xFE7
  2143                           fsr1h	equ	0xFE2
  2144                           fsr1l	equ	0xFE1
  2145                           indf2	equ	0xFDF
  2146                           postinc2	equ	0xFDE
  2147                           postdec2	equ	0xFDD
  2148                           plusw2	equ	0xFDB
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _initLCD *****************
  2154 ;; Defined at:
  2155 ;;		line 38 in file "LCD.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;		None               void
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2169 ;;      Params:         0       0       0       0
  2170 ;;      Locals:         0       0       0       0
  2171 ;;      Temps:          1       0       0       0
  2172 ;;      Totals:         1       0       0       0
  2173 ;;Total ram usage:        1 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    6
  2176 ;; This function calls:
  2177 ;;		_LCDout
  2178 ;;		_SendLCD
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text4
  2185  0014DA                     __ptext4:
  2186                           	opt stack 0
  2187  0014DA                     _initLCD:
  2188                           	opt stack 24
  2189                           
  2190                           ;LCD.c: 44: TRISAbits.RA6=0;
  2191                           
  2192                           ;incstack = 0
  2193  0014DA  9C92               	bcf	3986,6,c	;volatile
  2194                           
  2195                           ;LCD.c: 45: TRISCbits.RC0=0;
  2196  0014DC  9094               	bcf	3988,0,c	;volatile
  2197                           
  2198                           ;LCD.c: 46: TRISCbits.RC1=0;
  2199  0014DE  9294               	bcf	3988,1,c	;volatile
  2200                           
  2201                           ;LCD.c: 47: TRISCbits.RC2=0;
  2202  0014E0  9494               	bcf	3988,2,c	;volatile
  2203                           
  2204                           ;LCD.c: 48: TRISDbits.RD0=0;
  2205  0014E2  9095               	bcf	3989,0,c	;volatile
  2206                           
  2207                           ;LCD.c: 49: TRISDbits.RD1=0;
  2208  0014E4  9295               	bcf	3989,1,c	;volatile
  2209                           
  2210                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2211  0014E6  0E27               	movlw	39
  2212  0014E8  6E2A               	movwf	??_initLCD& (0+255),c
  2213  0014EA  0EF5               	movlw	245
  2214  0014EC                     u3227:
  2215  0014EC  2EE8               	decfsz	wreg,f,c
  2216  0014EE  D7FE               	goto	u3227
  2217  0014F0  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2218  0014F2  D7FC               	goto	u3227
  2219  0014F4  F000               	nop	
  2220                           
  2221                           ;LCD.c: 52: LCDout(0b0011);
  2222  0014F6  0E03               	movlw	3
  2223  0014F8  EC0A  F00A         	call	_LCDout
  2224                           
  2225                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2226  0014FC  0E0D               	movlw	13
  2227  0014FE  6E2A               	movwf	??_initLCD& (0+255),c
  2228  001500  0EFC               	movlw	252
  2229  001502                     u3237:
  2230  001502  2EE8               	decfsz	wreg,f,c
  2231  001504  D7FE               	goto	u3237
  2232  001506  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2233  001508  D7FC               	goto	u3237
  2234                           
  2235                           ;LCD.c: 54: LCDout(0b0011);
  2236  00150A  0E03               	movlw	3
  2237  00150C  EC0A  F00A         	call	_LCDout
  2238                           
  2239                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2240  001510  0E85               	movlw	133
  2241  001512                     u3247:
  2242  001512  2EE8               	decfsz	wreg,f,c
  2243  001514  D7FE               	goto	u3247
  2244  001516  F000               	nop	
  2245                           
  2246                           ;LCD.c: 56: LCDout(0b0011);
  2247  001518  0E03               	movlw	3
  2248  00151A  EC0A  F00A         	call	_LCDout
  2249                           
  2250                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2251  00151E  0E21               	movlw	33
  2252  001520                     u3257:
  2253  001520  2EE8               	decfsz	wreg,f,c
  2254  001522  D7FE               	goto	u3257
  2255  001524  F000               	nop	
  2256                           
  2257                           ;LCD.c: 58: LCDout(0b0010);
  2258  001526  0E02               	movlw	2
  2259  001528  EC0A  F00A         	call	_LCDout
  2260                           
  2261                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2262  00152C  0E21               	movlw	33
  2263  00152E                     u3267:
  2264  00152E  2EE8               	decfsz	wreg,f,c
  2265  001530  D7FE               	goto	u3267
  2266  001532  F000               	nop	
  2267                           
  2268                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2269  001534  0E00               	movlw	0
  2270  001536  6E28               	movwf	SendLCD@type,c
  2271  001538  0E28               	movlw	40
  2272  00153A  ECA6  F00D         	call	_SendLCD
  2273                           
  2274                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2275  00153E  0E21               	movlw	33
  2276  001540                     u3277:
  2277  001540  2EE8               	decfsz	wreg,f,c
  2278  001542  D7FE               	goto	u3277
  2279  001544  F000               	nop	
  2280                           
  2281                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2282  001546  0E00               	movlw	0
  2283  001548  6E28               	movwf	SendLCD@type,c
  2284  00154A  0E08               	movlw	8
  2285  00154C  ECA6  F00D         	call	_SendLCD
  2286                           
  2287                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2288  001550  0E21               	movlw	33
  2289  001552                     u3287:
  2290  001552  2EE8               	decfsz	wreg,f,c
  2291  001554  D7FE               	goto	u3287
  2292  001556  F000               	nop	
  2293                           
  2294                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2295  001558  0E00               	movlw	0
  2296  00155A  6E28               	movwf	SendLCD@type,c
  2297  00155C  0E01               	movlw	1
  2298  00155E  ECA6  F00D         	call	_SendLCD
  2299                           
  2300                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2301  001562  0E0D               	movlw	13
  2302  001564  6E2A               	movwf	??_initLCD& (0+255),c
  2303  001566  0EFC               	movlw	252
  2304  001568                     u3297:
  2305  001568  2EE8               	decfsz	wreg,f,c
  2306  00156A  D7FE               	goto	u3297
  2307  00156C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2308  00156E  D7FC               	goto	u3297
  2309                           
  2310                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2311  001570  0E00               	movlw	0
  2312  001572  6E28               	movwf	SendLCD@type,c
  2313  001574  0E06               	movlw	6
  2314  001576  ECA6  F00D         	call	_SendLCD
  2315                           
  2316                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2317  00157A  0E21               	movlw	33
  2318  00157C                     u3307:
  2319  00157C  2EE8               	decfsz	wreg,f,c
  2320  00157E  D7FE               	goto	u3307
  2321  001580  F000               	nop	
  2322                           
  2323                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2324  001582  0E00               	movlw	0
  2325  001584  6E28               	movwf	SendLCD@type,c
  2326  001586  0E0C               	movlw	12
  2327  001588  ECA6  F00D         	call	_SendLCD
  2328                           
  2329                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2330  00158C  0E21               	movlw	33
  2331  00158E                     u3317:
  2332  00158E  2EE8               	decfsz	wreg,f,c
  2333  001590  D7FE               	goto	u3317
  2334  001592  F000               	nop	
  2335  001594  0012               	return		;funcret
  2336  001596                     __end_of_initLCD:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           intcon	equ	0xFF2
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           indf1	equ	0xFE7
  2345                           fsr1h	equ	0xFE2
  2346                           fsr1l	equ	0xFE1
  2347                           indf2	equ	0xFDF
  2348                           postinc2	equ	0xFDE
  2349                           postdec2	equ	0xFDD
  2350                           plusw2	equ	0xFDB
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function _initIR *****************
  2356 ;; Defined at:
  2357 ;;		line 30 in file "IR_Reading.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, status,2
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2371 ;;      Params:         0       0       0       0
  2372 ;;      Locals:         0       0       0       0
  2373 ;;      Temps:          0       0       0       0
  2374 ;;      Totals:         0       0       0       0
  2375 ;;Total ram usage:        0 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    3
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text5
  2386  001BC8                     __ptext5:
  2387                           	opt stack 0
  2388  001BC8                     _initIR:
  2389                           	opt stack 27
  2390                           
  2391                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2392                           
  2393                           ;incstack = 0
  2394  001BC8  9489               	bcf	3977,2,c	;volatile
  2395                           
  2396                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2397  001BCA  9689               	bcf	3977,3,c	;volatile
  2398                           
  2399                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2400  001BCC  8492               	bsf	3986,2,c	;volatile
  2401                           
  2402                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2403  001BCE  8692               	bsf	3986,3,c	;volatile
  2404                           
  2405                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2406  001BD0  94B8               	bcf	4024,2,c	;volatile
  2407                           
  2408                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2409  001BD2  96B8               	bcf	4024,3,c	;volatile
  2410                           
  2411                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2412  001BD4  9CB8               	bcf	4024,6,c	;volatile
  2413                           
  2414                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2415  001BD6  9EB8               	bcf	4024,7,c	;volatile
  2416                           
  2417                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2418  001BD8  0E06               	movlw	6
  2419  001BDA  6E63               	movwf	3939,c	;volatile
  2420                           
  2421                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2422  001BDC  0E06               	movlw	6
  2423  001BDE  6E62               	movwf	3938,c	;volatile
  2424                           
  2425                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2426  001BE0  9096               	bcf	3990,0,c	;volatile
  2427                           
  2428                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2429  001BE2  9296               	bcf	3990,1,c	;volatile
  2430                           
  2431                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2432  001BE4  0E59               	movlw	89
  2433  001BE6  6EB7               	movwf	4023,c	;volatile
  2434  001BE8  0012               	return		;funcret
  2435  001BEA                     __end_of_initIR:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           intcon	equ	0xFF2
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           indf1	equ	0xFE7
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           plusw2	equ	0xFDB
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _fullSpeedBack *****************
  2455 ;; Defined at:
  2456 ;;		line 125 in file "dc_motor.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  mL              2   11[BANK0 ] PTR struct DC_motor
  2459 ;;		 -> main@mL(9), 
  2460 ;;  mR              2   13[BANK0 ] PTR struct DC_motor
  2461 ;;		 -> main@mR(9), 
  2462 ;;  power           1   15[BANK0 ] unsigned char 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;		None               void
  2467 ;; Registers used:
  2468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2474 ;;      Params:         0       5       0       0
  2475 ;;      Locals:         0       0       0       0
  2476 ;;      Temps:          0       0       0       0
  2477 ;;      Totals:         0       5       0       0
  2478 ;;Total ram usage:        5 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    6
  2481 ;; This function calls:
  2482 ;;		_fullSpeedAhead
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text6
  2489  00198E                     __ptext6:
  2490                           	opt stack 0
  2491  00198E                     _fullSpeedBack:
  2492                           	opt stack 24
  2493                           
  2494                           ;dc_motor.c: 128: mL->direction=0;
  2495                           
  2496                           ;incstack = 0
  2497  00198E  0100               	movlb	0	; () banked
  2498  001990  EE20 F001          	lfsr	2,1
  2499  001994  516B               	movf	fullSpeedBack@mL& (0+255),w,b
  2500  001996  26D9               	addwf	fsr2l,f,c
  2501  001998  516C               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2502  00199A  22DA               	addwfc	fsr2h,f,c
  2503  00199C  0E00               	movlw	0
  2504  00199E  6EDF               	movwf	indf2,c
  2505                           
  2506                           ;dc_motor.c: 129: mR->direction=0;
  2507  0019A0  0100               	movlb	0	; () banked
  2508  0019A2  EE20 F001          	lfsr	2,1
  2509  0019A6  516D               	movf	fullSpeedBack@mR& (0+255),w,b
  2510  0019A8  26D9               	addwf	fsr2l,f,c
  2511  0019AA  516E               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2512  0019AC  22DA               	addwfc	fsr2h,f,c
  2513  0019AE  0E00               	movlw	0
  2514  0019B0  6EDF               	movwf	indf2,c
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2518  0019B2  C06B  F065         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2519  0019B6  C06C  F066         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2520  0019BA  C06D  F067         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2521  0019BE  C06E  F068         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2522  0019C2  C06F  F069         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2523  0019C6  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  2524  0019CA  0012               	return		;funcret
  2525  0019CC                     __end_of_fullSpeedBack:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           prodh	equ	0xFF4
  2529                           prodl	equ	0xFF3
  2530                           intcon	equ	0xFF2
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           indf1	equ	0xFE7
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           plusw2	equ	0xFDB
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _enableSensor *****************
  2545 ;; Defined at:
  2546 ;;		line 106 in file "IR_Reading.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  sensor          1    wreg     unsigned char 
  2549 ;;  status          1   35[COMRAM] unsigned char 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  sensor          1   36[COMRAM] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2561 ;;      Params:         1       0       0       0
  2562 ;;      Locals:         1       0       0       0
  2563 ;;      Temps:          0       0       0       0
  2564 ;;      Totals:         2       0       0       0
  2565 ;;Total ram usage:        2 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    3
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text7
  2576  001B7C                     __ptext7:
  2577                           	opt stack 0
  2578  001B7C                     _enableSensor:
  2579                           	opt stack 27
  2580                           
  2581                           ;incstack = 0
  2582                           ;enableSensor@sensor stored from wreg
  2583  001B7C  6E25               	movwf	enableSensor@sensor,c
  2584                           
  2585                           ;IR_Reading.c: 108: if (sensor==0){
  2586  001B7E  5025               	movf	enableSensor@sensor,w,c
  2587  001B80  A4D8               	btfss	status,2,c
  2588  001B82  D006               	goto	l3244
  2589                           
  2590                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2591  001B84  B024               	btfsc	enableSensor@status,0,c
  2592  001B86  D002               	bra	u2855
  2593  001B88  908D               	bcf	3981,0,c	;volatile
  2594  001B8A  D001               	bra	u2856
  2595  001B8C                     u2855:
  2596  001B8C  808D               	bsf	3981,0,c	;volatile
  2597  001B8E                     u2856:
  2598                           
  2599                           ;IR_Reading.c: 110: } else if (sensor==1){
  2600  001B8E  0012               	return	
  2601  001B90                     l3244:
  2602  001B90  0425               	decf	enableSensor@sensor,w,c
  2603  001B92  A4D8               	btfss	status,2,c
  2604  001B94  0012               	return	
  2605                           
  2606                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2607  001B96  B024               	btfsc	enableSensor@status,0,c
  2608  001B98  D002               	bra	u2875
  2609  001B9A  928D               	bcf	3981,1,c	;volatile
  2610  001B9C  D001               	bra	u2876
  2611  001B9E                     u2875:
  2612  001B9E  828D               	bsf	3981,1,c	;volatile
  2613  001BA0                     u2876:
  2614  001BA0  0012               	return	
  2615  001BA2                     __end_of_enableSensor:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           prodh	equ	0xFF4
  2619                           prodl	equ	0xFF3
  2620                           intcon	equ	0xFF2
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           indf1	equ	0xFE7
  2624                           fsr1h	equ	0xFE2
  2625                           fsr1l	equ	0xFE1
  2626                           indf2	equ	0xFDF
  2627                           postinc2	equ	0xFDE
  2628                           postdec2	equ	0xFDD
  2629                           plusw2	equ	0xFDB
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _VerifySignal *****************
  2635 ;; Defined at:
  2636 ;;		line 55 in file "RFID_Reader.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2639 ;;		 -> ReceivedString(16), 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  hexByte         2   43[COMRAM] unsigned int 
  2642 ;;  i               1   46[COMRAM] unsigned char 
  2643 ;;  checksum        1   45[COMRAM] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      unsigned char 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2653 ;;      Params:         2       0       0       0
  2654 ;;      Locals:         4       0       0       0
  2655 ;;      Temps:          6       0       0       0
  2656 ;;      Totals:        12       0       0       0
  2657 ;;Total ram usage:       12 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    3
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text8
  2668  00131A                     __ptext8:
  2669                           	opt stack 0
  2670  00131A                     _VerifySignal:
  2671                           	opt stack 27
  2672                           
  2673                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2674                           
  2675                           ;incstack = 0
  2676  00131A  0E00               	movlw	0
  2677  00131C  6E2E               	movwf	VerifySignal@checksum,c
  2678                           
  2679                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2680  00131E  0E00               	movlw	0
  2681  001320  6E2D               	movwf	VerifySignal@hexByte+1,c
  2682  001322  0E00               	movlw	0
  2683  001324  6E2C               	movwf	VerifySignal@hexByte,c
  2684                           
  2685                           ;RFID_Reader.c: 58: unsigned char i=0;
  2686  001326  0E00               	movlw	0
  2687  001328  6E2F               	movwf	VerifySignal@i,c
  2688                           
  2689                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2690  00132A  EE20 F004          	lfsr	2,4
  2691  00132E  5024               	movf	VerifySignal@Signal,w,c
  2692  001330  26D9               	addwf	fsr2l,f,c
  2693  001332  5025               	movf	VerifySignal@Signal+1,w,c
  2694  001334  22DA               	addwfc	fsr2h,f,c
  2695  001336  50DF               	movf	indf2,w,c
  2696  001338  6E26               	movwf	??_VerifySignal& (0+255),c
  2697  00133A  EE20 F003          	lfsr	2,3
  2698  00133E  5024               	movf	VerifySignal@Signal,w,c
  2699  001340  26D9               	addwf	fsr2l,f,c
  2700  001342  5025               	movf	VerifySignal@Signal+1,w,c
  2701  001344  22DA               	addwfc	fsr2h,f,c
  2702  001346  50DF               	movf	indf2,w,c
  2703  001348  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2704  00134A  5027               	movf	??_VerifySignal+1,w,c
  2705  00134C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2706  00134E  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2707  001350  5026               	movf	??_VerifySignal,w,c
  2708  001352  2428               	addwf	??_VerifySignal+2,w,c
  2709  001354  6E2C               	movwf	VerifySignal@hexByte,c
  2710  001356  0E00               	movlw	0
  2711  001358  2029               	addwfc	??_VerifySignal+3,w,c
  2712  00135A  6E2D               	movwf	VerifySignal@hexByte+1,c
  2713                           
  2714                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2715  00135C  EE20 F002          	lfsr	2,2
  2716  001360  5024               	movf	VerifySignal@Signal,w,c
  2717  001362  26D9               	addwf	fsr2l,f,c
  2718  001364  5025               	movf	VerifySignal@Signal+1,w,c
  2719  001366  22DA               	addwfc	fsr2h,f,c
  2720  001368  50DF               	movf	indf2,w,c
  2721  00136A  182C               	xorwf	VerifySignal@hexByte,w,c
  2722  00136C  6E2E               	movwf	VerifySignal@checksum,c
  2723                           
  2724                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2725  00136E  0E05               	movlw	5
  2726  001370  6E2F               	movwf	VerifySignal@i,c
  2727  001372                     l3460:
  2728  001372  0E09               	movlw	9
  2729  001374  642F               	cpfsgt	VerifySignal@i,c
  2730  001376  D001               	goto	l3464
  2731  001378  D028               	goto	l3472
  2732  00137A                     l3464:
  2733                           
  2734                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2735  00137A  502F               	movf	VerifySignal@i,w,c
  2736  00137C  6E26               	movwf	??_VerifySignal& (0+255),c
  2737  00137E  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2738  001380  0E01               	movlw	1
  2739  001382  2626               	addwf	??_VerifySignal,f,c
  2740  001384  0E00               	movlw	0
  2741  001386  2227               	addwfc	??_VerifySignal+1,f,c
  2742  001388  5026               	movf	??_VerifySignal,w,c
  2743  00138A  2424               	addwf	VerifySignal@Signal,w,c
  2744  00138C  6ED9               	movwf	fsr2l,c
  2745  00138E  5027               	movf	??_VerifySignal+1,w,c
  2746  001390  2025               	addwfc	VerifySignal@Signal+1,w,c
  2747  001392  6EDA               	movwf	fsr2h,c
  2748  001394  50DF               	movf	indf2,w,c
  2749  001396  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2750  001398  502F               	movf	VerifySignal@i,w,c
  2751  00139A  0D01               	mullw	1
  2752  00139C  50F3               	movf	prodl,w,c
  2753  00139E  2424               	addwf	VerifySignal@Signal,w,c
  2754  0013A0  6ED9               	movwf	fsr2l,c
  2755  0013A2  50F4               	movf	prodh,w,c
  2756  0013A4  2025               	addwfc	VerifySignal@Signal+1,w,c
  2757  0013A6  6EDA               	movwf	fsr2h,c
  2758  0013A8  50DF               	movf	indf2,w,c
  2759  0013AA  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2760  0013AC  5029               	movf	??_VerifySignal+3,w,c
  2761  0013AE  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2762  0013B0  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2763  0013B2  5028               	movf	??_VerifySignal+2,w,c
  2764  0013B4  242A               	addwf	??_VerifySignal+4,w,c
  2765  0013B6  6E2C               	movwf	VerifySignal@hexByte,c
  2766  0013B8  0E00               	movlw	0
  2767  0013BA  202B               	addwfc	??_VerifySignal+5,w,c
  2768  0013BC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2769                           
  2770                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2771  0013BE  502E               	movf	VerifySignal@checksum,w,c
  2772  0013C0  182C               	xorwf	VerifySignal@hexByte,w,c
  2773  0013C2  6E2E               	movwf	VerifySignal@checksum,c
  2774  0013C4  0E02               	movlw	2
  2775  0013C6  262F               	addwf	VerifySignal@i,f,c
  2776  0013C8  D7D4               	goto	l3460
  2777  0013CA                     l3472:
  2778                           
  2779                           ;RFID_Reader.c: 68: }
  2780                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2781  0013CA  502E               	movf	VerifySignal@checksum,w,c
  2782  0013CC  6E26               	movwf	??_VerifySignal& (0+255),c
  2783  0013CE  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2784  0013D0  EE20 F00B          	lfsr	2,11
  2785  0013D4  5024               	movf	VerifySignal@Signal,w,c
  2786  0013D6  26D9               	addwf	fsr2l,f,c
  2787  0013D8  5025               	movf	VerifySignal@Signal+1,w,c
  2788  0013DA  22DA               	addwfc	fsr2h,f,c
  2789  0013DC  50DF               	movf	indf2,w,c
  2790  0013DE  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2791  0013E0  5028               	movf	??_VerifySignal+2,w,c
  2792  0013E2  6E2A               	movwf	(??_VerifySignal+4)& (0+255),c
  2793  0013E4  6A29               	clrf	(??_VerifySignal+3)& (0+255),c
  2794  0013E6  EE20 F00C          	lfsr	2,12
  2795  0013EA  5024               	movf	VerifySignal@Signal,w,c
  2796  0013EC  26D9               	addwf	fsr2l,f,c
  2797  0013EE  5025               	movf	VerifySignal@Signal+1,w,c
  2798  0013F0  22DA               	addwfc	fsr2h,f,c
  2799  0013F2  50DF               	movf	indf2,w,c
  2800  0013F4  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2801  0013F6  502B               	movf	??_VerifySignal+5,w,c
  2802  0013F8  2629               	addwf	??_VerifySignal+3,f,c
  2803  0013FA  0E00               	movlw	0
  2804  0013FC  222A               	addwfc	??_VerifySignal+4,f,c
  2805  0013FE  5026               	movf	??_VerifySignal,w,c
  2806  001400  1829               	xorwf	??_VerifySignal+3,w,c
  2807  001402  E106               	bnz	l3480
  2808  001404  5027               	movf	??_VerifySignal+1,w,c
  2809  001406  182A               	xorwf	??_VerifySignal+4,w,c
  2810  001408  A4D8               	btfss	status,2,c
  2811  00140A  D002               	goto	l3480
  2812                           
  2813                           ;RFID_Reader.c: 71: return 1;
  2814  00140C  0E01               	movlw	1
  2815                           
  2816                           ;RFID_Reader.c: 72: } else{
  2817  00140E  0012               	return	
  2818  001410                     l3480:
  2819                           
  2820                           ;RFID_Reader.c: 73: return 0;
  2821  001410  0E00               	movlw	0
  2822  001412  0012               	return	
  2823  001414                     __end_of_VerifySignal:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           intcon	equ	0xFF2
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           indf1	equ	0xFE7
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           indf2	equ	0xFDF
  2835                           postinc2	equ	0xFDE
  2836                           postdec2	equ	0xFDD
  2837                           plusw2	equ	0xFDB
  2838                           fsr2h	equ	0xFDA
  2839                           fsr2l	equ	0xFD9
  2840                           status	equ	0xFD8
  2841                           
  2842 ;; *************** function _ScanWithRange *****************
  2843 ;; Defined at:
  2844 ;;		line 98 in file "Movement.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  2847 ;;		 -> main@mL(9), 
  2848 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  2849 ;;		 -> main@mR(9), 
  2850 ;;  loops           2   21[BANK0 ] int 
  2851 ;;  MoveTime        2   23[BANK0 ] PTR int 
  2852 ;;		 -> main@MoveTime(200), 
  2853 ;;  Move            2   25[BANK0 ] PTR unsigned char 
  2854 ;;		 -> main@Move(1), 
  2855 ;;  MoveType        2   27[BANK0 ] PTR unsigned char 
  2856 ;;		 -> main@MoveType(100), 
  2857 ;;  RFID_Read       2   29[BANK0 ] PTR unsigned char 
  2858 ;;		 -> RFID_Read(1), 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  buf            40   36[BANK0 ] unsigned char [40]
  2861 ;;  SensorResult    4   86[BANK0 ] unsigned int [2]
  2862 ;;  RightFlag       2   90[BANK0 ] unsigned int 
  2863 ;;  LeftFlag        2   83[BANK0 ] unsigned int 
  2864 ;;  DirectionFou    2   80[BANK0 ] const unsigned int 
  2865 ;;  i               2   78[BANK0 ] unsigned int 
  2866 ;;  n               2   76[BANK0 ] unsigned int 
  2867 ;;  TimeAboveThr    1   85[BANK0 ] unsigned char 
  2868 ;;  power           1   82[BANK0 ] const unsigned char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      unsigned char 
  2871 ;; Registers used:
  2872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2878 ;;      Params:         0      14       0       0
  2879 ;;      Locals:         0      56       0       0
  2880 ;;      Temps:          0       5       0       0
  2881 ;;      Totals:         0      75       0       0
  2882 ;;Total ram usage:       75 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    7
  2885 ;; This function calls:
  2886 ;;		_LCD_String
  2887 ;;		_SendLCD
  2888 ;;		_SetLine
  2889 ;;		_delay_tenth_s
  2890 ;;		_grabLeftIR
  2891 ;;		_grabRightIR
  2892 ;;		_sprintf
  2893 ;;		_stop
  2894 ;;		_turnLeft
  2895 ;;		_turnRight
  2896 ;; This function is called by:
  2897 ;;		_main
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text9
  2902  00099A                     __ptext9:
  2903                           	opt stack 0
  2904  00099A                     _ScanWithRange:
  2905                           	opt stack 23
  2906                           
  2907                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  2908                           
  2909                           ;incstack = 0
  2910  00099A  C036  F0B6         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  2911  00099E  C037  F0B7         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  2912  0009A2  C038  F0B8         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  2913  0009A6  C039  F0B9         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  2914                           
  2915                           ;Movement.c: 103: unsigned int LeftFlag=0;
  2916  0009AA  0E00               	movlw	0
  2917  0009AC  0100               	movlb	0	; () banked
  2918  0009AE  6FB4               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2919  0009B0  0E00               	movlw	0
  2920  0009B2  6FB3               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2921                           
  2922                           ;Movement.c: 104: unsigned int RightFlag=0;
  2923  0009B4  0E00               	movlw	0
  2924  0009B6  0100               	movlb	0	; () banked
  2925  0009B8  6FBB               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2926  0009BA  0E00               	movlw	0
  2927  0009BC  6FBA               	movwf	ScanWithRange@RightFlag& (0+255),b
  2928                           
  2929                           ;Movement.c: 105: char buf[40];
  2930                           ;Movement.c: 106: unsigned int i=0;
  2931  0009BE  0E00               	movlw	0
  2932  0009C0  0100               	movlb	0	; () banked
  2933  0009C2  6FAF               	movwf	(ScanWithRange@i+1)& (0+255),b
  2934  0009C4  0E00               	movlw	0
  2935  0009C6  6FAE               	movwf	ScanWithRange@i& (0+255),b
  2936                           
  2937                           ;Movement.c: 107: unsigned int n=0;
  2938  0009C8  0E00               	movlw	0
  2939  0009CA  0100               	movlb	0	; () banked
  2940  0009CC  6FAD               	movwf	(ScanWithRange@n+1)& (0+255),b
  2941  0009CE  0E00               	movlw	0
  2942  0009D0  6FAC               	movwf	ScanWithRange@n& (0+255),b
  2943                           
  2944                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  2945  0009D2  0E00               	movlw	0
  2946  0009D4  0100               	movlb	0	; () banked
  2947  0009D6  6FB5               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2948                           
  2949                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=3000;
  2950  0009D8  0E0B               	movlw	11
  2951  0009DA  0100               	movlb	0	; () banked
  2952  0009DC  6FB1               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2953  0009DE  0EB8               	movlw	184
  2954  0009E0  6FB0               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2955                           
  2956                           ;Movement.c: 112: const unsigned char power=40;
  2957  0009E2  0E28               	movlw	40
  2958  0009E4  0100               	movlb	0	; () banked
  2959  0009E6  6FB2               	movwf	ScanWithRange@power& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;Movement.c: 122: *Move++;
  2963  0009E8  0100               	movlb	0	; () banked
  2964  0009EA  4B79               	infsnz	ScanWithRange@Move& (0+255),f,b
  2965  0009EC  2B7A               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;Movement.c: 123: (MoveType[*Move]) = 2;
  2969  0009EE  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  2970  0009F2  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2971  0009F6  50DF               	movf	indf2,w,c
  2972  0009F8  0100               	movlb	0	; () banked
  2973  0009FA  6F7F               	movwf	??_ScanWithRange& (0+255),b
  2974  0009FC  0100               	movlb	0	; () banked
  2975  0009FE  517F               	movf	??_ScanWithRange& (0+255),w,b
  2976  000A00  0D01               	mullw	1
  2977  000A02  50F3               	movf	prodl,w,c
  2978  000A04  0100               	movlb	0	; () banked
  2979  000A06  257B               	addwf	ScanWithRange@MoveType& (0+255),w,b
  2980  000A08  6ED9               	movwf	fsr2l,c
  2981  000A0A  50F4               	movf	prodh,w,c
  2982  000A0C  0100               	movlb	0	; () banked
  2983  000A0E  217C               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  2984  000A10  6EDA               	movwf	fsr2h,c
  2985  000A12  0E02               	movlw	2
  2986  000A14  6EDF               	movwf	indf2,c
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;Movement.c: 124: (MoveTime[*Move]) = -3;
  2990  000A16  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  2991  000A1A  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2992  000A1E  50DF               	movf	indf2,w,c
  2993  000A20  0100               	movlb	0	; () banked
  2994  000A22  6F7F               	movwf	??_ScanWithRange& (0+255),b
  2995  000A24  0100               	movlb	0	; () banked
  2996  000A26  517F               	movf	??_ScanWithRange& (0+255),w,b
  2997  000A28  0D02               	mullw	2
  2998  000A2A  50F3               	movf	prodl,w,c
  2999  000A2C  0100               	movlb	0	; () banked
  3000  000A2E  2577               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3001  000A30  6ED9               	movwf	fsr2l,c
  3002  000A32  50F4               	movf	prodh,w,c
  3003  000A34  0100               	movlb	0	; () banked
  3004  000A36  2178               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3005  000A38  6EDA               	movwf	fsr2h,c
  3006  000A3A  0EFD               	movlw	253
  3007  000A3C  6EDE               	movwf	postinc2,c
  3008  000A3E  0EFF               	movlw	255
  3009  000A40  6EDD               	movwf	postdec2,c
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;Movement.c: 126: turnLeft(mL,mR, 100);
  3013  000A42  C071  F06B         	movff	ScanWithRange@mL,turnLeft@mL
  3014  000A46  C072  F06C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3015  000A4A  C073  F06D         	movff	ScanWithRange@mR,turnLeft@mR
  3016  000A4E  C074  F06E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3017  000A52  0E64               	movlw	100
  3018  000A54  0100               	movlb	0	; () banked
  3019  000A56  6F6F               	movwf	turnLeft@power& (0+255),b
  3020  000A58  EC05  F00D         	call	_turnLeft	;wreg free
  3021                           
  3022                           ;Movement.c: 127: delay_tenth_s(3);
  3023  000A5C  0E03               	movlw	3
  3024  000A5E  EC24  F00D         	call	_delay_tenth_s
  3025                           
  3026                           ;Movement.c: 128: stop(mL,mR);
  3027  000A62  C071  F065         	movff	ScanWithRange@mL,stop@mL
  3028  000A66  C072  F066         	movff	ScanWithRange@mL+1,stop@mL+1
  3029  000A6A  C073  F067         	movff	ScanWithRange@mR,stop@mR
  3030  000A6E  C074  F068         	movff	ScanWithRange@mR+1,stop@mR+1
  3031  000A72  ECCB  F00A         	call	_stop	;wreg free
  3032                           
  3033                           ;Movement.c: 131: turnRight(mL,mR, power);
  3034  000A76  C071  F06B         	movff	ScanWithRange@mL,turnRight@mL
  3035  000A7A  C072  F06C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3036  000A7E  C073  F06D         	movff	ScanWithRange@mR,turnRight@mR
  3037  000A82  C074  F06E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3038  000A86  C0B2  F06F         	movff	ScanWithRange@power,turnRight@power
  3039  000A8A  ECE6  F00C         	call	_turnRight	;wreg free
  3040                           
  3041                           ;Movement.c: 134: TMR0L = 0;
  3042  000A8E  0E00               	movlw	0
  3043  000A90  6ED6               	movwf	4054,c	;volatile
  3044                           
  3045                           ;Movement.c: 135: TMR0H = 0;
  3046  000A92  0E00               	movlw	0
  3047  000A94  6ED7               	movwf	4055,c	;volatile
  3048                           
  3049                           ;Movement.c: 136: T0CONbits.TMR0ON=1;
  3050  000A96  8ED5               	bsf	4053,7,c	;volatile
  3051                           
  3052                           ;Movement.c: 138: for (i=1; i<=loops; i++) {
  3053  000A98  0E00               	movlw	0
  3054  000A9A  0100               	movlb	0	; () banked
  3055  000A9C  6FAF               	movwf	(ScanWithRange@i+1)& (0+255),b
  3056  000A9E  0E01               	movlw	1
  3057  000AA0  6FAE               	movwf	ScanWithRange@i& (0+255),b
  3058  000AA2  D136               	goto	l3418
  3059  000AA4                     l3346:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;Movement.c: 141: SensorResult[0]=grabLeftIR();
  3063  000AA4  EC15  F00C         	call	_grabLeftIR	;wreg free
  3064  000AA8  C024  F0B6         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3065  000AAC  C025  F0B7         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3066                           
  3067                           ;Movement.c: 142: SensorResult[1]=grabRightIR();
  3068  000AB0  ECDC  F00B         	call	_grabRightIR	;wreg free
  3069  000AB4  C024  F0B8         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3070  000AB8  C025  F0B9         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3071                           
  3072                           ;Movement.c: 146: CAP1BUFH=0;
  3073  000ABC  0E00               	movlw	0
  3074  000ABE  6E69               	movwf	3945,c	;volatile
  3075                           
  3076                           ;Movement.c: 147: CAP1BUFL=0;
  3077  000AC0  0E00               	movlw	0
  3078  000AC2  6E68               	movwf	3944,c	;volatile
  3079                           
  3080                           ;Movement.c: 148: CAP2BUFH=0;
  3081  000AC4  0E00               	movlw	0
  3082  000AC6  6E67               	movwf	3943,c	;volatile
  3083                           
  3084                           ;Movement.c: 149: CAP2BUFL=0;
  3085  000AC8  0E00               	movlw	0
  3086  000ACA  6E66               	movwf	3942,c	;volatile
  3087                           
  3088                           ;Movement.c: 153: SendLCD(0b00000001,0);
  3089  000ACC  0E00               	movlw	0
  3090  000ACE  6E28               	movwf	SendLCD@type,c
  3091  000AD0  0E01               	movlw	1
  3092  000AD2  ECA6  F00D         	call	_SendLCD
  3093                           
  3094                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3095  000AD6  0E21               	movlw	33
  3096  000AD8                     u3327:
  3097  000AD8  2EE8               	decfsz	wreg,f,c
  3098  000ADA  D7FE               	goto	u3327
  3099  000ADC  F000               	nop	
  3100                           
  3101                           ;Movement.c: 155: SendLCD(0b00000010,0);
  3102  000ADE  0E00               	movlw	0
  3103  000AE0  6E28               	movwf	SendLCD@type,c
  3104  000AE2  0E02               	movlw	2
  3105  000AE4  ECA6  F00D         	call	_SendLCD
  3106                           
  3107                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  3108  000AE8  0E06               	movlw	6
  3109  000AEA  0100               	movlb	0	; () banked
  3110  000AEC  6F7F               	movwf	??_ScanWithRange& (0+255),b
  3111  000AEE  0E30               	movlw	48
  3112  000AF0                     u3337:
  3113  000AF0  2EE8               	decfsz	wreg,f,c
  3114  000AF2  D7FE               	goto	u3337
  3115  000AF4  2F7F               	decfsz	??_ScanWithRange& (0+255),f,b
  3116  000AF6  D7FC               	goto	u3337
  3117  000AF8  D000               	nop2	
  3118                           
  3119                           ;Movement.c: 157: SetLine(1);
  3120  000AFA  0E01               	movlw	1
  3121  000AFC  EC8E  F00D         	call	_SetLine
  3122                           
  3123                           ;Movement.c: 158: LCD_String("     ScanIR");
  3124  000B00  0E2D               	movlw	low STR_1
  3125  000B02  6E2A               	movwf	LCD_String@string,c
  3126  000B04  0E03               	movlw	high STR_1
  3127  000B06  6E2B               	movwf	LCD_String@string+1,c
  3128  000B08  EC4E  F00C         	call	_LCD_String	;wreg free
  3129                           
  3130                           ;Movement.c: 159: SetLine(2);
  3131  000B0C  0E02               	movlw	2
  3132  000B0E  EC8E  F00D         	call	_SetLine
  3133                           
  3134                           ;Movement.c: 160: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3135  000B12  0E84               	movlw	low ScanWithRange@buf
  3136  000B14  0100               	movlb	0	; () banked
  3137  000B16  6F60               	movwf	sprintf@sp& (0+255),b
  3138  000B18  0E00               	movlw	high ScanWithRange@buf
  3139  000B1A  0100               	movlb	0	; () banked
  3140  000B1C  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3141  000B1E  0E0C               	movlw	low (STR_6+1)
  3142  000B20  0100               	movlb	0	; () banked
  3143  000B22  6F62               	movwf	sprintf@f& (0+255),b
  3144  000B24  0E03               	movlw	high (STR_6+1)
  3145  000B26  0100               	movlb	0	; () banked
  3146  000B28  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3147  000B2A  C0B6  F064         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3148  000B2E  C0B7  F065         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3149  000B32  C0B8  F066         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3150  000B36  C0B9  F067         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3151  000B3A  ECDB  F006         	call	_sprintf	;wreg free
  3152                           
  3153                           ;Movement.c: 161: LCD_String(buf);
  3154  000B3E  0E84               	movlw	low ScanWithRange@buf
  3155  000B40  6E2A               	movwf	LCD_String@string,c
  3156  000B42  0E00               	movlw	high ScanWithRange@buf
  3157  000B44  6E2B               	movwf	LCD_String@string+1,c
  3158  000B46  EC4E  F00C         	call	_LCD_String	;wreg free
  3159                           
  3160                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3161  000B4A  0100               	movlb	0	; () banked
  3162  000B4C  51B8               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3163  000B4E  0100               	movlb	0	; () banked
  3164  000B50  5DB0               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3165  000B52  0100               	movlb	0	; () banked
  3166  000B54  51B9               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3167  000B56  0100               	movlb	0	; () banked
  3168  000B58  59B1               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3169  000B5A  B0D8               	btfsc	status,0,c
  3170  000B5C  D00E               	goto	l221
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3174  000B5E  50D7               	movf	4055,w,c	;volatile
  3175  000B60  0100               	movlb	0	; () banked
  3176  000B62  6F80               	movwf	(??_ScanWithRange+1)& (0+255),b
  3177  000B64  6B7F               	clrf	??_ScanWithRange& (0+255),b
  3178  000B66  50D6               	movf	4054,w,c	;volatile
  3179  000B68  0100               	movlb	0	; () banked
  3180  000B6A  257F               	addwf	??_ScanWithRange& (0+255),w,b
  3181  000B6C  0100               	movlb	0	; () banked
  3182  000B6E  6FBA               	movwf	ScanWithRange@RightFlag& (0+255),b
  3183  000B70  0E00               	movlw	0
  3184  000B72  0100               	movlb	0	; () banked
  3185  000B74  2180               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3186  000B76  0100               	movlb	0	; () banked
  3187  000B78  6FBB               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3188  000B7A                     l221:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;Movement.c: 165: }
  3192                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3193  000B7A  0100               	movlb	0	; () banked
  3194  000B7C  51B6               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3195  000B7E  0100               	movlb	0	; () banked
  3196  000B80  5DB0               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3197  000B82  0100               	movlb	0	; () banked
  3198  000B84  51B7               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3199  000B86  0100               	movlb	0	; () banked
  3200  000B88  59B1               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3201  000B8A  B0D8               	btfsc	status,0,c
  3202  000B8C  D00E               	goto	l222
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3206  000B8E  50D7               	movf	4055,w,c	;volatile
  3207  000B90  0100               	movlb	0	; () banked
  3208  000B92  6F80               	movwf	(??_ScanWithRange+1)& (0+255),b
  3209  000B94  6B7F               	clrf	??_ScanWithRange& (0+255),b
  3210  000B96  50D6               	movf	4054,w,c	;volatile
  3211  000B98  0100               	movlb	0	; () banked
  3212  000B9A  257F               	addwf	??_ScanWithRange& (0+255),w,b
  3213  000B9C  0100               	movlb	0	; () banked
  3214  000B9E  6FB3               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3215  000BA0  0E00               	movlw	0
  3216  000BA2  0100               	movlb	0	; () banked
  3217  000BA4  2180               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3218  000BA6  0100               	movlb	0	; () banked
  3219  000BA8  6FB4               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3220  000BAA                     l222:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Movement.c: 169: }
  3224                           ;Movement.c: 176: if (LeftFlag>0) {
  3225  000BAA  0100               	movlb	0	; () banked
  3226  000BAC  51B3               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3227  000BAE  0100               	movlb	0	; () banked
  3228  000BB0  11B4               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3229  000BB2  B4D8               	btfsc	status,2,c
  3230  000BB4  D0A1               	goto	l3410
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;Movement.c: 179: if (RightFlag>0) {
  3234  000BB6  0100               	movlb	0	; () banked
  3235  000BB8  51BA               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3236  000BBA  0100               	movlb	0	; () banked
  3237  000BBC  11BB               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3238  000BBE  B4D8               	btfsc	status,2,c
  3239  000BC0  D08F               	goto	l224
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3243  000BC2  0100               	movlb	0	; () banked
  3244  000BC4  51BA               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3245  000BC6  0800               	sublw	0
  3246  000BC8  0100               	movlb	0	; () banked
  3247  000BCA  25B3               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3248  000BCC  0100               	movlb	0	; () banked
  3249  000BCE  6FB5               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;Movement.c: 181: TMR0L = 0;
  3253  000BD0  0E00               	movlw	0
  3254  000BD2  6ED6               	movwf	4054,c	;volatile
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;Movement.c: 182: TMR0H = 0;
  3258  000BD4  0E00               	movlw	0
  3259  000BD6  6ED7               	movwf	4055,c	;volatile
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;Movement.c: 183: stop(mL,mR);
  3263  000BD8  C071  F065         	movff	ScanWithRange@mL,stop@mL
  3264  000BDC  C072  F066         	movff	ScanWithRange@mL+1,stop@mL+1
  3265  000BE0  C073  F067         	movff	ScanWithRange@mR,stop@mR
  3266  000BE4  C074  F068         	movff	ScanWithRange@mR+1,stop@mR+1
  3267  000BE8  ECCB  F00A         	call	_stop	;wreg free
  3268                           
  3269                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3270  000BEC  D00C               	goto	l3388
  3271  000BEE                     l3386:
  3272                           
  3273                           ;Movement.c: 185: turnLeft(mL,mR, power);
  3274  000BEE  C071  F06B         	movff	ScanWithRange@mL,turnLeft@mL
  3275  000BF2  C072  F06C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3276  000BF6  C073  F06D         	movff	ScanWithRange@mR,turnLeft@mR
  3277  000BFA  C074  F06E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3278  000BFE  C0B2  F06F         	movff	ScanWithRange@power,turnLeft@power
  3279  000C02  EC05  F00D         	call	_turnLeft	;wreg free
  3280  000C06                     l3388:
  3281  000C06  0100               	movlb	0	; () banked
  3282  000C08  90D8               	bcf	status,0,c
  3283  000C0A  31B5               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3284  000C0C  0100               	movlb	0	; () banked
  3285  000C0E  6F7F               	movwf	??_ScanWithRange& (0+255),b
  3286  000C10  6B80               	clrf	(??_ScanWithRange+1)& (0+255),b
  3287  000C12  50D6               	movf	4054,w,c	;volatile
  3288  000C14  CFD7 F081          	movff	4055,??_ScanWithRange+2	;volatile
  3289  000C18  0100               	movlb	0	; () banked
  3290  000C1A  6B82               	clrf	(??_ScanWithRange+3)& (0+255),b
  3291  000C1C  C081  F082         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3292  000C20  0100               	movlb	0	; () banked
  3293  000C22  6B81               	clrf	(??_ScanWithRange+2)& (0+255),b
  3294  000C24  0100               	movlb	0	; () banked
  3295  000C26  2781               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3296  000C28  0E00               	movlw	0
  3297  000C2A  2382               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3298  000C2C  0100               	movlb	0	; () banked
  3299  000C2E  517F               	movf	??_ScanWithRange& (0+255),w,b
  3300  000C30  0100               	movlb	0	; () banked
  3301  000C32  5D81               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3302  000C34  0100               	movlb	0	; () banked
  3303  000C36  5182               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3304  000C38  0A80               	xorlw	128
  3305  000C3A  0100               	movlb	0	; () banked
  3306  000C3C  6F83               	movwf	(??_ScanWithRange+4)& (0+255),b
  3307  000C3E  0100               	movlb	0	; () banked
  3308  000C40  5180               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3309  000C42  0A80               	xorlw	128
  3310  000C44  0100               	movlb	0	; () banked
  3311  000C46  5983               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3312  000C48  A0D8               	btfss	status,0,c
  3313  000C4A  D7D1               	goto	l3386
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Movement.c: 186: }
  3317                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3318  000C4C  9ED5               	bcf	4053,7,c	;volatile
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;Movement.c: 188: stop(mL,mR);
  3322  000C4E  C071  F065         	movff	ScanWithRange@mL,stop@mL
  3323  000C52  C072  F066         	movff	ScanWithRange@mL+1,stop@mL+1
  3324  000C56  C073  F067         	movff	ScanWithRange@mR,stop@mR
  3325  000C5A  C074  F068         	movff	ScanWithRange@mR+1,stop@mR+1
  3326  000C5E  ECCB  F00A         	call	_stop	;wreg free
  3327                           
  3328                           ;Movement.c: 190: *Move++;
  3329  000C62  0100               	movlb	0	; () banked
  3330  000C64  4B79               	infsnz	ScanWithRange@Move& (0+255),f,b
  3331  000C66  2B7A               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Movement.c: 191: (MoveType[*Move]) = 1;
  3335  000C68  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  3336  000C6C  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3337  000C70  50DF               	movf	indf2,w,c
  3338  000C72  0100               	movlb	0	; () banked
  3339  000C74  6F7F               	movwf	??_ScanWithRange& (0+255),b
  3340  000C76  0100               	movlb	0	; () banked
  3341  000C78  517F               	movf	??_ScanWithRange& (0+255),w,b
  3342  000C7A  0D01               	mullw	1
  3343  000C7C  50F3               	movf	prodl,w,c
  3344  000C7E  0100               	movlb	0	; () banked
  3345  000C80  257B               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3346  000C82  6ED9               	movwf	fsr2l,c
  3347  000C84  50F4               	movf	prodh,w,c
  3348  000C86  0100               	movlb	0	; () banked
  3349  000C88  217C               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3350  000C8A  6EDA               	movwf	fsr2h,c
  3351  000C8C  0E01               	movlw	1
  3352  000C8E  6EDF               	movwf	indf2,c
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Movement.c: 192: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3356  000C90  C0B5  F07F         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3357  000C94  0100               	movlb	0	; () banked
  3358  000C96  90D8               	bcf	status,0,c
  3359  000C98  337F               	rrcf	??_ScanWithRange& (0+255),f,b
  3360  000C9A  0100               	movlb	0	; () banked
  3361  000C9C  517F               	movf	??_ScanWithRange& (0+255),w,b
  3362  000C9E  0100               	movlb	0	; () banked
  3363  000CA0  25BA               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3364  000CA2  0100               	movlb	0	; () banked
  3365  000CA4  6F80               	movwf	(??_ScanWithRange+1)& (0+255),b
  3366  000CA6  0E00               	movlw	0
  3367  000CA8  0100               	movlb	0	; () banked
  3368  000CAA  21BB               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3369  000CAC  0100               	movlb	0	; () banked
  3370  000CAE  6F81               	movwf	(??_ScanWithRange+2)& (0+255),b
  3371  000CB0  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  3372  000CB4  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3373  000CB8  50DF               	movf	indf2,w,c
  3374  000CBA  0100               	movlb	0	; () banked
  3375  000CBC  6F82               	movwf	(??_ScanWithRange+3)& (0+255),b
  3376  000CBE  0100               	movlb	0	; () banked
  3377  000CC0  5182               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3378  000CC2  0D02               	mullw	2
  3379  000CC4  50F3               	movf	prodl,w,c
  3380  000CC6  0100               	movlb	0	; () banked
  3381  000CC8  2577               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3382  000CCA  6ED9               	movwf	fsr2l,c
  3383  000CCC  50F4               	movf	prodh,w,c
  3384  000CCE  0100               	movlb	0	; () banked
  3385  000CD0  2178               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3386  000CD2  6EDA               	movwf	fsr2h,c
  3387  000CD4  C080  FFDE         	movff	??_ScanWithRange+1,postinc2
  3388  000CD8  C081  FFDD         	movff	??_ScanWithRange+2,postdec2
  3389  000CDC                     l3398:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Movement.c: 194: return 2;
  3393  000CDC  0E02               	movlw	2
  3394                           
  3395                           ; BSR set to: 0
  3396  000CDE  0012               	return	
  3397  000CE0                     l224:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Movement.c: 197: T0CONbits.TMR0ON=0;
  3401  000CE0  9ED5               	bcf	4053,7,c	;volatile
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;Movement.c: 198: stop(mL,mR);
  3405  000CE2  C071  F065         	movff	ScanWithRange@mL,stop@mL
  3406  000CE6  C072  F066         	movff	ScanWithRange@mL+1,stop@mL+1
  3407  000CEA  C073  F067         	movff	ScanWithRange@mR,stop@mR
  3408  000CEE  C074  F068         	movff	ScanWithRange@mR+1,stop@mR+1
  3409  000CF2  ECCB  F00A         	call	_stop	;wreg free
  3410  000CF6  D7F2               	goto	l3398
  3411  000CF8                     l3410:
  3412                           
  3413                           ;Movement.c: 200: }
  3414                           ;Movement.c: 201: }
  3415                           ;Movement.c: 203: if (*RFID_Read==1) {
  3416  000CF8  C07D  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3417  000CFC  C07E  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3418  000D00  04DE               	decf	postinc2,w,c
  3419  000D02  A4D8               	btfss	status,2,c
  3420  000D04  D002               	goto	l3416
  3421                           
  3422                           ;Movement.c: 204: return 2;
  3423  000D06  0E02               	movlw	2
  3424  000D08  0012               	return	
  3425  000D0A                     l3416:
  3426  000D0A  0100               	movlb	0	; () banked
  3427  000D0C  4BAE               	infsnz	ScanWithRange@i& (0+255),f,b
  3428  000D0E  2BAF               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3429  000D10                     l3418:
  3430                           
  3431                           ; BSR set to: 0
  3432  000D10  0100               	movlb	0	; () banked
  3433  000D12  51AE               	movf	ScanWithRange@i& (0+255),w,b
  3434  000D14  0100               	movlb	0	; () banked
  3435  000D16  5D75               	subwf	ScanWithRange@loops& (0+255),w,b
  3436  000D18  0100               	movlb	0	; () banked
  3437  000D1A  51AF               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3438  000D1C  0100               	movlb	0	; () banked
  3439  000D1E  5976               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3440  000D20  B0D8               	btfsc	status,0,c
  3441  000D22  D6C0               	goto	l3346
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;Movement.c: 205: }
  3445                           ;Movement.c: 206: }
  3446                           ;Movement.c: 209: *Move++;
  3447                           
  3448                           ; BSR set to: 0
  3449  000D24  0100               	movlb	0	; () banked
  3450  000D26  4B79               	infsnz	ScanWithRange@Move& (0+255),f,b
  3451  000D28  2B7A               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;Movement.c: 210: (MoveType[*Move]) = 2;
  3455  000D2A  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  3456  000D2E  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3457  000D32  50DF               	movf	indf2,w,c
  3458  000D34  0100               	movlb	0	; () banked
  3459  000D36  6F7F               	movwf	??_ScanWithRange& (0+255),b
  3460  000D38  0100               	movlb	0	; () banked
  3461  000D3A  517F               	movf	??_ScanWithRange& (0+255),w,b
  3462  000D3C  0D01               	mullw	1
  3463  000D3E  50F3               	movf	prodl,w,c
  3464  000D40  0100               	movlb	0	; () banked
  3465  000D42  257B               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3466  000D44  6ED9               	movwf	fsr2l,c
  3467  000D46  50F4               	movf	prodh,w,c
  3468  000D48  0100               	movlb	0	; () banked
  3469  000D4A  217C               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3470  000D4C  6EDA               	movwf	fsr2h,c
  3471  000D4E  0E02               	movlw	2
  3472  000D50  6EDF               	movwf	indf2,c
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;Movement.c: 211: (MoveTime[*Move]) = -2;
  3476  000D52  C079  FFD9         	movff	ScanWithRange@Move,fsr2l
  3477  000D56  C07A  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3478  000D5A  50DF               	movf	indf2,w,c
  3479  000D5C  0100               	movlb	0	; () banked
  3480  000D5E  6F7F               	movwf	??_ScanWithRange& (0+255),b
  3481  000D60  0100               	movlb	0	; () banked
  3482  000D62  517F               	movf	??_ScanWithRange& (0+255),w,b
  3483  000D64  0D02               	mullw	2
  3484  000D66  50F3               	movf	prodl,w,c
  3485  000D68  0100               	movlb	0	; () banked
  3486  000D6A  2577               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3487  000D6C  6ED9               	movwf	fsr2l,c
  3488  000D6E  50F4               	movf	prodh,w,c
  3489  000D70  0100               	movlb	0	; () banked
  3490  000D72  2178               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3491  000D74  6EDA               	movwf	fsr2h,c
  3492  000D76  0EFE               	movlw	254
  3493  000D78  6EDE               	movwf	postinc2,c
  3494  000D7A  0EFF               	movlw	255
  3495  000D7C  6EDD               	movwf	postdec2,c
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;Movement.c: 212: turnRight(mL,mR, 100);
  3499  000D7E  C071  F06B         	movff	ScanWithRange@mL,turnRight@mL
  3500  000D82  C072  F06C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3501  000D86  C073  F06D         	movff	ScanWithRange@mR,turnRight@mR
  3502  000D8A  C074  F06E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3503  000D8E  0E64               	movlw	100
  3504  000D90  0100               	movlb	0	; () banked
  3505  000D92  6F6F               	movwf	turnRight@power& (0+255),b
  3506  000D94  ECE6  F00C         	call	_turnRight	;wreg free
  3507                           
  3508                           ;Movement.c: 213: delay_tenth_s(2);
  3509  000D98  0E02               	movlw	2
  3510  000D9A  EC24  F00D         	call	_delay_tenth_s
  3511                           
  3512                           ;Movement.c: 214: stop(mL,mR);
  3513  000D9E  C071  F065         	movff	ScanWithRange@mL,stop@mL
  3514  000DA2  C072  F066         	movff	ScanWithRange@mL+1,stop@mL+1
  3515  000DA6  C073  F067         	movff	ScanWithRange@mR,stop@mR
  3516  000DAA  C074  F068         	movff	ScanWithRange@mR+1,stop@mR+1
  3517  000DAE  ECCB  F00A         	call	_stop	;wreg free
  3518                           
  3519                           ;Movement.c: 215: return -1;
  3520  000DB2  0EFF               	movlw	255
  3521  000DB4  0012               	return	
  3522  000DB6                     __end_of_ScanWithRange:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           indf1	equ	0xFE7
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           postdec2	equ	0xFDD
  3536                           plusw2	equ	0xFDB
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _turnRight *****************
  3542 ;; Defined at:
  3543 ;;		line 98 in file "dc_motor.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  mL              2   11[BANK0 ] PTR struct DC_motor
  3546 ;;		 -> main@mL(9), 
  3547 ;;  mR              2   13[BANK0 ] PTR struct DC_motor
  3548 ;;		 -> main@mR(9), 
  3549 ;;  power           1   15[BANK0 ] unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;		None               void
  3554 ;; Registers used:
  3555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3561 ;;      Params:         0       5       0       0
  3562 ;;      Locals:         0       0       0       0
  3563 ;;      Temps:          0       0       0       0
  3564 ;;      Totals:         0       5       0       0
  3565 ;;Total ram usage:        5 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    6
  3568 ;; This function calls:
  3569 ;;		_fullSpeedAhead
  3570 ;; This function is called by:
  3571 ;;		_ScanWithRange
  3572 ;;		_main
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text10
  3577  0019CC                     __ptext10:
  3578                           	opt stack 0
  3579  0019CC                     _turnRight:
  3580                           	opt stack 24
  3581                           
  3582                           ;dc_motor.c: 102: mL->direction=0;
  3583                           
  3584                           ;incstack = 0
  3585  0019CC  0100               	movlb	0	; () banked
  3586  0019CE  EE20 F001          	lfsr	2,1
  3587  0019D2  516B               	movf	turnRight@mL& (0+255),w,b
  3588  0019D4  26D9               	addwf	fsr2l,f,c
  3589  0019D6  516C               	movf	(turnRight@mL+1)& (0+255),w,b
  3590  0019D8  22DA               	addwfc	fsr2h,f,c
  3591  0019DA  0E00               	movlw	0
  3592  0019DC  6EDF               	movwf	indf2,c
  3593                           
  3594                           ;dc_motor.c: 103: mR->direction=1;
  3595  0019DE  0100               	movlb	0	; () banked
  3596  0019E0  EE20 F001          	lfsr	2,1
  3597  0019E4  516D               	movf	turnRight@mR& (0+255),w,b
  3598  0019E6  26D9               	addwf	fsr2l,f,c
  3599  0019E8  516E               	movf	(turnRight@mR+1)& (0+255),w,b
  3600  0019EA  22DA               	addwfc	fsr2h,f,c
  3601  0019EC  0E01               	movlw	1
  3602  0019EE  6EDF               	movwf	indf2,c
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3606  0019F0  C06B  F065         	movff	turnRight@mL,fullSpeedAhead@mL
  3607  0019F4  C06C  F066         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3608  0019F8  C06D  F067         	movff	turnRight@mR,fullSpeedAhead@mR
  3609  0019FC  C06E  F068         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3610  001A00  C06F  F069         	movff	turnRight@power,fullSpeedAhead@power
  3611  001A04  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  3612  001A08  0012               	return		;funcret
  3613  001A0A                     __end_of_turnRight:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           intcon	equ	0xFF2
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           indf1	equ	0xFE7
  3622                           fsr1h	equ	0xFE2
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           postdec2	equ	0xFDD
  3627                           plusw2	equ	0xFDB
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _turnLeft *****************
  3633 ;; Defined at:
  3634 ;;		line 87 in file "dc_motor.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  mL              2   11[BANK0 ] PTR struct DC_motor
  3637 ;;		 -> main@mL(9), 
  3638 ;;  mR              2   13[BANK0 ] PTR struct DC_motor
  3639 ;;		 -> main@mR(9), 
  3640 ;;  power           1   15[BANK0 ] unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3652 ;;      Params:         0       5       0       0
  3653 ;;      Locals:         0       0       0       0
  3654 ;;      Temps:          0       0       0       0
  3655 ;;      Totals:         0       5       0       0
  3656 ;;Total ram usage:        5 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    6
  3659 ;; This function calls:
  3660 ;;		_fullSpeedAhead
  3661 ;; This function is called by:
  3662 ;;		_ScanWithRange
  3663 ;;		_main
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text11
  3668  001A0A                     __ptext11:
  3669                           	opt stack 0
  3670  001A0A                     _turnLeft:
  3671                           	opt stack 24
  3672                           
  3673                           ;dc_motor.c: 91: mL->direction=1;
  3674                           
  3675                           ;incstack = 0
  3676  001A0A  0100               	movlb	0	; () banked
  3677  001A0C  EE20 F001          	lfsr	2,1
  3678  001A10  516B               	movf	turnLeft@mL& (0+255),w,b
  3679  001A12  26D9               	addwf	fsr2l,f,c
  3680  001A14  516C               	movf	(turnLeft@mL+1)& (0+255),w,b
  3681  001A16  22DA               	addwfc	fsr2h,f,c
  3682  001A18  0E01               	movlw	1
  3683  001A1A  6EDF               	movwf	indf2,c
  3684                           
  3685                           ;dc_motor.c: 92: mR->direction=0;
  3686  001A1C  0100               	movlb	0	; () banked
  3687  001A1E  EE20 F001          	lfsr	2,1
  3688  001A22  516D               	movf	turnLeft@mR& (0+255),w,b
  3689  001A24  26D9               	addwf	fsr2l,f,c
  3690  001A26  516E               	movf	(turnLeft@mR+1)& (0+255),w,b
  3691  001A28  22DA               	addwfc	fsr2h,f,c
  3692  001A2A  0E00               	movlw	0
  3693  001A2C  6EDF               	movwf	indf2,c
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3697  001A2E  C06B  F065         	movff	turnLeft@mL,fullSpeedAhead@mL
  3698  001A32  C06C  F066         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3699  001A36  C06D  F067         	movff	turnLeft@mR,fullSpeedAhead@mR
  3700  001A3A  C06E  F068         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3701  001A3E  C06F  F069         	movff	turnLeft@power,fullSpeedAhead@power
  3702  001A42  EC9C  F00B         	call	_fullSpeedAhead	;wreg free
  3703  001A46  0012               	return		;funcret
  3704  001A48                     __end_of_turnLeft:
  3705                           	opt stack 0
  3706                           tblptru	equ	0xFF8
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           postinc0	equ	0xFEE
  3711                           wreg	equ	0xFE8
  3712                           indf1	equ	0xFE7
  3713                           fsr1h	equ	0xFE2
  3714                           fsr1l	equ	0xFE1
  3715                           indf2	equ	0xFDF
  3716                           postinc2	equ	0xFDE
  3717                           postdec2	equ	0xFDD
  3718                           plusw2	equ	0xFDB
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _fullSpeedAhead *****************
  3724 ;; Defined at:
  3725 ;;		line 108 in file "dc_motor.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  mL              2    5[BANK0 ] PTR struct DC_motor
  3728 ;;		 -> main@mL(9), 
  3729 ;;  mR              2    7[BANK0 ] PTR struct DC_motor
  3730 ;;		 -> main@mR(9), 
  3731 ;;  power           1    9[BANK0 ] unsigned char 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;		None               void
  3736 ;; Registers used:
  3737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3743 ;;      Params:         0       5       0       0
  3744 ;;      Locals:         0       0       0       0
  3745 ;;      Temps:          0       1       0       0
  3746 ;;      Totals:         0       6       0       0
  3747 ;;Total ram usage:        6 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    5
  3750 ;; This function calls:
  3751 ;;		_setMotorPWM
  3752 ;; This function is called by:
  3753 ;;		_turnLeft
  3754 ;;		_turnRight
  3755 ;;		_fullSpeedBack
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text12
  3761  001738                     __ptext12:
  3762                           	opt stack 0
  3763  001738                     _fullSpeedAhead:
  3764                           	opt stack 24
  3765                           
  3766                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3767                           
  3768                           ;incstack = 0
  3769  001738  D02C               	goto	l65
  3770  00173A                     l2940:
  3771                           
  3772                           ;dc_motor.c: 112: if(mL->power<power){
  3773  00173A  C065  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3774  00173E  C066  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3775  001742  0100               	movlb	0	; () banked
  3776  001744  5169               	movf	fullSpeedAhead@power& (0+255),w,b
  3777  001746  5CDE               	subwf	postinc2,w,c
  3778  001748  B0D8               	btfsc	status,0,c
  3779  00174A  D005               	goto	l2944
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;dc_motor.c: 113: mL->power++;
  3783  00174C  C065  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3784  001750  C066  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3785  001754  2ADF               	incf	indf2,f,c
  3786  001756                     l2944:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;dc_motor.c: 114: }
  3790                           ;dc_motor.c: 115: if(mR->power<power){
  3791  001756  C067  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3792  00175A  C068  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3793  00175E  0100               	movlb	0	; () banked
  3794  001760  5169               	movf	fullSpeedAhead@power& (0+255),w,b
  3795  001762  5CDE               	subwf	postinc2,w,c
  3796  001764  B0D8               	btfsc	status,0,c
  3797  001766  D005               	goto	l2948
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;dc_motor.c: 116: mR->power++;
  3801  001768  C067  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3802  00176C  C068  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3803  001770  2ADF               	incf	indf2,f,c
  3804  001772                     l2948:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;dc_motor.c: 117: }
  3808                           ;dc_motor.c: 118: setMotorPWM(mL);
  3809  001772  C065  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3810  001776  C066  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3811  00177A  EC5A  F008         	call	_setMotorPWM	;wreg free
  3812                           
  3813                           ;dc_motor.c: 119: setMotorPWM(mR);
  3814  00177E  C067  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3815  001782  C068  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3816  001786  EC5A  F008         	call	_setMotorPWM	;wreg free
  3817                           
  3818                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3819  00178A  0E21               	movlw	33
  3820  00178C                     u3347:
  3821  00178C  2EE8               	decfsz	wreg,f,c
  3822  00178E  D7FE               	goto	u3347
  3823  001790  F000               	nop	
  3824  001792                     l65:
  3825  001792  C065  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3826  001796  C066  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3827  00179A  0100               	movlb	0	; () banked
  3828  00179C  5169               	movf	fullSpeedAhead@power& (0+255),w,b
  3829  00179E  5CDE               	subwf	postinc2,w,c
  3830  0017A0  A0D8               	btfss	status,0,c
  3831  0017A2  D7CB               	goto	l2940
  3832                           
  3833                           ; BSR set to: 0
  3834  0017A4  C067  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3835  0017A8  C068  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3836  0017AC  0100               	movlb	0	; () banked
  3837  0017AE  5169               	movf	fullSpeedAhead@power& (0+255),w,b
  3838  0017B0  5CDE               	subwf	postinc2,w,c
  3839  0017B2  B0D8               	btfsc	status,0,c
  3840  0017B4  0012               	return	
  3841  0017B6  D7C1               	goto	l2940
  3842  0017B8                     __end_of_fullSpeedAhead:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           postinc0	equ	0xFEE
  3849                           wreg	equ	0xFE8
  3850                           indf1	equ	0xFE7
  3851                           fsr1h	equ	0xFE2
  3852                           fsr1l	equ	0xFE1
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           plusw2	equ	0xFDB
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _delay_tenth_s *****************
  3862 ;; Defined at:
  3863 ;;		line 32 in file "Movement.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  tenth_second    1    wreg     unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3868 ;;  i               2   37[COMRAM] unsigned int 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;		None               void
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3878 ;;      Params:         0       0       0       0
  3879 ;;      Locals:         3       0       0       0
  3880 ;;      Temps:          1       0       0       0
  3881 ;;      Totals:         4       0       0       0
  3882 ;;Total ram usage:        4 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    3
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_ScanWithRange
  3889 ;;		_main
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text13
  3894  001A48                     __ptext13:
  3895                           	opt stack 0
  3896  001A48                     _delay_tenth_s:
  3897                           	opt stack 27
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;incstack = 0
  3901                           ;delay_tenth_s@tenth_seconds stored from wreg
  3902  001A48  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3903                           
  3904                           ;Movement.c: 33: unsigned int i=0;
  3905  001A4A  0E00               	movlw	0
  3906  001A4C  6E27               	movwf	delay_tenth_s@i+1,c
  3907  001A4E  0E00               	movlw	0
  3908  001A50  6E26               	movwf	delay_tenth_s@i,c
  3909                           
  3910                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3911  001A52  0E00               	movlw	0
  3912  001A54  6E27               	movwf	delay_tenth_s@i+1,c
  3913  001A56  0E01               	movlw	1
  3914  001A58  6E26               	movwf	delay_tenth_s@i,c
  3915  001A5A  D009               	goto	l3102
  3916  001A5C                     l3098:
  3917                           
  3918                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3919  001A5C  0E82               	movlw	130
  3920  001A5E  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3921  001A60  0EDE               	movlw	222
  3922  001A62                     u3357:
  3923  001A62  2EE8               	decfsz	wreg,f,c
  3924  001A64  D7FE               	goto	u3357
  3925  001A66  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3926  001A68  D7FC               	goto	u3357
  3927  001A6A  4A26               	infsnz	delay_tenth_s@i,f,c
  3928  001A6C  2A27               	incf	delay_tenth_s@i+1,f,c
  3929  001A6E                     l3102:
  3930  001A6E  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3931  001A70  0D02               	mullw	2
  3932  001A72  5026               	movf	delay_tenth_s@i,w,c
  3933  001A74  5CF3               	subwf	prodl,w,c
  3934  001A76  5027               	movf	delay_tenth_s@i+1,w,c
  3935  001A78  58F4               	subwfb	prodh,w,c
  3936  001A7A  A0D8               	btfss	status,0,c
  3937  001A7C  0012               	return	
  3938  001A7E  D7EE               	goto	l3098
  3939  001A80                     __end_of_delay_tenth_s:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           indf1	equ	0xFE7
  3948                           fsr1h	equ	0xFE2
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           plusw2	equ	0xFDB
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _ScanIR *****************
  3959 ;; Defined at:
  3960 ;;		line 44 in file "Movement.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3963 ;;		 -> main@mL(9), 
  3964 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3965 ;;		 -> main@mR(9), 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  buf            40   22[BANK0 ] unsigned char [40]
  3968 ;;  SensorResult    4   64[BANK0 ] unsigned int [2]
  3969 ;;  DirectionMov    2   62[BANK0 ] const unsigned int 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3979 ;;      Params:         0       4       0       0
  3980 ;;      Locals:         0      46       0       0
  3981 ;;      Temps:          0       1       0       0
  3982 ;;      Totals:         0      51       0       0
  3983 ;;Total ram usage:       51 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    7
  3986 ;; This function calls:
  3987 ;;		_LCD_String
  3988 ;;		_SendLCD
  3989 ;;		_SetLine
  3990 ;;		_grabLeftIR
  3991 ;;		_grabRightIR
  3992 ;;		_sprintf
  3993 ;;		_stop
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text14
  4000  001216                     __ptext14:
  4001                           	opt stack 0
  4002  001216                     _ScanIR:
  4003                           	opt stack 23
  4004                           
  4005                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4006                           
  4007                           ;incstack = 0
  4008  001216  C0F8  F0A0         	movff	ScanIR@F3879,ScanIR@SensorResult
  4009  00121A  C0F9  F0A1         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4010  00121E  C0FA  F0A2         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4011  001222  C0FB  F0A3         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4012                           
  4013                           ;Movement.c: 48: char buf[40];
  4014                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=2500;
  4015  001226  0E09               	movlw	9
  4016  001228  0100               	movlb	0	; () banked
  4017  00122A  6F9F               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4018  00122C  0EC4               	movlw	196
  4019  00122E  6F9E               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4023  001230  EC15  F00C         	call	_grabLeftIR	;wreg free
  4024  001234  C024  F0A0         	movff	?_grabLeftIR,ScanIR@SensorResult
  4025  001238  C025  F0A1         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4026                           
  4027                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4028  00123C  ECDC  F00B         	call	_grabRightIR	;wreg free
  4029  001240  C024  F0A2         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4030  001244  C025  F0A3         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4031                           
  4032                           ;Movement.c: 60: CAP1BUFH=0;
  4033  001248  0E00               	movlw	0
  4034  00124A  6E69               	movwf	3945,c	;volatile
  4035                           
  4036                           ;Movement.c: 61: CAP1BUFL=0;
  4037  00124C  0E00               	movlw	0
  4038  00124E  6E68               	movwf	3944,c	;volatile
  4039                           
  4040                           ;Movement.c: 62: CAP2BUFH=0;
  4041  001250  0E00               	movlw	0
  4042  001252  6E67               	movwf	3943,c	;volatile
  4043                           
  4044                           ;Movement.c: 63: CAP2BUFL=0;
  4045  001254  0E00               	movlw	0
  4046  001256  6E66               	movwf	3942,c	;volatile
  4047                           
  4048                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4049  001258  0E00               	movlw	0
  4050  00125A  6E28               	movwf	SendLCD@type,c
  4051  00125C  0E01               	movlw	1
  4052  00125E  ECA6  F00D         	call	_SendLCD
  4053                           
  4054                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4055  001262  0E21               	movlw	33
  4056  001264                     u3367:
  4057  001264  2EE8               	decfsz	wreg,f,c
  4058  001266  D7FE               	goto	u3367
  4059  001268  F000               	nop	
  4060                           
  4061                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4062  00126A  0E00               	movlw	0
  4063  00126C  6E28               	movwf	SendLCD@type,c
  4064  00126E  0E02               	movlw	2
  4065  001270  ECA6  F00D         	call	_SendLCD
  4066                           
  4067                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4068  001274  0E06               	movlw	6
  4069  001276  0100               	movlb	0	; () banked
  4070  001278  6F75               	movwf	??_ScanIR& (0+255),b
  4071  00127A  0E30               	movlw	48
  4072  00127C                     u3377:
  4073  00127C  2EE8               	decfsz	wreg,f,c
  4074  00127E  D7FE               	goto	u3377
  4075  001280  2F75               	decfsz	??_ScanIR& (0+255),f,b
  4076  001282  D7FC               	goto	u3377
  4077  001284  D000               	nop2	
  4078                           
  4079                           ;Movement.c: 70: SetLine(1);
  4080  001286  0E01               	movlw	1
  4081  001288  EC8E  F00D         	call	_SetLine
  4082                           
  4083                           ;Movement.c: 71: LCD_String("     ScanIR");
  4084  00128C  0E2D               	movlw	low STR_1
  4085  00128E  6E2A               	movwf	LCD_String@string,c
  4086  001290  0E03               	movlw	high STR_1
  4087  001292  6E2B               	movwf	LCD_String@string+1,c
  4088  001294  EC4E  F00C         	call	_LCD_String	;wreg free
  4089                           
  4090                           ;Movement.c: 72: SetLine(2);
  4091  001298  0E02               	movlw	2
  4092  00129A  EC8E  F00D         	call	_SetLine
  4093                           
  4094                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4095  00129E  0E76               	movlw	low ScanIR@buf
  4096  0012A0  0100               	movlb	0	; () banked
  4097  0012A2  6F60               	movwf	sprintf@sp& (0+255),b
  4098  0012A4  0E00               	movlw	high ScanIR@buf
  4099  0012A6  0100               	movlb	0	; () banked
  4100  0012A8  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  4101  0012AA  0E0C               	movlw	low (STR_6+1)
  4102  0012AC  0100               	movlb	0	; () banked
  4103  0012AE  6F62               	movwf	sprintf@f& (0+255),b
  4104  0012B0  0E03               	movlw	high (STR_6+1)
  4105  0012B2  0100               	movlb	0	; () banked
  4106  0012B4  6F63               	movwf	(sprintf@f+1)& (0+255),b
  4107  0012B6  C0A0  F064         	movff	ScanIR@SensorResult,?_sprintf+4
  4108  0012BA  C0A1  F065         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4109  0012BE  C0A2  F066         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4110  0012C2  C0A3  F067         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4111  0012C6  ECDB  F006         	call	_sprintf	;wreg free
  4112                           
  4113                           ;Movement.c: 74: LCD_String(buf);
  4114  0012CA  0E76               	movlw	low ScanIR@buf
  4115  0012CC  6E2A               	movwf	LCD_String@string,c
  4116  0012CE  0E00               	movlw	high ScanIR@buf
  4117  0012D0  6E2B               	movwf	LCD_String@string+1,c
  4118  0012D2  EC4E  F00C         	call	_LCD_String	;wreg free
  4119                           
  4120                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4121                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4122  0012D6  0100               	movlb	0	; () banked
  4123  0012D8  51A0               	movf	ScanIR@SensorResult& (0+255),w,b
  4124  0012DA  0100               	movlb	0	; () banked
  4125  0012DC  5D9E               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4126  0012DE  0100               	movlb	0	; () banked
  4127  0012E0  51A1               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4128  0012E2  0100               	movlb	0	; () banked
  4129  0012E4  599F               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4130  0012E6  B0D8               	btfsc	status,0,c
  4131  0012E8  D00C               	goto	l3314
  4132                           
  4133                           ; BSR set to: 0
  4134  0012EA  0100               	movlb	0	; () banked
  4135  0012EC  51A2               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4136  0012EE  0100               	movlb	0	; () banked
  4137  0012F0  5D9E               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4138  0012F2  0100               	movlb	0	; () banked
  4139  0012F4  51A3               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4140  0012F6  0100               	movlb	0	; () banked
  4141  0012F8  599F               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4142  0012FA  B0D8               	btfsc	status,0,c
  4143  0012FC  D002               	goto	l3314
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;Movement.c: 80: return 2;
  4147  0012FE  0E02               	movlw	2
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;Movement.c: 81: } else {
  4151                           
  4152                           ; BSR set to: 0
  4153  001300  0012               	return	
  4154  001302                     l3314:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;Movement.c: 82: stop(mL,mR);
  4158  001302  C071  F065         	movff	ScanIR@mL,stop@mL
  4159  001306  C072  F066         	movff	ScanIR@mL+1,stop@mL+1
  4160  00130A  C073  F067         	movff	ScanIR@mR,stop@mR
  4161  00130E  C074  F068         	movff	ScanIR@mR+1,stop@mR+1
  4162  001312  ECCB  F00A         	call	_stop	;wreg free
  4163                           
  4164                           ;Movement.c: 83: return 0;
  4165  001316  0E00               	movlw	0
  4166  001318  0012               	return	
  4167  00131A                     __end_of_ScanIR:
  4168                           	opt stack 0
  4169                           tblptru	equ	0xFF8
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           fsr1h	equ	0xFE2
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           plusw2	equ	0xFDB
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _stop *****************
  4187 ;; Defined at:
  4188 ;;		line 67 in file "dc_motor.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  mL              2    5[BANK0 ] PTR struct DC_motor
  4191 ;;		 -> main@mL(9), 
  4192 ;;  mR              2    7[BANK0 ] PTR struct DC_motor
  4193 ;;		 -> main@mR(9), 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;		None               void
  4198 ;; Registers used:
  4199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4205 ;;      Params:         0       4       0       0
  4206 ;;      Locals:         0       0       0       0
  4207 ;;      Temps:          0       0       0       0
  4208 ;;      Totals:         0       4       0       0
  4209 ;;Total ram usage:        4 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    5
  4212 ;; This function calls:
  4213 ;;		_setMotorPWM
  4214 ;; This function is called by:
  4215 ;;		_ScanIR
  4216 ;;		_ScanWithRange
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text15
  4222  001596                     __ptext15:
  4223                           	opt stack 0
  4224  001596                     _stop:
  4225                           	opt stack 25
  4226                           
  4227                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4228                           
  4229                           ;incstack = 0
  4230  001596  D028               	goto	l3030
  4231  001598                     l3016:
  4232                           
  4233                           ;dc_motor.c: 71: if(mL->power>0){
  4234  001598  C065  FFD9         	movff	stop@mL,fsr2l
  4235  00159C  C066  FFDA         	movff	stop@mL+1,fsr2h
  4236  0015A0  50DF               	movf	indf2,w,c
  4237  0015A2  B4D8               	btfsc	status,2,c
  4238  0015A4  D005               	goto	l3020
  4239                           
  4240                           ;dc_motor.c: 72: mL->power--;
  4241  0015A6  C065  FFD9         	movff	stop@mL,fsr2l
  4242  0015AA  C066  FFDA         	movff	stop@mL+1,fsr2h
  4243  0015AE  06DF               	decf	indf2,f,c
  4244  0015B0                     l3020:
  4245                           
  4246                           ;dc_motor.c: 73: }
  4247                           ;dc_motor.c: 74: if(mR->power>0){
  4248  0015B0  C067  FFD9         	movff	stop@mR,fsr2l
  4249  0015B4  C068  FFDA         	movff	stop@mR+1,fsr2h
  4250  0015B8  50DF               	movf	indf2,w,c
  4251  0015BA  B4D8               	btfsc	status,2,c
  4252  0015BC  D005               	goto	l3024
  4253                           
  4254                           ;dc_motor.c: 75: mR->power--;
  4255  0015BE  C067  FFD9         	movff	stop@mR,fsr2l
  4256  0015C2  C068  FFDA         	movff	stop@mR+1,fsr2h
  4257  0015C6  06DF               	decf	indf2,f,c
  4258  0015C8                     l3024:
  4259                           
  4260                           ;dc_motor.c: 76: }
  4261                           ;dc_motor.c: 77: setMotorPWM(mL);
  4262  0015C8  C065  F032         	movff	stop@mL,setMotorPWM@m
  4263  0015CC  C066  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4264  0015D0  EC5A  F008         	call	_setMotorPWM	;wreg free
  4265                           
  4266                           ;dc_motor.c: 78: setMotorPWM(mR);
  4267  0015D4  C067  F032         	movff	stop@mR,setMotorPWM@m
  4268  0015D8  C068  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4269  0015DC  EC5A  F008         	call	_setMotorPWM	;wreg free
  4270                           
  4271                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4272  0015E0  0E21               	movlw	33
  4273  0015E2                     u3387:
  4274  0015E2  2EE8               	decfsz	wreg,f,c
  4275  0015E4  D7FE               	goto	u3387
  4276  0015E6  F000               	nop	
  4277  0015E8                     l3030:
  4278  0015E8  C065  FFD9         	movff	stop@mL,fsr2l
  4279  0015EC  C066  FFDA         	movff	stop@mL+1,fsr2h
  4280  0015F0  50DF               	movf	indf2,w,c
  4281  0015F2  A4D8               	btfss	status,2,c
  4282  0015F4  D7D1               	goto	l3016
  4283  0015F6  C067  FFD9         	movff	stop@mR,fsr2l
  4284  0015FA  C068  FFDA         	movff	stop@mR+1,fsr2h
  4285  0015FE  50DF               	movf	indf2,w,c
  4286  001600  A4D8               	btfss	status,2,c
  4287  001602  D7CA               	goto	l3016
  4288                           
  4289                           ;dc_motor.c: 80: }
  4290                           ;dc_motor.c: 81: mL->direction=1;
  4291  001604  0100               	movlb	0	; () banked
  4292  001606  EE20 F001          	lfsr	2,1
  4293  00160A  5165               	movf	stop@mL& (0+255),w,b
  4294  00160C  26D9               	addwf	fsr2l,f,c
  4295  00160E  5166               	movf	(stop@mL+1)& (0+255),w,b
  4296  001610  22DA               	addwfc	fsr2h,f,c
  4297  001612  0E01               	movlw	1
  4298  001614  6EDF               	movwf	indf2,c
  4299                           
  4300                           ;dc_motor.c: 82: mR->direction=1;
  4301  001616  0100               	movlb	0	; () banked
  4302  001618  EE20 F001          	lfsr	2,1
  4303  00161C  5167               	movf	stop@mR& (0+255),w,b
  4304  00161E  26D9               	addwf	fsr2l,f,c
  4305  001620  5168               	movf	(stop@mR+1)& (0+255),w,b
  4306  001622  22DA               	addwfc	fsr2h,f,c
  4307  001624  0E01               	movlw	1
  4308  001626  6EDF               	movwf	indf2,c
  4309                           
  4310                           ; BSR set to: 0
  4311  001628  0012               	return		;funcret
  4312  00162A                     __end_of_stop:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           postinc0	equ	0xFEE
  4319                           wreg	equ	0xFE8
  4320                           indf1	equ	0xFE7
  4321                           fsr1h	equ	0xFE2
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           plusw2	equ	0xFDB
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _setMotorPWM *****************
  4332 ;; Defined at:
  4333 ;;		line 26 in file "dc_motor.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4336 ;;		 -> main@mR(9), main@mL(9), 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  PWMduty         2   51[COMRAM] int 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;		None               void
  4341 ;; Registers used:
  4342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4348 ;;      Params:         2       0       0       0
  4349 ;;      Locals:         2       0       0       0
  4350 ;;      Temps:          0       5       0       0
  4351 ;;      Totals:         4       5       0       0
  4352 ;;Total ram usage:        9 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    4
  4355 ;; This function calls:
  4356 ;;		___awdiv
  4357 ;;		___wmul
  4358 ;; This function is called by:
  4359 ;;		_stop
  4360 ;;		_fullSpeedAhead
  4361 ;;		_setMotorFullSpeed
  4362 ;;		_stopMotor
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text16
  4367  0010B4                     __ptext16:
  4368                           	opt stack 0
  4369  0010B4                     _setMotorPWM:
  4370                           	opt stack 24
  4371                           
  4372                           ;dc_motor.c: 28: int PWMduty;
  4373                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;incstack = 0
  4377  0010B4  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4378  0010B8  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4379  0010BC  50DF               	movf	indf2,w,c
  4380  0010BE  0100               	movlb	0	; () banked
  4381  0010C0  6F60               	movwf	??_setMotorPWM& (0+255),b
  4382  0010C2  0100               	movlb	0	; () banked
  4383  0010C4  5160               	movf	??_setMotorPWM& (0+255),w,b
  4384  0010C6  6E24               	movwf	___wmul@multiplier,c
  4385  0010C8  6A25               	clrf	___wmul@multiplier+1,c
  4386  0010CA  EE20 F007          	lfsr	2,7
  4387  0010CE  5032               	movf	setMotorPWM@m,w,c
  4388  0010D0  26D9               	addwf	fsr2l,f,c
  4389  0010D2  5033               	movf	setMotorPWM@m+1,w,c
  4390  0010D4  22DA               	addwfc	fsr2h,f,c
  4391  0010D6  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4392  0010DA  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4393  0010DE  ECD1  F00D         	call	___wmul	;wreg free
  4394  0010E2  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4395  0010E6  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4396  0010EA  0E00               	movlw	0
  4397  0010EC  6E2D               	movwf	___awdiv@divisor+1,c
  4398  0010EE  0E64               	movlw	100
  4399  0010F0  6E2C               	movwf	___awdiv@divisor,c
  4400  0010F2  EC5A  F00B         	call	___awdiv	;wreg free
  4401  0010F6  C02A  F034         	movff	?___awdiv,setMotorPWM@PWMduty
  4402  0010FA  C02B  F035         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4403                           
  4404                           ;dc_motor.c: 32: if (m->direction)
  4405  0010FE  EE20 F001          	lfsr	2,1
  4406  001102  5032               	movf	setMotorPWM@m,w,c
  4407  001104  26D9               	addwf	fsr2l,f,c
  4408  001106  5033               	movf	setMotorPWM@m+1,w,c
  4409  001108  22DA               	addwfc	fsr2h,f,c
  4410  00110A  50DF               	movf	indf2,w,c
  4411  00110C  B4D8               	btfsc	status,2,c
  4412  00110E  D037               	goto	l2930
  4413                           
  4414                           ;dc_motor.c: 33: {
  4415                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4416  001110  EE20 F006          	lfsr	2,6
  4417  001114  5032               	movf	setMotorPWM@m,w,c
  4418  001116  26D9               	addwf	fsr2l,f,c
  4419  001118  5033               	movf	setMotorPWM@m+1,w,c
  4420  00111A  22DA               	addwfc	fsr2h,f,c
  4421  00111C  50DF               	movf	indf2,w,c
  4422  00111E  0100               	movlb	0	; () banked
  4423  001120  6F60               	movwf	??_setMotorPWM& (0+255),b
  4424  001122  0E01               	movlw	1
  4425  001124  0100               	movlb	0	; () banked
  4426  001126  6F61               	movwf	(??_setMotorPWM+1)& (0+255),b
  4427  001128  0100               	movlb	0	; () banked
  4428  00112A  2B60               	incf	??_setMotorPWM& (0+255),f,b
  4429  00112C  D003               	goto	u2264
  4430  00112E                     u2265:
  4431  00112E  0100               	movlb	0	; () banked
  4432  001130  90D8               	bcf	status,0,c
  4433  001132  3761               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4434  001134                     u2264:
  4435  001134  0100               	movlb	0	; () banked
  4436  001136  2F60               	decfsz	??_setMotorPWM& (0+255),f,b
  4437  001138  D7FA               	goto	u2265
  4438  00113A  0100               	movlb	0	; () banked
  4439  00113C  5161               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4440  00113E  108A               	iorwf	3978,w,c	;volatile
  4441  001140  6E8A               	movwf	3978,c	;volatile
  4442                           
  4443                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4444  001142  EE20 F007          	lfsr	2,7
  4445  001146  5032               	movf	setMotorPWM@m,w,c
  4446  001148  26D9               	addwf	fsr2l,f,c
  4447  00114A  5033               	movf	setMotorPWM@m+1,w,c
  4448  00114C  22DA               	addwfc	fsr2h,f,c
  4449  00114E  CFDE F060          	movff	postinc2,??_setMotorPWM
  4450  001152  CFDD F061          	movff	postdec2,??_setMotorPWM+1
  4451  001156  C034  F062         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4452  00115A  C035  F063         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4453  00115E  0100               	movlb	0	; () banked
  4454  001160  1F62               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4455  001162  1F63               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4456  001164  4B62               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4457  001166  2B63               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4458  001168  0100               	movlb	0	; () banked
  4459  00116A  5160               	movf	??_setMotorPWM& (0+255),w,b
  4460  00116C  0100               	movlb	0	; () banked
  4461  00116E  2562               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4462  001170  6E34               	movwf	setMotorPWM@PWMduty,c
  4463  001172  0100               	movlb	0	; () banked
  4464  001174  5161               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4465  001176  0100               	movlb	0	; () banked
  4466  001178  2163               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4467  00117A  6E35               	movwf	setMotorPWM@PWMduty+1,c
  4468                           
  4469                           ;dc_motor.c: 36: }
  4470  00117C  D01A               	goto	l35
  4471  00117E                     l2930:
  4472                           
  4473                           ;dc_motor.c: 37: else
  4474                           ;dc_motor.c: 38: {
  4475                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4476  00117E  EE20 F006          	lfsr	2,6
  4477  001182  5032               	movf	setMotorPWM@m,w,c
  4478  001184  26D9               	addwf	fsr2l,f,c
  4479  001186  5033               	movf	setMotorPWM@m+1,w,c
  4480  001188  22DA               	addwfc	fsr2h,f,c
  4481  00118A  50DF               	movf	indf2,w,c
  4482  00118C  0100               	movlb	0	; () banked
  4483  00118E  6F60               	movwf	??_setMotorPWM& (0+255),b
  4484  001190  0E01               	movlw	1
  4485  001192  0100               	movlb	0	; () banked
  4486  001194  6F61               	movwf	(??_setMotorPWM+1)& (0+255),b
  4487  001196  0100               	movlb	0	; () banked
  4488  001198  2B60               	incf	??_setMotorPWM& (0+255),f,b
  4489  00119A  D003               	goto	u2274
  4490  00119C                     u2275:
  4491  00119C  0100               	movlb	0	; () banked
  4492  00119E  90D8               	bcf	status,0,c
  4493  0011A0  3761               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4494  0011A2                     u2274:
  4495  0011A2  0100               	movlb	0	; () banked
  4496  0011A4  2F60               	decfsz	??_setMotorPWM& (0+255),f,b
  4497  0011A6  D7FA               	goto	u2275
  4498  0011A8  0100               	movlb	0	; () banked
  4499  0011AA  5161               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4500  0011AC  0AFF               	xorlw	255
  4501  0011AE  148A               	andwf	3978,w,c	;volatile
  4502  0011B0  6E8A               	movwf	3978,c	;volatile
  4503  0011B2                     l35:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;dc_motor.c: 40: }
  4507                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4508  0011B2  EE20 F002          	lfsr	2,2
  4509  0011B6  5032               	movf	setMotorPWM@m,w,c
  4510  0011B8  26D9               	addwf	fsr2l,f,c
  4511  0011BA  5033               	movf	setMotorPWM@m+1,w,c
  4512  0011BC  22DA               	addwfc	fsr2h,f,c
  4513  0011BE  CFDE F060          	movff	postinc2,??_setMotorPWM
  4514  0011C2  CFDD F061          	movff	postdec2,??_setMotorPWM+1
  4515  0011C6  C060  FFD9         	movff	??_setMotorPWM,fsr2l
  4516  0011CA  C061  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4517  0011CE  4434               	rlncf	setMotorPWM@PWMduty,w,c
  4518  0011D0  46E8               	rlncf	wreg,f,c
  4519  0011D2  0BFC               	andlw	252
  4520  0011D4  6EDF               	movwf	indf2,c
  4521                           
  4522                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4523  0011D6  EE20 F004          	lfsr	2,4
  4524  0011DA  5032               	movf	setMotorPWM@m,w,c
  4525  0011DC  26D9               	addwf	fsr2l,f,c
  4526  0011DE  5033               	movf	setMotorPWM@m+1,w,c
  4527  0011E0  22DA               	addwfc	fsr2h,f,c
  4528  0011E2  CFDE F060          	movff	postinc2,??_setMotorPWM
  4529  0011E6  CFDD F061          	movff	postdec2,??_setMotorPWM+1
  4530  0011EA  C060  FFD9         	movff	??_setMotorPWM,fsr2l
  4531  0011EE  C061  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4532  0011F2  C034  F062         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4533  0011F6  C035  F063         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4534  0011FA  0E06               	movlw	6
  4535  0011FC  0100               	movlb	0	; () banked
  4536  0011FE  6F64               	movwf	(??_setMotorPWM+4)& (0+255),b
  4537  001200                     u2285:
  4538  001200  0100               	movlb	0	; () banked
  4539  001202  3563               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4540  001204  3363               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4541  001206  3362               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4542  001208  0100               	movlb	0	; () banked
  4543  00120A  2F64               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4544  00120C  D7F9               	goto	u2285
  4545  00120E  0100               	movlb	0	; () banked
  4546  001210  5162               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4547  001212  6EDF               	movwf	indf2,c
  4548                           
  4549                           ; BSR set to: 0
  4550  001214  0012               	return		;funcret
  4551  001216                     __end_of_setMotorPWM:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           postinc0	equ	0xFEE
  4558                           wreg	equ	0xFE8
  4559                           indf1	equ	0xFE7
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           plusw2	equ	0xFDB
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function ___awdiv *****************
  4571 ;; Defined at:
  4572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  dividend        2   41[COMRAM] int 
  4575 ;;  divisor         2   43[COMRAM] int 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  quotient        2   47[COMRAM] int 
  4578 ;;  sign            1   46[COMRAM] unsigned char 
  4579 ;;  counter         1   45[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  2   41[COMRAM] int 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4589 ;;      Params:         4       0       0       0
  4590 ;;      Locals:         4       0       0       0
  4591 ;;      Temps:          0       0       0       0
  4592 ;;      Totals:         8       0       0       0
  4593 ;;Total ram usage:        8 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    3
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_setMotorPWM
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text17
  4604  0016B4                     __ptext17:
  4605                           	opt stack 0
  4606  0016B4                     ___awdiv:
  4607                           	opt stack 24
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;incstack = 0
  4611  0016B4  0E00               	movlw	0
  4612  0016B6  6E2F               	movwf	___awdiv@sign,c
  4613  0016B8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4614  0016BA  D006               	goto	l2888
  4615  0016BC  6C2C               	negf	___awdiv@divisor,c
  4616  0016BE  1E2D               	comf	___awdiv@divisor+1,f,c
  4617  0016C0  B0D8               	btfsc	status,0,c
  4618  0016C2  2A2D               	incf	___awdiv@divisor+1,f,c
  4619  0016C4  0E01               	movlw	1
  4620  0016C6  6E2F               	movwf	___awdiv@sign,c
  4621  0016C8                     l2888:
  4622  0016C8  AE2B               	btfss	___awdiv@dividend+1,7,c
  4623  0016CA  D006               	goto	l2894
  4624  0016CC  6C2A               	negf	___awdiv@dividend,c
  4625  0016CE  1E2B               	comf	___awdiv@dividend+1,f,c
  4626  0016D0  B0D8               	btfsc	status,0,c
  4627  0016D2  2A2B               	incf	___awdiv@dividend+1,f,c
  4628  0016D4  0E01               	movlw	1
  4629  0016D6  1A2F               	xorwf	___awdiv@sign,f,c
  4630  0016D8                     l2894:
  4631  0016D8  0E00               	movlw	0
  4632  0016DA  6E31               	movwf	___awdiv@quotient+1,c
  4633  0016DC  0E00               	movlw	0
  4634  0016DE  6E30               	movwf	___awdiv@quotient,c
  4635  0016E0  502C               	movf	___awdiv@divisor,w,c
  4636  0016E2  102D               	iorwf	___awdiv@divisor+1,w,c
  4637  0016E4  B4D8               	btfsc	status,2,c
  4638  0016E6  D01C               	goto	l2916
  4639  0016E8  0E01               	movlw	1
  4640  0016EA  6E2E               	movwf	___awdiv@counter,c
  4641  0016EC  D004               	goto	l2902
  4642  0016EE                     l2900:
  4643  0016EE  90D8               	bcf	status,0,c
  4644  0016F0  362C               	rlcf	___awdiv@divisor,f,c
  4645  0016F2  362D               	rlcf	___awdiv@divisor+1,f,c
  4646  0016F4  2A2E               	incf	___awdiv@counter,f,c
  4647  0016F6                     l2902:
  4648  0016F6  AE2D               	btfss	___awdiv@divisor+1,7,c
  4649  0016F8  D7FA               	goto	l2900
  4650  0016FA                     l2904:
  4651  0016FA  90D8               	bcf	status,0,c
  4652  0016FC  3630               	rlcf	___awdiv@quotient,f,c
  4653  0016FE  3631               	rlcf	___awdiv@quotient+1,f,c
  4654  001700  502C               	movf	___awdiv@divisor,w,c
  4655  001702  5C2A               	subwf	___awdiv@dividend,w,c
  4656  001704  502D               	movf	___awdiv@divisor+1,w,c
  4657  001706  582B               	subwfb	___awdiv@dividend+1,w,c
  4658  001708  A0D8               	btfss	status,0,c
  4659  00170A  D005               	goto	l2912
  4660  00170C  502C               	movf	___awdiv@divisor,w,c
  4661  00170E  5E2A               	subwf	___awdiv@dividend,f,c
  4662  001710  502D               	movf	___awdiv@divisor+1,w,c
  4663  001712  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4664  001714  8030               	bsf	___awdiv@quotient,0,c
  4665  001716                     l2912:
  4666  001716  90D8               	bcf	status,0,c
  4667  001718  322D               	rrcf	___awdiv@divisor+1,f,c
  4668  00171A  322C               	rrcf	___awdiv@divisor,f,c
  4669  00171C  2E2E               	decfsz	___awdiv@counter,f,c
  4670  00171E  D7ED               	goto	l2904
  4671  001720                     l2916:
  4672  001720  502F               	movf	___awdiv@sign,w,c
  4673  001722  B4D8               	btfsc	status,2,c
  4674  001724  D004               	goto	l2920
  4675  001726  6C30               	negf	___awdiv@quotient,c
  4676  001728  1E31               	comf	___awdiv@quotient+1,f,c
  4677  00172A  B0D8               	btfsc	status,0,c
  4678  00172C  2A31               	incf	___awdiv@quotient+1,f,c
  4679  00172E                     l2920:
  4680  00172E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4681  001732  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4682  001736  0012               	return	
  4683  001738                     __end_of___awdiv:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           intcon	equ	0xFF2
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           indf1	equ	0xFE7
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           plusw2	equ	0xFDB
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _sprintf *****************
  4703 ;; Defined at:
  4704 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  4707 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4708 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  4709 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  tmpval          4    0        struct .
  4712 ;;  cp              3    0        PTR const unsigned char 
  4713 ;;  width           2   14[BANK0 ] int 
  4714 ;;  val             2   11[BANK0 ] unsigned int 
  4715 ;;  ap              2    8[BANK0 ] PTR void [1]
  4716 ;;		 -> ?_sprintf(2), 
  4717 ;;  len             2    0        unsigned int 
  4718 ;;  c               1   16[BANK0 ] char 
  4719 ;;  flag            1   13[BANK0 ] unsigned char 
  4720 ;;  prec            1   10[BANK0 ] char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  2    0[BANK0 ] int 
  4723 ;; Registers used:
  4724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4730 ;;      Params:         0       8       0       0
  4731 ;;      Locals:         0       9       0       0
  4732 ;;      Temps:          4       0       0       0
  4733 ;;      Totals:         4      17       0       0
  4734 ;;Total ram usage:       21 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    4
  4737 ;; This function calls:
  4738 ;;		___lwdiv
  4739 ;;		___lwmod
  4740 ;;		___wmul
  4741 ;;		_isdigit
  4742 ;; This function is called by:
  4743 ;;		_ScanIR
  4744 ;;		_ScanWithRange
  4745 ;;		_main
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text18
  4750  000DB6                     __ptext18:
  4751                           	opt stack 0
  4752  000DB6                     _sprintf:
  4753                           	opt stack 26
  4754                           
  4755                           ;doprnt.c: 494: va_list ap;
  4756                           ;doprnt.c: 499: signed char c;
  4757                           ;doprnt.c: 501: int width;
  4758                           ;doprnt.c: 506: signed char prec;
  4759                           ;doprnt.c: 508: unsigned char flag;
  4760                           ;doprnt.c: 523: union {
  4761                           ;doprnt.c: 524: unsigned long vd;
  4762                           ;doprnt.c: 525: double integ;
  4763                           ;doprnt.c: 526: } tmpval;
  4764                           ;doprnt.c: 528: unsigned int val;
  4765                           ;doprnt.c: 529: unsigned len;
  4766                           ;doprnt.c: 530: const char * cp;
  4767                           ;doprnt.c: 533: *ap = __va_start();
  4768                           
  4769                           ;incstack = 0
  4770  000DB6  0E64               	movlw	low (?_sprintf+4)
  4771  000DB8  0100               	movlb	0	; () banked
  4772  000DBA  6F68               	movwf	sprintf@ap& (0+255),b
  4773  000DBC  0E00               	movlw	high (?_sprintf+4)
  4774  000DBE  0100               	movlb	0	; () banked
  4775  000DC0  6F69               	movwf	(sprintf@ap+1)& (0+255),b
  4776                           
  4777                           ;doprnt.c: 536: while(c = *f++) {
  4778  000DC2  D163               	goto	l3212
  4779  000DC4                     l3106:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 538: if(c != '%')
  4783  000DC4  0E25               	movlw	37
  4784  000DC6  0100               	movlb	0	; () banked
  4785  000DC8  1970               	xorwf	sprintf@c& (0+255),w,b
  4786  000DCA  B4D8               	btfsc	status,2,c
  4787  000DCC  D00A               	goto	l3112
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;doprnt.c: 540: {
  4791                           ;doprnt.c: 541: ((*sp++ = (c)));
  4792  000DCE  C060  FFD9         	movff	sprintf@sp,fsr2l
  4793  000DD2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4794  000DD6  C070  FFDF         	movff	sprintf@c,indf2
  4795                           
  4796                           ; BSR set to: 0
  4797  000DDA  0100               	movlb	0	; () banked
  4798  000DDC  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4799  000DDE  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4800                           
  4801                           ;doprnt.c: 542: continue;
  4802  000DE0  D154               	goto	l3212
  4803  000DE2                     l3112:
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;doprnt.c: 543: }
  4807                           ;doprnt.c: 546: width = 0;
  4808  000DE2  0E00               	movlw	0
  4809  000DE4  0100               	movlb	0	; () banked
  4810  000DE6  6F6F               	movwf	(sprintf@width+1)& (0+255),b
  4811  000DE8  0E00               	movlw	0
  4812  000DEA  6F6E               	movwf	sprintf@width& (0+255),b
  4813                           
  4814                           ;doprnt.c: 548: flag = 0;
  4815  000DEC  0E00               	movlw	0
  4816  000DEE  0100               	movlb	0	; () banked
  4817  000DF0  6F6D               	movwf	sprintf@flag& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 551: switch(*f) {
  4821                           
  4822                           ;doprnt.c: 550: for(;;) {
  4823  000DF2  D005               	goto	l3118
  4824  000DF4                     l3114:
  4825                           
  4826                           ;doprnt.c: 580: flag |= 0x04;
  4827  000DF4  0100               	movlb	0	; () banked
  4828  000DF6  856D               	bsf	sprintf@flag& (0+255),2,b
  4829                           
  4830                           ;doprnt.c: 581: f++;
  4831  000DF8  0100               	movlb	0	; () banked
  4832  000DFA  4B62               	infsnz	sprintf@f& (0+255),f,b
  4833  000DFC  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4834  000DFE                     l3118:
  4835  000DFE  C062  FFF6         	movff	sprintf@f,tblptrl
  4836  000E02  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4837  000E06                     	if	0	;tblptru may be non-zero
  4838  000E06                     	endif
  4839  000E06                     	if	0	;tblptru may be non-zero
  4840  000E06                     	endif
  4841  000E06  0008               	tblrd		*
  4842  000E08  50F5               	movf	tablat,w,c
  4843                           
  4844                           ; Switch size 1, requested type "space"
  4845                           ; Number of cases is 1, Range of values is 48 to 48
  4846                           ; switch strategies available:
  4847                           ; Name         Instructions Cycles
  4848                           ; simple_byte            4     3 (average)
  4849                           ;	Chosen strategy is simple_byte
  4850  000E0A  0A30               	xorlw	48	; case 48
  4851  000E0C  B4D8               	btfsc	status,2,c
  4852  000E0E  D7F2               	goto	l3114
  4853                           
  4854                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4855                           
  4856                           ;doprnt.c: 586: }
  4857                           
  4858                           ;doprnt.c: 585: break;
  4859  000E10  C062  FFF6         	movff	sprintf@f,tblptrl
  4860  000E14  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4861  000E18                     	if	0	;tblptru may be non-zero
  4862  000E18                     	endif
  4863  000E18                     	if	0	;tblptru may be non-zero
  4864  000E18                     	endif
  4865  000E18  0008               	tblrd		*
  4866  000E1A  50F5               	movf	tablat,w,c
  4867  000E1C  ECF5  F00D         	call	_isdigit
  4868  000E20  A0D8               	btfss	status,0,c
  4869  000E22  D036               	goto	l3134
  4870                           
  4871                           ;doprnt.c: 598: width = 0;
  4872  000E24  0E00               	movlw	0
  4873  000E26  0100               	movlb	0	; () banked
  4874  000E28  6F6F               	movwf	(sprintf@width+1)& (0+255),b
  4875  000E2A  0E00               	movlw	0
  4876  000E2C  6F6E               	movwf	sprintf@width& (0+255),b
  4877  000E2E                     l3124:
  4878                           
  4879                           ;doprnt.c: 600: width *= 10;
  4880  000E2E  C06E  F024         	movff	sprintf@width,___wmul@multiplier
  4881  000E32  C06F  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4882  000E36  0E00               	movlw	0
  4883  000E38  6E27               	movwf	___wmul@multiplicand+1,c
  4884  000E3A  0E0A               	movlw	10
  4885  000E3C  6E26               	movwf	___wmul@multiplicand,c
  4886  000E3E  ECD1  F00D         	call	___wmul	;wreg free
  4887  000E42  C024  F06E         	movff	?___wmul,sprintf@width
  4888  000E46  C025  F06F         	movff	?___wmul+1,sprintf@width+1
  4889                           
  4890                           ;doprnt.c: 601: width += *f++ - '0';
  4891  000E4A  0ED0               	movlw	208
  4892  000E4C  6E30               	movwf	??_sprintf& (0+255),c
  4893  000E4E  0EFF               	movlw	255
  4894  000E50  6E31               	movwf	(??_sprintf+1)& (0+255),c
  4895  000E52  C062  FFF6         	movff	sprintf@f,tblptrl
  4896  000E56  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4897  000E5A                     	if	0	;tblptru may be non-zero
  4898  000E5A                     	endif
  4899  000E5A                     	if	0	;tblptru may be non-zero
  4900  000E5A                     	endif
  4901  000E5A  0008               	tblrd		*
  4902  000E5C  50F5               	movf	tablat,w,c
  4903  000E5E  6E32               	movwf	(??_sprintf+2)& (0+255),c
  4904  000E60  6A33               	clrf	(??_sprintf+3)& (0+255),c
  4905  000E62  5030               	movf	??_sprintf,w,c
  4906  000E64  2632               	addwf	??_sprintf+2,f,c
  4907  000E66  5031               	movf	??_sprintf+1,w,c
  4908  000E68  2233               	addwfc	??_sprintf+3,f,c
  4909  000E6A  5032               	movf	??_sprintf+2,w,c
  4910  000E6C  0100               	movlb	0	; () banked
  4911  000E6E  276E               	addwf	sprintf@width& (0+255),f,b
  4912  000E70  5033               	movf	??_sprintf+3,w,c
  4913  000E72  0100               	movlb	0	; () banked
  4914  000E74  236F               	addwfc	(sprintf@width+1)& (0+255),f,b
  4915                           
  4916                           ; BSR set to: 0
  4917  000E76  0100               	movlb	0	; () banked
  4918  000E78  4B62               	infsnz	sprintf@f& (0+255),f,b
  4919  000E7A  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4923  000E7C  C062  FFF6         	movff	sprintf@f,tblptrl
  4924  000E80  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4925  000E84                     	if	0	;tblptru may be non-zero
  4926  000E84                     	endif
  4927  000E84                     	if	0	;tblptru may be non-zero
  4928  000E84                     	endif
  4929  000E84  0008               	tblrd		*
  4930  000E86  50F5               	movf	tablat,w,c
  4931  000E88  ECF5  F00D         	call	_isdigit
  4932  000E8C  B0D8               	btfsc	status,0,c
  4933  000E8E  D7CF               	goto	l3124
  4934  000E90                     l3134:
  4935  000E90  C062  FFF6         	movff	sprintf@f,tblptrl
  4936  000E94  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4937  000E98  0100               	movlb	0	; () banked
  4938  000E9A  4B62               	infsnz	sprintf@f& (0+255),f,b
  4939  000E9C  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4940  000E9E                     	if	0	;tblptru may be non-zero
  4941  000E9E                     	endif
  4942  000E9E                     	if	0	;tblptru may be non-zero
  4943  000E9E                     	endif
  4944  000E9E  0008               	tblrd		*
  4945  000EA0  CFF5 F070          	movff	tablat,sprintf@c
  4946  000EA4  0100               	movlb	0	; () banked
  4947  000EA6  5170               	movf	sprintf@c& (0+255),w,b
  4948                           
  4949                           ; Switch size 1, requested type "space"
  4950                           ; Number of cases is 3, Range of values is 0 to 105
  4951                           ; switch strategies available:
  4952                           ; Name         Instructions Cycles
  4953                           ; simple_byte           10     6 (average)
  4954                           ;	Chosen strategy is simple_byte
  4955  000EA8  0A00               	xorlw	0	; case 0
  4956  000EAA  B4D8               	btfsc	status,2,c
  4957  000EAC  D0FC               	goto	l3214
  4958  000EAE  0A64               	xorlw	100	; case 100
  4959  000EB0  B4D8               	btfsc	status,2,c
  4960  000EB2  D003               	goto	l3136
  4961  000EB4  0A0D               	xorlw	13	; case 105
  4962  000EB6  A4D8               	btfss	status,2,c
  4963  000EB8  D0E8               	goto	l3212
  4964  000EBA                     l3136:
  4965                           
  4966                           ;doprnt.c: 1253: {
  4967                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4968  000EBA  C068  FFD9         	movff	sprintf@ap,fsr2l
  4969  000EBE  C069  FFDA         	movff	sprintf@ap+1,fsr2h
  4970  000EC2  CFDE F06B          	movff	postinc2,sprintf@val
  4971  000EC6  CFDD F06C          	movff	postdec2,sprintf@val+1
  4972  000ECA  0E02               	movlw	2
  4973  000ECC  0100               	movlb	0	; () banked
  4974  000ECE  2768               	addwf	sprintf@ap& (0+255),f,b
  4975  000ED0  0E00               	movlw	0
  4976  000ED2  2369               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;doprnt.c: 1261: if((int)val < 0) {
  4980  000ED4  0100               	movlb	0	; () banked
  4981  000ED6  AF6C               	btfss	(sprintf@val+1)& (0+255),7,b
  4982  000ED8  D008               	goto	l3146
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;doprnt.c: 1262: flag |= 0x03;
  4986  000EDA  0E03               	movlw	3
  4987  000EDC  0100               	movlb	0	; () banked
  4988  000EDE  136D               	iorwf	sprintf@flag& (0+255),f,b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;doprnt.c: 1263: val = -val;
  4992  000EE0  0100               	movlb	0	; () banked
  4993  000EE2  6D6B               	negf	sprintf@val& (0+255),b
  4994  000EE4  1F6C               	comf	(sprintf@val+1)& (0+255),f,b
  4995  000EE6  B0D8               	btfsc	status,0,c
  4996  000EE8  2B6C               	incf	(sprintf@val+1)& (0+255),f,b
  4997  000EEA                     l3146:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;doprnt.c: 1264: }
  5001                           ;doprnt.c: 1266: }
  5002                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5003  000EEA  0E01               	movlw	1
  5004  000EEC  0100               	movlb	0	; () banked
  5005  000EEE  6F70               	movwf	sprintf@c& (0+255),b
  5006  000EF0                     l3148:
  5007                           
  5008                           ; BSR set to: 0
  5009  000EF0  0E05               	movlw	5
  5010  000EF2  0100               	movlb	0	; () banked
  5011  000EF4  1970               	xorwf	sprintf@c& (0+255),w,b
  5012  000EF6  B4D8               	btfsc	status,2,c
  5013  000EF8  D016               	goto	l3160
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;doprnt.c: 1306: if(val < dpowers[c])
  5017                           
  5018                           ; BSR set to: 0
  5019                           
  5020                           ; BSR set to: 0
  5021  000EFA  0100               	movlb	0	; () banked
  5022  000EFC  5170               	movf	sprintf@c& (0+255),w,b
  5023  000EFE  0D02               	mullw	2
  5024  000F00  0E01               	movlw	low _dpowers
  5025  000F02  24F3               	addwf	prodl,w,c
  5026  000F04  6EF6               	movwf	tblptrl,c
  5027  000F06  0E03               	movlw	high _dpowers
  5028  000F08  20F4               	addwfc	prodh,w,c
  5029  000F0A  6EF7               	movwf	tblptrh,c
  5030  000F0C                     	if	0	;There are less than 3 active tblptr bytes
  5031  000F0C                     	endif
  5032  000F0C  0009               	tblrd		*+
  5033  000F0E  50F5               	movf	tablat,w,c
  5034  000F10  0100               	movlb	0	; () banked
  5035  000F12  5D6B               	subwf	sprintf@val& (0+255),w,b
  5036  000F14  0009               	tblrd		*+
  5037  000F16  50F5               	movf	tablat,w,c
  5038  000F18  0100               	movlb	0	; () banked
  5039  000F1A  596C               	subwfb	(sprintf@val+1)& (0+255),w,b
  5040  000F1C  A0D8               	btfss	status,0,c
  5041  000F1E  D003               	goto	l3160
  5042                           
  5043                           ; BSR set to: 0
  5044                           
  5045                           ; BSR set to: 0
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;doprnt.c: 1307: break;
  5049  000F20  0100               	movlb	0	; () banked
  5050  000F22  2B70               	incf	sprintf@c& (0+255),f,b
  5051  000F24  D7E5               	goto	l3148
  5052  000F26                     l3160:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5056  000F26  0100               	movlb	0	; () banked
  5057  000F28  516E               	movf	sprintf@width& (0+255),w,b
  5058  000F2A  0100               	movlb	0	; () banked
  5059  000F2C  116F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5060  000F2E  B4D8               	btfsc	status,2,c
  5061  000F30  D00A               	goto	l3166
  5062                           
  5063                           ; BSR set to: 0
  5064  000F32  C06D  F030         	movff	sprintf@flag,??_sprintf
  5065  000F36  0E03               	movlw	3
  5066  000F38  1630               	andwf	??_sprintf,f,c
  5067  000F3A  B4D8               	btfsc	status,2,c
  5068  000F3C  D004               	goto	l3166
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;doprnt.c: 1346: width--;
  5072  000F3E  0100               	movlb	0	; () banked
  5073  000F40  076E               	decf	sprintf@width& (0+255),f,b
  5074  000F42  A0D8               	btfss	status,0,c
  5075  000F44  076F               	decf	(sprintf@width+1)& (0+255),f,b
  5076  000F46                     l3166:
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;doprnt.c: 1381: if(width > c)
  5080  000F46  0E80               	movlw	128
  5081  000F48  0100               	movlb	0	; () banked
  5082  000F4A  BF70               	btfsc	sprintf@c& (0+255),7,b
  5083  000F4C  0E7F               	movlw	127
  5084  000F4E  6E30               	movwf	??_sprintf& (0+255),c
  5085  000F50  0100               	movlb	0	; () banked
  5086  000F52  516E               	movf	sprintf@width& (0+255),w,b
  5087  000F54  0100               	movlb	0	; () banked
  5088  000F56  5D70               	subwf	sprintf@c& (0+255),w,b
  5089  000F58  0100               	movlb	0	; () banked
  5090  000F5A  516F               	movf	(sprintf@width+1)& (0+255),w,b
  5091  000F5C  0A80               	xorlw	128
  5092  000F5E  5830               	subwfb	??_sprintf& (0+255),w,c
  5093  000F60  B0D8               	btfsc	status,0,c
  5094  000F62  D00B               	goto	l3170
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;doprnt.c: 1382: width -= c;
  5098  000F64  0100               	movlb	0	; () banked
  5099  000F66  5170               	movf	sprintf@c& (0+255),w,b
  5100  000F68  0100               	movlb	0	; () banked
  5101  000F6A  5F6E               	subwf	sprintf@width& (0+255),f,b
  5102  000F6C  0E00               	movlw	0
  5103  000F6E  0100               	movlb	0	; () banked
  5104  000F70  BF70               	btfsc	sprintf@c& (0+255),7,b
  5105  000F72  0EFF               	movlw	255
  5106  000F74  0100               	movlb	0	; () banked
  5107  000F76  5B6F               	subwfb	(sprintf@width+1)& (0+255),f,b
  5108  000F78  D005               	goto	l3172
  5109  000F7A                     l3170:
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;doprnt.c: 1383: else
  5113                           ;doprnt.c: 1384: width = 0;
  5114  000F7A  0E00               	movlw	0
  5115  000F7C  0100               	movlb	0	; () banked
  5116  000F7E  6F6F               	movwf	(sprintf@width+1)& (0+255),b
  5117  000F80  0E00               	movlw	0
  5118  000F82  6F6E               	movwf	sprintf@width& (0+255),b
  5119  000F84                     l3172:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 1387: if(flag & 0x04) {
  5123  000F84  0100               	movlb	0	; () banked
  5124  000F86  A56D               	btfss	sprintf@flag& (0+255),2,b
  5125  000F88  D023               	goto	l3188
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 1392: if(flag & 0x03)
  5129  000F8A  C06D  F030         	movff	sprintf@flag,??_sprintf
  5130  000F8E  0E03               	movlw	3
  5131  000F90  1630               	andwf	??_sprintf,f,c
  5132  000F92  B4D8               	btfsc	status,2,c
  5133  000F94  D009               	goto	l3180
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5137  000F96  C060  FFD9         	movff	sprintf@sp,fsr2l
  5138  000F9A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5139  000F9E  0E2D               	movlw	45
  5140  000FA0  6EDF               	movwf	indf2,c
  5141                           
  5142                           ; BSR set to: 0
  5143  000FA2  0100               	movlb	0	; () banked
  5144  000FA4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5145  000FA6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5146  000FA8                     l3180:
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;doprnt.c: 1415: if(width)
  5150  000FA8  0100               	movlb	0	; () banked
  5151  000FAA  516E               	movf	sprintf@width& (0+255),w,b
  5152  000FAC  0100               	movlb	0	; () banked
  5153  000FAE  116F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5154  000FB0  B4D8               	btfsc	status,2,c
  5155  000FB2  D036               	goto	l3202
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5159                           
  5160                           ; BSR set to: 0
  5161                           
  5162                           ;doprnt.c: 1416: do
  5163  000FB4  C060  FFD9         	movff	sprintf@sp,fsr2l
  5164  000FB8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5165  000FBC  0E30               	movlw	48
  5166  000FBE  6EDF               	movwf	indf2,c
  5167                           
  5168                           ; BSR set to: 0
  5169  000FC0  0100               	movlb	0	; () banked
  5170  000FC2  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5171  000FC4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;doprnt.c: 1418: while(--width);
  5175  000FC6  0100               	movlb	0	; () banked
  5176  000FC8  076E               	decf	sprintf@width& (0+255),f,b
  5177  000FCA  A0D8               	btfss	status,0,c
  5178  000FCC  076F               	decf	(sprintf@width+1)& (0+255),f,b
  5179  000FCE  D7EC               	goto	l3180
  5180  000FD0                     l3188:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;doprnt.c: 1422: {
  5184                           ;doprnt.c: 1424: if(width
  5185                           ;doprnt.c: 1428: )
  5186  000FD0  0100               	movlb	0	; () banked
  5187  000FD2  516E               	movf	sprintf@width& (0+255),w,b
  5188  000FD4  0100               	movlb	0	; () banked
  5189  000FD6  116F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5190  000FD8  B4D8               	btfsc	status,2,c
  5191  000FDA  D013               	goto	l3196
  5192  000FDC                     l3190:
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5196  000FDC  C060  FFD9         	movff	sprintf@sp,fsr2l
  5197  000FE0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5198  000FE4  0E20               	movlw	32
  5199  000FE6  6EDF               	movwf	indf2,c
  5200                           
  5201                           ; BSR set to: 0
  5202  000FE8  0100               	movlb	0	; () banked
  5203  000FEA  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5204  000FEC  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;doprnt.c: 1431: while(--width);
  5208  000FEE  0100               	movlb	0	; () banked
  5209  000FF0  076E               	decf	sprintf@width& (0+255),f,b
  5210  000FF2  A0D8               	btfss	status,0,c
  5211  000FF4  076F               	decf	(sprintf@width+1)& (0+255),f,b
  5212  000FF6  0100               	movlb	0	; () banked
  5213  000FF8  516E               	movf	sprintf@width& (0+255),w,b
  5214  000FFA  0100               	movlb	0	; () banked
  5215  000FFC  116F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5216  000FFE  A4D8               	btfss	status,2,c
  5217  001000  D7ED               	goto	l3190
  5218  001002                     l3196:
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 1438: if(flag & 0x03)
  5222  001002  C06D  F030         	movff	sprintf@flag,??_sprintf
  5223  001006  0E03               	movlw	3
  5224  001008  1630               	andwf	??_sprintf,f,c
  5225  00100A  B4D8               	btfsc	status,2,c
  5226  00100C  D009               	goto	l3202
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5230  00100E  C060  FFD9         	movff	sprintf@sp,fsr2l
  5231  001012  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5232  001016  0E2D               	movlw	45
  5233  001018  6EDF               	movwf	indf2,c
  5234                           
  5235                           ; BSR set to: 0
  5236  00101A  0100               	movlb	0	; () banked
  5237  00101C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5238  00101E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5239  001020                     l3202:
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;doprnt.c: 1469: }
  5243                           ;doprnt.c: 1472: prec = c;
  5244  001020  C070  F06A         	movff	sprintf@c,sprintf@prec
  5245                           
  5246                           ;doprnt.c: 1474: while(prec--) {
  5247  001024  D02C               	goto	l3210
  5248  001026                     l3204:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;doprnt.c: 1478: {
  5252                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5253  001026  0100               	movlb	0	; () banked
  5254  001028  516A               	movf	sprintf@prec& (0+255),w,b
  5255  00102A  0D02               	mullw	2
  5256  00102C  0E01               	movlw	low _dpowers
  5257  00102E  24F3               	addwf	prodl,w,c
  5258  001030  6EF6               	movwf	tblptrl,c
  5259  001032  0E03               	movlw	high _dpowers
  5260  001034  20F4               	addwfc	prodh,w,c
  5261  001036  6EF7               	movwf	tblptrh,c
  5262  001038                     	if	0	;There are less than 3 active tblptr bytes
  5263  001038                     	endif
  5264  001038  0009               	tblrd		*+
  5265  00103A  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5266  00103E  000A               	tblrd		*-
  5267  001040  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5268  001044  C06B  F024         	movff	sprintf@val,___lwdiv@dividend
  5269  001048  C06C  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5270  00104C  EC7D  F00C         	call	___lwdiv	;wreg free
  5271  001050  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5272  001054  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5273  001058  0E00               	movlw	0
  5274  00105A  6E2E               	movwf	___lwmod@divisor+1,c
  5275  00105C  0E0A               	movlw	10
  5276  00105E  6E2D               	movwf	___lwmod@divisor,c
  5277  001060  ECA6  F00C         	call	___lwmod	;wreg free
  5278  001064  502B               	movf	?___lwmod,w,c
  5279  001066  0F30               	addlw	48
  5280  001068  0100               	movlb	0	; () banked
  5281  00106A  6F70               	movwf	sprintf@c& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;doprnt.c: 1523: }
  5285                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5286  00106C  C060  FFD9         	movff	sprintf@sp,fsr2l
  5287  001070  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5288  001074  C070  FFDF         	movff	sprintf@c,indf2
  5289                           
  5290                           ; BSR set to: 0
  5291  001078  0100               	movlb	0	; () banked
  5292  00107A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5293  00107C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5294  00107E                     l3210:
  5295                           
  5296                           ; BSR set to: 0
  5297  00107E  0100               	movlb	0	; () banked
  5298  001080  076A               	decf	sprintf@prec& (0+255),f,b
  5299  001082  0100               	movlb	0	; () banked
  5300  001084  296A               	incf	sprintf@prec& (0+255),w,b
  5301  001086  A4D8               	btfss	status,2,c
  5302  001088  D7CE               	goto	l3204
  5303  00108A                     l3212:
  5304  00108A  C062  FFF6         	movff	sprintf@f,tblptrl
  5305  00108E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5306  001092  0100               	movlb	0	; () banked
  5307  001094  4B62               	infsnz	sprintf@f& (0+255),f,b
  5308  001096  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5309  001098                     	if	0	;tblptru may be non-zero
  5310  001098                     	endif
  5311  001098                     	if	0	;tblptru may be non-zero
  5312  001098                     	endif
  5313  001098  0008               	tblrd		*
  5314  00109A  CFF5 F070          	movff	tablat,sprintf@c
  5315  00109E  0100               	movlb	0	; () banked
  5316  0010A0  5170               	movf	sprintf@c& (0+255),w,b
  5317  0010A2  A4D8               	btfss	status,2,c
  5318  0010A4  D68F               	goto	l3106
  5319  0010A6                     l3214:
  5320                           
  5321                           ;doprnt.c: 1538: *sp = 0;
  5322  0010A6  C060  FFD9         	movff	sprintf@sp,fsr2l
  5323  0010AA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5324  0010AE  0E00               	movlw	0
  5325  0010B0  6EDF               	movwf	indf2,c
  5326  0010B2  0012               	return	
  5327  0010B4                     __end_of_sprintf:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           indf1	equ	0xFE7
  5339                           fsr1h	equ	0xFE2
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           plusw2	equ	0xFDB
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _isdigit *****************
  5350 ;; Defined at:
  5351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  c               1    wreg     unsigned char 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  c               1   37[COMRAM] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;		None               void
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5365 ;;      Params:         0       0       0       0
  5366 ;;      Locals:         2       0       0       0
  5367 ;;      Temps:          1       0       0       0
  5368 ;;      Totals:         3       0       0       0
  5369 ;;Total ram usage:        3 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    3
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_sprintf
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text19
  5380  001BEA                     __ptext19:
  5381                           	opt stack 0
  5382  001BEA                     _isdigit:
  5383                           	opt stack 26
  5384                           
  5385                           ;incstack = 0
  5386                           ;isdigit@c stored from wreg
  5387  001BEA  6E26               	movwf	isdigit@c,c
  5388  001BEC  0E00               	movlw	0
  5389  001BEE  6E25               	movwf	_isdigit$1963,c
  5390  001BF0  0E3A               	movlw	58
  5391  001BF2  6026               	cpfslt	isdigit@c,c
  5392  001BF4  D005               	goto	l2972
  5393  001BF6  0E2F               	movlw	47
  5394  001BF8  6426               	cpfsgt	isdigit@c,c
  5395  001BFA  D002               	goto	l2972
  5396  001BFC  0E01               	movlw	1
  5397  001BFE  6E25               	movwf	_isdigit$1963,c
  5398  001C00                     l2972:
  5399  001C00  C025  F024         	movff	_isdigit$1963,??_isdigit
  5400  001C04  3024               	rrcf	??_isdigit,w,c
  5401  001C06  0012               	return	
  5402  001C08                     __end_of_isdigit:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           indf1	equ	0xFE7
  5414                           fsr1h	equ	0xFE2
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           plusw2	equ	0xFDB
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function ___wmul *****************
  5425 ;; Defined at:
  5426 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  multiplier      2   35[COMRAM] unsigned int 
  5429 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  product         2   39[COMRAM] unsigned int 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  2   35[COMRAM] unsigned int 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0, prodl, prodh
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5441 ;;      Params:         4       0       0       0
  5442 ;;      Locals:         2       0       0       0
  5443 ;;      Temps:          0       0       0       0
  5444 ;;      Totals:         6       0       0       0
  5445 ;;Total ram usage:        6 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    3
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_setMotorPWM
  5452 ;;		_sprintf
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text20
  5457  001BA2                     __ptext20:
  5458                           	opt stack 0
  5459  001BA2                     ___wmul:
  5460                           	opt stack 24
  5461                           
  5462                           ;incstack = 0
  5463  001BA2  5024               	movf	___wmul@multiplier,w,c
  5464  001BA4  0226               	mulwf	___wmul@multiplicand,c
  5465  001BA6  CFF3 F028          	movff	prodl,___wmul@product
  5466  001BAA  CFF4 F029          	movff	prodh,___wmul@product+1
  5467  001BAE  5024               	movf	___wmul@multiplier,w,c
  5468  001BB0  0227               	mulwf	___wmul@multiplicand+1,c
  5469  001BB2  50F3               	movf	prodl,w,c
  5470  001BB4  2629               	addwf	___wmul@product+1,f,c
  5471  001BB6  5025               	movf	___wmul@multiplier+1,w,c
  5472  001BB8  0226               	mulwf	___wmul@multiplicand,c
  5473  001BBA  50F3               	movf	prodl,w,c
  5474  001BBC  2629               	addwf	___wmul@product+1,f,c
  5475  001BBE  C028  F024         	movff	___wmul@product,?___wmul
  5476  001BC2  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5477  001BC6  0012               	return	
  5478  001BC8                     __end_of___wmul:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           intcon	equ	0xFF2
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           indf1	equ	0xFE7
  5490                           fsr1h	equ	0xFE2
  5491                           fsr1l	equ	0xFE1
  5492                           indf2	equ	0xFDF
  5493                           postinc2	equ	0xFDE
  5494                           postdec2	equ	0xFDD
  5495                           plusw2	equ	0xFDB
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function ___lwmod *****************
  5501 ;; Defined at:
  5502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  dividend        2   42[COMRAM] unsigned int 
  5505 ;;  divisor         2   44[COMRAM] unsigned int 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  counter         1   46[COMRAM] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  2   42[COMRAM] unsigned int 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5517 ;;      Params:         4       0       0       0
  5518 ;;      Locals:         1       0       0       0
  5519 ;;      Temps:          0       0       0       0
  5520 ;;      Totals:         5       0       0       0
  5521 ;;Total ram usage:        5 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    3
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_sprintf
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text21
  5532  00194C                     __ptext21:
  5533                           	opt stack 0
  5534  00194C                     ___lwmod:
  5535                           	opt stack 26
  5536                           
  5537                           ;incstack = 0
  5538  00194C  502D               	movf	___lwmod@divisor,w,c
  5539  00194E  102E               	iorwf	___lwmod@divisor+1,w,c
  5540  001950  B4D8               	btfsc	status,2,c
  5541  001952  D018               	goto	l891
  5542  001954  0E01               	movlw	1
  5543  001956  6E2F               	movwf	___lwmod@counter,c
  5544  001958  D004               	goto	l3004
  5545  00195A                     l3002:
  5546  00195A  90D8               	bcf	status,0,c
  5547  00195C  362D               	rlcf	___lwmod@divisor,f,c
  5548  00195E  362E               	rlcf	___lwmod@divisor+1,f,c
  5549  001960  2A2F               	incf	___lwmod@counter,f,c
  5550  001962                     l3004:
  5551  001962  AE2E               	btfss	___lwmod@divisor+1,7,c
  5552  001964  D7FA               	goto	l3002
  5553  001966                     l3006:
  5554  001966  502D               	movf	___lwmod@divisor,w,c
  5555  001968  5C2B               	subwf	___lwmod@dividend,w,c
  5556  00196A  502E               	movf	___lwmod@divisor+1,w,c
  5557  00196C  582C               	subwfb	___lwmod@dividend+1,w,c
  5558  00196E  A0D8               	btfss	status,0,c
  5559  001970  D004               	goto	l3010
  5560  001972  502D               	movf	___lwmod@divisor,w,c
  5561  001974  5E2B               	subwf	___lwmod@dividend,f,c
  5562  001976  502E               	movf	___lwmod@divisor+1,w,c
  5563  001978  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5564  00197A                     l3010:
  5565  00197A  90D8               	bcf	status,0,c
  5566  00197C  322E               	rrcf	___lwmod@divisor+1,f,c
  5567  00197E  322D               	rrcf	___lwmod@divisor,f,c
  5568  001980  2E2F               	decfsz	___lwmod@counter,f,c
  5569  001982  D7F1               	goto	l3006
  5570  001984                     l891:
  5571  001984  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5572  001988  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5573  00198C  0012               	return		;funcret
  5574  00198E                     __end_of___lwmod:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           postinc0	equ	0xFEE
  5584                           wreg	equ	0xFE8
  5585                           indf1	equ	0xFE7
  5586                           fsr1h	equ	0xFE2
  5587                           fsr1l	equ	0xFE1
  5588                           indf2	equ	0xFDF
  5589                           postinc2	equ	0xFDE
  5590                           postdec2	equ	0xFDD
  5591                           plusw2	equ	0xFDB
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function ___lwdiv *****************
  5597 ;; Defined at:
  5598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  dividend        2   35[COMRAM] unsigned int 
  5601 ;;  divisor         2   37[COMRAM] unsigned int 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;  quotient        2   40[COMRAM] unsigned int 
  5604 ;;  counter         1   39[COMRAM] unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  2   35[COMRAM] unsigned int 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5614 ;;      Params:         4       0       0       0
  5615 ;;      Locals:         3       0       0       0
  5616 ;;      Temps:          0       0       0       0
  5617 ;;      Totals:         7       0       0       0
  5618 ;;Total ram usage:        7 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    3
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_sprintf
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text22
  5629  0018FA                     __ptext22:
  5630                           	opt stack 0
  5631  0018FA                     ___lwdiv:
  5632                           	opt stack 26
  5633                           
  5634                           ;incstack = 0
  5635  0018FA  0E00               	movlw	0
  5636  0018FC  6E2A               	movwf	___lwdiv@quotient+1,c
  5637  0018FE  0E00               	movlw	0
  5638  001900  6E29               	movwf	___lwdiv@quotient,c
  5639  001902  5026               	movf	___lwdiv@divisor,w,c
  5640  001904  1027               	iorwf	___lwdiv@divisor+1,w,c
  5641  001906  B4D8               	btfsc	status,2,c
  5642  001908  D01C               	goto	l881
  5643  00190A  0E01               	movlw	1
  5644  00190C  6E28               	movwf	___lwdiv@counter,c
  5645  00190E  D004               	goto	l2984
  5646  001910                     l2982:
  5647  001910  90D8               	bcf	status,0,c
  5648  001912  3626               	rlcf	___lwdiv@divisor,f,c
  5649  001914  3627               	rlcf	___lwdiv@divisor+1,f,c
  5650  001916  2A28               	incf	___lwdiv@counter,f,c
  5651  001918                     l2984:
  5652  001918  AE27               	btfss	___lwdiv@divisor+1,7,c
  5653  00191A  D7FA               	goto	l2982
  5654  00191C                     l2986:
  5655  00191C  90D8               	bcf	status,0,c
  5656  00191E  3629               	rlcf	___lwdiv@quotient,f,c
  5657  001920  362A               	rlcf	___lwdiv@quotient+1,f,c
  5658  001922  5026               	movf	___lwdiv@divisor,w,c
  5659  001924  5C24               	subwf	___lwdiv@dividend,w,c
  5660  001926  5027               	movf	___lwdiv@divisor+1,w,c
  5661  001928  5825               	subwfb	___lwdiv@dividend+1,w,c
  5662  00192A  A0D8               	btfss	status,0,c
  5663  00192C  D005               	goto	l2994
  5664  00192E  5026               	movf	___lwdiv@divisor,w,c
  5665  001930  5E24               	subwf	___lwdiv@dividend,f,c
  5666  001932  5027               	movf	___lwdiv@divisor+1,w,c
  5667  001934  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5668  001936  8029               	bsf	___lwdiv@quotient,0,c
  5669  001938                     l2994:
  5670  001938  90D8               	bcf	status,0,c
  5671  00193A  3227               	rrcf	___lwdiv@divisor+1,f,c
  5672  00193C  3226               	rrcf	___lwdiv@divisor,f,c
  5673  00193E  2E28               	decfsz	___lwdiv@counter,f,c
  5674  001940  D7ED               	goto	l2986
  5675  001942                     l881:
  5676  001942  C029  F024         	movff	___lwdiv@quotient,?___lwdiv
  5677  001946  C02A  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5678  00194A  0012               	return		;funcret
  5679  00194C                     __end_of___lwdiv:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           indf1	equ	0xFE7
  5691                           fsr1h	equ	0xFE2
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           plusw2	equ	0xFDB
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _grabRightIR *****************
  5702 ;; Defined at:
  5703 ;;		line 74 in file "IR_Reading.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5708 ;;  i               1   42[COMRAM] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  2   35[COMRAM] unsigned int 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5718 ;;      Params:         2       0       0       0
  5719 ;;      Locals:         3       0       0       0
  5720 ;;      Temps:          3       0       0       0
  5721 ;;      Totals:         8       0       0       0
  5722 ;;Total ram usage:        8 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    3
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_ScanIR
  5729 ;;		_ScanWithRange
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text23
  5735  0017B8                     __ptext23:
  5736                           	opt stack 0
  5737  0017B8                     _grabRightIR:
  5738                           	opt stack 27
  5739                           
  5740                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5741                           
  5742                           ;incstack = 0
  5743  0017B8  0E00               	movlw	0
  5744  0017BA  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5745  0017BC  0E00               	movlw	0
  5746  0017BE  6E29               	movwf	grabRightIR@IR_signal,c
  5747                           
  5748                           ;IR_Reading.c: 77: unsigned char i=0;
  5749  0017C0  0E00               	movlw	0
  5750  0017C2  6E2B               	movwf	grabRightIR@i,c
  5751                           
  5752                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5753  0017C4  0E00               	movlw	0
  5754  0017C6  6E2B               	movwf	grabRightIR@i,c
  5755  0017C8                     l3046:
  5756  0017C8  0E03               	movlw	3
  5757  0017CA  642B               	cpfsgt	grabRightIR@i,c
  5758  0017CC  D001               	goto	l3050
  5759  0017CE  D01E               	goto	l3056
  5760  0017D0                     l3050:
  5761                           
  5762                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5763  0017D0  5069               	movf	3945,w,c	;volatile
  5764  0017D2  6E26               	movwf	??_grabRightIR& (0+255),c
  5765  0017D4  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5766  0017D6  0E07               	movlw	7
  5767  0017D8                     u2545:
  5768  0017D8  90D8               	bcf	status,0,c
  5769  0017DA  3626               	rlcf	??_grabRightIR,f,c
  5770  0017DC  3627               	rlcf	??_grabRightIR+1,f,c
  5771  0017DE  2EE8               	decfsz	wreg,f,c
  5772  0017E0  D7FB               	goto	u2545
  5773  0017E2  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5774  0017E6  90D8               	bcf	status,0,c
  5775  0017E8  3228               	rrcf	??_grabRightIR+2,f,c
  5776  0017EA  5028               	movf	??_grabRightIR+2,w,c
  5777  0017EC  1226               	iorwf	??_grabRightIR,f,c
  5778  0017EE  0E00               	movlw	0
  5779  0017F0  1227               	iorwf	??_grabRightIR+1,f,c
  5780  0017F2  5026               	movf	??_grabRightIR,w,c
  5781  0017F4  2629               	addwf	grabRightIR@IR_signal,f,c
  5782  0017F6  5027               	movf	??_grabRightIR+1,w,c
  5783  0017F8  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5784                           
  5785                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5786  0017FA  0E82               	movlw	130
  5787  0017FC  6E26               	movwf	??_grabRightIR& (0+255),c
  5788  0017FE  0EDE               	movlw	222
  5789  001800                     u3397:
  5790  001800  2EE8               	decfsz	wreg,f,c
  5791  001802  D7FE               	goto	u3397
  5792  001804  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5793  001806  D7FC               	goto	u3397
  5794  001808  2A2B               	incf	grabRightIR@i,f,c
  5795  00180A  D7DE               	goto	l3046
  5796  00180C                     l3056:
  5797                           
  5798                           ;IR_Reading.c: 83: }
  5799                           ;IR_Reading.c: 85: return IR_signal>>2;
  5800  00180C  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5801  001810  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5802  001814  90D8               	bcf	status,0,c
  5803  001816  3227               	rrcf	??_grabRightIR+1,f,c
  5804  001818  3226               	rrcf	??_grabRightIR,f,c
  5805  00181A  90D8               	bcf	status,0,c
  5806  00181C  3227               	rrcf	??_grabRightIR+1,f,c
  5807  00181E  3226               	rrcf	??_grabRightIR,f,c
  5808  001820  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5809  001824  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5810  001828  0012               	return	
  5811  00182A                     __end_of_grabRightIR:
  5812                           	opt stack 0
  5813                           tblptru	equ	0xFF8
  5814                           tblptrh	equ	0xFF7
  5815                           tblptrl	equ	0xFF6
  5816                           tablat	equ	0xFF5
  5817                           prodh	equ	0xFF4
  5818                           prodl	equ	0xFF3
  5819                           intcon	equ	0xFF2
  5820                           postinc0	equ	0xFEE
  5821                           wreg	equ	0xFE8
  5822                           indf1	equ	0xFE7
  5823                           fsr1h	equ	0xFE2
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           plusw2	equ	0xFDB
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function _grabLeftIR *****************
  5834 ;; Defined at:
  5835 ;;		line 90 in file "IR_Reading.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5840 ;;  i               1   42[COMRAM] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  2   35[COMRAM] unsigned int 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5850 ;;      Params:         2       0       0       0
  5851 ;;      Locals:         3       0       0       0
  5852 ;;      Temps:          3       0       0       0
  5853 ;;      Totals:         8       0       0       0
  5854 ;;Total ram usage:        8 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    3
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_ScanIR
  5861 ;;		_ScanWithRange
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text24
  5867  00182A                     __ptext24:
  5868                           	opt stack 0
  5869  00182A                     _grabLeftIR:
  5870                           	opt stack 27
  5871                           
  5872                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5873                           
  5874                           ;incstack = 0
  5875  00182A  0E00               	movlw	0
  5876  00182C  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5877  00182E  0E00               	movlw	0
  5878  001830  6E29               	movwf	grabLeftIR@IR_signal,c
  5879                           
  5880                           ;IR_Reading.c: 93: unsigned char i=0;
  5881  001832  0E00               	movlw	0
  5882  001834  6E2B               	movwf	grabLeftIR@i,c
  5883                           
  5884                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5885  001836  0E00               	movlw	0
  5886  001838  6E2B               	movwf	grabLeftIR@i,c
  5887  00183A                     l3062:
  5888  00183A  0E03               	movlw	3
  5889  00183C  642B               	cpfsgt	grabLeftIR@i,c
  5890  00183E  D001               	goto	l3066
  5891  001840  D01E               	goto	l3072
  5892  001842                     l3066:
  5893                           
  5894                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5895  001842  5067               	movf	3943,w,c	;volatile
  5896  001844  6E26               	movwf	??_grabLeftIR& (0+255),c
  5897  001846  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5898  001848  0E07               	movlw	7
  5899  00184A                     u2575:
  5900  00184A  90D8               	bcf	status,0,c
  5901  00184C  3626               	rlcf	??_grabLeftIR,f,c
  5902  00184E  3627               	rlcf	??_grabLeftIR+1,f,c
  5903  001850  2EE8               	decfsz	wreg,f,c
  5904  001852  D7FB               	goto	u2575
  5905  001854  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5906  001858  90D8               	bcf	status,0,c
  5907  00185A  3228               	rrcf	??_grabLeftIR+2,f,c
  5908  00185C  5028               	movf	??_grabLeftIR+2,w,c
  5909  00185E  1226               	iorwf	??_grabLeftIR,f,c
  5910  001860  0E00               	movlw	0
  5911  001862  1227               	iorwf	??_grabLeftIR+1,f,c
  5912  001864  5026               	movf	??_grabLeftIR,w,c
  5913  001866  2629               	addwf	grabLeftIR@IR_signal,f,c
  5914  001868  5027               	movf	??_grabLeftIR+1,w,c
  5915  00186A  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5916                           
  5917                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5918  00186C  0E82               	movlw	130
  5919  00186E  6E26               	movwf	??_grabLeftIR& (0+255),c
  5920  001870  0EDE               	movlw	222
  5921  001872                     u3407:
  5922  001872  2EE8               	decfsz	wreg,f,c
  5923  001874  D7FE               	goto	u3407
  5924  001876  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5925  001878  D7FC               	goto	u3407
  5926  00187A  2A2B               	incf	grabLeftIR@i,f,c
  5927  00187C  D7DE               	goto	l3062
  5928  00187E                     l3072:
  5929                           
  5930                           ;IR_Reading.c: 99: }
  5931                           ;IR_Reading.c: 101: return IR_signal>>2;
  5932  00187E  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5933  001882  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5934  001886  90D8               	bcf	status,0,c
  5935  001888  3227               	rrcf	??_grabLeftIR+1,f,c
  5936  00188A  3226               	rrcf	??_grabLeftIR,f,c
  5937  00188C  90D8               	bcf	status,0,c
  5938  00188E  3227               	rrcf	??_grabLeftIR+1,f,c
  5939  001890  3226               	rrcf	??_grabLeftIR,f,c
  5940  001892  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5941  001896  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5942  00189A  0012               	return	
  5943  00189C                     __end_of_grabLeftIR:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           intcon	equ	0xFF2
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           indf1	equ	0xFE7
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           plusw2	equ	0xFDB
  5961                           fsr2h	equ	0xFDA
  5962                           fsr2l	equ	0xFD9
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function _SetLine *****************
  5966 ;; Defined at:
  5967 ;;		line 74 in file "LCD.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  line            1    wreg     unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  line            1   41[COMRAM] unsigned char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5981 ;;      Params:         0       0       0       0
  5982 ;;      Locals:         1       0       0       0
  5983 ;;      Temps:          0       0       0       0
  5984 ;;      Totals:         1       0       0       0
  5985 ;;Total ram usage:        1 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    6
  5988 ;; This function calls:
  5989 ;;		_SendLCD
  5990 ;; This function is called by:
  5991 ;;		_ScanIR
  5992 ;;		_ScanWithRange
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text25
  5998  001B1C                     __ptext25:
  5999                           	opt stack 0
  6000  001B1C                     _SetLine:
  6001                           	opt stack 24
  6002                           
  6003                           ;incstack = 0
  6004                           ;SetLine@line stored from wreg
  6005  001B1C  6E2A               	movwf	SetLine@line,c
  6006                           
  6007                           ;LCD.c: 75: if (line==1) {
  6008  001B1E  042A               	decf	SetLine@line,w,c
  6009  001B20  A4D8               	btfss	status,2,c
  6010  001B22  D006               	goto	l3080
  6011                           
  6012                           ;LCD.c: 76: SendLCD(0x80,0);
  6013  001B24  0E00               	movlw	0
  6014  001B26  6E28               	movwf	SendLCD@type,c
  6015  001B28  0E80               	movlw	128
  6016  001B2A  ECA6  F00D         	call	_SendLCD
  6017                           
  6018                           ;LCD.c: 77: } else if (line==2) {
  6019  001B2E  D009               	goto	l3084
  6020  001B30                     l3080:
  6021  001B30  0E02               	movlw	2
  6022  001B32  182A               	xorwf	SetLine@line,w,c
  6023  001B34  A4D8               	btfss	status,2,c
  6024  001B36  D005               	goto	l3084
  6025                           
  6026                           ;LCD.c: 78: SendLCD(0xC0,0);
  6027  001B38  0E00               	movlw	0
  6028  001B3A  6E28               	movwf	SendLCD@type,c
  6029  001B3C  0EC0               	movlw	192
  6030  001B3E  ECA6  F00D         	call	_SendLCD
  6031  001B42                     l3084:
  6032                           
  6033                           ;LCD.c: 79: }
  6034                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6035  001B42  0E21               	movlw	33
  6036  001B44                     u3417:
  6037  001B44  2EE8               	decfsz	wreg,f,c
  6038  001B46  D7FE               	goto	u3417
  6039  001B48  F000               	nop	
  6040  001B4A  0012               	return		;funcret
  6041  001B4C                     __end_of_SetLine:
  6042                           	opt stack 0
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon	equ	0xFF2
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           indf1	equ	0xFE7
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           plusw2	equ	0xFDB
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063 ;; *************** function _LCD_String *****************
  6064 ;; Defined at:
  6065 ;;		line 83 in file "LCD.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  string          2   41[COMRAM] PTR unsigned char 
  6068 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6069 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6070 ;;		 -> STR_1(12), 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;		None               void
  6075 ;; Registers used:
  6076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6082 ;;      Params:         2       0       0       0
  6083 ;;      Locals:         0       0       0       0
  6084 ;;      Temps:          0       0       0       0
  6085 ;;      Totals:         2       0       0       0
  6086 ;;Total ram usage:        2 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    6
  6089 ;; This function calls:
  6090 ;;		_SendLCD
  6091 ;; This function is called by:
  6092 ;;		_ScanIR
  6093 ;;		_ScanWithRange
  6094 ;;		_main
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text26
  6099  00189C                     __ptext26:
  6100                           	opt stack 0
  6101  00189C                     _LCD_String:
  6102                           	opt stack 23
  6103                           
  6104                           ;LCD.c: 85: while(*string != 0){
  6105                           
  6106                           ;incstack = 0
  6107  00189C  D01A               	goto	l3094
  6108  00189E                     l3088:
  6109                           
  6110                           ;LCD.c: 88: SendLCD(*string++,1);
  6111  00189E  0E01               	movlw	1
  6112  0018A0  6E28               	movwf	SendLCD@type,c
  6113  0018A2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6114  0018A6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6115  0018AA  6AF8               	clrf	tblptru,c
  6116  0018AC  0E02               	movlw	(high __ramtop+-1)
  6117  0018AE  64F7               	cpfsgt	tblptrh,c
  6118  0018B0  D003               	bra	u2617
  6119  0018B2  0008               	tblrd		*
  6120  0018B4  50F5               	movf	tablat,w,c
  6121  0018B6  D005               	bra	u2610
  6122  0018B8                     u2617:
  6123  0018B8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6124  0018BC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6125  0018C0  50E7               	movf	indf1,w,c
  6126  0018C2                     u2610:
  6127  0018C2  ECA6  F00D         	call	_SendLCD
  6128  0018C6  4A2A               	infsnz	LCD_String@string,f,c
  6129  0018C8  2A2B               	incf	LCD_String@string+1,f,c
  6130                           
  6131                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6132  0018CA  0E21               	movlw	33
  6133  0018CC                     u3427:
  6134  0018CC  2EE8               	decfsz	wreg,f,c
  6135  0018CE  D7FE               	goto	u3427
  6136  0018D0  F000               	nop	
  6137  0018D2                     l3094:
  6138  0018D2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6139  0018D6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6140  0018DA  6AF8               	clrf	tblptru,c
  6141  0018DC  0E02               	movlw	(high __ramtop+-1)
  6142  0018DE  64F7               	cpfsgt	tblptrh,c
  6143  0018E0  D003               	bra	u2627
  6144  0018E2  0008               	tblrd		*
  6145  0018E4  50F5               	movf	tablat,w,c
  6146  0018E6  D005               	bra	u2620
  6147  0018E8                     u2627:
  6148  0018E8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6149  0018EC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6150  0018F0  50E7               	movf	indf1,w,c
  6151  0018F2                     u2620:
  6152  0018F2  0900               	iorlw	0
  6153  0018F4  B4D8               	btfsc	status,2,c
  6154  0018F6  0012               	return	
  6155  0018F8  D7D2               	goto	l3088
  6156  0018FA                     __end_of_LCD_String:
  6157                           	opt stack 0
  6158                           tblptru	equ	0xFF8
  6159                           tblptrh	equ	0xFF7
  6160                           tblptrl	equ	0xFF6
  6161                           tablat	equ	0xFF5
  6162                           prodh	equ	0xFF4
  6163                           prodl	equ	0xFF3
  6164                           intcon	equ	0xFF2
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           plusw2	equ	0xFDB
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _SendLCD *****************
  6179 ;; Defined at:
  6180 ;;		line 27 in file "LCD.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  Byte            1    wreg     unsigned char 
  6183 ;;  type            1   39[COMRAM] unsigned char 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  Byte            1   40[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6195 ;;      Params:         1       0       0       0
  6196 ;;      Locals:         1       0       0       0
  6197 ;;      Temps:          0       0       0       0
  6198 ;;      Totals:         2       0       0       0
  6199 ;;Total ram usage:        2 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    5
  6202 ;; This function calls:
  6203 ;;		_LCDout
  6204 ;; This function is called by:
  6205 ;;		_initLCD
  6206 ;;		_SetLine
  6207 ;;		_LCD_String
  6208 ;;		_ScanIR
  6209 ;;		_ScanWithRange
  6210 ;;		_main
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text27
  6215  001B4C                     __ptext27:
  6216                           	opt stack 0
  6217  001B4C                     _SendLCD:
  6218                           	opt stack 24
  6219                           
  6220                           ;incstack = 0
  6221                           ;SendLCD@Byte stored from wreg
  6222  001B4C  6E29               	movwf	SendLCD@Byte,c
  6223                           
  6224                           ;LCD.c: 30: LATAbits.LATA6=type;
  6225  001B4E  B028               	btfsc	SendLCD@type,0,c
  6226  001B50  D002               	bra	u2405
  6227  001B52  9C89               	bcf	3977,6,c	;volatile
  6228  001B54  D001               	bra	u2406
  6229  001B56                     u2405:
  6230  001B56  8C89               	bsf	3977,6,c	;volatile
  6231  001B58                     u2406:
  6232                           
  6233                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6234  001B58  3829               	swapf	SendLCD@Byte,w,c
  6235  001B5A  0B0F               	andlw	15
  6236  001B5C  0B0F               	andlw	15
  6237  001B5E  EC0A  F00A         	call	_LCDout
  6238                           
  6239                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6240  001B62  0E06               	movlw	6
  6241  001B64                     u3437:
  6242  001B64  2EE8               	decfsz	wreg,f,c
  6243  001B66  D7FE               	goto	u3437
  6244  001B68  D000               	nop2		;nop
  6245                           
  6246                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6247  001B6A  5029               	movf	SendLCD@Byte,w,c
  6248  001B6C  0B0F               	andlw	15
  6249  001B6E  EC0A  F00A         	call	_LCDout
  6250                           
  6251                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6252  001B72  0E21               	movlw	33
  6253  001B74                     u3447:
  6254  001B74  2EE8               	decfsz	wreg,f,c
  6255  001B76  D7FE               	goto	u3447
  6256  001B78  F000               	nop	
  6257  001B7A  0012               	return		;funcret
  6258  001B7C                     __end_of_SendLCD:
  6259                           	opt stack 0
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           indf1	equ	0xFE7
  6270                           fsr1h	equ	0xFE2
  6271                           fsr1l	equ	0xFE1
  6272                           indf2	equ	0xFDF
  6273                           postinc2	equ	0xFDE
  6274                           postdec2	equ	0xFDD
  6275                           plusw2	equ	0xFDB
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _LCDout *****************
  6281 ;; Defined at:
  6282 ;;		line 14 in file "LCD.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  number          1    wreg     unsigned char 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  number          1   38[COMRAM] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;		None               void
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6296 ;;      Params:         0       0       0       0
  6297 ;;      Locals:         1       0       0       0
  6298 ;;      Temps:          3       0       0       0
  6299 ;;      Totals:         4       0       0       0
  6300 ;;Total ram usage:        4 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    4
  6303 ;; This function calls:
  6304 ;;		_E_TOG
  6305 ;; This function is called by:
  6306 ;;		_SendLCD
  6307 ;;		_initLCD
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text28
  6312  001414                     __ptext28:
  6313                           	opt stack 0
  6314  001414                     _LCDout:
  6315                           	opt stack 24
  6316                           
  6317                           ;incstack = 0
  6318                           ;LCDout@number stored from wreg
  6319  001414  6E27               	movwf	LCDout@number,c
  6320                           
  6321                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6322  001416  5027               	movf	LCDout@number,w,c
  6323  001418  6E24               	movwf	??_LCDout& (0+255),c
  6324  00141A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6325  00141C  0E07               	movlw	7
  6326  00141E                     u2295:
  6327  00141E  90D8               	bcf	status,0,c
  6328  001420  3624               	rlcf	??_LCDout,f,c
  6329  001422  3625               	rlcf	??_LCDout+1,f,c
  6330  001424  2EE8               	decfsz	wreg,f,c
  6331  001426  D7FB               	goto	u2295
  6332  001428  0E07               	movlw	7
  6333  00142A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6334  00142C                     u2305:
  6335  00142C  3425               	rlcf	??_LCDout+1,w,c
  6336  00142E  3225               	rrcf	??_LCDout+1,f,c
  6337  001430  3224               	rrcf	??_LCDout,f,c
  6338  001432  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6339  001434  D7FB               	goto	u2305
  6340  001436  4624               	rlncf	??_LCDout,f,c
  6341  001438  508B               	movf	3979,w,c	;volatile
  6342  00143A  1824               	xorwf	??_LCDout,w,c
  6343  00143C  0BFD               	andlw	-3
  6344  00143E  1824               	xorwf	??_LCDout,w,c
  6345  001440  6E8B               	movwf	3979,c	;volatile
  6346                           
  6347                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6348  001442  5027               	movf	LCDout@number,w,c
  6349  001444  6E24               	movwf	??_LCDout& (0+255),c
  6350  001446  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6351  001448  0E06               	movlw	6
  6352  00144A                     u2315:
  6353  00144A  90D8               	bcf	status,0,c
  6354  00144C  3624               	rlcf	??_LCDout,f,c
  6355  00144E  3625               	rlcf	??_LCDout+1,f,c
  6356  001450  2EE8               	decfsz	wreg,f,c
  6357  001452  D7FB               	goto	u2315
  6358  001454  0E07               	movlw	7
  6359  001456  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6360  001458                     u2325:
  6361  001458  3425               	rlcf	??_LCDout+1,w,c
  6362  00145A  3225               	rrcf	??_LCDout+1,f,c
  6363  00145C  3224               	rrcf	??_LCDout,f,c
  6364  00145E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6365  001460  D7FB               	goto	u2325
  6366  001462  4624               	rlncf	??_LCDout,f,c
  6367  001464  4624               	rlncf	??_LCDout,f,c
  6368  001466  508B               	movf	3979,w,c	;volatile
  6369  001468  1824               	xorwf	??_LCDout,w,c
  6370  00146A  0BFB               	andlw	-5
  6371  00146C  1824               	xorwf	??_LCDout,w,c
  6372  00146E  6E8B               	movwf	3979,c	;volatile
  6373                           
  6374                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6375  001470  5027               	movf	LCDout@number,w,c
  6376  001472  6E24               	movwf	??_LCDout& (0+255),c
  6377  001474  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6378  001476  0E05               	movlw	5
  6379  001478                     u2335:
  6380  001478  90D8               	bcf	status,0,c
  6381  00147A  3624               	rlcf	??_LCDout,f,c
  6382  00147C  3625               	rlcf	??_LCDout+1,f,c
  6383  00147E  2EE8               	decfsz	wreg,f,c
  6384  001480  D7FB               	goto	u2335
  6385  001482  0E07               	movlw	7
  6386  001484  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6387  001486                     u2345:
  6388  001486  3425               	rlcf	??_LCDout+1,w,c
  6389  001488  3225               	rrcf	??_LCDout+1,f,c
  6390  00148A  3224               	rrcf	??_LCDout,f,c
  6391  00148C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6392  00148E  D7FB               	goto	u2345
  6393  001490  508C               	movf	3980,w,c	;volatile
  6394  001492  1824               	xorwf	??_LCDout,w,c
  6395  001494  0BFE               	andlw	-2
  6396  001496  1824               	xorwf	??_LCDout,w,c
  6397  001498  6E8C               	movwf	3980,c	;volatile
  6398                           
  6399                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6400  00149A  5027               	movf	LCDout@number,w,c
  6401  00149C  6E24               	movwf	??_LCDout& (0+255),c
  6402  00149E  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6403  0014A0  3A24               	swapf	??_LCDout,f,c
  6404  0014A2  3A25               	swapf	??_LCDout+1,f,c
  6405  0014A4  0EF0               	movlw	240
  6406  0014A6  1625               	andwf	??_LCDout+1,f,c
  6407  0014A8  5024               	movf	??_LCDout,w,c
  6408  0014AA  0B0F               	andlw	15
  6409  0014AC  1225               	iorwf	??_LCDout+1,f,c
  6410  0014AE  0EF0               	movlw	240
  6411  0014B0  1624               	andwf	??_LCDout,f,c
  6412  0014B2  0E07               	movlw	7
  6413  0014B4  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6414  0014B6                     u2355:
  6415  0014B6  3425               	rlcf	??_LCDout+1,w,c
  6416  0014B8  3225               	rrcf	??_LCDout+1,f,c
  6417  0014BA  3224               	rrcf	??_LCDout,f,c
  6418  0014BC  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6419  0014BE  D7FB               	goto	u2355
  6420  0014C0  4624               	rlncf	??_LCDout,f,c
  6421  0014C2  508C               	movf	3980,w,c	;volatile
  6422  0014C4  1824               	xorwf	??_LCDout,w,c
  6423  0014C6  0BFD               	andlw	-3
  6424  0014C8  1824               	xorwf	??_LCDout,w,c
  6425  0014CA  6E8C               	movwf	3980,c	;volatile
  6426                           
  6427                           ;LCD.c: 21: E_TOG();
  6428  0014CC  EC1B  F00E         	call	_E_TOG	;wreg free
  6429                           
  6430                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6431  0014D0  0E03               	movlw	3
  6432  0014D2                     u3457:
  6433  0014D2  2EE8               	decfsz	wreg,f,c
  6434  0014D4  D7FE               	goto	u3457
  6435  0014D6  F000               	nop	
  6436  0014D8  0012               	return		;funcret
  6437  0014DA                     __end_of_LCDout:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           plusw2	equ	0xFDB
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _E_TOG *****************
  6460 ;; Defined at:
  6461 ;;		line 5 in file "LCD.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6475 ;;      Params:         0       0       0       0
  6476 ;;      Locals:         0       0       0       0
  6477 ;;      Temps:          0       0       0       0
  6478 ;;      Totals:         0       0       0       0
  6479 ;;Total ram usage:        0 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    3
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_LCDout
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text29
  6490  001C36                     __ptext29:
  6491                           	opt stack 0
  6492  001C36                     _E_TOG:
  6493                           	opt stack 24
  6494                           
  6495                           ;LCD.c: 8: LATCbits.LATC0=1;
  6496                           
  6497                           ;incstack = 0
  6498  001C36  808B               	bsf	3979,0,c	;volatile
  6499                           
  6500                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6501  001C38  0E03               	movlw	3
  6502  001C3A                     u3467:
  6503  001C3A  2EE8               	decfsz	wreg,f,c
  6504  001C3C  D7FE               	goto	u3467
  6505  001C3E  F000               	nop	
  6506                           
  6507                           ;LCD.c: 10: LATCbits.LATC0=0;
  6508  001C40  908B               	bcf	3979,0,c	;volatile
  6509  001C42  0012               	return		;funcret
  6510  001C44                     __end_of_E_TOG:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           postinc0	equ	0xFEE
  6520                           wreg	equ	0xFE8
  6521                           indf1	equ	0xFE7
  6522                           fsr1h	equ	0xFE2
  6523                           fsr1l	equ	0xFE1
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           plusw2	equ	0xFDB
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function _InterruptHandlerLow *****************
  6533 ;; Defined at:
  6534 ;;		line 18 in file "main.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;		None               void
  6541 ;; Registers used:
  6542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6548 ;;      Params:         0       0       0       0
  6549 ;;      Locals:         0       0       0       0
  6550 ;;      Temps:         17       0       0       0
  6551 ;;      Totals:        17       0       0       0
  6552 ;;Total ram usage:       17 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    2
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		Interrupt level 1
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	intcodelo
  6563  000018                     __pintcodelo:
  6564                           	opt stack 0
  6565  000018                     _InterruptHandlerLow:
  6566                           	opt stack 23
  6567                           
  6568                           ;incstack = 0
  6569  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6570  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6571  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6572  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6573  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6574  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6575  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6576  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6577  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6578  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6579  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6580  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6581  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6582  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6583  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6584  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6585  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6586  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6587                           
  6588                           ;main.c: 20: if (PIR1bits.RCIF) {
  6589  00005E  AA9E               	btfss	3998,5,c	;volatile
  6590  000060  D016               	goto	i1l371
  6591                           
  6592                           ;main.c: 21: ReceivedString[i]=RCREG;
  6593  000062  503A               	movf	_i,w,c	;volatile
  6594  000064  0D01               	mullw	1
  6595  000066  0EDE               	movlw	low _ReceivedString
  6596  000068  24F3               	addwf	prodl,w,c
  6597  00006A  6ED9               	movwf	fsr2l,c
  6598  00006C  0E01               	movlw	high _ReceivedString
  6599  00006E  20F4               	addwfc	prodh,w,c
  6600  000070  6EDA               	movwf	fsr2h,c
  6601  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6602                           
  6603                           ;main.c: 22: RFID_Read=1;
  6604  000076  0E01               	movlw	1
  6605  000078  0100               	movlb	0	; () banked
  6606  00007A  6FFC               	movwf	_RFID_Read& (0+255),b	;volatile
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;main.c: 23: if (i==15){
  6610  00007C  0E0F               	movlw	15
  6611  00007E  183A               	xorwf	_i,w,c	;volatile
  6612  000080  A4D8               	btfss	status,2,c
  6613  000082  D003               	goto	i1l2644
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 24: i=0;
  6617  000084  0E00               	movlw	0
  6618  000086  6E3A               	movwf	_i,c	;volatile
  6619                           
  6620                           ;main.c: 25: }else{
  6621  000088  D001               	goto	i1l2646
  6622  00008A                     i1l2644:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;main.c: 26: i++;
  6626  00008A  2A3A               	incf	_i,f,c	;volatile
  6627  00008C                     i1l2646:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 27: }
  6631                           ;main.c: 28: PIR1bits.RCIF=0;
  6632  00008C  9A9E               	bcf	3998,5,c	;volatile
  6633  00008E                     i1l371:
  6634  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6635  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6636  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6637  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6638  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6639  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6640  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6641  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6642  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6643  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6644  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6645  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6646  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6647  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6648  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6649  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6650  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6651  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6652  0000D4  0010               	retfie	
  6653  0000D6                     __end_of_InterruptHandlerLow:
  6654                           	opt stack 0
  6655                           pclatu	equ	0xFFB
  6656                           pclath	equ	0xFFA
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           indf1	equ	0xFE7
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           bsr	equ	0xFE0
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           plusw2	equ	0xFDB
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _InterruptHandlerHigh *****************
  6681 ;; Defined at:
  6682 ;;		line 34 in file "main.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;		None               void
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6696 ;;      Params:         0       0       0       0
  6697 ;;      Locals:         0       0       0       0
  6698 ;;      Temps:         14       0       0       0
  6699 ;;      Totals:        14       0       0       0
  6700 ;;Total ram usage:       14 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    1
  6703 ;; This function calls:
  6704 ;;		i2_delay_tenth_s
  6705 ;; This function is called by:
  6706 ;;		Interrupt level 2
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	intcode
  6711  000008                     __pintcode:
  6712                           	opt stack 0
  6713  000008                     _InterruptHandlerHigh:
  6714                           	opt stack 23
  6715                           
  6716                           ;incstack = 0
  6717  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6718  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6719  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6720  000012  EF15  F00B         	goto	int_func
  6721                           pclatu	equ	0xFFB
  6722                           pclath	equ	0xFFA
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           intcon	equ	0xFF2
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           indf1	equ	0xFE7
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           bsr	equ	0xFE0
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           plusw2	equ	0xFDB
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746                           	psect	intcode_body
  6747  00162A                     __pintcode_body:
  6748                           	opt stack 23
  6749  00162A                     int_func:
  6750                           	opt stack 23
  6751  00162A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6752  00162E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6753  001632  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6754  001636  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6755  00163A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6756  00163E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6757  001642  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6758  001646  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6759  00164A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6760  00164E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6761  001652  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6762  001656  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6763                           
  6764                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6765  00165A  A2F2               	btfss	intcon,1,c	;volatile
  6766  00165C  D00D               	goto	i2l379
  6767                           
  6768                           ;main.c: 36: if (mode==-1) {
  6769  00165E  283B               	incf	_mode,w,c	;volatile
  6770  001660  A4D8               	btfss	status,2,c
  6771  001662  D003               	goto	i2l2654
  6772                           
  6773                           ;main.c: 38: mode=1;
  6774  001664  0E01               	movlw	1
  6775  001666  6E3B               	movwf	_mode,c	;volatile
  6776                           
  6777                           ;main.c: 39: } else if (mode==0) {
  6778  001668  D003               	goto	i2l2658
  6779  00166A                     i2l2654:
  6780  00166A  503B               	movf	_mode,w,c	;volatile
  6781  00166C  A4D8               	btfss	status,2,c
  6782                           
  6783                           ;main.c: 43: mode=-1;
  6784                           
  6785                           ;main.c: 41: } else {
  6786  00166E  683B               	setf	_mode,c	;volatile
  6787  001670                     i2l2658:
  6788                           
  6789                           ;main.c: 44: }
  6790                           ;main.c: 46: delay_tenth_s(2);
  6791  001670  0E02               	movlw	2
  6792  001672  EC40  F00D         	call	i2_delay_tenth_s
  6793                           
  6794                           ;main.c: 47: INTCONbits.INT0IF=0;
  6795  001676  92F2               	bcf	intcon,1,c	;volatile
  6796  001678                     i2l379:
  6797  001678  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6798  00167C  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6799  001680  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6800  001684  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6801  001688  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6802  00168C  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6803  001690  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6804  001694  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6805  001698  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6806  00169C  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6807  0016A0  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6808  0016A4  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6809  0016A8  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6810  0016AC  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6811  0016B0  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6812  0016B2  0011               	retfie		f
  6813  0016B4                     __end_of_InterruptHandlerHigh:
  6814                           	opt stack 0
  6815                           pclatu	equ	0xFFB
  6816                           pclath	equ	0xFFA
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           postinc0	equ	0xFEE
  6825                           fsr0h	equ	0xFEA
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           indf1	equ	0xFE7
  6829                           fsr1h	equ	0xFE2
  6830                           fsr1l	equ	0xFE1
  6831                           bsr	equ	0xFE0
  6832                           indf2	equ	0xFDF
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           plusw2	equ	0xFDB
  6836                           fsr2h	equ	0xFDA
  6837                           fsr2l	equ	0xFD9
  6838                           status	equ	0xFD8
  6839                           
  6840 ;; *************** function i2_delay_tenth_s *****************
  6841 ;; Defined at:
  6842 ;;		line 32 in file "Movement.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  tenth_second    1    wreg     unsigned char 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6847 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6848 ;; Return value:  Size  Location     Type
  6849 ;;		None               void
  6850 ;; Registers used:
  6851 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6857 ;;      Params:         0       0       0       0
  6858 ;;      Locals:         3       0       0       0
  6859 ;;      Temps:          1       0       0       0
  6860 ;;      Totals:         4       0       0       0
  6861 ;;Total ram usage:        4 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_InterruptHandlerHigh
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           	psect	text32
  6871  001A80                     __ptext32:
  6872                           	opt stack 0
  6873  001A80                     i2_delay_tenth_s:
  6874                           	opt stack 23
  6875                           
  6876                           ;incstack = 0
  6877                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6878  001A80  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6879                           
  6880                           ;Movement.c: 33: unsigned int i=0;
  6881  001A82  0E00               	movlw	0
  6882  001A84  6E04               	movwf	i2delay_tenth_s@i+1,c
  6883  001A86  0E00               	movlw	0
  6884  001A88  6E03               	movwf	i2delay_tenth_s@i,c
  6885                           
  6886                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6887  001A8A  0E00               	movlw	0
  6888  001A8C  6E04               	movwf	i2delay_tenth_s@i+1,c
  6889  001A8E  0E01               	movlw	1
  6890  001A90  6E03               	movwf	i2delay_tenth_s@i,c
  6891  001A92  D009               	goto	i2l2616
  6892  001A94                     i2l2612:
  6893                           
  6894                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6895  001A94  0E82               	movlw	130
  6896  001A96  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6897  001A98  0EDE               	movlw	222
  6898  001A9A                     i2u347_47:
  6899  001A9A  2EE8               	decfsz	wreg,f,c
  6900  001A9C  D7FE               	goto	i2u347_47
  6901  001A9E  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6902  001AA0  D7FC               	goto	i2u347_47
  6903  001AA2  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6904  001AA4  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6905  001AA6                     i2l2616:
  6906  001AA6  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6907  001AA8  0D02               	mullw	2
  6908  001AAA  5003               	movf	i2delay_tenth_s@i,w,c
  6909  001AAC  5CF3               	subwf	prodl,w,c
  6910  001AAE  5004               	movf	i2delay_tenth_s@i+1,w,c
  6911  001AB0  58F4               	subwfb	prodh,w,c
  6912  001AB2  A0D8               	btfss	status,0,c
  6913  001AB4  0012               	return	
  6914  001AB6  D7EE               	goto	i2l2612
  6915  001AB8                     __end_ofi2_delay_tenth_s:
  6916                           	opt stack 0
  6917                           pclatu	equ	0xFFB
  6918                           pclath	equ	0xFFA
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           intcon	equ	0xFF2
  6926                           postinc0	equ	0xFEE
  6927                           fsr0h	equ	0xFEA
  6928                           fsr0l	equ	0xFE9
  6929                           wreg	equ	0xFE8
  6930                           indf1	equ	0xFE7
  6931                           fsr1h	equ	0xFE2
  6932                           fsr1l	equ	0xFE1
  6933                           bsr	equ	0xFE0
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           plusw2	equ	0xFDB
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           pclatu	equ	0xFFB
  6942                           pclath	equ	0xFFA
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           intcon	equ	0xFF2
  6950                           postinc0	equ	0xFEE
  6951                           fsr0h	equ	0xFEA
  6952                           fsr0l	equ	0xFE9
  6953                           wreg	equ	0xFE8
  6954                           indf1	equ	0xFE7
  6955                           fsr1h	equ	0xFE2
  6956                           fsr1l	equ	0xFE1
  6957                           bsr	equ	0xFE0
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           plusw2	equ	0xFDB
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966                           	psect	rparam
  6967  0000                     pclatu	equ	0xFFB
  6968                           pclath	equ	0xFFA
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           postinc0	equ	0xFEE
  6977                           fsr0h	equ	0xFEA
  6978                           fsr0l	equ	0xFE9
  6979                           wreg	equ	0xFE8
  6980                           indf1	equ	0xFE7
  6981                           fsr1h	equ	0xFE2
  6982                           fsr1l	equ	0xFE1
  6983                           bsr	equ	0xFE0
  6984                           indf2	equ	0xFDF
  6985                           postinc2	equ	0xFDE
  6986                           postdec2	equ	0xFDD
  6987                           plusw2	equ	0xFDB
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992                           	psect	temp
  6993  00003C                     btemp:
  6994                           	opt stack 0
  6995  00003C                     	ds	1
  6996  0000                     int$flags	set	btemp
  6997                           pclatu	equ	0xFFB
  6998                           pclath	equ	0xFFA
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           postinc0	equ	0xFEE
  7007                           fsr0h	equ	0xFEA
  7008                           fsr0l	equ	0xFE9
  7009                           wreg	equ	0xFE8
  7010                           indf1	equ	0xFE7
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           bsr	equ	0xFE0
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           plusw2	equ	0xFDB
  7018                           fsr2h	equ	0xFDA
  7019                           fsr2l	equ	0xFD9
  7020                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      59
    BANK0           160    152     157
    BANK1           256    218     238
    BANK2           239    100     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK0[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK0[40]), main@Message(BANK0[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _initLCD->_SendLCD
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   71636
                                             92 BANK0     60    60      0
                                              0 BANK1    218   218      0
                                              0 BANK2    100   100      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1419
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                             11 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     278
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     569
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       75    61     14   23762
                                             17 BANK0     75    61     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4709
                                             11 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    4709
                                             11 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                              5 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      71
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   12606
                                             17 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              5 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     4     2      2
                                              0 BANK0      5     5      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3168
                                             47 COMRAM     4     4      0
                                              0 BANK0     17     9      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1357
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2130
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1295
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DA      EE       7       93.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF     64      64       9       41.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     98      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22A       5        0.0%
DATA                 0      0     22A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 23:15:34 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006F                                    l35 11B2  
                                  l65 1792                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 00E6                           ?_LCD_String 002A  
                                 l221 0B7A                                   l222 0BAA  
                                 l224 0CE0                                   l414 0976  
                                 l384 03F8                                   l881 1942  
                                 l891 1984                           grabLeftIR@i 002B  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 0100                          __CFG_LVP$OFF 000000  
                        main@MoveType 0200                                  l3010 197A  
                                l3002 195A                                  l3004 1962  
                                l3020 15B0                                  l3006 1966  
                                l3030 15E8                                  l3102 1A6E  
                                l3112 0DE2                                  l3024 15C8  
                                l3016 1598                                  l3050 17D0  
                                l3210 107E                                  l3202 1020  
                                l3114 0DF4                                  l3106 0DC4  
                                l3204 1026                                  l3124 0E2E  
                                l3212 108A                                  l3062 183A  
                                l3046 17C8                                  l3214 10A6  
                                l3134 0E90                                  l3118 0DFE  
                                l3080 1B30                                  l3072 187E  
                                l3056 180C                                  l3160 0F26  
                                l3136 0EBA                                  l3066 1842  
                                l3170 0F7A                                  l3146 0EEA  
                                l3314 1302                                  l3410 0CF8  
                                l3084 1B42                                  l3180 0FA8  
                                l3172 0F84                                  l3148 0EF0  
                                l3244 1B90                                  l3094 18D2  
                                l3190 0FDC                                  l3166 0F46  
                                l3088 189E                                  l3416 0D0A  
                                l3098 1A5C                                  l3346 0AA4  
                                l3418 0D10                                  l3610 05C6  
                                l3196 1002                                  l3188 0FD0  
                                l2900 16EE                                  l3460 1372  
                                l3700 0970                                  l3620 0654  
                                l3532 03FE                                  l2902 16F6  
                                l2920 172E                                  l2912 1716  
                                l2904 16FA                                  l3480 1410  
                                l3472 13CA                                  l3464 137A  
                                l3640 06EC                                  l3624 0662  
                                l3616 062A                                  l3704 0978  
                                l2930 117E                                  l3386 0BEE  
                                l3626 067A                                  l3570 04DE  
                                l2916 1720                                  l2940 173A  
                                l3388 0C06                                  l3652 073C  
                                l3636 06E2                                  l3660 075E  
                                l3398 0CDC                                  l3646 072C  
                                l3590 0530                                  l3566 04A4  
                                l2944 1756                                  l3648 0732  
                                l3658 0758                                  l2972 1C00  
                                l2948 1772                                  l3692 08BE  
                                l3668 07C6                                  l2982 1910  
                                l2894 16D8                                  l3678 082A  
                                l2984 1918                                  l2888 16C8  
                                l3688 086A                                  l2994 1938  
                                l2986 191C                                  l3698 0936  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u3100 06C0                                  u3102 06C2  
                                _LATB 000F8A                                  u2305 142C  
                                u2315 144A                                  u2325 1458  
                                u2405 1B56                                  u2406 1B58  
                                u2335 1478                                  u3207 0454  
                                u2264 1134                                  u2345 1486  
                                u2265 112E                                  u3217 046C  
                                u2610 18C2                                  u2274 11A2  
                                u3090 06AC                                  u2355 14B6  
                                u2275 119C                                  u3307 157C  
                                u3227 14EC                                  u2620 18F2  
                                u3092 06AE                                  u2285 1200  
                                u3317 158E                                  u3237 1502  
                                u3190 08FA                                  u2295 141E  
                                u3407 1872                                  u3327 0AD8  
                                u3247 1512                                  u2617 18B8  
                                u3417 1B44                                  u2545 17D8  
                                u3337 0AF0                                  u3257 1520  
                                u2627 18E8                                  u3427 18CC  
                                u3347 178C                                  u3267 152E  
                                u3437 1B64                                  u3357 1A62  
                                u3277 1540                                  u3447 1B74  
                                u2575 184A                                  u3367 1264  
                                u3287 1552                                  u3457 14D2  
                                u3377 127C                                  u3297 1568  
                                u3467 1C3A                                  u3387 15E2  
                                u3397 1800                                  u2855 1B8C  
                                u2856 1B8E                                  u2875 1B9E  
                                u2876 1BA0                                  _main 0350  
                                _mode 003B                         main@ScanAngle 00F0  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 1596  
                                pclat 000FFA                   fullSpeedAhead@power 0069  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                          ___param_bank 000010  
                     i2_delay_tenth_s 1A80                       __end_of_SendLCD 1B7C  
                     __end_of_SetLine 1B4C                    ScanWithRange@F3892 0036  
                         ScanIR@F3879 00F8                                 ?_main 0001  
                     __end_of___awdiv 1738                                 ?_stop 0065  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 194C  
                     __end_of___lwmod 198E                                 i1l371 008E  
                               i2l379 1678                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1C36  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1596  
                  ScanWithRange@loops 0075                    ScanWithRange@power 00B2  
                     __end_of_dpowers 030B                       __end_of_isdigit 1C08  
                               main@i 00F6                                 tablat 000FF5  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 10B4  
              __size_of_ScanWithRange 041C                        __CFG_MCLRE$OFF 000000  
                     __initialization 1AB8                          __end_of_main 099A  
                        __end_of_stop 162A                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009E                  __end_of_enableSensor 1BA2  
                 VerifySignal@hexByte 002C                                ??_main 00BC  
                              ??_stop 0036                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2644 008A  
                              i1l2646 008C                                i2l2612 1A94  
                      __CFG_WDTEN$OFF 000000                                i2l2616 1AA6  
                              i2l2654 166A                                i2l2658 1670  
               __end_of_delay_tenth_s 1A80                                _LCDout 1414  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 1AB8  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 1216                             ??_SetLine 002A  
                              ___wmul 1BA2                             ??___awdiv 002E  
                    __end_of_initRFID 1C24                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 1BC8  
                __size_of_grabRightIR 0072                                clear_0 1ABE  
                    ___awdiv@quotient 0030                                main@mL 01C8  
                              main@mR 01D1                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 099A  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0065                                stop@mR 0067  
                           ??_sprintf 0030       ScanWithRange@TimeAboveThreshold 00B5  
                    __end_of_turnLeft 1A48                       fullSpeedBack@mL 006B  
                     fullSpeedBack@mR 006D                            __accesstop 0060  
             __end_of__initialization 1ADC                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1C44  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 198E  
                        ??_LCD_String 002C                        ?_ScanWithRange 0071  
                VerifySignal@checksum 002E                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 16AC           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006E  
                          __pbssBANK0 00F8                            __pbssBANK1 01DA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 18FA  
                             ?_ScanIR 0071                        ?_fullSpeedBack 006B  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 182A  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0162  
                     __size_of_LCDout 00C6                          _enableSensor 1B7C  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1B1C  
              ScanWithRange@RFID_Read 007D                               _SendLCD 1B4C  
                             __Hparam 0000                               _SetLine 1B1C  
                             __Lparam 0000                       __size_of_ScanIR 0104  
                             ___awdiv 16B4                       __size_of___wmul 0026  
                             ___lwdiv 18FA                               ___lwmod 194C  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1AB8                       ??_ScanWithRange 007F  
                             __ramtop 0300                             ?_turnLeft 006B  
                             __ptext0 0350                               __ptext1 1C24  
                             __ptext2 1C08                               __ptext3 1AEA  
                             __ptext4 14DA                               __ptext5 1BC8  
                             __ptext6 198E                               __ptext7 1B7C  
                             __ptext8 131A                               __ptext9 099A  
                           _T0CONbits 000FD5                               _initLCD 14DA  
                   __end_of_initTimer 1C36                               _dpowers 0301  
                             _isdigit 1BEA                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 00BE  
                             _sprintf 0DB6                        __pintcode_body 162A  
                end_of_initialization 1ADC                        ScanWithRange@i 00AE  
                      ScanWithRange@n 00AC                    setMotorPWM@PWMduty 0034  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 162A                    ScanIR@SensorResult 00A0  
                     ??_fullSpeedBack 0036                             _RFID_Read 00FC  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 0036                     __end_of_turnRight 1A0A  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                      fullSpeedAhead@mL 0065  
                    fullSpeedAhead@mR 0067                ScanWithRange@RightFlag 00BA  
                      __end_of_LCDout 14DA                             _TXSTAbits 000FAC  
                           ScanIR@buf 0076                         ??_grabRightIR 0026  
                      __end_of_ScanIR 131A                        _fullSpeedAhead 1738  
                      _ReceivedString 01DE                        __end_of___wmul 1BC8  
                   ScanWithRange@Move 0079                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1BEA                __size_of_delay_tenth_s 0038  
                 start_initialization 1AB8                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 16B4                              ??_ScanIR 0075  
              __end_of_fullSpeedAhead 17B8                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 182A                          _initMotorPWM 1AEA  
                         __pbssCOMRAM 0036                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1963 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1A48                           sprintf@flag 006D  
                         sprintf@prec 006A                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0065  
                           __pintcode 0008                  __end_of_VerifySignal 1414  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 00F1                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0060  
                           _initTimer 1C24                      ___lwdiv@quotient 0029  
                            ?_sprintf 0060                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 006B  
                         turnRight@mR 006D                              _PIR1bits 000F9E  
                            i2u347_47 1A9A                              _RCONbits 000FD0  
                           main@F3896 01DA                           _grabRightIR 17B8  
               ScanWithRange@LeftFlag 00B3                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0DB6  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0077  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 007B  
                            ScanIR@mL 0071                              ScanIR@mR 0073  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 19CC                      ScanWithRange@buf 0084  
                 __end_of_setMotorPWM 1216                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 19CC                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 189C                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 006B  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 0028  
                          ?_turnRight 006B                              __ptext10 19CC  
                            __ptext11 1A0A                              __ptext20 1BA2  
                            __ptext12 1738                              __ptext21 194C  
                            __ptext13 1A48                              __ptext22 18FA  
                            __ptext14 1216                              __ptext23 17B8  
                            __ptext15 1596                              __ptext32 1A80  
                            __ptext24 182A                              __ptext16 10B4  
                            __ptext25 1B1C                              __ptext17 16B4  
                            __ptext26 189C                              __ptext18 0DB6  
                            __ptext27 1B4C                              __ptext19 1BEA  
                            __ptext28 1414                              __ptext29 1C36  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 02FE  
                            _initRFID 1C08             ScanWithRange@SensorResult 00B6  
                      turnRight@power 006F                         __size_of_main 064A  
                  main@DirectionFound 00F5                         turnLeft@power 006F  
                       __size_of_stop 0094                            turnLeft@mL 006B  
                          turnLeft@mR 006D                 __size_of_VerifySignal 00FA  
                            int$flags 003C                              main@Move 00F7  
                 _InterruptHandlerLow 0018                            _LCD_String 189C  
                            _turnLeft 1A0A                       ScanWithRange@mL 0071  
                     ScanWithRange@mR 0073                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 10B4  
                        _VerifySignal 131A                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0068  
                           sprintf@sp 0060                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 006A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00B0                ??_InterruptHandlerHigh 0005  
                            sprintf@c 0070                              sprintf@f 0062  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 0036                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
